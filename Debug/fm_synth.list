
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080025c8  080025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028fc  080028fc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080028fc  080028fc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028fc  080028fc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000018  0800291c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  0800291c  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001471d  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce0  00000000  00000000  0003475e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001154c  00000000  00000000  0003743e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  00048990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022e0  00000000  00000000  000494f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001779d  00000000  00000000  0004b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176f1  00000000  00000000  00062f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088224  00000000  00000000  0007a65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00102882  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028bc  00000000  00000000  001028d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080025b0 	.word	0x080025b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080025b0 	.word	0x080025b0

0800014c <init_audio_out>:
 */

#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	HAL_TIM_Base_Start_IT(htim);
 800014c:	4608      	mov	r0, r1
 800014e:	f001 bedd 	b.w	8001f0c <HAL_TIM_Base_Start_IT>
 8000152:	bf00      	nop

08000154 <update_volume>:
}

void update_volume(SPI_HandleTypeDef* hspi) {
 8000154:	b510      	push	{r4, lr}
 8000156:	b082      	sub	sp, #8
 8000158:	4604      	mov	r4, r0
	uint16_t output_volume = synth_sample();
 800015a:	f000 fecb 	bl	8000ef4 <synth_sample>
 800015e:	b283      	uxth	r3, r0
	if (output_volume > 0x0FFF) {				//max possible volume with 12-bit dac
 8000160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000164:	bf2c      	ite	cs
 8000166:	f643 73ff 	movwcs	r3, #16383	; 0x3fff
 800016a:	f443 5340 	orrcc.w	r3, r3, #12288	; 0x3000
		output_volume = 0x0FFF;
	}
	output_volume |= 0b0011000000000000;		//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2110      	movs	r1, #16
 8000172:	4809      	ldr	r0, [pc, #36]	; (8000198 <update_volume+0x44>)
	output_volume |= 0b0011000000000000;		//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 8000174:	f8ad 3006 	strh.w	r3, [sp, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000178:	f001 f9ac 	bl	80014d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, (uint8_t*)&output_volume, 1, 0xFF);
 800017c:	23ff      	movs	r3, #255	; 0xff
 800017e:	f10d 0106 	add.w	r1, sp, #6
 8000182:	4620      	mov	r0, r4
 8000184:	2201      	movs	r2, #1
 8000186:	f001 fd5b 	bl	8001c40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800018a:	2201      	movs	r2, #1
 800018c:	2110      	movs	r1, #16
 800018e:	4802      	ldr	r0, [pc, #8]	; (8000198 <update_volume+0x44>)
 8000190:	f001 f9a0 	bl	80014d4 <HAL_GPIO_WritePin>
}
 8000194:	b002      	add	sp, #8
 8000196:	bd10      	pop	{r4, pc}
 8000198:	40010800 	.word	0x40010800

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a0:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2601      	movs	r6, #1
 80001a6:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001a8:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001ac:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001b8:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001bc:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c0:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c2:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001c4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c8:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ca:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001cc:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f001 f98f 	bl	80014f0 <HAL_RCC_OscConfig>
 80001d2:	b108      	cbz	r0, 80001d8 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001d4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001d6:	e7fe      	b.n	80001d6 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001da:	f04f 080f 	mov.w	r8, #15
 80001de:	f04f 0902 	mov.w	r9, #2
 80001e2:	2600      	movs	r6, #0
 80001e4:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e8:	4621      	mov	r1, r4
 80001ea:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	e9cd 8900 	strd	r8, r9, [sp]
 80001f0:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	f001 fb7b 	bl	80018f0 <HAL_RCC_ClockConfig>
 80001fa:	b108      	cbz	r0, 8000200 <SystemClock_Config+0x64>
 80001fc:	b672      	cpsid	i
  while (1)
 80001fe:	e7fe      	b.n	80001fe <SystemClock_Config+0x62>
}
 8000200:	b010      	add	sp, #64	; 0x40
 8000202:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8000206:	bf00      	nop

08000208 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000208:	2400      	movs	r4, #0
{
 800020a:	b580      	push	{r7, lr}
 800020c:	b088      	sub	sp, #32
  HAL_Init();
 800020e:	f000 ff55 	bl	80010bc <HAL_Init>
  SystemClock_Config();
 8000212:	f7ff ffc3 	bl	800019c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800021a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	4b45      	ldr	r3, [pc, #276]	; (8000334 <main+0x12c>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000222:	6999      	ldr	r1, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000224:	4844      	ldr	r0, [pc, #272]	; (8000338 <main+0x130>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	f041 0104 	orr.w	r1, r1, #4
 800022a:	6199      	str	r1, [r3, #24]
 800022c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800022e:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000230:	f003 0304 	and.w	r3, r3, #4
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000238:	f001 f94c 	bl	80014d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800023c:	4622      	mov	r2, r4
 800023e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000242:	483d      	ldr	r0, [pc, #244]	; (8000338 <main+0x130>)
 8000244:	f001 f946 	bl	80014d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000248:	f44f 7688 	mov.w	r6, #272	; 0x110
 800024c:	2200      	movs	r2, #0
 800024e:	2302      	movs	r3, #2
 8000250:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000252:	4839      	ldr	r0, [pc, #228]	; (8000338 <main+0x130>)
 8000254:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000256:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800025a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025e:	f001 f82d 	bl	80012bc <HAL_GPIO_Init>
  huart1.Init.BaudRate = 31250;
 8000262:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 8000266:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 8000268:	4834      	ldr	r0, [pc, #208]	; (800033c <main+0x134>)
 800026a:	4935      	ldr	r1, [pc, #212]	; (8000340 <main+0x138>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 800026c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000270:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart1.Init.BaudRate = 31250;
 8000274:	e9c0 1200 	strd	r1, r2, [r0]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000278:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800027a:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800027c:	f001 ff48 	bl	8002110 <HAL_UART_Init>
 8000280:	b108      	cbz	r0, 8000286 <main+0x7e>
 8000282:	b672      	cpsid	i
  while (1)
 8000284:	e7fe      	b.n	8000284 <main+0x7c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000286:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 8000288:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1333-1;
 800028c:	f240 5234 	movw	r2, #1332	; 0x534
  htim2.Instance = TIM2;
 8000290:	4c2c      	ldr	r4, [pc, #176]	; (8000344 <main+0x13c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000292:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8000296:	e9cd 0006 	strd	r0, r0, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800029a:	9002      	str	r0, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800029c:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800029e:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim2.Instance = TIM2;
 80002a2:	6021      	str	r1, [r4, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002a4:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002a6:	61a3      	str	r3, [r4, #24]
  htim2.Init.Period = 1333-1;
 80002a8:	60e2      	str	r2, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002aa:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ac:	f001 fdca 	bl	8001e44 <HAL_TIM_Base_Init>
 80002b0:	b108      	cbz	r0, 80002b6 <main+0xae>
 80002b2:	b672      	cpsid	i
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <main+0xac>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ba:	4620      	mov	r0, r4
 80002bc:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002be:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002c0:	f001 fe50 	bl	8001f64 <HAL_TIM_ConfigClockSource>
 80002c4:	b108      	cbz	r0, 80002ca <main+0xc2>
 80002c6:	b672      	cpsid	i
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <main+0xc0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ca:	2300      	movs	r3, #0
 80002cc:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002ce:	4620      	mov	r0, r4
 80002d0:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002d6:	f001 fee9 	bl	80020ac <HAL_TIMEx_MasterConfigSynchronization>
 80002da:	4603      	mov	r3, r0
 80002dc:	b9d0      	cbnz	r0, 8000314 <main+0x10c>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002de:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80002e2:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002e6:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002ea:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 80002ec:	220a      	movs	r2, #10
  hspi1.Instance = SPI1;
 80002ee:	4816      	ldr	r0, [pc, #88]	; (8000348 <main+0x140>)
 80002f0:	4e16      	ldr	r6, [pc, #88]	; (800034c <main+0x144>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002f2:	e9c0 7301 	strd	r7, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002fe:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000302:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Instance = SPI1;
 8000304:	6006      	str	r6, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000306:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CRCPolynomial = 10;
 8000308:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800030a:	f001 fc3f 	bl	8001b8c <HAL_SPI_Init>
 800030e:	b118      	cbz	r0, 8000318 <main+0x110>
 8000310:	b672      	cpsid	i
  while (1)
 8000312:	e7fe      	b.n	8000312 <main+0x10a>
 8000314:	b672      	cpsid	i
 8000316:	e7fe      	b.n	8000316 <main+0x10e>
  init_midi(midi_uart);
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <main+0x148>)
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f000 f83c 	bl	8000398 <init_midi>
  init_synth();
 8000320:	f000 f97c 	bl	800061c <init_synth>
  init_audio_out(audio_spi, audio_tim);
 8000324:	4a0b      	ldr	r2, [pc, #44]	; (8000354 <main+0x14c>)
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <main+0x150>)
 8000328:	6811      	ldr	r1, [r2, #0]
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	f7ff ff0e 	bl	800014c <init_audio_out>
	__NOP();
 8000330:	bf00      	nop
  while (1)
 8000332:	e7fd      	b.n	8000330 <main+0x128>
 8000334:	40021000 	.word	0x40021000
 8000338:	40010800 	.word	0x40010800
 800033c:	20000240 	.word	0x20000240
 8000340:	40013800 	.word	0x40013800
 8000344:	200002e0 	.word	0x200002e0
 8000348:	20000288 	.word	0x20000288
 800034c:	40013000 	.word	0x40013000
 8000350:	20000008 	.word	0x20000008
 8000354:	20000004 	.word	0x20000004
 8000358:	20000000 	.word	0x20000000

0800035c <HAL_UART_RxCpltCallback>:
	if (huart == midi_uart) {
 800035c:	4b03      	ldr	r3, [pc, #12]	; (800036c <HAL_UART_RxCpltCallback+0x10>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4283      	cmp	r3, r0
 8000362:	d000      	beq.n	8000366 <HAL_UART_RxCpltCallback+0xa>
}
 8000364:	4770      	bx	lr
		process_midi_byte(huart);
 8000366:	f000 b825 	b.w	80003b4 <process_midi_byte>
 800036a:	bf00      	nop
 800036c:	20000008 	.word	0x20000008

08000370 <sample>:
void sample() {
 8000370:	b508      	push	{r3, lr}
	TIM2->SR = 0;
 8000372:	2200      	movs	r2, #0
 8000374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <sample+0x20>)
	TIM2->SR = 0;
 800037a:	611a      	str	r2, [r3, #16]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800037c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000380:	f001 f8ac 	bl	80014dc <HAL_GPIO_TogglePin>
	update_volume(audio_spi);
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <sample+0x24>)
 8000386:	6818      	ldr	r0, [r3, #0]
}
 8000388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_volume(audio_spi);
 800038c:	f7ff bee2 	b.w	8000154 <update_volume>
 8000390:	40010800 	.word	0x40010800
 8000394:	20000000 	.word	0x20000000

08000398 <init_midi>:
 *      Author: Tennyson Cheng
 */

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
 8000398:	b410      	push	{r4}
	data[0] = -1;
 800039a:	24ff      	movs	r4, #255	; 0xff
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <init_midi+0x14>)
	data[1] = -1;
	HAL_UART_Receive_IT(huart, &midi_in, 1);
 800039e:	2201      	movs	r2, #1
	data[0] = -1;
 80003a0:	701c      	strb	r4, [r3, #0]
	data[1] = -1;
 80003a2:	705c      	strb	r4, [r3, #1]
	HAL_UART_Receive_IT(huart, &midi_in, 1);
 80003a4:	4902      	ldr	r1, [pc, #8]	; (80003b0 <init_midi+0x18>)
}
 80003a6:	bc10      	pop	{r4}
	HAL_UART_Receive_IT(huart, &midi_in, 1);
 80003a8:	f001 bf1c 	b.w	80021e4 <HAL_UART_Receive_IT>
 80003ac:	20000284 	.word	0x20000284
 80003b0:	20000328 	.word	0x20000328

080003b4 <process_midi_byte>:

void process_midi_byte(UART_HandleTypeDef* huart) {
 80003b4:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(huart, &midi_in, 1);	//re-enable interrupt for next byte
 80003b6:	4c24      	ldr	r4, [pc, #144]	; (8000448 <process_midi_byte+0x94>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	4621      	mov	r1, r4
 80003bc:	f001 ff12 	bl	80021e4 <HAL_UART_Receive_IT>
	if ((midi_in & 0x80) == 0x80) {				//if byte received was status byte
 80003c0:	f994 3000 	ldrsb.w	r3, [r4]
 80003c4:	7822      	ldrb	r2, [r4, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	db26      	blt.n	8000418 <process_midi_byte+0x64>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {										//if byte received was data byte
		switch (status) {
 80003ca:	4b20      	ldr	r3, [pc, #128]	; (800044c <process_midi_byte+0x98>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2bc0      	cmp	r3, #192	; 0xc0
 80003d0:	d01f      	beq.n	8000412 <process_midi_byte+0x5e>
 80003d2:	d818      	bhi.n	8000406 <process_midi_byte+0x52>
 80003d4:	2ba0      	cmp	r3, #160	; 0xa0
 80003d6:	d002      	beq.n	80003de <process_midi_byte+0x2a>
 80003d8:	d907      	bls.n	80003ea <process_midi_byte+0x36>
 80003da:	2bb0      	cmp	r3, #176	; 0xb0
 80003dc:	d129      	bne.n	8000432 <process_midi_byte+0x7e>
		case 0xD0:									//channel pressure (unimplemented)
			data[0] = midi_in;
			channel_pressure();
			break;
		case 0xE0:									//pitch bend
			if (data[0] == (uint8_t)-1) {
 80003de:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <process_midi_byte+0x9c>)
 80003e0:	7819      	ldrb	r1, [r3, #0]
 80003e2:	29ff      	cmp	r1, #255	; 0xff
 80003e4:	d023      	beq.n	800042e <process_midi_byte+0x7a>
				data[0] = midi_in;
			}
			else {
				data[1] = midi_in;
 80003e6:	705a      	strb	r2, [r3, #1]
			break;
		default:
			__NOP();
		}
	}
}
 80003e8:	bd10      	pop	{r4, pc}
		switch (status) {
 80003ea:	2b80      	cmp	r3, #128	; 0x80
 80003ec:	d01b      	beq.n	8000426 <process_midi_byte+0x72>
 80003ee:	2b90      	cmp	r3, #144	; 0x90
 80003f0:	d11f      	bne.n	8000432 <process_midi_byte+0x7e>
			if (data[0] == (uint8_t)-1) {
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <process_midi_byte+0x9c>)
 80003f4:	7818      	ldrb	r0, [r3, #0]
 80003f6:	28ff      	cmp	r0, #255	; 0xff
 80003f8:	d019      	beq.n	800042e <process_midi_byte+0x7a>
				data[1] = midi_in;
 80003fa:	705a      	strb	r2, [r3, #1]
				if (data[1] == 0) {					//some midi devices send velocity 0 to turn off notes
 80003fc:	bb02      	cbnz	r2, 8000440 <process_midi_byte+0x8c>
}
 80003fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void note_off() {
	delete_voice(data[0]);
 8000402:	f000 bb4f 	b.w	8000aa4 <delete_voice>
		switch (status) {
 8000406:	2be0      	cmp	r3, #224	; 0xe0
 8000408:	d0e9      	beq.n	80003de <process_midi_byte+0x2a>
 800040a:	2bf0      	cmp	r3, #240	; 0xf0
 800040c:	d0ec      	beq.n	80003e8 <process_midi_byte+0x34>
 800040e:	2bd0      	cmp	r3, #208	; 0xd0
 8000410:	d10f      	bne.n	8000432 <process_midi_byte+0x7e>
			data[0] = midi_in;
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <process_midi_byte+0x9c>)
 8000414:	701a      	strb	r2, [r3, #0]
}
 8000416:	bd10      	pop	{r4, pc}
		data[0] = -1;
 8000418:	21ff      	movs	r1, #255	; 0xff
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <process_midi_byte+0x9c>)
		status = midi_in;
 800041c:	480b      	ldr	r0, [pc, #44]	; (800044c <process_midi_byte+0x98>)
		data[0] = -1;
 800041e:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 8000420:	7059      	strb	r1, [r3, #1]
		status = midi_in;
 8000422:	7002      	strb	r2, [r0, #0]
}
 8000424:	bd10      	pop	{r4, pc}
			if (data[0] == (uint8_t)-1) {
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <process_midi_byte+0x9c>)
 8000428:	7818      	ldrb	r0, [r3, #0]
 800042a:	28ff      	cmp	r0, #255	; 0xff
 800042c:	d103      	bne.n	8000436 <process_midi_byte+0x82>
				data[0] = midi_in;
 800042e:	701a      	strb	r2, [r3, #0]
}
 8000430:	bd10      	pop	{r4, pc}
			__NOP();
 8000432:	bf00      	nop
}
 8000434:	bd10      	pop	{r4, pc}
				data[1] = midi_in;
 8000436:	705a      	strb	r2, [r3, #1]
}
 8000438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delete_voice(data[0]);
 800043c:	f000 bb32 	b.w	8000aa4 <delete_voice>
}
 8000440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void note_on() {
	add_voice(data[0]);
 8000444:	f000 baa0 	b.w	8000988 <add_voice>
 8000448:	20000328 	.word	0x20000328
 800044c:	20000329 	.word	0x20000329
 8000450:	20000284 	.word	0x20000284

08000454 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 8000454:	4b01      	ldr	r3, [pc, #4]	; (800045c <note_to_freq+0x8>)
}
 8000456:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800045a:	4770      	bx	lr
 800045c:	080025d0 	.word	0x080025d0

08000460 <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 8000462:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000464:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 8000468:	f3c0 208f 	ubfx	r0, r0, #10, #16
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	057619f1 	.word	0x057619f1

08000474 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000474:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <HAL_MspInit+0x3c>)
{
 8000476:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000478:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047a:	490e      	ldr	r1, [pc, #56]	; (80004b4 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800047c:	f042 0201 	orr.w	r2, r2, #1
 8000480:	619a      	str	r2, [r3, #24]
 8000482:	699a      	ldr	r2, [r3, #24]
 8000484:	f002 0201 	and.w	r2, r2, #1
 8000488:	9200      	str	r2, [sp, #0]
 800048a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048c:	69da      	ldr	r2, [r3, #28]
 800048e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000492:	61da      	str	r2, [r3, #28]
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049e:	684b      	ldr	r3, [r1, #4]
 80004a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	b002      	add	sp, #8
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	2300      	movs	r3, #0
{
 80004ba:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 80004bc:	6801      	ldr	r1, [r0, #0]
 80004be:	4a16      	ldr	r2, [pc, #88]	; (8000518 <HAL_SPI_MspInit+0x60>)
{
 80004c0:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 80004c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80004c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI1)
 80004cc:	d001      	beq.n	80004d2 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004ce:	b006      	add	sp, #24
 80004d0:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004d2:	24a0      	movs	r4, #160	; 0xa0
 80004d4:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d6:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004dc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80004e0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	480e      	ldr	r0, [pc, #56]	; (800051c <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80004e8:	619a      	str	r2, [r3, #24]
 80004ea:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	699a      	ldr	r2, [r3, #24]
 80004f8:	f042 0204 	orr.w	r2, r2, #4
 80004fc:	619a      	str	r2, [r3, #24]
 80004fe:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000500:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	f003 0304 	and.w	r3, r3, #4
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f000 fed5 	bl	80012bc <HAL_GPIO_Init>
}
 8000512:	b006      	add	sp, #24
 8000514:	bd70      	pop	{r4, r5, r6, pc}
 8000516:	bf00      	nop
 8000518:	40013000 	.word	0x40013000
 800051c:	40010800 	.word	0x40010800

08000520 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000520:	6803      	ldr	r3, [r0, #0]
 8000522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000526:	d000      	beq.n	800052a <HAL_TIM_Base_MspInit+0xa>
 8000528:	4770      	bx	lr

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800052a:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 800052c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000530:	69d8      	ldr	r0, [r3, #28]
{
 8000532:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000534:	4308      	orrs	r0, r1
 8000536:	61d8      	str	r0, [r3, #28]
 8000538:	69db      	ldr	r3, [r3, #28]
{
 800053a:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 800053c:	400b      	ands	r3, r1
 800053e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000544:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000546:	f000 fdef 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800054a:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800054c:	b003      	add	sp, #12
 800054e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000552:	f000 be21 	b.w	8001198 <HAL_NVIC_EnableIRQ>
 8000556:	bf00      	nop

08000558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000558:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 800055c:	6802      	ldr	r2, [r0, #0]
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <HAL_UART_MspInit+0x88>)
{
 8000560:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 8000562:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000568:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 800056c:	d001      	beq.n	8000572 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800056e:	b007      	add	sp, #28
 8000570:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000572:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000576:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 800057a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800057e:	699a      	ldr	r2, [r3, #24]
 8000580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000584:	619a      	str	r2, [r3, #24]
 8000586:	699a      	ldr	r2, [r3, #24]
 8000588:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	699a      	ldr	r2, [r3, #24]
 8000592:	f042 0204 	orr.w	r2, r2, #4
 8000596:	619a      	str	r2, [r3, #24]
 8000598:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800059a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	a902      	add	r1, sp, #8
 80005aa:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f000 fe83 	bl	80012bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	a902      	add	r1, sp, #8
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f000 fe79 	bl	80012bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005ca:	4622      	mov	r2, r4
 80005cc:	4621      	mov	r1, r4
 80005ce:	2025      	movs	r0, #37	; 0x25
 80005d0:	f000 fdaa 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005d4:	2025      	movs	r0, #37	; 0x25
 80005d6:	f000 fddf 	bl	8001198 <HAL_NVIC_EnableIRQ>
}
 80005da:	b007      	add	sp, #28
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	40013800 	.word	0x40013800
 80005e4:	40010800 	.word	0x40010800

080005e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler>
 80005ea:	bf00      	nop

080005ec <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <HardFault_Handler>
 80005ee:	bf00      	nop

080005f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <MemManage_Handler>
 80005f2:	bf00      	nop

080005f4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <BusFault_Handler>
 80005f6:	bf00      	nop

080005f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <UsageFault_Handler>
 80005fa:	bf00      	nop

080005fc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <DebugMon_Handler>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <PendSV_Handler>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000608:	f000 bd6a 	b.w	80010e0 <HAL_IncTick>

0800060c <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 800060c:	f7ff beb0 	b.w	8000370 <sample>

08000610 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000610:	4801      	ldr	r0, [pc, #4]	; (8000618 <USART1_IRQHandler+0x8>)
 8000612:	f001 be7b 	b.w	800230c <HAL_UART_IRQHandler>
 8000616:	bf00      	nop
 8000618:	20000240 	.word	0x20000240

0800061c <init_synth>:
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
		algo = 0x00;								//default algorithm 0
		op_amp[i] = 0xFF;							//default amplitude 255
		op_ratio[i] = 0x01;							//default multiplier 1
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 800061c:	4ad5      	ldr	r2, [pc, #852]	; (8000974 <init_synth+0x358>)
void init_synth() {
 800061e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 8000622:	4613      	mov	r3, r2
 8000624:	4693      	mov	fp, r2
 8000626:	cb03      	ldmia	r3!, {r0, r1}
 8000628:	4692      	mov	sl, r2
 800062a:	4691      	mov	r9, r2
 800062c:	4690      	mov	r8, r2
 800062e:	4696      	mov	lr, r2
 8000630:	4694      	mov	ip, r2
 8000632:	4bd1      	ldr	r3, [pc, #836]	; (8000978 <init_synth+0x35c>)
void init_synth() {
 8000634:	b0a3      	sub	sp, #140	; 0x8c
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 8000636:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800063a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800063e:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8000642:	e9cd 2207 	strd	r2, r2, [sp, #28]
 8000646:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 800064a:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 800064e:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
 8000652:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
 8000656:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
 800065a:	9213      	str	r2, [sp, #76]	; 0x4c
 800065c:	6018      	str	r0, [r3, #0]
 800065e:	6059      	str	r1, [r3, #4]
 8000660:	9214      	str	r2, [sp, #80]	; 0x50
 8000662:	e8bb 0003 	ldmia.w	fp!, {r0, r1}
 8000666:	9215      	str	r2, [sp, #84]	; 0x54
 8000668:	6098      	str	r0, [r3, #8]
 800066a:	60d9      	str	r1, [r3, #12]
 800066c:	e8ba 0003 	ldmia.w	sl!, {r0, r1}
 8000670:	6118      	str	r0, [r3, #16]
 8000672:	6159      	str	r1, [r3, #20]
 8000674:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8000678:	6198      	str	r0, [r3, #24]
 800067a:	61d9      	str	r1, [r3, #28]
 800067c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8000680:	6218      	str	r0, [r3, #32]
 8000682:	6259      	str	r1, [r3, #36]	; 0x24
 8000684:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8000688:	6298      	str	r0, [r3, #40]	; 0x28
 800068a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800068c:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000690:	6318      	str	r0, [r3, #48]	; 0x30
		algo = 0x00;								//default algorithm 0
 8000692:	f04f 0000 	mov.w	r0, #0
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 8000696:	6359      	str	r1, [r3, #52]	; 0x34
		algo = 0x00;								//default algorithm 0
 8000698:	49b8      	ldr	r1, [pc, #736]	; (800097c <init_synth+0x360>)
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 800069a:	4617      	mov	r7, r2
		algo = 0x00;								//default algorithm 0
 800069c:	7008      	strb	r0, [r1, #0]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 800069e:	f04f 30ff 	mov.w	r0, #4294967295
 80006a2:	49b7      	ldr	r1, [pc, #732]	; (8000980 <init_synth+0x364>)
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 80006a4:	4616      	mov	r6, r2
 80006a6:	6008      	str	r0, [r1, #0]
 80006a8:	4615      	mov	r5, r2
 80006aa:	4614      	mov	r4, r2
 80006ac:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
 80006b0:	49b4      	ldr	r1, [pc, #720]	; (8000984 <init_synth+0x368>)
 80006b2:	9216      	str	r2, [sp, #88]	; 0x58
 80006b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80006b6:	9218      	str	r2, [sp, #96]	; 0x60
 80006b8:	9219      	str	r2, [sp, #100]	; 0x64
 80006ba:	921a      	str	r2, [sp, #104]	; 0x68
 80006bc:	921b      	str	r2, [sp, #108]	; 0x6c
 80006be:	921c      	str	r2, [sp, #112]	; 0x70
 80006c0:	921d      	str	r2, [sp, #116]	; 0x74
 80006c2:	6008      	str	r0, [r1, #0]
 80006c4:	cf03      	ldmia	r7!, {r0, r1}
 80006c6:	6398      	str	r0, [r3, #56]	; 0x38
 80006c8:	63d9      	str	r1, [r3, #60]	; 0x3c
 80006ca:	921e      	str	r2, [sp, #120]	; 0x78
 80006cc:	ce03      	ldmia	r6!, {r0, r1}
 80006ce:	6418      	str	r0, [r3, #64]	; 0x40
 80006d0:	6459      	str	r1, [r3, #68]	; 0x44
 80006d2:	cd03      	ldmia	r5!, {r0, r1}
 80006d4:	6498      	str	r0, [r3, #72]	; 0x48
 80006d6:	64d9      	str	r1, [r3, #76]	; 0x4c
 80006d8:	cc03      	ldmia	r4!, {r0, r1}
 80006da:	4614      	mov	r4, r2
 80006dc:	6518      	str	r0, [r3, #80]	; 0x50
 80006de:	6559      	str	r1, [r3, #84]	; 0x54
 80006e0:	cc03      	ldmia	r4!, {r0, r1}
 80006e2:	4614      	mov	r4, r2
 80006e4:	6598      	str	r0, [r3, #88]	; 0x58
 80006e6:	65d9      	str	r1, [r3, #92]	; 0x5c
 80006e8:	cc03      	ldmia	r4!, {r0, r1}
 80006ea:	4614      	mov	r4, r2
 80006ec:	6618      	str	r0, [r3, #96]	; 0x60
 80006ee:	6659      	str	r1, [r3, #100]	; 0x64
 80006f0:	4615      	mov	r5, r2
 80006f2:	cc03      	ldmia	r4!, {r0, r1}
 80006f4:	4616      	mov	r6, r2
 80006f6:	4614      	mov	r4, r2
 80006f8:	4617      	mov	r7, r2
 80006fa:	4694      	mov	ip, r2
 80006fc:	921f      	str	r2, [sp, #124]	; 0x7c
 80006fe:	9220      	str	r2, [sp, #128]	; 0x80
 8000700:	9221      	str	r2, [sp, #132]	; 0x84
 8000702:	6698      	str	r0, [r3, #104]	; 0x68
 8000704:	66d9      	str	r1, [r3, #108]	; 0x6c
 8000706:	cc03      	ldmia	r4!, {r0, r1}
 8000708:	6718      	str	r0, [r3, #112]	; 0x70
 800070a:	6759      	str	r1, [r3, #116]	; 0x74
 800070c:	cd03      	ldmia	r5!, {r0, r1}
 800070e:	6798      	str	r0, [r3, #120]	; 0x78
 8000710:	67d9      	str	r1, [r3, #124]	; 0x7c
 8000712:	ce03      	ldmia	r6!, {r0, r1}
 8000714:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8000718:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 800071c:	cf03      	ldmia	r7!, {r0, r1}
 800071e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000722:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 8000726:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800072a:	4694      	mov	ip, r2
 800072c:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
 8000730:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 8000734:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000738:	4694      	mov	ip, r2
 800073a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
 800073e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8000742:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000746:	4694      	mov	ip, r2
 8000748:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
 800074c:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8000750:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000754:	4694      	mov	ip, r2
 8000756:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 800075a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 800075e:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000762:	4694      	mov	ip, r2
 8000764:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
 8000768:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800076c:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000770:	4694      	mov	ip, r2
 8000772:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
 8000776:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 800077a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800077e:	4694      	mov	ip, r2
 8000780:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 8000784:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 8000788:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800078c:	4694      	mov	ip, r2
 800078e:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
 8000792:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8000796:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800079a:	4694      	mov	ip, r2
 800079c:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
 80007a0:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 80007a4:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80007a8:	4694      	mov	ip, r2
 80007aa:	4614      	mov	r4, r2
 80007ac:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
 80007b0:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
 80007b4:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80007b8:	4694      	mov	ip, r2
 80007ba:	4692      	mov	sl, r2
 80007bc:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 80007c0:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 80007c4:	4615      	mov	r5, r2
 80007c6:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80007ca:	4616      	mov	r6, r2
 80007cc:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
 80007d0:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
 80007d4:	4617      	mov	r7, r2
 80007d6:	4693      	mov	fp, r2
 80007d8:	4691      	mov	r9, r2
 80007da:	4690      	mov	r8, r2
 80007dc:	4696      	mov	lr, r2
 80007de:	4694      	mov	ip, r2
 80007e0:	ca03      	ldmia	r2!, {r0, r1}
 80007e2:	4622      	mov	r2, r4
 80007e4:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
 80007e8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
 80007ec:	ca03      	ldmia	r2!, {r0, r1}
 80007ee:	4622      	mov	r2, r4
 80007f0:	f8c3 00f8 	str.w	r0, [r3, #248]	; 0xf8
 80007f4:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 80007f8:	ca03      	ldmia	r2!, {r0, r1}
 80007fa:	4622      	mov	r2, r4
 80007fc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 8000800:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 8000804:	ca03      	ldmia	r2!, {r0, r1}
 8000806:	4622      	mov	r2, r4
 8000808:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
 800080c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
 8000810:	ca03      	ldmia	r2!, {r0, r1}
 8000812:	4622      	mov	r2, r4
 8000814:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
 8000818:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
 800081c:	ca03      	ldmia	r2!, {r0, r1}
 800081e:	4622      	mov	r2, r4
 8000820:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000824:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
 8000828:	ca03      	ldmia	r2!, {r0, r1}
 800082a:	4622      	mov	r2, r4
 800082c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
 8000830:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
 8000834:	ca03      	ldmia	r2!, {r0, r1}
 8000836:	4622      	mov	r2, r4
 8000838:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
 800083c:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
 8000840:	ca03      	ldmia	r2!, {r0, r1}
 8000842:	4622      	mov	r2, r4
 8000844:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
 8000848:	f8c3 1134 	str.w	r1, [r3, #308]	; 0x134
 800084c:	ca03      	ldmia	r2!, {r0, r1}
 800084e:	4622      	mov	r2, r4
 8000850:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
 8000854:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
 8000858:	ca03      	ldmia	r2!, {r0, r1}
 800085a:	4622      	mov	r2, r4
 800085c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 8000860:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
 8000864:	ca03      	ldmia	r2!, {r0, r1}
 8000866:	4622      	mov	r2, r4
 8000868:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
 800086c:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
 8000870:	ca03      	ldmia	r2!, {r0, r1}
 8000872:	4622      	mov	r2, r4
 8000874:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8000878:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
 800087c:	ca03      	ldmia	r2!, {r0, r1}
 800087e:	4622      	mov	r2, r4
 8000880:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
 8000884:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
 8000888:	ca03      	ldmia	r2!, {r0, r1}
 800088a:	4622      	mov	r2, r4
 800088c:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
 8000890:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
 8000894:	ca03      	ldmia	r2!, {r0, r1}
 8000896:	4622      	mov	r2, r4
 8000898:	f8c3 0168 	str.w	r0, [r3, #360]	; 0x168
 800089c:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
 80008a0:	ca03      	ldmia	r2!, {r0, r1}
 80008a2:	4622      	mov	r2, r4
 80008a4:	f8c3 0170 	str.w	r0, [r3, #368]	; 0x170
 80008a8:	f8c3 1174 	str.w	r1, [r3, #372]	; 0x174
 80008ac:	ca03      	ldmia	r2!, {r0, r1}
 80008ae:	f8c3 0178 	str.w	r0, [r3, #376]	; 0x178
 80008b2:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
 80008b6:	cc03      	ldmia	r4!, {r0, r1}
 80008b8:	4654      	mov	r4, sl
 80008ba:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
 80008be:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 80008c2:	cd03      	ldmia	r5!, {r0, r1}
 80008c4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 80008c8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 80008cc:	ce03      	ldmia	r6!, {r0, r1}
 80008ce:	f8c3 0190 	str.w	r0, [r3, #400]	; 0x190
 80008d2:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
 80008d6:	cf03      	ldmia	r7!, {r0, r1}
 80008d8:	f8c3 0198 	str.w	r0, [r3, #408]	; 0x198
 80008dc:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 80008e0:	cc03      	ldmia	r4!, {r0, r1}
 80008e2:	4654      	mov	r4, sl
 80008e4:	f8c3 01a0 	str.w	r0, [r3, #416]	; 0x1a0
 80008e8:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4
 80008ec:	cc03      	ldmia	r4!, {r0, r1}
 80008ee:	4654      	mov	r4, sl
 80008f0:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
 80008f4:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
 80008f8:	cc03      	ldmia	r4!, {r0, r1}
 80008fa:	4654      	mov	r4, sl
 80008fc:	4652      	mov	r2, sl
 80008fe:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0
 8000902:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
 8000906:	cc03      	ldmia	r4!, {r0, r1}
 8000908:	4654      	mov	r4, sl
 800090a:	f8c3 01b8 	str.w	r0, [r3, #440]	; 0x1b8
 800090e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
 8000912:	cc03      	ldmia	r4!, {r0, r1}
 8000914:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
 8000918:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
 800091c:	ca03      	ldmia	r2!, {r0, r1}
 800091e:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
 8000922:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
 8000926:	e8ba 0003 	ldmia.w	sl!, {r0, r1}
 800092a:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
 800092e:	f8c3 11d4 	str.w	r1, [r3, #468]	; 0x1d4
 8000932:	e8bb 0003 	ldmia.w	fp!, {r0, r1}
 8000936:	f8c3 01d8 	str.w	r0, [r3, #472]	; 0x1d8
 800093a:	f8c3 11dc 	str.w	r1, [r3, #476]	; 0x1dc
 800093e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8000942:	f8c3 01e0 	str.w	r0, [r3, #480]	; 0x1e0
 8000946:	f8c3 11e4 	str.w	r1, [r3, #484]	; 0x1e4
 800094a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 800094e:	f8c3 01e8 	str.w	r0, [r3, #488]	; 0x1e8
 8000952:	f8c3 11ec 	str.w	r1, [r3, #492]	; 0x1ec
 8000956:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 800095a:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
 800095e:	f8c3 11f4 	str.w	r1, [r3, #500]	; 0x1f4
 8000962:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000966:	f8c3 01f8 	str.w	r0, [r3, #504]	; 0x1f8
 800096a:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
		}
	}
}
 800096e:	b023      	add	sp, #140	; 0x8c
 8000970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000974:	080025c8 	.word	0x080025c8
 8000978:	20000034 	.word	0x20000034
 800097c:	20000234 	.word	0x20000234
 8000980:	20000238 	.word	0x20000238
 8000984:	2000023c 	.word	0x2000023c

08000988 <add_voice>:

void add_voice(uint8_t note_value) {
 8000988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
//		if (op[0][voice_index].note_value == note_value) {
//			return;
//		}
//	}
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 800098c:	4c43      	ldr	r4, [pc, #268]	; (8000a9c <add_voice+0x114>)
void add_voice(uint8_t note_value) {
 800098e:	4681      	mov	r9, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000990:	7823      	ldrb	r3, [r4, #0]
 8000992:	2bff      	cmp	r3, #255	; 0xff
 8000994:	d066      	beq.n	8000a64 <add_voice+0xdc>
 8000996:	7a23      	ldrb	r3, [r4, #8]
 8000998:	2bff      	cmp	r3, #255	; 0xff
 800099a:	d065      	beq.n	8000a68 <add_voice+0xe0>
 800099c:	7c23      	ldrb	r3, [r4, #16]
 800099e:	2bff      	cmp	r3, #255	; 0xff
 80009a0:	d066      	beq.n	8000a70 <add_voice+0xe8>
 80009a2:	7e23      	ldrb	r3, [r4, #24]
 80009a4:	2bff      	cmp	r3, #255	; 0xff
 80009a6:	d065      	beq.n	8000a74 <add_voice+0xec>
 80009a8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80009ac:	2bff      	cmp	r3, #255	; 0xff
 80009ae:	d063      	beq.n	8000a78 <add_voice+0xf0>
 80009b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80009b4:	2bff      	cmp	r3, #255	; 0xff
 80009b6:	d061      	beq.n	8000a7c <add_voice+0xf4>
 80009b8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80009bc:	2bff      	cmp	r3, #255	; 0xff
 80009be:	d05f      	beq.n	8000a80 <add_voice+0xf8>
 80009c0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80009c4:	2bff      	cmp	r3, #255	; 0xff
 80009c6:	d05d      	beq.n	8000a84 <add_voice+0xfc>
 80009c8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d05b      	beq.n	8000a88 <add_voice+0x100>
 80009d0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80009d4:	2bff      	cmp	r3, #255	; 0xff
 80009d6:	d059      	beq.n	8000a8c <add_voice+0x104>
 80009d8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80009dc:	2bff      	cmp	r3, #255	; 0xff
 80009de:	d057      	beq.n	8000a90 <add_voice+0x108>
 80009e0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80009e4:	2bff      	cmp	r3, #255	; 0xff
 80009e6:	d055      	beq.n	8000a94 <add_voice+0x10c>
 80009e8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80009ec:	2bff      	cmp	r3, #255	; 0xff
 80009ee:	d03d      	beq.n	8000a6c <add_voice+0xe4>
 80009f0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80009f4:	2bff      	cmp	r3, #255	; 0xff
 80009f6:	d04f      	beq.n	8000a98 <add_voice+0x110>
 80009f8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80009fc:	2bff      	cmp	r3, #255	; 0xff
 80009fe:	d007      	beq.n	8000a10 <add_voice+0x88>
 8000a00:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8000a04:	2bff      	cmp	r3, #255	; 0xff
 8000a06:	bf08      	it	eq
 8000a08:	230f      	moveq	r3, #15
 8000a0a:	d002      	beq.n	8000a12 <add_voice+0x8a>
		else {
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);						//calculate and store delta
		}
		op[op_index][voice_index].phase = 0;											//reset the phase (wave table index)
	}
}
 8000a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000a10:	230e      	movs	r3, #14
 8000a12:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);						//calculate and store delta
 8000a16:	4627      	mov	r7, r4
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000a18:	2501      	movs	r5, #1
		op[op_index][voice_index].phase = 0;											//reset the phase (wave table index)
 8000a1a:	f04f 0800 	mov.w	r8, #0
 8000a1e:	f8df a080 	ldr.w	sl, [pc, #128]	; 8000aa0 <add_voice+0x118>
		op[op_index][voice_index].freq = op_ratio[op_index] * note_to_freq(note_value);	//store frequency
 8000a22:	4648      	mov	r0, r9
		op[op_index][voice_index].note_value = note_value;								//store note
 8000a24:	f884 9000 	strb.w	r9, [r4]
		op[op_index][voice_index].freq = op_ratio[op_index] * note_to_freq(note_value);	//store frequency
 8000a28:	f81a 6b01 	ldrb.w	r6, [sl], #1
 8000a2c:	f7ff fd12 	bl	8000454 <note_to_freq>
 8000a30:	fb06 f600 	mul.w	r6, r6, r0
		if (op_index != 0)	{
 8000a34:	2d01      	cmp	r5, #1
		op[op_index][voice_index].freq = op_ratio[op_index] * note_to_freq(note_value);	//store frequency
 8000a36:	8066      	strh	r6, [r4, #2]
		if (op_index != 0)	{
 8000a38:	d00d      	beq.n	8000a56 <add_voice+0xce>
			op[op_index][voice_index].delta = op_ratio[op_index] * op[0][voice_index].delta;//multiply delta based off of ratio of carrier
 8000a3a:	88ba      	ldrh	r2, [r7, #4]
 8000a3c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000a40:	2d04      	cmp	r5, #4
			op[op_index][voice_index].delta = op_ratio[op_index] * op[0][voice_index].delta;//multiply delta based off of ratio of carrier
 8000a42:	fb03 f302 	mul.w	r3, r3, r2
		op[op_index][voice_index].phase = 0;											//reset the phase (wave table index)
 8000a46:	f8a4 8006 	strh.w	r8, [r4, #6]
			op[op_index][voice_index].delta = op_ratio[op_index] * op[0][voice_index].delta;//multiply delta based off of ratio of carrier
 8000a4a:	80a3      	strh	r3, [r4, #4]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000a4c:	d0de      	beq.n	8000a0c <add_voice+0x84>
 8000a4e:	3501      	adds	r5, #1
 8000a50:	b2ed      	uxtb	r5, r5
 8000a52:	3480      	adds	r4, #128	; 0x80
 8000a54:	e7e5      	b.n	8000a22 <add_voice+0x9a>
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);						//calculate and store delta
 8000a56:	8878      	ldrh	r0, [r7, #2]
 8000a58:	f7ff fd02 	bl	8000460 <calculate_delta>
 8000a5c:	80b8      	strh	r0, [r7, #4]
		op[op_index][voice_index].phase = 0;											//reset the phase (wave table index)
 8000a5e:	f8a4 8006 	strh.w	r8, [r4, #6]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000a62:	e7f4      	b.n	8000a4e <add_voice+0xc6>
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	e7d4      	b.n	8000a12 <add_voice+0x8a>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e7d2      	b.n	8000a12 <add_voice+0x8a>
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	e7d0      	b.n	8000a12 <add_voice+0x8a>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e7ce      	b.n	8000a12 <add_voice+0x8a>
 8000a74:	2303      	movs	r3, #3
 8000a76:	e7cc      	b.n	8000a12 <add_voice+0x8a>
 8000a78:	2304      	movs	r3, #4
 8000a7a:	e7ca      	b.n	8000a12 <add_voice+0x8a>
 8000a7c:	2305      	movs	r3, #5
 8000a7e:	e7c8      	b.n	8000a12 <add_voice+0x8a>
 8000a80:	2306      	movs	r3, #6
 8000a82:	e7c6      	b.n	8000a12 <add_voice+0x8a>
 8000a84:	2307      	movs	r3, #7
 8000a86:	e7c4      	b.n	8000a12 <add_voice+0x8a>
 8000a88:	2308      	movs	r3, #8
 8000a8a:	e7c2      	b.n	8000a12 <add_voice+0x8a>
 8000a8c:	2309      	movs	r3, #9
 8000a8e:	e7c0      	b.n	8000a12 <add_voice+0x8a>
 8000a90:	230a      	movs	r3, #10
 8000a92:	e7be      	b.n	8000a12 <add_voice+0x8a>
 8000a94:	230b      	movs	r3, #11
 8000a96:	e7bc      	b.n	8000a12 <add_voice+0x8a>
 8000a98:	230d      	movs	r3, #13
 8000a9a:	e7ba      	b.n	8000a12 <add_voice+0x8a>
 8000a9c:	20000034 	.word	0x20000034
 8000aa0:	2000023c 	.word	0x2000023c

08000aa4 <delete_voice>:

void delete_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 8000aa4:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <delete_voice+0xd4>)
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000aaa:	bf04      	itt	eq
 8000aac:	22ff      	moveq	r2, #255	; 0xff
 8000aae:	701a      	strbeq	r2, [r3, #0]
		if (op[0][voice_index].note_value == note_value) {
 8000ab0:	7a1a      	ldrb	r2, [r3, #8]
 8000ab2:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000ab4:	bf04      	itt	eq
 8000ab6:	22ff      	moveq	r2, #255	; 0xff
 8000ab8:	721a      	strbeq	r2, [r3, #8]
		if (op[0][voice_index].note_value == note_value) {
 8000aba:	7c1a      	ldrb	r2, [r3, #16]
 8000abc:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000abe:	bf04      	itt	eq
 8000ac0:	22ff      	moveq	r2, #255	; 0xff
 8000ac2:	741a      	strbeq	r2, [r3, #16]
		if (op[0][voice_index].note_value == note_value) {
 8000ac4:	7e1a      	ldrb	r2, [r3, #24]
 8000ac6:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000ac8:	bf04      	itt	eq
 8000aca:	22ff      	moveq	r2, #255	; 0xff
 8000acc:	761a      	strbeq	r2, [r3, #24]
		if (op[0][voice_index].note_value == note_value) {
 8000ace:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000ad2:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000ad4:	bf04      	itt	eq
 8000ad6:	22ff      	moveq	r2, #255	; 0xff
 8000ad8:	f883 2020 	strbeq.w	r2, [r3, #32]
		if (op[0][voice_index].note_value == note_value) {
 8000adc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000ae0:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000ae2:	bf04      	itt	eq
 8000ae4:	22ff      	moveq	r2, #255	; 0xff
 8000ae6:	f883 2028 	strbeq.w	r2, [r3, #40]	; 0x28
		if (op[0][voice_index].note_value == note_value) {
 8000aea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8000aee:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000af0:	bf04      	itt	eq
 8000af2:	22ff      	moveq	r2, #255	; 0xff
 8000af4:	f883 2030 	strbeq.w	r2, [r3, #48]	; 0x30
		if (op[0][voice_index].note_value == note_value) {
 8000af8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000afc:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000afe:	bf04      	itt	eq
 8000b00:	22ff      	moveq	r2, #255	; 0xff
 8000b02:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (op[0][voice_index].note_value == note_value) {
 8000b06:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000b0a:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b0c:	bf04      	itt	eq
 8000b0e:	22ff      	moveq	r2, #255	; 0xff
 8000b10:	f883 2040 	strbeq.w	r2, [r3, #64]	; 0x40
		if (op[0][voice_index].note_value == note_value) {
 8000b14:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000b18:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b1a:	bf04      	itt	eq
 8000b1c:	22ff      	moveq	r2, #255	; 0xff
 8000b1e:	f883 2048 	strbeq.w	r2, [r3, #72]	; 0x48
		if (op[0][voice_index].note_value == note_value) {
 8000b22:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000b26:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b28:	bf04      	itt	eq
 8000b2a:	22ff      	moveq	r2, #255	; 0xff
 8000b2c:	f883 2050 	strbeq.w	r2, [r3, #80]	; 0x50
		if (op[0][voice_index].note_value == note_value) {
 8000b30:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000b34:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b36:	bf04      	itt	eq
 8000b38:	22ff      	moveq	r2, #255	; 0xff
 8000b3a:	f883 2058 	strbeq.w	r2, [r3, #88]	; 0x58
		if (op[0][voice_index].note_value == note_value) {
 8000b3e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8000b42:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b44:	bf04      	itt	eq
 8000b46:	22ff      	moveq	r2, #255	; 0xff
 8000b48:	f883 2060 	strbeq.w	r2, [r3, #96]	; 0x60
		if (op[0][voice_index].note_value == note_value) {
 8000b4c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8000b50:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b52:	bf04      	itt	eq
 8000b54:	22ff      	moveq	r2, #255	; 0xff
 8000b56:	f883 2068 	strbeq.w	r2, [r3, #104]	; 0x68
		if (op[0][voice_index].note_value == note_value) {
 8000b5a:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8000b5e:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b60:	bf04      	itt	eq
 8000b62:	22ff      	moveq	r2, #255	; 0xff
 8000b64:	f883 2070 	strbeq.w	r2, [r3, #112]	; 0x70
		if (op[0][voice_index].note_value == note_value) {
 8000b68:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8000b6c:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b6e:	bf04      	itt	eq
 8000b70:	22ff      	moveq	r2, #255	; 0xff
 8000b72:	f883 2078 	strbeq.w	r2, [r3, #120]	; 0x78
		}
	}
//	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
//		op[op_index][voice_index].note_value = -1;
//	}
}
 8000b76:	4770      	bx	lr
 8000b78:	20000034 	.word	0x20000034

08000b7c <modulate>:
}

int16_t modulate(uint8_t voice_index) {
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {			//loop through all operators of voice
		/*update phase of active operator*/
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 8000b7c:	4ba6      	ldr	r3, [pc, #664]	; (8000e18 <modulate+0x29c>)
int16_t modulate(uint8_t voice_index) {
 8000b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 8000b80:	f100 0610 	add.w	r6, r0, #16
 8000b84:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
	-27, -25, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9,  -7,  -5,  -3,  -2,
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 8000b88:	88f1      	ldrh	r1, [r6, #6]
 8000b8a:	88b2      	ldrh	r2, [r6, #4]
 8000b8c:	f100 0520 	add.w	r5, r0, #32
 8000b90:	f100 0430 	add.w	r4, r0, #48	; 0x30
 8000b94:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000b98:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000b9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000ba0:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8000ba4:	4411      	add	r1, r2
 8000ba6:	88eb      	ldrh	r3, [r5, #6]
 8000ba8:	88af      	ldrh	r7, [r5, #4]
 8000baa:	88a2      	ldrh	r2, [r4, #4]
 8000bac:	443b      	add	r3, r7
 8000bae:	4462      	add	r2, ip
 8000bb0:	b28f      	uxth	r7, r1
 8000bb2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8000bb6:	88c1      	ldrh	r1, [r0, #6]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4461      	add	r1, ip
	}

	switch (algo) {
 8000bbc:	f8df c268 	ldr.w	ip, [pc, #616]	; 8000e28 <modulate+0x2ac>
 8000bc0:	b292      	uxth	r2, r2
 8000bc2:	f89c c000 	ldrb.w	ip, [ip]
 8000bc6:	b289      	uxth	r1, r1
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 8000bc8:	80f7      	strh	r7, [r6, #6]
 8000bca:	80eb      	strh	r3, [r5, #6]
 8000bcc:	80e2      	strh	r2, [r4, #6]
 8000bce:	80c1      	strh	r1, [r0, #6]
	switch (algo) {
 8000bd0:	f1bc 0f0b 	cmp.w	ip, #11
 8000bd4:	f200 8184 	bhi.w	8000ee0 <modulate+0x364>
 8000bd8:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8000bdc:	004f002d 	.word	0x004f002d
 8000be0:	00820061 	.word	0x00820061
 8000be4:	00bd00a6 	.word	0x00bd00a6
 8000be8:	00fb00df 	.word	0x00fb00df
 8000bec:	01530128 	.word	0x01530128
 8000bf0:	000c0171 	.word	0x000c0171
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
		return ((int16_t)op2 + op1 + op0) / 3;
		break;
	case 0x0B:
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000bf4:	4c89      	ldr	r4, [pc, #548]	; (8000e1c <modulate+0x2a0>)
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000bf6:	4d8a      	ldr	r5, [pc, #552]	; (8000e20 <modulate+0x2a4>)
 8000bf8:	0a1b      	lsrs	r3, r3, #8
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000bfa:	f915 e003 	ldrsb.w	lr, [r5, r3]
 8000bfe:	78a0      	ldrb	r0, [r4, #2]
 8000c00:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000c02:	f915 c002 	ldrsb.w	ip, [r5, r2]
 8000c06:	0a0b      	lsrs	r3, r1, #8
 8000c08:	0a3f      	lsrs	r7, r7, #8
 8000c0a:	78e1      	ldrb	r1, [r4, #3]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000c0c:	57ee      	ldrsb	r6, [r5, r7]
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000c0e:	fb00 f00e 	mul.w	r0, r0, lr
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000c12:	7862      	ldrb	r2, [r4, #1]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000c14:	56ed      	ldrsb	r5, [r5, r3]
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000c16:	fb01 f10c 	mul.w	r1, r1, ip
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000c1a:	7823      	ldrb	r3, [r4, #0]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000c1c:	fb02 f206 	mul.w	r2, r2, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000c20:	fb03 f305 	mul.w	r3, r3, r5
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000c24:	1200      	asrs	r0, r0, #8
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 8000c26:	eb00 2021 	add.w	r0, r0, r1, asr #8
 8000c2a:	eb00 2022 	add.w	r0, r0, r2, asr #8
 8000c2e:	eb00 2023 	add.w	r0, r0, r3, asr #8
 8000c32:	1080      	asrs	r0, r0, #2
		break;
	default:
		break;
	}
	return 0;
}
 8000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c36:	4c7b      	ldr	r4, [pc, #492]	; (8000e24 <modulate+0x2a8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000c38:	4878      	ldr	r0, [pc, #480]	; (8000e1c <modulate+0x2a0>)
 8000c3a:	0a12      	lsrs	r2, r2, #8
 8000c3c:	56a5      	ldrsb	r5, [r4, r2]
 8000c3e:	78c2      	ldrb	r2, [r0, #3]
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000c40:	0a1b      	lsrs	r3, r3, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000c42:	fb02 f205 	mul.w	r2, r2, r5
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000c46:	eb03 2322 	add.w	r3, r3, r2, asr #8
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	56e5      	ldrsb	r5, [r4, r3]
 8000c4e:	7882      	ldrb	r2, [r0, #2]
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000c50:	0a3b      	lsrs	r3, r7, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000c52:	fb02 f205 	mul.w	r2, r2, r5
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000c56:	eb03 2322 	add.w	r3, r3, r2, asr #8
 8000c5a:	b2db      	uxtb	r3, r3
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op_amp[1] >> 8;
 8000c5c:	56e4      	ldrsb	r4, [r4, r3]
 8000c5e:	7842      	ldrb	r2, [r0, #1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000c60:	0a0b      	lsrs	r3, r1, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op_amp[1] >> 8;
 8000c62:	fb02 f204 	mul.w	r2, r2, r4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000c66:	496e      	ldr	r1, [pc, #440]	; (8000e20 <modulate+0x2a4>)
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000c68:	eb03 2322 	add.w	r3, r3, r2, asr #8
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	7800      	ldrb	r0, [r0, #0]
 8000c70:	56cb      	ldrsb	r3, [r1, r3]
 8000c72:	fb00 f003 	mul.w	r0, r0, r3
		return op0;
 8000c76:	1200      	asrs	r0, r0, #8
}
 8000c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c7a:	4c6a      	ldr	r4, [pc, #424]	; (8000e24 <modulate+0x2a8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000c7c:	4867      	ldr	r0, [pc, #412]	; (8000e1c <modulate+0x2a0>)
 8000c7e:	0a1b      	lsrs	r3, r3, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000c80:	56e6      	ldrsb	r6, [r4, r3]
 8000c82:	0a12      	lsrs	r2, r2, #8
 8000c84:	7883      	ldrb	r3, [r0, #2]
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000c86:	56a5      	ldrsb	r5, [r4, r2]
 8000c88:	78c2      	ldrb	r2, [r0, #3]
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000c8a:	fb03 f306 	mul.w	r3, r3, r6
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000c8e:	fb02 f205 	mul.w	r2, r2, r5
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000c92:	121b      	asrs	r3, r3, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op_amp[1] >> 8;
 8000c94:	eb03 2322 	add.w	r3, r3, r2, asr #8
 8000c98:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8000c9c:	e7dd      	b.n	8000c5a <modulate+0xde>
 8000c9e:	4d61      	ldr	r5, [pc, #388]	; (8000e24 <modulate+0x2a8>)
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000ca0:	485e      	ldr	r0, [pc, #376]	; (8000e1c <modulate+0x2a0>)
 8000ca2:	0a1b      	lsrs	r3, r3, #8
 8000ca4:	56ee      	ldrsb	r6, [r5, r3]
 8000ca6:	7884      	ldrb	r4, [r0, #2]
 8000ca8:	0a12      	lsrs	r2, r2, #8
 8000caa:	fb04 f406 	mul.w	r4, r4, r6
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000cae:	0a3b      	lsrs	r3, r7, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000cb0:	56ae      	ldrsb	r6, [r5, r2]
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000cb2:	eb03 2324 	add.w	r3, r3, r4, asr #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000cb6:	78c4      	ldrb	r4, [r0, #3]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	fb04 f406 	mul.w	r4, r4, r6
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000cbe:	56ea      	ldrsb	r2, [r5, r3]
 8000cc0:	7843      	ldrb	r3, [r0, #1]
 8000cc2:	fb03 f202 	mul.w	r2, r3, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op_amp[0] >> 8;
 8000cc6:	0a0b      	lsrs	r3, r1, #8
 8000cc8:	eb03 2324 	add.w	r3, r3, r4, asr #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op_amp[0] >> 8;
 8000ccc:	eb03 2322 	add.w	r3, r3, r2, asr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000cd0:	4a53      	ldr	r2, [pc, #332]	; (8000e20 <modulate+0x2a4>)
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	7800      	ldrb	r0, [r0, #0]
 8000cd6:	56d3      	ldrsb	r3, [r2, r3]
 8000cd8:	fb00 f003 	mul.w	r0, r0, r3
		return op0;
 8000cdc:	1200      	asrs	r0, r0, #8
}
 8000cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000ce0:	4c4e      	ldr	r4, [pc, #312]	; (8000e1c <modulate+0x2a0>)
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000ce2:	4d50      	ldr	r5, [pc, #320]	; (8000e24 <modulate+0x2a8>)
 8000ce4:	0a12      	lsrs	r2, r2, #8
 8000ce6:	56ae      	ldrsb	r6, [r5, r2]
 8000ce8:	78e0      	ldrb	r0, [r4, #3]
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000cea:	7862      	ldrb	r2, [r4, #1]
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000cec:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000cf0:	f3c0 2007 	ubfx	r0, r0, #8, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000cf4:	eb00 2617 	add.w	r6, r0, r7, lsr #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000cf8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8000cfc:	b2f6      	uxtb	r6, r6
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000cfe:	57ae      	ldrsb	r6, [r5, r6]
 8000d00:	b2db      	uxtb	r3, r3
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d02:	56ed      	ldrsb	r5, [r5, r3]
 8000d04:	78a0      	ldrb	r0, [r4, #2]
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000d06:	fb02 f306 	mul.w	r3, r2, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d0a:	fb00 f205 	mul.w	r2, r0, r5
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000d0e:	121b      	asrs	r3, r3, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op_amp[0] >> 8;
 8000d10:	eb03 2322 	add.w	r3, r3, r2, asr #8
 8000d14:	eb03 2311 	add.w	r3, r3, r1, lsr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d18:	4a41      	ldr	r2, [pc, #260]	; (8000e20 <modulate+0x2a4>)
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	7820      	ldrb	r0, [r4, #0]
 8000d1e:	56d3      	ldrsb	r3, [r2, r3]
 8000d20:	fb00 f003 	mul.w	r0, r0, r3
		return op0;
 8000d24:	1200      	asrs	r0, r0, #8
}
 8000d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d28:	4d3e      	ldr	r5, [pc, #248]	; (8000e24 <modulate+0x2a8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d2a:	483c      	ldr	r0, [pc, #240]	; (8000e1c <modulate+0x2a0>)
 8000d2c:	0a1b      	lsrs	r3, r3, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000d2e:	56ec      	ldrsb	r4, [r5, r3]
 8000d30:	7883      	ldrb	r3, [r0, #2]
 8000d32:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d34:	56aa      	ldrsb	r2, [r5, r2]
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000d36:	fb03 f304 	mul.w	r3, r3, r4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d3a:	78c4      	ldrb	r4, [r0, #3]
 8000d3c:	0a3f      	lsrs	r7, r7, #8
 8000d3e:	fb04 f402 	mul.w	r4, r4, r2
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000d42:	57ed      	ldrsb	r5, [r5, r7]
 8000d44:	7842      	ldrb	r2, [r0, #1]
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000d46:	121b      	asrs	r3, r3, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op_amp[0] >> 8;
 8000d48:	eb03 2324 	add.w	r3, r3, r4, asr #8
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000d4c:	fb02 f205 	mul.w	r2, r2, r5
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op_amp[0] >> 8;
 8000d50:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8000d54:	e7ba      	b.n	8000ccc <modulate+0x150>
 8000d56:	4833      	ldr	r0, [pc, #204]	; (8000e24 <modulate+0x2a8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d58:	4c30      	ldr	r4, [pc, #192]	; (8000e1c <modulate+0x2a0>)
 8000d5a:	0a12      	lsrs	r2, r2, #8
 8000d5c:	5685      	ldrsb	r5, [r0, r2]
 8000d5e:	78e2      	ldrb	r2, [r4, #3]
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d60:	0a1b      	lsrs	r3, r3, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d62:	fb02 f205 	mul.w	r2, r2, r5
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d66:	eb03 2322 	add.w	r3, r3, r2, asr #8
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	56c3      	ldrsb	r3, [r0, r3]
 8000d6e:	78a0      	ldrb	r0, [r4, #2]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000d70:	0a3a      	lsrs	r2, r7, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d72:	fb00 f003 	mul.w	r0, r0, r3
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d76:	4d2a      	ldr	r5, [pc, #168]	; (8000e20 <modulate+0x2a4>)
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000d78:	eb02 2220 	add.w	r2, r2, r0, asr #8
 8000d7c:	0a09      	lsrs	r1, r1, #8
 8000d7e:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000d80:	5669      	ldrsb	r1, [r5, r1]
 8000d82:	7820      	ldrb	r0, [r4, #0]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000d84:	56aa      	ldrsb	r2, [r5, r2]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000d86:	7863      	ldrb	r3, [r4, #1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op_amp[0] >> 8;
 8000d88:	fb00 f001 	mul.w	r0, r0, r1
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000d8c:	fb03 f302 	mul.w	r3, r3, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op_amp[0] >> 8;
 8000d90:	1200      	asrs	r0, r0, #8
		return ((int16_t)op1 + op0) >> 1;
 8000d92:	eb00 2023 	add.w	r0, r0, r3, asr #8
 8000d96:	1040      	asrs	r0, r0, #1
}
 8000d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d9a:	4822      	ldr	r0, [pc, #136]	; (8000e24 <modulate+0x2a8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d9c:	4c1f      	ldr	r4, [pc, #124]	; (8000e1c <modulate+0x2a0>)
 8000d9e:	0a12      	lsrs	r2, r2, #8
 8000da0:	5685      	ldrsb	r5, [r0, r2]
 8000da2:	78e2      	ldrb	r2, [r4, #3]
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000da4:	0a1b      	lsrs	r3, r3, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000da6:	fb02 f205 	mul.w	r2, r2, r5
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000daa:	eb03 2322 	add.w	r3, r3, r2, asr #8
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	56c3      	ldrsb	r3, [r0, r3]
 8000db2:	78a2      	ldrb	r2, [r4, #2]
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000db4:	4d1a      	ldr	r5, [pc, #104]	; (8000e20 <modulate+0x2a4>)
 8000db6:	fb02 f203 	mul.w	r2, r2, r3
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000dba:	f3c2 2207 	ubfx	r2, r2, #8, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op_amp[0] >> 8;
 8000dbe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000dc2:	eb02 2317 	add.w	r3, r2, r7, lsr #8
 8000dc6:	b2c9      	uxtb	r1, r1
 8000dc8:	b2db      	uxtb	r3, r3
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op_amp[0] >> 8;
 8000dca:	5669      	ldrsb	r1, [r5, r1]
 8000dcc:	7820      	ldrb	r0, [r4, #0]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000dce:	56ea      	ldrsb	r2, [r5, r3]
 8000dd0:	e7d9      	b.n	8000d86 <modulate+0x20a>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000dd2:	4c12      	ldr	r4, [pc, #72]	; (8000e1c <modulate+0x2a0>)
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <modulate+0x2a8>)
 8000dd6:	0a3f      	lsrs	r7, r7, #8
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000dd8:	57c6      	ldrsb	r6, [r0, r7]
 8000dda:	7865      	ldrb	r5, [r4, #1]
 8000ddc:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000dde:	5682      	ldrsb	r2, [r0, r2]
 8000de0:	78e0      	ldrb	r0, [r4, #3]
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000de2:	fb05 f506 	mul.w	r5, r5, r6
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000de6:	fb00 f002 	mul.w	r0, r0, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000dea:	0a0a      	lsrs	r2, r1, #8
 8000dec:	eb02 2225 	add.w	r2, r2, r5, asr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000df0:	490b      	ldr	r1, [pc, #44]	; (8000e20 <modulate+0x2a4>)
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	eb03 2320 	add.w	r3, r3, r0, asr #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000dfa:	568d      	ldrsb	r5, [r1, r2]
 8000dfc:	7820      	ldrb	r0, [r4, #0]
 8000dfe:	b2db      	uxtb	r3, r3
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e00:	56ca      	ldrsb	r2, [r1, r3]
 8000e02:	78a3      	ldrb	r3, [r4, #2]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000e04:	fb00 f005 	mul.w	r0, r0, r5
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e08:	fb03 f302 	mul.w	r3, r3, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000e0c:	1200      	asrs	r0, r0, #8
		return ((int16_t)op2 + op0) >> 1;
 8000e0e:	eb00 2023 	add.w	r0, r0, r3, asr #8
 8000e12:	1040      	asrs	r0, r0, #1
}
 8000e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000034 	.word	0x20000034
 8000e1c:	20000238 	.word	0x20000238
 8000e20:	080027d0 	.word	0x080027d0
 8000e24:	080026d0 	.word	0x080026d0
 8000e28:	20000234 	.word	0x20000234
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000e2c:	482d      	ldr	r0, [pc, #180]	; (8000ee4 <modulate+0x368>)
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000e2e:	4c2e      	ldr	r4, [pc, #184]	; (8000ee8 <modulate+0x36c>)
 8000e30:	0a12      	lsrs	r2, r2, #8
 8000e32:	56a5      	ldrsb	r5, [r4, r2]
 8000e34:	78c2      	ldrb	r2, [r0, #3]
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000e36:	4c2d      	ldr	r4, [pc, #180]	; (8000eec <modulate+0x370>)
 8000e38:	fb02 f205 	mul.w	r2, r2, r5
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000e40:	eb02 2617 	add.w	r6, r2, r7, lsr #8
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e44:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8000e48:	b2f6      	uxtb	r6, r6
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000e4a:	57a6      	ldrsb	r6, [r4, r6]
 8000e4c:	b2dd      	uxtb	r5, r3
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op_amp[0] >> 8;
 8000e4e:	eb02 2311 	add.w	r3, r2, r1, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000e52:	7842      	ldrb	r2, [r0, #1]
 8000e54:	b2db      	uxtb	r3, r3
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e56:	5765      	ldrsb	r5, [r4, r5]
 8000e58:	7881      	ldrb	r1, [r0, #2]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op_amp[0] >> 8;
 8000e5a:	56e4      	ldrsb	r4, [r4, r3]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000e5c:	fb02 f306 	mul.w	r3, r2, r6
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op_amp[0] >> 8;
 8000e60:	7802      	ldrb	r2, [r0, #0]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e62:	fb01 f105 	mul.w	r1, r1, r5
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op_amp[0] >> 8;
 8000e66:	fb02 f204 	mul.w	r2, r2, r4
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000e6a:	121b      	asrs	r3, r3, #8
		return ((int16_t)op2 + op1 + op0) / 3;
 8000e6c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8000e70:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <modulate+0x374>)
 8000e72:	eb03 2322 	add.w	r3, r3, r2, asr #8
 8000e76:	fb80 2003 	smull	r2, r0, r0, r3
 8000e7a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000e7e:	b200      	sxth	r0, r0
}
 8000e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <modulate+0x368>)
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000e84:	4c18      	ldr	r4, [pc, #96]	; (8000ee8 <modulate+0x36c>)
 8000e86:	0a12      	lsrs	r2, r2, #8
 8000e88:	56a4      	ldrsb	r4, [r4, r2]
 8000e8a:	78c2      	ldrb	r2, [r0, #3]
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000e8c:	4d17      	ldr	r5, [pc, #92]	; (8000eec <modulate+0x370>)
 8000e8e:	fb02 f204 	mul.w	r2, r2, r4
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e92:	f3c2 2207 	ubfx	r2, r2, #8, #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000e96:	eb02 2417 	add.w	r4, r2, r7, lsr #8
 8000e9a:	b2e4      	uxtb	r4, r4
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e9c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000ea0:	572f      	ldrsb	r7, [r5, r4]
 8000ea2:	7843      	ldrb	r3, [r0, #1]
 8000ea4:	0a09      	lsrs	r1, r1, #8
 8000ea6:	b2d2      	uxtb	r2, r2
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000ea8:	56ae      	ldrsb	r6, [r5, r2]
 8000eaa:	7884      	ldrb	r4, [r0, #2]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000eac:	566d      	ldrsb	r5, [r5, r1]
 8000eae:	7802      	ldrb	r2, [r0, #0]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000eb0:	fb03 f307 	mul.w	r3, r3, r7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000eb4:	fb04 f106 	mul.w	r1, r4, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000eb8:	fb02 f205 	mul.w	r2, r2, r5
 8000ebc:	e7d5      	b.n	8000e6a <modulate+0x2ee>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000ebe:	4c0a      	ldr	r4, [pc, #40]	; (8000ee8 <modulate+0x36c>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <modulate+0x368>)
 8000ec2:	0a12      	lsrs	r2, r2, #8
 8000ec4:	56a5      	ldrsb	r5, [r4, r2]
 8000ec6:	78c4      	ldrb	r4, [r0, #3]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000ec8:	0a1a      	lsrs	r2, r3, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000eca:	fb04 f305 	mul.w	r3, r4, r5
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000ece:	4d07      	ldr	r5, [pc, #28]	; (8000eec <modulate+0x370>)
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000ed0:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8000ed4:	0a3f      	lsrs	r7, r7, #8
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000ed6:	57ef      	ldrsb	r7, [r5, r7]
 8000ed8:	7843      	ldrb	r3, [r0, #1]
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	0a09      	lsrs	r1, r1, #8
 8000ede:	e7e3      	b.n	8000ea8 <modulate+0x32c>
	switch (algo) {
 8000ee0:	2000      	movs	r0, #0
}
 8000ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee4:	20000238 	.word	0x20000238
 8000ee8:	080026d0 	.word	0x080026d0
 8000eec:	080027d0 	.word	0x080027d0
 8000ef0:	55555556 	.word	0x55555556

08000ef4 <synth_sample>:
int16_t synth_sample() {
 8000ef4:	b538      	push	{r3, r4, r5, lr}
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000ef6:	4d4a      	ldr	r5, [pc, #296]	; (8001020 <synth_sample+0x12c>)
 8000ef8:	782b      	ldrb	r3, [r5, #0]
 8000efa:	2bff      	cmp	r3, #255	; 0xff
 8000efc:	f040 8088 	bne.w	8001010 <synth_sample+0x11c>
	int16_t output_volume = 0x0800;
 8000f00:	f44f 6400 	mov.w	r4, #2048	; 0x800
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000f04:	7a2b      	ldrb	r3, [r5, #8]
 8000f06:	2bff      	cmp	r3, #255	; 0xff
 8000f08:	d004      	beq.n	8000f14 <synth_sample+0x20>
			output_volume += modulate(voice_index);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fe36 	bl	8000b7c <modulate>
 8000f10:	4404      	add	r4, r0
 8000f12:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000f14:	7c2b      	ldrb	r3, [r5, #16]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d004      	beq.n	8000f24 <synth_sample+0x30>
			output_volume += modulate(voice_index);
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f7ff fe2e 	bl	8000b7c <modulate>
 8000f20:	4404      	add	r4, r0
 8000f22:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000f24:	7e2b      	ldrb	r3, [r5, #24]
 8000f26:	2bff      	cmp	r3, #255	; 0xff
 8000f28:	d004      	beq.n	8000f34 <synth_sample+0x40>
			output_volume += modulate(voice_index);
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f7ff fe26 	bl	8000b7c <modulate>
 8000f30:	4404      	add	r4, r0
 8000f32:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000f34:	f895 3020 	ldrb.w	r3, [r5, #32]
 8000f38:	2bff      	cmp	r3, #255	; 0xff
 8000f3a:	d004      	beq.n	8000f46 <synth_sample+0x52>
			output_volume += modulate(voice_index);
 8000f3c:	2004      	movs	r0, #4
 8000f3e:	f7ff fe1d 	bl	8000b7c <modulate>
 8000f42:	4404      	add	r4, r0
 8000f44:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000f46:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8000f4a:	2bff      	cmp	r3, #255	; 0xff
 8000f4c:	d004      	beq.n	8000f58 <synth_sample+0x64>
			output_volume += modulate(voice_index);
 8000f4e:	2005      	movs	r0, #5
 8000f50:	f7ff fe14 	bl	8000b7c <modulate>
 8000f54:	4404      	add	r4, r0
 8000f56:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000f58:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000f5c:	2bff      	cmp	r3, #255	; 0xff
 8000f5e:	d004      	beq.n	8000f6a <synth_sample+0x76>
			output_volume += modulate(voice_index);
 8000f60:	2006      	movs	r0, #6
 8000f62:	f7ff fe0b 	bl	8000b7c <modulate>
 8000f66:	4404      	add	r4, r0
 8000f68:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000f6a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8000f6e:	2bff      	cmp	r3, #255	; 0xff
 8000f70:	d004      	beq.n	8000f7c <synth_sample+0x88>
			output_volume += modulate(voice_index);
 8000f72:	2007      	movs	r0, #7
 8000f74:	f7ff fe02 	bl	8000b7c <modulate>
 8000f78:	4404      	add	r4, r0
 8000f7a:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000f7c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8000f80:	2bff      	cmp	r3, #255	; 0xff
 8000f82:	d004      	beq.n	8000f8e <synth_sample+0x9a>
			output_volume += modulate(voice_index);
 8000f84:	2008      	movs	r0, #8
 8000f86:	f7ff fdf9 	bl	8000b7c <modulate>
 8000f8a:	4404      	add	r4, r0
 8000f8c:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000f8e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8000f92:	2bff      	cmp	r3, #255	; 0xff
 8000f94:	d004      	beq.n	8000fa0 <synth_sample+0xac>
			output_volume += modulate(voice_index);
 8000f96:	2009      	movs	r0, #9
 8000f98:	f7ff fdf0 	bl	8000b7c <modulate>
 8000f9c:	4404      	add	r4, r0
 8000f9e:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000fa0:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8000fa4:	2bff      	cmp	r3, #255	; 0xff
 8000fa6:	d004      	beq.n	8000fb2 <synth_sample+0xbe>
			output_volume += modulate(voice_index);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f7ff fde7 	bl	8000b7c <modulate>
 8000fae:	4404      	add	r4, r0
 8000fb0:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000fb2:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d004      	beq.n	8000fc4 <synth_sample+0xd0>
			output_volume += modulate(voice_index);
 8000fba:	200b      	movs	r0, #11
 8000fbc:	f7ff fdde 	bl	8000b7c <modulate>
 8000fc0:	4404      	add	r4, r0
 8000fc2:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000fc4:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8000fc8:	2bff      	cmp	r3, #255	; 0xff
 8000fca:	d004      	beq.n	8000fd6 <synth_sample+0xe2>
			output_volume += modulate(voice_index);
 8000fcc:	200c      	movs	r0, #12
 8000fce:	f7ff fdd5 	bl	8000b7c <modulate>
 8000fd2:	4404      	add	r4, r0
 8000fd4:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000fd6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d004      	beq.n	8000fe8 <synth_sample+0xf4>
			output_volume += modulate(voice_index);
 8000fde:	200d      	movs	r0, #13
 8000fe0:	f7ff fdcc 	bl	8000b7c <modulate>
 8000fe4:	4404      	add	r4, r0
 8000fe6:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000fe8:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8000fec:	2bff      	cmp	r3, #255	; 0xff
 8000fee:	d004      	beq.n	8000ffa <synth_sample+0x106>
			output_volume += modulate(voice_index);
 8000ff0:	200e      	movs	r0, #14
 8000ff2:	f7ff fdc3 	bl	8000b7c <modulate>
 8000ff6:	4404      	add	r4, r0
 8000ff8:	b224      	sxth	r4, r4
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000ffa:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 8000ffe:	2bff      	cmp	r3, #255	; 0xff
 8001000:	d004      	beq.n	800100c <synth_sample+0x118>
			output_volume += modulate(voice_index);
 8001002:	200f      	movs	r0, #15
 8001004:	f7ff fdba 	bl	8000b7c <modulate>
 8001008:	4404      	add	r4, r0
 800100a:	b224      	sxth	r4, r4
}
 800100c:	4620      	mov	r0, r4
 800100e:	bd38      	pop	{r3, r4, r5, pc}
			output_volume += modulate(voice_index);
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff fdb3 	bl	8000b7c <modulate>
 8001016:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800101a:	b224      	sxth	r4, r4
 800101c:	e772      	b.n	8000f04 <synth_sample+0x10>
 800101e:	bf00      	nop
 8001020:	20000034 	.word	0x20000034

08001024 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	; (800106c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800104e:	f7ff ffe9 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f001 fa89 	bl	8002568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001056:	f7ff f8d7 	bl	8000208 <main>
  bx lr
 800105a:	4770      	bx	lr
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001064:	08002904 	.word	0x08002904
  ldr r2, =_sbss
 8001068:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800106c:	20000330 	.word	0x20000330

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_InitTick+0x3c>)
{
 800107c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107e:	7811      	ldrb	r1, [r2, #0]
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <HAL_InitTick+0x40>)
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	fbb2 f0f3 	udiv	r0, r2, r3
 800108c:	f000 f892 	bl	80011b4 <HAL_SYSTICK_Config>
 8001090:	b908      	cbnz	r0, 8001096 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	2d0f      	cmp	r5, #15
 8001094:	d901      	bls.n	800109a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001098:	bd38      	pop	{r3, r4, r5, pc}
 800109a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	4602      	mov	r2, r0
 800109e:	4629      	mov	r1, r5
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f840 	bl	8001128 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_InitTick+0x44>)
 80010aa:	4620      	mov	r0, r4
 80010ac:	601d      	str	r5, [r3, #0]
}
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
 80010b0:	20000010 	.word	0x20000010
 80010b4:	2000000c 	.word	0x2000000c
 80010b8:	20000014 	.word	0x20000014

080010bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x20>)
{
 80010be:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	f043 0310 	orr.w	r3, r3, #16
 80010c8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ca:	f000 f81b 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ffd0 	bl	8001074 <HAL_InitTick>
  HAL_MspInit();
 80010d4:	f7ff f9ce 	bl	8000474 <HAL_MspInit>
}
 80010d8:	2000      	movs	r0, #0
 80010da:	bd08      	pop	{r3, pc}
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_IncTick+0x10>)
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <HAL_IncTick+0x14>)
 80010e4:	6811      	ldr	r1, [r2, #0]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	440b      	add	r3, r1
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000032c 	.word	0x2000032c
 80010f4:	20000010 	.word	0x20000010

080010f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010f8:	4b01      	ldr	r3, [pc, #4]	; (8001100 <HAL_GetTick+0x8>)
 80010fa:	6818      	ldr	r0, [r3, #0]
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2000032c 	.word	0x2000032c

08001104 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001104:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800110a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800110e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001116:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800111e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b430      	push	{r4, r5}
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001132:	f1c3 0507 	rsb	r5, r3, #7
 8001136:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001138:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	bf28      	it	cs
 800113e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001140:	2c06      	cmp	r4, #6
 8001142:	d919      	bls.n	8001178 <HAL_NVIC_SetPriority+0x50>
 8001144:	f04f 34ff 	mov.w	r4, #4294967295
 8001148:	3b03      	subs	r3, #3
 800114a:	409c      	lsls	r4, r3
 800114c:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 34ff 	mov.w	r4, #4294967295
 8001154:	40ac      	lsls	r4, r5
 8001156:	ea21 0104 	bic.w	r1, r1, r4
 800115a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800115c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001162:	db0c      	blt.n	800117e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	0109      	lsls	r1, r1, #4
 8001166:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800116a:	b2c9      	uxtb	r1, r1
 800116c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001170:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001174:	bc30      	pop	{r4, r5}
 8001176:	4770      	bx	lr
 8001178:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	4613      	mov	r3, r2
 800117c:	e7e8      	b.n	8001150 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_NVIC_SetPriority+0x6c>)
 8001180:	f000 000f 	and.w	r0, r0, #15
 8001184:	0109      	lsls	r1, r1, #4
 8001186:	b2c9      	uxtb	r1, r1
 8001188:	4403      	add	r3, r0
 800118a:	7619      	strb	r1, [r3, #24]
 800118c:	bc30      	pop	{r4, r5}
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	e000ecfc 	.word	0xe000ecfc

08001198 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001198:	2800      	cmp	r0, #0
 800119a:	db07      	blt.n	80011ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119c:	2301      	movs	r3, #1
 800119e:	f000 011f 	and.w	r1, r0, #31
 80011a2:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <HAL_NVIC_EnableIRQ+0x18>)
 80011a4:	408b      	lsls	r3, r1
 80011a6:	0940      	lsrs	r0, r0, #5
 80011a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	3801      	subs	r0, #1
 80011b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011ba:	d20d      	bcs.n	80011d8 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011bc:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	4c06      	ldr	r4, [pc, #24]	; (80011e0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ce:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80011d0:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d4:	6019      	str	r1, [r3, #0]
 80011d6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011d8:	2001      	movs	r0, #1
 80011da:	4770      	bx	lr
 80011dc:	e000e010 	.word	0xe000e010
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80011e8:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	2a02      	cmp	r2, #2
 80011ec:	d006      	beq.n	80011fc <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ee:	2104      	movs	r1, #4
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f2:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80011f4:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 80011f8:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 80011fa:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011fc:	2101      	movs	r1, #1
{
 80011fe:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8001200:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001204:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001206:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800120a:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120c:	f024 040e 	bic.w	r4, r4, #14
 8001210:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001212:	6814      	ldr	r4, [r2, #0]
  return status; 
 8001214:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001216:	f024 0401 	bic.w	r4, r4, #1
 800121a:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800121c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800121e:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001220:	841d      	strh	r5, [r3, #32]
}
 8001222:	bc70      	pop	{r4, r5, r6}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001228:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 800122c:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800122e:	2a02      	cmp	r2, #2
 8001230:	d003      	beq.n	800123a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001232:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8001234:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001238:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123a:	6802      	ldr	r2, [r0, #0]
{  
 800123c:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123e:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001240:	481b      	ldr	r0, [pc, #108]	; (80012b0 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001242:	f021 010e 	bic.w	r1, r1, #14
 8001246:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001248:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800124a:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 800124c:	f021 0101 	bic.w	r1, r1, #1
 8001250:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001252:	d021      	beq.n	8001298 <HAL_DMA_Abort_IT+0x70>
 8001254:	4917      	ldr	r1, [pc, #92]	; (80012b4 <HAL_DMA_Abort_IT+0x8c>)
 8001256:	428a      	cmp	r2, r1
 8001258:	d01a      	beq.n	8001290 <HAL_DMA_Abort_IT+0x68>
 800125a:	3114      	adds	r1, #20
 800125c:	428a      	cmp	r2, r1
 800125e:	d01d      	beq.n	800129c <HAL_DMA_Abort_IT+0x74>
 8001260:	3114      	adds	r1, #20
 8001262:	428a      	cmp	r2, r1
 8001264:	d01d      	beq.n	80012a2 <HAL_DMA_Abort_IT+0x7a>
 8001266:	3114      	adds	r1, #20
 8001268:	428a      	cmp	r2, r1
 800126a:	d01d      	beq.n	80012a8 <HAL_DMA_Abort_IT+0x80>
 800126c:	3114      	adds	r1, #20
 800126e:	428a      	cmp	r2, r1
 8001270:	bf0c      	ite	eq
 8001272:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001276:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 800127a:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800127e:	4c0e      	ldr	r4, [pc, #56]	; (80012b8 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8001280:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001282:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001284:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8001286:	b129      	cbz	r1, 8001294 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8001288:	4618      	mov	r0, r3
 800128a:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 800128c:	2000      	movs	r0, #0
}
 800128e:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001290:	2210      	movs	r2, #16
 8001292:	e7f2      	b.n	800127a <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8001294:	4608      	mov	r0, r1
}
 8001296:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001298:	2201      	movs	r2, #1
 800129a:	e7ee      	b.n	800127a <HAL_DMA_Abort_IT+0x52>
 800129c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a0:	e7eb      	b.n	800127a <HAL_DMA_Abort_IT+0x52>
 80012a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a6:	e7e8      	b.n	800127a <HAL_DMA_Abort_IT+0x52>
 80012a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ac:	e7e5      	b.n	800127a <HAL_DMA_Abort_IT+0x52>
 80012ae:	bf00      	nop
 80012b0:	40020008 	.word	0x40020008
 80012b4:	4002001c 	.word	0x4002001c
 80012b8:	40020000 	.word	0x40020000

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	680c      	ldr	r4, [r1, #0]
{
 80012c2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	f000 809e 	beq.w	8001406 <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 80012ca:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012cc:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 80014c4 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 80012d0:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d2:	4f77      	ldr	r7, [pc, #476]	; (80014b0 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 80012d4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80014c8 <HAL_GPIO_Init+0x20c>
 80012d8:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 80014cc <HAL_GPIO_Init+0x210>
 80012dc:	9000      	str	r0, [sp, #0]
 80012de:	e004      	b.n	80012ea <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 80012e0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	fa34 f203 	lsrs.w	r2, r4, r3
 80012e6:	f000 808e 	beq.w	8001406 <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 80012ea:	2201      	movs	r2, #1
 80012ec:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80012ee:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 80012f6:	d1f3      	bne.n	80012e0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80012f8:	684c      	ldr	r4, [r1, #4]
 80012fa:	2c12      	cmp	r4, #18
 80012fc:	f200 8086 	bhi.w	800140c <HAL_GPIO_Init+0x150>
 8001300:	2c12      	cmp	r4, #18
 8001302:	d80c      	bhi.n	800131e <HAL_GPIO_Init+0x62>
 8001304:	e8df f004 	tbb	[pc, r4]
 8001308:	0abcbf8a 	.word	0x0abcbf8a
 800130c:	0b0b0b0b 	.word	0x0b0b0b0b
 8001310:	0b0b0b0b 	.word	0x0b0b0b0b
 8001314:	0b0b0b0b 	.word	0x0b0b0b0b
 8001318:	b90b      	.short	0xb90b
 800131a:	b6          	.byte	0xb6
 800131b:	00          	.byte	0x00
 800131c:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800131e:	2dff      	cmp	r5, #255	; 0xff
 8001320:	f200 8083 	bhi.w	800142a <HAL_GPIO_Init+0x16e>
 8001324:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001328:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800132c:	240f      	movs	r4, #15
 800132e:	f8d9 2000 	ldr.w	r2, [r9]
 8001332:	fa04 fb0a 	lsl.w	fp, r4, sl
 8001336:	ea22 020b 	bic.w	r2, r2, fp
 800133a:	fa06 fa0a 	lsl.w	sl, r6, sl
 800133e:	ea42 020a 	orr.w	r2, r2, sl
 8001342:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001346:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800134a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800134e:	f000 808f 	beq.w	8001470 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001352:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001356:	f023 0203 	bic.w	r2, r3, #3
 800135a:	f04a 0a01 	orr.w	sl, sl, #1
 800135e:	f8cc a018 	str.w	sl, [ip, #24]
 8001362:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001366:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800136a:	f00a 0a01 	and.w	sl, sl, #1
 800136e:	f8cd a00c 	str.w	sl, [sp, #12]
 8001372:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001376:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800137a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001382:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001386:	fa04 f40a 	lsl.w	r4, r4, sl
 800138a:	ea2b 0004 	bic.w	r0, fp, r4
 800138e:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001390:	9c00      	ldr	r4, [sp, #0]
 8001392:	4848      	ldr	r0, [pc, #288]	; (80014b4 <HAL_GPIO_Init+0x1f8>)
 8001394:	4284      	cmp	r4, r0
 8001396:	d013      	beq.n	80013c0 <HAL_GPIO_Init+0x104>
 8001398:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800139c:	4284      	cmp	r4, r0
 800139e:	d07d      	beq.n	800149c <HAL_GPIO_Init+0x1e0>
 80013a0:	4845      	ldr	r0, [pc, #276]	; (80014b8 <HAL_GPIO_Init+0x1fc>)
 80013a2:	4284      	cmp	r4, r0
 80013a4:	d071      	beq.n	800148a <HAL_GPIO_Init+0x1ce>
 80013a6:	4845      	ldr	r0, [pc, #276]	; (80014bc <HAL_GPIO_Init+0x200>)
 80013a8:	4284      	cmp	r4, r0
 80013aa:	bf0c      	ite	eq
 80013ac:	f04f 0b03 	moveq.w	fp, #3
 80013b0:	f04f 0b04 	movne.w	fp, #4
 80013b4:	9801      	ldr	r0, [sp, #4]
 80013b6:	fa0b fa0a 	lsl.w	sl, fp, sl
 80013ba:	ea40 000a 	orr.w	r0, r0, sl
 80013be:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80013c0:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c2:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 80013c6:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	bf14      	ite	ne
 80013cc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ce:	43aa      	biceq	r2, r5
 80013d0:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80013d2:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d4:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80013d8:	bf14      	ite	ne
 80013da:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013dc:	43aa      	biceq	r2, r5
 80013de:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e0:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e6:	bf14      	ite	ne
 80013e8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ea:	43aa      	biceq	r2, r5
 80013ec:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ee:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f2:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	d039      	beq.n	800146a <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f6:	4315      	orrs	r5, r2
 80013f8:	60fd      	str	r5, [r7, #12]
 80013fa:	680c      	ldr	r4, [r1, #0]
	position++;
 80013fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	fa34 f203 	lsrs.w	r2, r4, r3
 8001402:	f47f af72 	bne.w	80012ea <HAL_GPIO_Init+0x2e>
  }
}
 8001406:	b005      	add	sp, #20
 8001408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800140c:	4544      	cmp	r4, r8
 800140e:	d005      	beq.n	800141c <HAL_GPIO_Init+0x160>
 8001410:	d913      	bls.n	800143a <HAL_GPIO_Init+0x17e>
 8001412:	4574      	cmp	r4, lr
 8001414:	d002      	beq.n	800141c <HAL_GPIO_Init+0x160>
 8001416:	482a      	ldr	r0, [pc, #168]	; (80014c0 <HAL_GPIO_Init+0x204>)
 8001418:	4284      	cmp	r4, r0
 800141a:	d180      	bne.n	800131e <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800141c:	688c      	ldr	r4, [r1, #8]
 800141e:	b9e4      	cbnz	r4, 800145a <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001420:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001422:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001426:	f67f af7d 	bls.w	8001324 <HAL_GPIO_Init+0x68>
 800142a:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800142c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001430:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001434:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001438:	e778      	b.n	800132c <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 800143a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80014d0 <HAL_GPIO_Init+0x214>
 800143e:	454c      	cmp	r4, r9
 8001440:	d0ec      	beq.n	800141c <HAL_GPIO_Init+0x160>
 8001442:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001446:	454c      	cmp	r4, r9
 8001448:	d0e8      	beq.n	800141c <HAL_GPIO_Init+0x160>
 800144a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800144e:	454c      	cmp	r4, r9
 8001450:	f47f af65 	bne.w	800131e <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001454:	688c      	ldr	r4, [r1, #8]
 8001456:	2c00      	cmp	r4, #0
 8001458:	d0e2      	beq.n	8001420 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 800145a:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800145c:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800145e:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8001462:	bf0c      	ite	eq
 8001464:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8001466:	6142      	strne	r2, [r0, #20]
 8001468:	e759      	b.n	800131e <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146a:	ea22 0505 	bic.w	r5, r2, r5
 800146e:	60fd      	str	r5, [r7, #12]
 8001470:	680c      	ldr	r4, [r1, #0]
 8001472:	e735      	b.n	80012e0 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001474:	68ce      	ldr	r6, [r1, #12]
 8001476:	360c      	adds	r6, #12
          break;
 8001478:	e751      	b.n	800131e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800147a:	68ce      	ldr	r6, [r1, #12]
 800147c:	3604      	adds	r6, #4
          break;
 800147e:	e74e      	b.n	800131e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001480:	68ce      	ldr	r6, [r1, #12]
 8001482:	3608      	adds	r6, #8
          break;
 8001484:	e74b      	b.n	800131e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001486:	68ce      	ldr	r6, [r1, #12]
          break;
 8001488:	e749      	b.n	800131e <HAL_GPIO_Init+0x62>
 800148a:	f04f 0b02 	mov.w	fp, #2
 800148e:	9801      	ldr	r0, [sp, #4]
 8001490:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001494:	ea40 000a 	orr.w	r0, r0, sl
 8001498:	9001      	str	r0, [sp, #4]
 800149a:	e791      	b.n	80013c0 <HAL_GPIO_Init+0x104>
 800149c:	f04f 0b01 	mov.w	fp, #1
 80014a0:	9801      	ldr	r0, [sp, #4]
 80014a2:	fa0b fa0a 	lsl.w	sl, fp, sl
 80014a6:	ea40 000a 	orr.w	r0, r0, sl
 80014aa:	9001      	str	r0, [sp, #4]
 80014ac:	e788      	b.n	80013c0 <HAL_GPIO_Init+0x104>
 80014ae:	bf00      	nop
 80014b0:	40010400 	.word	0x40010400
 80014b4:	40010800 	.word	0x40010800
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40011400 	.word	0x40011400
 80014c0:	10320000 	.word	0x10320000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10310000 	.word	0x10310000
 80014d0:	10120000 	.word	0x10120000

080014d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d4:	b902      	cbnz	r2, 80014d8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014d6:	0409      	lsls	r1, r1, #16
 80014d8:	6101      	str	r1, [r0, #16]
  }
}
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014dc:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014de:	ea01 0203 	and.w	r2, r1, r3
 80014e2:	ea21 0103 	bic.w	r1, r1, r3
 80014e6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80014ea:	6101      	str	r1, [r0, #16]
}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f0:	2800      	cmp	r0, #0
 80014f2:	f000 81c3 	beq.w	800187c <HAL_RCC_OscConfig+0x38c>
{
 80014f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fa:	6803      	ldr	r3, [r0, #0]
 80014fc:	4604      	mov	r4, r0
 80014fe:	07dd      	lsls	r5, r3, #31
{
 8001500:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001502:	d535      	bpl.n	8001570 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001504:	49a6      	ldr	r1, [pc, #664]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 8001506:	684a      	ldr	r2, [r1, #4]
 8001508:	f002 020c 	and.w	r2, r2, #12
 800150c:	2a04      	cmp	r2, #4
 800150e:	f000 80ef 	beq.w	80016f0 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001512:	684a      	ldr	r2, [r1, #4]
 8001514:	f002 020c 	and.w	r2, r2, #12
 8001518:	2a08      	cmp	r2, #8
 800151a:	f000 80e5 	beq.w	80016e8 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151e:	6863      	ldr	r3, [r4, #4]
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001524:	d010      	beq.n	8001548 <HAL_RCC_OscConfig+0x58>
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 810d 	beq.w	8001746 <HAL_RCC_OscConfig+0x256>
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	f000 818f 	beq.w	8001852 <HAL_RCC_OscConfig+0x362>
 8001534:	4b9a      	ldr	r3, [pc, #616]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e004      	b.n	8001552 <HAL_RCC_OscConfig+0x62>
 8001548:	4a95      	ldr	r2, [pc, #596]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fdd1 	bl	80010f8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4e92      	ldr	r6, [pc, #584]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8001558:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	e005      	b.n	8001568 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fdcc 	bl	80010f8 <HAL_GetTick>
 8001560:	1b40      	subs	r0, r0, r5
 8001562:	2864      	cmp	r0, #100	; 0x64
 8001564:	f200 80eb 	bhi.w	800173e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001568:	6833      	ldr	r3, [r6, #0]
 800156a:	039a      	lsls	r2, r3, #14
 800156c:	d5f6      	bpl.n	800155c <HAL_RCC_OscConfig+0x6c>
 800156e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001570:	079f      	lsls	r7, r3, #30
 8001572:	d528      	bpl.n	80015c6 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001574:	4a8a      	ldr	r2, [pc, #552]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 8001576:	6851      	ldr	r1, [r2, #4]
 8001578:	f011 0f0c 	tst.w	r1, #12
 800157c:	f000 808e 	beq.w	800169c <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001580:	6851      	ldr	r1, [r2, #4]
 8001582:	f001 010c 	and.w	r1, r1, #12
 8001586:	2908      	cmp	r1, #8
 8001588:	f000 8084 	beq.w	8001694 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158c:	6923      	ldr	r3, [r4, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8125 	beq.w	80017de <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	2201      	movs	r2, #1
 8001596:	4b83      	ldr	r3, [pc, #524]	; (80017a4 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	4e81      	ldr	r6, [pc, #516]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 800159a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800159c:	f7ff fdac 	bl	80010f8 <HAL_GetTick>
 80015a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	e005      	b.n	80015b0 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff fda8 	bl	80010f8 <HAL_GetTick>
 80015a8:	1b40      	subs	r0, r0, r5
 80015aa:	2802      	cmp	r0, #2
 80015ac:	f200 80c7 	bhi.w	800173e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	6833      	ldr	r3, [r6, #0]
 80015b2:	0798      	lsls	r0, r3, #30
 80015b4:	d5f6      	bpl.n	80015a4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	6833      	ldr	r3, [r6, #0]
 80015b8:	6962      	ldr	r2, [r4, #20]
 80015ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015c2:	6033      	str	r3, [r6, #0]
 80015c4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	071a      	lsls	r2, r3, #28
 80015c8:	d41f      	bmi.n	800160a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ca:	075d      	lsls	r5, r3, #29
 80015cc:	d541      	bpl.n	8001652 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b74      	ldr	r3, [pc, #464]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	00d0      	lsls	r0, r2, #3
 80015d4:	d57d      	bpl.n	80016d2 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80015d6:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b73      	ldr	r3, [pc, #460]	; (80017a8 <HAL_RCC_OscConfig+0x2b8>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	05d1      	lsls	r1, r2, #23
 80015de:	f140 809d 	bpl.w	800171c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e2:	68e3      	ldr	r3, [r4, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	f000 810b 	beq.w	8001800 <HAL_RCC_OscConfig+0x310>
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80c5 	beq.w	800177a <HAL_RCC_OscConfig+0x28a>
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	4b6b      	ldr	r3, [pc, #428]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 80015f4:	6a1a      	ldr	r2, [r3, #32]
 80015f6:	f000 8139 	beq.w	800186c <HAL_RCC_OscConfig+0x37c>
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	621a      	str	r2, [r3, #32]
 8001600:	6a1a      	ldr	r2, [r3, #32]
 8001602:	f022 0204 	bic.w	r2, r2, #4
 8001606:	621a      	str	r2, [r3, #32]
 8001608:	e0ff      	b.n	800180a <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160a:	69a3      	ldr	r3, [r4, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d050      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8001610:	2201      	movs	r2, #1
 8001612:	4b66      	ldr	r3, [pc, #408]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001614:	4e62      	ldr	r6, [pc, #392]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8001616:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001618:	f7ff fd6e 	bl	80010f8 <HAL_GetTick>
 800161c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e005      	b.n	800162c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fd6a 	bl	80010f8 <HAL_GetTick>
 8001624:	1b40      	subs	r0, r0, r5
 8001626:	2802      	cmp	r0, #2
 8001628:	f200 8089 	bhi.w	800173e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800162e:	079b      	lsls	r3, r3, #30
 8001630:	d5f6      	bpl.n	8001620 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001632:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <HAL_RCC_OscConfig+0x2c0>)
 8001634:	4a5f      	ldr	r2, [pc, #380]	; (80017b4 <HAL_RCC_OscConfig+0x2c4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	0a5b      	lsrs	r3, r3, #9
 800163e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001640:	bf00      	nop
  }
  while (Delay --);
 8001642:	9b01      	ldr	r3, [sp, #4]
 8001644:	1e5a      	subs	r2, r3, #1
 8001646:	9201      	str	r2, [sp, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f9      	bne.n	8001640 <HAL_RCC_OscConfig+0x150>
 800164c:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164e:	075d      	lsls	r5, r3, #29
 8001650:	d4bd      	bmi.n	80015ce <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	69e0      	ldr	r0, [r4, #28]
 8001654:	b1d0      	cbz	r0, 800168c <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001656:	4d52      	ldr	r5, [pc, #328]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 8001658:	686a      	ldr	r2, [r5, #4]
 800165a:	f002 020c 	and.w	r2, r2, #12
 800165e:	2a08      	cmp	r2, #8
 8001660:	f000 80e6 	beq.w	8001830 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001664:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	4a53      	ldr	r2, [pc, #332]	; (80017b8 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166c:	f000 8108 	beq.w	8001880 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8001670:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001672:	f7ff fd41 	bl	80010f8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001678:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	e004      	b.n	8001686 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fd3c 	bl	80010f8 <HAL_GetTick>
 8001680:	1b40      	subs	r0, r0, r5
 8001682:	2802      	cmp	r0, #2
 8001684:	d85b      	bhi.n	800173e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	019b      	lsls	r3, r3, #6
 800168a:	d4f7      	bmi.n	800167c <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 800168c:	2000      	movs	r0, #0
}
 800168e:	b002      	add	sp, #8
 8001690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001694:	6852      	ldr	r2, [r2, #4]
 8001696:	03d6      	lsls	r6, r2, #15
 8001698:	f53f af78 	bmi.w	800158c <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169c:	4a40      	ldr	r2, [pc, #256]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	0795      	lsls	r5, r2, #30
 80016a2:	d52f      	bpl.n	8001704 <HAL_RCC_OscConfig+0x214>
 80016a4:	6922      	ldr	r2, [r4, #16]
 80016a6:	2a01      	cmp	r2, #1
 80016a8:	d02c      	beq.n	8001704 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
}
 80016ac:	b002      	add	sp, #8
 80016ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4a3e      	ldr	r2, [pc, #248]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4e3a      	ldr	r6, [pc, #232]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 80016b6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80016b8:	f7ff fd1e 	bl	80010f8 <HAL_GetTick>
 80016bc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	e004      	b.n	80016ca <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fd1a 	bl	80010f8 <HAL_GetTick>
 80016c4:	1b40      	subs	r0, r0, r5
 80016c6:	2802      	cmp	r0, #2
 80016c8:	d839      	bhi.n	800173e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80016cc:	079f      	lsls	r7, r3, #30
 80016ce:	d4f7      	bmi.n	80016c0 <HAL_RCC_OscConfig+0x1d0>
 80016d0:	e7bc      	b.n	800164c <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80016d4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016da:	61da      	str	r2, [r3, #28]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80016e6:	e777      	b.n	80015d8 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e8:	684a      	ldr	r2, [r1, #4]
 80016ea:	03d0      	lsls	r0, r2, #15
 80016ec:	f57f af17 	bpl.w	800151e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	0391      	lsls	r1, r2, #14
 80016f6:	f57f af3b 	bpl.w	8001570 <HAL_RCC_OscConfig+0x80>
 80016fa:	6862      	ldr	r2, [r4, #4]
 80016fc:	2a00      	cmp	r2, #0
 80016fe:	f47f af37 	bne.w	8001570 <HAL_RCC_OscConfig+0x80>
 8001702:	e7d2      	b.n	80016aa <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4926      	ldr	r1, [pc, #152]	; (80017a0 <HAL_RCC_OscConfig+0x2b0>)
 8001706:	6960      	ldr	r0, [r4, #20]
 8001708:	680a      	ldr	r2, [r1, #0]
 800170a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800170e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001712:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	071a      	lsls	r2, r3, #28
 8001716:	f57f af58 	bpl.w	80015ca <HAL_RCC_OscConfig+0xda>
 800171a:	e776      	b.n	800160a <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001724:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001726:	f7ff fce7 	bl	80010f8 <HAL_GetTick>
 800172a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	05da      	lsls	r2, r3, #23
 8001730:	f53f af57 	bmi.w	80015e2 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001734:	f7ff fce0 	bl	80010f8 <HAL_GetTick>
 8001738:	1b80      	subs	r0, r0, r6
 800173a:	2864      	cmp	r0, #100	; 0x64
 800173c:	d9f6      	bls.n	800172c <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
}
 8001740:	b002      	add	sp, #8
 8001742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001746:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800174a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800174e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001750:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800175e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001760:	f7ff fcca 	bl	80010f8 <HAL_GetTick>
 8001764:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e004      	b.n	8001772 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fcc6 	bl	80010f8 <HAL_GetTick>
 800176c:	1b40      	subs	r0, r0, r5
 800176e:	2864      	cmp	r0, #100	; 0x64
 8001770:	d8e5      	bhi.n	800173e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	6833      	ldr	r3, [r6, #0]
 8001774:	039b      	lsls	r3, r3, #14
 8001776:	d4f7      	bmi.n	8001768 <HAL_RCC_OscConfig+0x278>
 8001778:	e6f9      	b.n	800156e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800177e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001782:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001786:	f022 0201 	bic.w	r2, r2, #1
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001792:	f022 0204 	bic.w	r2, r2, #4
 8001796:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8001798:	f7ff fcae 	bl	80010f8 <HAL_GetTick>
 800179c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	e012      	b.n	80017c6 <HAL_RCC_OscConfig+0x2d6>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	42420000 	.word	0x42420000
 80017a8:	40007000 	.word	0x40007000
 80017ac:	42420480 	.word	0x42420480
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	10624dd3 	.word	0x10624dd3
 80017b8:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff fc9c 	bl	80010f8 <HAL_GetTick>
 80017c0:	1b80      	subs	r0, r0, r6
 80017c2:	4540      	cmp	r0, r8
 80017c4:	d8bb      	bhi.n	800173e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	0798      	lsls	r0, r3, #30
 80017ca:	d4f7      	bmi.n	80017bc <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 80017cc:	2d00      	cmp	r5, #0
 80017ce:	f43f af40 	beq.w	8001652 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d2:	4a44      	ldr	r2, [pc, #272]	; (80018e4 <HAL_RCC_OscConfig+0x3f4>)
 80017d4:	69d3      	ldr	r3, [r2, #28]
 80017d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	e739      	b.n	8001652 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80017de:	4a42      	ldr	r2, [pc, #264]	; (80018e8 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e0:	4e40      	ldr	r6, [pc, #256]	; (80018e4 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 80017e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017e4:	f7ff fc88 	bl	80010f8 <HAL_GetTick>
 80017e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	e004      	b.n	80017f6 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff fc84 	bl	80010f8 <HAL_GetTick>
 80017f0:	1b40      	subs	r0, r0, r5
 80017f2:	2802      	cmp	r0, #2
 80017f4:	d8a3      	bhi.n	800173e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	6833      	ldr	r3, [r6, #0]
 80017f8:	0799      	lsls	r1, r3, #30
 80017fa:	d4f7      	bmi.n	80017ec <HAL_RCC_OscConfig+0x2fc>
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	e6e2      	b.n	80015c6 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	4a38      	ldr	r2, [pc, #224]	; (80018e4 <HAL_RCC_OscConfig+0x3f4>)
 8001802:	6a13      	ldr	r3, [r2, #32]
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800180a:	f7ff fc75 	bl	80010f8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001812:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001814:	4f33      	ldr	r7, [pc, #204]	; (80018e4 <HAL_RCC_OscConfig+0x3f4>)
 8001816:	e004      	b.n	8001822 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff fc6e 	bl	80010f8 <HAL_GetTick>
 800181c:	1b80      	subs	r0, r0, r6
 800181e:	4540      	cmp	r0, r8
 8001820:	d88d      	bhi.n	800173e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	079b      	lsls	r3, r3, #30
 8001826:	d5f7      	bpl.n	8001818 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8001828:	2d00      	cmp	r5, #0
 800182a:	f43f af12 	beq.w	8001652 <HAL_RCC_OscConfig+0x162>
 800182e:	e7d0      	b.n	80017d2 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001830:	2801      	cmp	r0, #1
 8001832:	f43f af2c 	beq.w	800168e <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8001836:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001838:	6a22      	ldr	r2, [r4, #32]
 800183a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800183e:	4291      	cmp	r1, r2
 8001840:	f47f af33 	bne.w	80016aa <HAL_RCC_OscConfig+0x1ba>
 8001844:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001846:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800184a:	1a18      	subs	r0, r3, r0
 800184c:	bf18      	it	ne
 800184e:	2001      	movne	r0, #1
 8001850:	e71d      	b.n	800168e <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001856:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e672      	b.n	8001552 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186c:	f042 0204 	orr.w	r2, r2, #4
 8001870:	621a      	str	r2, [r3, #32]
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	621a      	str	r2, [r3, #32]
 800187a:	e7c6      	b.n	800180a <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 800187c:	2001      	movs	r0, #1
}
 800187e:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8001880:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001882:	f7ff fc39 	bl	80010f8 <HAL_GetTick>
 8001886:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001888:	e005      	b.n	8001896 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fc35 	bl	80010f8 <HAL_GetTick>
 800188e:	1b80      	subs	r0, r0, r6
 8001890:	2802      	cmp	r0, #2
 8001892:	f63f af54 	bhi.w	800173e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001896:	682b      	ldr	r3, [r5, #0]
 8001898:	0199      	lsls	r1, r3, #6
 800189a:	d4f6      	bmi.n	800188a <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800189c:	6a23      	ldr	r3, [r4, #32]
 800189e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018a4:	686a      	ldr	r2, [r5, #4]
 80018a6:	68a1      	ldr	r1, [r4, #8]
 80018a8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80018ac:	430a      	orrs	r2, r1
 80018ae:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018b0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b2:	4d0c      	ldr	r5, [pc, #48]	; (80018e4 <HAL_RCC_OscConfig+0x3f4>)
 80018b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018b6:	686a      	ldr	r2, [r5, #4]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80018be:	490b      	ldr	r1, [pc, #44]	; (80018ec <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c0:	4313      	orrs	r3, r2
 80018c2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018c4:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 80018c6:	f7ff fc17 	bl	80010f8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ca:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80018cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ce:	e005      	b.n	80018dc <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff fc12 	bl	80010f8 <HAL_GetTick>
 80018d4:	1b40      	subs	r0, r0, r5
 80018d6:	2802      	cmp	r0, #2
 80018d8:	f63f af31 	bhi.w	800173e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	019a      	lsls	r2, r3, #6
 80018e0:	d5f6      	bpl.n	80018d0 <HAL_RCC_OscConfig+0x3e0>
 80018e2:	e6d3      	b.n	800168c <HAL_RCC_OscConfig+0x19c>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	42420000 	.word	0x42420000
 80018ec:	42420060 	.word	0x42420060

080018f0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80018f0:	2800      	cmp	r0, #0
 80018f2:	f000 80af 	beq.w	8001a54 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f6:	4a5d      	ldr	r2, [pc, #372]	; (8001a6c <HAL_RCC_ClockConfig+0x17c>)
{
 80018f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	6813      	ldr	r3, [r2, #0]
 80018fe:	4604      	mov	r4, r0
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	428b      	cmp	r3, r1
 8001906:	460d      	mov	r5, r1
{
 8001908:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800190a:	d20d      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190c:	6813      	ldr	r3, [r2, #0]
 800190e:	f023 0307 	bic.w	r3, r3, #7
 8001912:	430b      	orrs	r3, r1
 8001914:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	6813      	ldr	r3, [r2, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	428b      	cmp	r3, r1
 800191e:	d003      	beq.n	8001928 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8001920:	2001      	movs	r0, #1
}
 8001922:	b006      	add	sp, #24
 8001924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	0798      	lsls	r0, r3, #30
 800192c:	d514      	bpl.n	8001958 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192e:	0759      	lsls	r1, r3, #29
 8001930:	d504      	bpl.n	800193c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001932:	494f      	ldr	r1, [pc, #316]	; (8001a70 <HAL_RCC_ClockConfig+0x180>)
 8001934:	684a      	ldr	r2, [r1, #4]
 8001936:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800193a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193c:	071a      	lsls	r2, r3, #28
 800193e:	d504      	bpl.n	800194a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	494b      	ldr	r1, [pc, #300]	; (8001a70 <HAL_RCC_ClockConfig+0x180>)
 8001942:	684a      	ldr	r2, [r1, #4]
 8001944:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001948:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194a:	4949      	ldr	r1, [pc, #292]	; (8001a70 <HAL_RCC_ClockConfig+0x180>)
 800194c:	68a0      	ldr	r0, [r4, #8]
 800194e:	684a      	ldr	r2, [r1, #4]
 8001950:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001954:	4302      	orrs	r2, r0
 8001956:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001958:	07db      	lsls	r3, r3, #31
 800195a:	d520      	bpl.n	800199e <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001960:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001964:	d078      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001966:	2a02      	cmp	r2, #2
 8001968:	d071      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	0798      	lsls	r0, r3, #30
 800196c:	d5d8      	bpl.n	8001920 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196e:	4e40      	ldr	r6, [pc, #256]	; (8001a70 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001974:	6873      	ldr	r3, [r6, #4]
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	4313      	orrs	r3, r2
 800197c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800197e:	f7ff fbbb 	bl	80010f8 <HAL_GetTick>
 8001982:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001984:	e004      	b.n	8001990 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001986:	f7ff fbb7 	bl	80010f8 <HAL_GetTick>
 800198a:	1bc0      	subs	r0, r0, r7
 800198c:	4540      	cmp	r0, r8
 800198e:	d866      	bhi.n	8001a5e <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001990:	6873      	ldr	r3, [r6, #4]
 8001992:	6862      	ldr	r2, [r4, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800199c:	d1f3      	bne.n	8001986 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800199e:	4a33      	ldr	r2, [pc, #204]	; (8001a6c <HAL_RCC_ClockConfig+0x17c>)
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	42ab      	cmp	r3, r5
 80019a8:	d909      	bls.n	80019be <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	6813      	ldr	r3, [r2, #0]
 80019ac:	f023 0307 	bic.w	r3, r3, #7
 80019b0:	432b      	orrs	r3, r5
 80019b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b4:	6813      	ldr	r3, [r2, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	42ab      	cmp	r3, r5
 80019bc:	d1b0      	bne.n	8001920 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	0759      	lsls	r1, r3, #29
 80019c2:	d506      	bpl.n	80019d2 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	492a      	ldr	r1, [pc, #168]	; (8001a70 <HAL_RCC_ClockConfig+0x180>)
 80019c6:	68e0      	ldr	r0, [r4, #12]
 80019c8:	684a      	ldr	r2, [r1, #4]
 80019ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019ce:	4302      	orrs	r2, r0
 80019d0:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	071a      	lsls	r2, r3, #28
 80019d4:	d507      	bpl.n	80019e6 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d6:	4a26      	ldr	r2, [pc, #152]	; (8001a70 <HAL_RCC_ClockConfig+0x180>)
 80019d8:	6921      	ldr	r1, [r4, #16]
 80019da:	6853      	ldr	r3, [r2, #4]
 80019dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019e4:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019e6:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_RCC_ClockConfig+0x184>)
 80019ec:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019ee:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f4:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80019f8:	491d      	ldr	r1, [pc, #116]	; (8001a70 <HAL_RCC_ClockConfig+0x180>)
 80019fa:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019fc:	f002 030c 	and.w	r3, r2, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d011      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a06:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_RCC_ClockConfig+0x180>)
 8001a08:	481c      	ldr	r0, [pc, #112]	; (8001a7c <HAL_RCC_ClockConfig+0x18c>)
 8001a0a:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8001a0c:	491c      	ldr	r1, [pc, #112]	; (8001a80 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a0e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001a12:	5c80      	ldrb	r0, [r0, r2]
 8001a14:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_RCC_ClockConfig+0x194>)
 8001a16:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8001a18:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001a1c:	f7ff fb2a 	bl	8001074 <HAL_InitTick>
  return HAL_OK;
 8001a20:	2000      	movs	r0, #0
}
 8001a22:	b006      	add	sp, #24
 8001a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a28:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001a2c:	4423      	add	r3, r4
 8001a2e:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a32:	03d3      	lsls	r3, r2, #15
 8001a34:	d515      	bpl.n	8001a62 <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a36:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a3a:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a3e:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a42:	4422      	add	r2, r4
 8001a44:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a4c:	e7db      	b.n	8001a06 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	019e      	lsls	r6, r3, #6
 8001a50:	d48d      	bmi.n	800196e <HAL_RCC_ClockConfig+0x7e>
 8001a52:	e765      	b.n	8001920 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001a54:	2001      	movs	r0, #1
}
 8001a56:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a58:	039f      	lsls	r7, r3, #14
 8001a5a:	d488      	bmi.n	800196e <HAL_RCC_ClockConfig+0x7e>
 8001a5c:	e760      	b.n	8001920 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8001a5e:	2003      	movs	r0, #3
 8001a60:	e75f      	b.n	8001922 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x198>)
 8001a64:	fb03 f300 	mul.w	r3, r3, r0
 8001a68:	e7cd      	b.n	8001a06 <HAL_RCC_ClockConfig+0x116>
 8001a6a:	bf00      	nop
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	080028e8 	.word	0x080028e8
 8001a78:	007a1200 	.word	0x007a1200
 8001a7c:	080028d0 	.word	0x080028d0
 8001a80:	20000014 	.word	0x20000014
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	003d0900 	.word	0x003d0900

08001a8c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a8e:	4905      	ldr	r1, [pc, #20]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a90:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a94:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a98:	5ccb      	ldrb	r3, [r1, r3]
 8001a9a:	6810      	ldr	r0, [r2, #0]
}
 8001a9c:	40d8      	lsrs	r0, r3
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	080028e0 	.word	0x080028e0
 8001aa8:	2000000c 	.word	0x2000000c

08001aac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001aae:	4905      	ldr	r1, [pc, #20]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	6810      	ldr	r0, [r2, #0]
}
 8001abc:	40d8      	lsrs	r0, r3
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	080028e0 	.word	0x080028e0
 8001ac8:	2000000c 	.word	0x2000000c

08001acc <SPI_WaitFlagStateUntilTimeout.constprop.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	4616      	mov	r6, r2
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	460c      	mov	r4, r1
 8001ad8:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ada:	f7ff fb0d 	bl	80010f8 <HAL_GetTick>
 8001ade:	4435      	add	r5, r6
 8001ae0:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001ae2:	f7ff fb09 	bl	80010f8 <HAL_GetTick>
 8001ae6:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xbc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001af0:	fb05 f303 	mul.w	r3, r5, r3
 8001af4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001af6:	1c73      	adds	r3, r6, #1
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	d107      	bne.n	8001b0c <SPI_WaitFlagStateUntilTimeout.constprop.1+0x40>
 8001afc:	688b      	ldr	r3, [r1, #8]
 8001afe:	ea34 0303 	bics.w	r3, r4, r3
 8001b02:	d0fb      	beq.n	8001afc <SPI_WaitFlagStateUntilTimeout.constprop.1+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8001b04:	2000      	movs	r0, #0
}
 8001b06:	b002      	add	sp, #8
 8001b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b0c:	688b      	ldr	r3, [r1, #8]
 8001b0e:	ea34 0303 	bics.w	r3, r4, r3
 8001b12:	d1f7      	bne.n	8001b04 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b14:	f7ff faf0 	bl	80010f8 <HAL_GetTick>
 8001b18:	eba0 0008 	sub.w	r0, r0, r8
 8001b1c:	42a8      	cmp	r0, r5
 8001b1e:	d208      	bcs.n	8001b32 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x66>
      if(count == 0U)
 8001b20:	9a01      	ldr	r2, [sp, #4]
      count--;
 8001b22:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001b24:	2a00      	cmp	r2, #0
      count--;
 8001b26:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8001b2a:	bf08      	it	eq
 8001b2c:	2500      	moveq	r5, #0
      count--;
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	e7e1      	b.n	8001af6 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b32:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b36:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b38:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b40:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b42:	d014      	beq.n	8001b6e <SPI_WaitFlagStateUntilTimeout.constprop.1+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b46:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001b4a:	d007      	beq.n	8001b5c <SPI_WaitFlagStateUntilTimeout.constprop.1+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8001b4c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8001b52:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001b56:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 8001b5a:	e7d4      	b.n	8001b06 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3a>
          SPI_RESET_CRC(hspi);
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e7ee      	b.n	8001b4c <SPI_WaitFlagStateUntilTimeout.constprop.1+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b74:	d002      	beq.n	8001b7c <SPI_WaitFlagStateUntilTimeout.constprop.1+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b76:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001b7a:	d1e3      	bne.n	8001b44 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x78>
          __HAL_SPI_DISABLE(hspi);
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e7de      	b.n	8001b44 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x78>
 8001b86:	bf00      	nop
 8001b88:	2000000c 	.word	0x2000000c

08001b8c <HAL_SPI_Init>:
  if (hspi == NULL)
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d055      	beq.n	8001c3c <HAL_SPI_Init+0xb0>
{
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b94:	4604      	mov	r4, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d041      	beq.n	8001c1e <HAL_SPI_Init+0x92>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b9c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba0:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ba2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ba8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8001bac:	2900      	cmp	r1, #0
 8001bae:	d03c      	beq.n	8001c2a <HAL_SPI_Init+0x9e>
 8001bb0:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bb2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb6:	2702      	movs	r7, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8001bb8:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bba:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bbc:	68e1      	ldr	r1, [r4, #12]
 8001bbe:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001bc2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001bc6:	4303      	orrs	r3, r0
 8001bc8:	6920      	ldr	r0, [r4, #16]
 8001bca:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8001bce:	4038      	ands	r0, r7
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6961      	ldr	r1, [r4, #20]
 8001bd4:	4303      	orrs	r3, r0
 8001bd6:	69a0      	ldr	r0, [r4, #24]
 8001bd8:	4031      	ands	r1, r6
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8001be0:	430b      	orrs	r3, r1
 8001be2:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001be4:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001be8:	6a27      	ldr	r7, [r4, #32]
 8001bea:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8001bf4:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bf6:	433b      	orrs	r3, r7
 8001bf8:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8001bfa:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001bfc:	0c00      	lsrs	r0, r0, #16
 8001bfe:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8001c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c06:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c08:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c0a:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c0c:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 8001c0e:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c14:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c16:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c18:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8001c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c1e:	6842      	ldr	r2, [r0, #4]
 8001c20:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001c24:	d0bc      	beq.n	8001ba0 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c26:	61c3      	str	r3, [r0, #28]
 8001c28:	e7ba      	b.n	8001ba0 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8001c2a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7fe fc42 	bl	80004b8 <HAL_SPI_MspInit>
 8001c34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c3a:	e7ba      	b.n	8001bb2 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8001c3c:	2001      	movs	r0, #1
}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_SPI_Transmit>:
{
 8001c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c44:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001c46:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 8001c4a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8001c4c:	2801      	cmp	r0, #1
 8001c4e:	d071      	beq.n	8001d34 <HAL_SPI_Transmit+0xf4>
 8001c50:	461d      	mov	r5, r3
 8001c52:	2301      	movs	r3, #1
 8001c54:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001c58:	4688      	mov	r8, r1
 8001c5a:	4617      	mov	r7, r2
 8001c5c:	f7ff fa4c 	bl	80010f8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c60:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001c64:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	b2d8      	uxtb	r0, r3
 8001c6a:	d009      	beq.n	8001c80 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8001c6c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001c6e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001c70:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001c72:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c76:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001c7a:	b002      	add	sp, #8
 8001c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8001c80:	f1b8 0f00 	cmp.w	r8, #0
 8001c84:	d0f3      	beq.n	8001c6e <HAL_SPI_Transmit+0x2e>
 8001c86:	2f00      	cmp	r7, #0
 8001c88:	d0f1      	beq.n	8001c6e <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c8a:	2203      	movs	r2, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c8c:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c8e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c92:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8001c94:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c96:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c9a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001c9c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ca0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ca2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ca4:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ca6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
 8001caa:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001cac:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 8001cae:	4603      	mov	r3, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cb0:	d071      	beq.n	8001d96 <HAL_SPI_Transmit+0x156>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cb2:	6802      	ldr	r2, [r0, #0]
 8001cb4:	0652      	lsls	r2, r2, #25
 8001cb6:	d403      	bmi.n	8001cc0 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8001cb8:	6802      	ldr	r2, [r0, #0]
 8001cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cbe:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cc0:	68e2      	ldr	r2, [r4, #12]
 8001cc2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001cc6:	d039      	beq.n	8001d3c <HAL_SPI_Transmit+0xfc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cc8:	6863      	ldr	r3, [r4, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8085 	beq.w	8001dda <HAL_SPI_Transmit+0x19a>
 8001cd0:	2f01      	cmp	r7, #1
 8001cd2:	f000 8082 	beq.w	8001dda <HAL_SPI_Transmit+0x19a>
    while (hspi->TxXferCount > 0U)
 8001cd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b1a3      	cbz	r3, 8001d06 <HAL_SPI_Transmit+0xc6>
 8001cdc:	1c68      	adds	r0, r5, #1
 8001cde:	d171      	bne.n	8001dc4 <HAL_SPI_Transmit+0x184>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	0791      	lsls	r1, r2, #30
 8001ce6:	f140 8083 	bpl.w	8001df0 <HAL_SPI_Transmit+0x1b0>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001cf0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001cf4:	3a01      	subs	r2, #1
 8001cf6:	b292      	uxth	r2, r2
 8001cf8:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001cfa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cfc:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 8001cfe:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d00:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d1ec      	bne.n	8001ce0 <HAL_SPI_Transmit+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d06:	4633      	mov	r3, r6
 8001d08:	462a      	mov	r2, r5
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff fedd 	bl	8001acc <SPI_WaitFlagStateUntilTimeout.constprop.1>
 8001d12:	2800      	cmp	r0, #0
 8001d14:	f040 808f 	bne.w	8001e36 <HAL_SPI_Transmit+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d18:	68a3      	ldr	r3, [r4, #8]
 8001d1a:	b933      	cbnz	r3, 8001d2a <HAL_SPI_Transmit+0xea>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d1c:	6822      	ldr	r2, [r4, #0]
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	68d3      	ldr	r3, [r2, #12]
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	6893      	ldr	r3, [r2, #8]
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001d2c:	3800      	subs	r0, #0
 8001d2e:	bf18      	it	ne
 8001d30:	2001      	movne	r0, #1
error:
 8001d32:	e79c      	b.n	8001c6e <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8001d34:	2002      	movs	r0, #2
}
 8001d36:	b002      	add	sp, #8
 8001d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d3c:	6862      	ldr	r2, [r4, #4]
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	d176      	bne.n	8001e30 <HAL_SPI_Transmit+0x1f0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d42:	4641      	mov	r1, r8
 8001d44:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001d48:	60c2      	str	r2, [r0, #12]
      hspi->TxXferCount--;
 8001d4a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d4c:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001d4e:	3a01      	subs	r2, #1
 8001d50:	b292      	uxth	r2, r2
 8001d52:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001d54:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001d56:	b292      	uxth	r2, r2
 8001d58:	2a00      	cmp	r2, #0
 8001d5a:	d0d4      	beq.n	8001d06 <HAL_SPI_Transmit+0xc6>
 8001d5c:	1c6a      	adds	r2, r5, #1
 8001d5e:	d15e      	bne.n	8001e1e <HAL_SPI_Transmit+0x1de>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d60:	6883      	ldr	r3, [r0, #8]
 8001d62:	079f      	lsls	r7, r3, #30
 8001d64:	d50f      	bpl.n	8001d86 <HAL_SPI_Transmit+0x146>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d68:	f832 3b02 	ldrh.w	r3, [r2], #2
 8001d6c:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8001d6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d70:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001d78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0c2      	beq.n	8001d06 <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d80:	6883      	ldr	r3, [r0, #8]
 8001d82:	079f      	lsls	r7, r3, #30
 8001d84:	d4ef      	bmi.n	8001d66 <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d86:	f7ff f9b7 	bl	80010f8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8001d8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0b9      	beq.n	8001d06 <HAL_SPI_Transmit+0xc6>
 8001d92:	6820      	ldr	r0, [r4, #0]
 8001d94:	e7e4      	b.n	8001d60 <HAL_SPI_Transmit+0x120>
    __HAL_SPI_DISABLE(hspi);
 8001d96:	6802      	ldr	r2, [r0, #0]
 8001d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9c:	6002      	str	r2, [r0, #0]
    SPI_1LINE_TX(hspi);
 8001d9e:	6802      	ldr	r2, [r0, #0]
 8001da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da4:	6002      	str	r2, [r0, #0]
 8001da6:	e784      	b.n	8001cb2 <HAL_SPI_Transmit+0x72>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001da8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001dae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001db0:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001db6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8001db8:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dba:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001dbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0a0      	beq.n	8001d06 <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	0792      	lsls	r2, r2, #30
 8001dca:	d4ed      	bmi.n	8001da8 <HAL_SPI_Transmit+0x168>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dcc:	f7ff f994 	bl	80010f8 <HAL_GetTick>
 8001dd0:	1b80      	subs	r0, r0, r6
 8001dd2:	42a8      	cmp	r0, r5
 8001dd4:	d3f2      	bcc.n	8001dbc <HAL_SPI_Transmit+0x17c>
          errorcode = HAL_TIMEOUT;
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	e749      	b.n	8001c6e <HAL_SPI_Transmit+0x2e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dda:	f898 3000 	ldrb.w	r3, [r8]
 8001dde:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8001de0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001de2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001de8:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8001dea:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dec:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001dee:	e772      	b.n	8001cd6 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001df0:	f7ff f982 	bl	80010f8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8001df4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f47f af71 	bne.w	8001ce0 <HAL_SPI_Transmit+0xa0>
 8001dfe:	e782      	b.n	8001d06 <HAL_SPI_Transmit+0xc6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e02:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001e06:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8001e08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0a:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f43f af75 	beq.w	8001d06 <HAL_SPI_Transmit+0xc6>
 8001e1c:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	0791      	lsls	r1, r2, #30
 8001e22:	d4ed      	bmi.n	8001e00 <HAL_SPI_Transmit+0x1c0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e24:	f7ff f968 	bl	80010f8 <HAL_GetTick>
 8001e28:	1b80      	subs	r0, r0, r6
 8001e2a:	42a8      	cmp	r0, r5
 8001e2c:	d3f1      	bcc.n	8001e12 <HAL_SPI_Transmit+0x1d2>
 8001e2e:	e7d2      	b.n	8001dd6 <HAL_SPI_Transmit+0x196>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e30:	2f01      	cmp	r7, #1
 8001e32:	d18f      	bne.n	8001d54 <HAL_SPI_Transmit+0x114>
 8001e34:	e785      	b.n	8001d42 <HAL_SPI_Transmit+0x102>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e36:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e3e:	6562      	str	r2, [r4, #84]	; 0x54
 8001e40:	e76a      	b.n	8001d18 <HAL_SPI_Transmit+0xd8>
 8001e42:	bf00      	nop

08001e44 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d05d      	beq.n	8001f04 <HAL_TIM_Base_Init+0xc0>
{
 8001e48:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e4e:	4604      	mov	r4, r0
 8001e50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d03c      	beq.n	8001ed2 <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e5a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e5c:	492a      	ldr	r1, [pc, #168]	; (8001f08 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e62:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8001e64:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e66:	d039      	beq.n	8001edc <HAL_TIM_Base_Init+0x98>
 8001e68:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001e6c:	d028      	beq.n	8001ec0 <HAL_TIM_Base_Init+0x7c>
 8001e6e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8001e72:	428a      	cmp	r2, r1
 8001e74:	d024      	beq.n	8001ec0 <HAL_TIM_Base_Init+0x7c>
 8001e76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001e7a:	428a      	cmp	r2, r1
 8001e7c:	d020      	beq.n	8001ec0 <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e7e:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e80:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e82:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e88:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001e8a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e8c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001e8e:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e90:	2301      	movs	r3, #1
 8001e92:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e94:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001e9c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001ea0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001ea4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001eb0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001eb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ebc:	2000      	movs	r0, #0
}
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8001ec0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ec6:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	e7d5      	b.n	8001e7e <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 8001ed2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ed6:	f7fe fb23 	bl	8000520 <HAL_TIM_Base_MspInit>
 8001eda:	e7bd      	b.n	8001e58 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8001edc:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ee2:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ee4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eea:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eec:	69a1      	ldr	r1, [r4, #24]
 8001eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ef2:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001ef4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef6:	68e3      	ldr	r3, [r4, #12]
 8001ef8:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001efa:	6863      	ldr	r3, [r4, #4]
 8001efc:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001efe:	6963      	ldr	r3, [r4, #20]
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	e7c5      	b.n	8001e90 <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 8001f04:	2001      	movs	r0, #1
}
 8001f06:	4770      	bx	lr
 8001f08:	40012c00 	.word	0x40012c00

08001f0c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001f0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d11f      	bne.n	8001f54 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f14:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f16:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f18:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f1c:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1e:	490f      	ldr	r1, [pc, #60]	; (8001f5c <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f20:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f24:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f26:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f28:	d009      	beq.n	8001f3e <HAL_TIM_Base_Start_IT+0x32>
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d006      	beq.n	8001f3e <HAL_TIM_Base_Start_IT+0x32>
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_TIM_Base_Start_IT+0x54>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_Base_Start_IT+0x32>
 8001f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d104      	bne.n	8001f48 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f44:	2a06      	cmp	r2, #6
 8001f46:	d007      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8001f48:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001f4a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	4770      	bx	lr
    return HAL_ERROR;
 8001f54:	2001      	movs	r0, #1
 8001f56:	4770      	bx	lr
  return HAL_OK;
 8001f58:	2000      	movs	r0, #0
}
 8001f5a:	4770      	bx	lr
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40000400 	.word	0x40000400

08001f64 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d074      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0xf2>
{
 8001f6c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6e:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8001f70:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 8001f72:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8001f74:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f7c:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f7e:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f80:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8001f84:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8001f88:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8001f8a:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f8c:	d065      	beq.n	800205a <HAL_TIM_ConfigClockSource+0xf6>
 8001f8e:	d831      	bhi.n	8001ff4 <HAL_TIM_ConfigClockSource+0x90>
 8001f90:	2b40      	cmp	r3, #64	; 0x40
 8001f92:	d048      	beq.n	8002026 <HAL_TIM_ConfigClockSource+0xc2>
 8001f94:	d921      	bls.n	8001fda <HAL_TIM_ConfigClockSource+0x76>
 8001f96:	2b50      	cmp	r3, #80	; 0x50
 8001f98:	d116      	bne.n	8001fc8 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f9a:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f9c:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f9e:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fa0:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa4:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fa6:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fa8:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001faa:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fb2:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001fb6:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fb8:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8001fba:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fbc:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fc2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fc6:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8001fc8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001fca:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001fcc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001fd0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8001fd4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001fd6:	4618      	mov	r0, r3
}
 8001fd8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d002      	beq.n	8001fe4 <HAL_TIM_ConfigClockSource+0x80>
 8001fde:	d91e      	bls.n	800201e <HAL_TIM_ConfigClockSource+0xba>
 8001fe0:	2b30      	cmp	r3, #48	; 0x30
 8001fe2:	d1f1      	bne.n	8001fc8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8001fe4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fe6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fea:	430b      	orrs	r3, r1
 8001fec:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8001ff0:	6093      	str	r3, [r2, #8]
}
 8001ff2:	e7e9      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8001ff4:	2b70      	cmp	r3, #112	; 0x70
 8001ff6:	d049      	beq.n	800208c <HAL_TIM_ConfigClockSource+0x128>
 8001ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ffc:	d1e4      	bne.n	8001fc8 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ffe:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8002002:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002004:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002006:	432b      	orrs	r3, r5
 8002008:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800200c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002010:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002012:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002014:	6893      	ldr	r3, [r2, #8]
 8002016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201a:	6093      	str	r3, [r2, #8]
      break;
 800201c:	e7d4      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800201e:	f033 0110 	bics.w	r1, r3, #16
 8002022:	d1d1      	bne.n	8001fc8 <HAL_TIM_ConfigClockSource+0x64>
 8002024:	e7de      	b.n	8001fe4 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8002026:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002028:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800202a:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800202c:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002030:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002032:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002034:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002036:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800203a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800203e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002042:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002044:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8002046:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002048:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800204e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002052:	6093      	str	r3, [r2, #8]
}
 8002054:	e7b8      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8002056:	2002      	movs	r0, #2
}
 8002058:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800205a:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800205c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800205e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002062:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002064:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002066:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8002068:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800206a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800206e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002072:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002076:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800207a:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800207c:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800207e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002084:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002088:	6093      	str	r3, [r2, #8]
}
 800208a:	e79d      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800208c:	68cc      	ldr	r4, [r1, #12]
 800208e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002092:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002094:	432b      	orrs	r3, r5
 8002096:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800209a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800209e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80020a0:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80020a2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80020a8:	6093      	str	r3, [r2, #8]
      break;
 80020aa:	e78d      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x64>

080020ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d026      	beq.n	8002102 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020b6:	6803      	ldr	r3, [r0, #0]
{
 80020b8:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80020ba:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80020be:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020c0:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c2:	4d11      	ldr	r5, [pc, #68]	; (8002108 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80020c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020c8:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ca:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 80020cc:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 80020ce:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d0:	d009      	beq.n	80020e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80020d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d6:	d006      	beq.n	80020e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80020d8:	4a0c      	ldr	r2, [pc, #48]	; (800210c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d003      	beq.n	80020e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80020de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d104      	bne.n	80020f0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020e6:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020e8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020ec:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020ee:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80020f0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80020f2:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80020f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80020f8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 80020fc:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80020fe:	4618      	mov	r0, r3
}
 8002100:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002102:	2002      	movs	r0, #2
}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40012c00 	.word	0x40012c00
 800210c:	40000400 	.word	0x40000400

08002110 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002110:	2800      	cmp	r0, #0
 8002112:	d061      	beq.n	80021d8 <HAL_UART_Init+0xc8>
{
 8002114:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002116:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800211a:	4604      	mov	r4, r0
 800211c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002120:	2b00      	cmp	r3, #0
 8002122:	d051      	beq.n	80021c8 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002124:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002126:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002128:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800212c:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212e:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8002130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002134:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002136:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002138:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800213a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800213e:	4301      	orrs	r1, r0
 8002140:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002142:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002144:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002148:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800214c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800214e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002152:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002154:	430a      	orrs	r2, r1
 8002156:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 800215c:	491f      	ldr	r1, [pc, #124]	; (80021dc <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800215e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002162:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8002164:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002166:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8002168:	d033      	beq.n	80021d2 <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800216a:	f7ff fc8f 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800216e:	6863      	ldr	r3, [r4, #4]
 8002170:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002174:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	fbb0 f3f3 	udiv	r3, r0, r3
 800217e:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002180:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8002182:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002184:	4816      	ldr	r0, [pc, #88]	; (80021e0 <HAL_UART_Init+0xd0>)
 8002186:	fba0 c103 	umull	ip, r1, r0, r3
 800218a:	0949      	lsrs	r1, r1, #5
 800218c:	fb02 3311 	mls	r3, r2, r1, r3
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	3332      	adds	r3, #50	; 0x32
 8002194:	fba0 2303 	umull	r2, r3, r0, r3
 8002198:	0109      	lsls	r1, r1, #4
 800219a:	6822      	ldr	r2, [r4, #0]
 800219c:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 80021a0:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a2:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 80021a4:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80021aa:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ac:	6953      	ldr	r3, [r2, #20]
 80021ae:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80021b2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80021b4:	68d3      	ldr	r3, [r2, #12]
 80021b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ba:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021bc:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021be:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021c2:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80021c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80021cc:	f7fe f9c4 	bl	8000558 <HAL_UART_MspInit>
 80021d0:	e7a8      	b.n	8002124 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 80021d2:	f7ff fc6b 	bl	8001aac <HAL_RCC_GetPCLK2Freq>
 80021d6:	e7ca      	b.n	800216e <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 80021d8:	2001      	movs	r0, #1
}
 80021da:	4770      	bx	lr
 80021dc:	40013800 	.word	0x40013800
 80021e0:	51eb851f 	.word	0x51eb851f

080021e4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80021e4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d123      	bne.n	8002234 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 80021ec:	b301      	cbz	r1, 8002230 <HAL_UART_Receive_IT+0x4c>
 80021ee:	b1fa      	cbz	r2, 8002230 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 80021f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d01d      	beq.n	8002234 <HAL_UART_Receive_IT+0x50>
{
 80021f8:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021fa:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021fc:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021fe:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002200:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8002202:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8002206:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800220a:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800220e:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 8002210:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002212:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8002216:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002218:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800221a:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 800221c:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002224:	68e3      	ldr	r3, [r4, #12]
 8002226:	f043 0320 	orr.w	r3, r3, #32
 800222a:	60e3      	str	r3, [r4, #12]
}
 800222c:	bc30      	pop	{r4, r5}
 800222e:	4770      	bx	lr
      return HAL_ERROR;
 8002230:	2001      	movs	r0, #1
 8002232:	4770      	bx	lr
    return HAL_BUSY;
 8002234:	2002      	movs	r0, #2
}
 8002236:	4770      	bx	lr

08002238 <HAL_UART_TxCpltCallback>:
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop

0800223c <HAL_UART_ErrorCallback>:
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop

08002240 <UART_DMAAbortOnError>:
{
 8002240:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002242:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002244:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002246:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002248:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800224a:	f7ff fff7 	bl	800223c <HAL_UART_ErrorCallback>
}
 800224e:	bd08      	pop	{r3, pc}

08002250 <HAL_UARTEx_RxEventCallback>:
}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002254:	6883      	ldr	r3, [r0, #8]
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225a:	d03b      	beq.n	80022d4 <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800225c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800225e:	2b00      	cmp	r3, #0
 8002260:	d02f      	beq.n	80022c2 <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002262:	6803      	ldr	r3, [r0, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800226a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800226c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800226e:	3301      	adds	r3, #1
 8002270:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002272:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002274:	3b01      	subs	r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800227a:	bb4b      	cbnz	r3, 80022d0 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800227c:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 800227e:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002280:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002282:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002284:	68d1      	ldr	r1, [r2, #12]
 8002286:	f021 0120 	bic.w	r1, r1, #32
 800228a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800228c:	68d1      	ldr	r1, [r2, #12]
 800228e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002292:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002294:	6951      	ldr	r1, [r2, #20]
 8002296:	f021 0101 	bic.w	r1, r1, #1
 800229a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800229c:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80022a2:	2901      	cmp	r1, #1
 80022a4:	d121      	bne.n	80022ea <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022a6:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022a8:	68d1      	ldr	r1, [r2, #12]
 80022aa:	f021 0110 	bic.w	r1, r1, #16
 80022ae:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80022b0:	6811      	ldr	r1, [r2, #0]
 80022b2:	06c9      	lsls	r1, r1, #27
 80022b4:	d423      	bmi.n	80022fe <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022b6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80022b8:	f7ff ffca 	bl	8002250 <HAL_UARTEx_RxEventCallback>
}
 80022bc:	2000      	movs	r0, #0
 80022be:	b002      	add	sp, #8
 80022c0:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022c2:	6903      	ldr	r3, [r0, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1cc      	bne.n	8002262 <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022c8:	6803      	ldr	r3, [r0, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	7013      	strb	r3, [r2, #0]
 80022ce:	e7cd      	b.n	800226c <UART_Receive_IT.part.0+0x18>
}
 80022d0:	2000      	movs	r0, #0
 80022d2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d4:	6903      	ldr	r3, [r0, #16]
 80022d6:	b96b      	cbnz	r3, 80022f4 <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022d8:	6802      	ldr	r2, [r0, #0]
 80022da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80022dc:	6852      	ldr	r2, [r2, #4]
 80022de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e2:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80022e6:	6283      	str	r3, [r0, #40]	; 0x28
 80022e8:	e7c3      	b.n	8002272 <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 80022ea:	f7fe f837 	bl	800035c <HAL_UART_RxCpltCallback>
}
 80022ee:	2000      	movs	r0, #0
 80022f0:	b002      	add	sp, #8
 80022f2:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022f4:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80022f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	7013      	strb	r3, [r2, #0]
 80022fc:	e7b6      	b.n	800226c <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	6813      	ldr	r3, [r2, #0]
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	6853      	ldr	r3, [r2, #4]
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	9b01      	ldr	r3, [sp, #4]
 800230a:	e7d4      	b.n	80022b6 <UART_Receive_IT.part.0+0x62>

0800230c <HAL_UART_IRQHandler>:
{
 800230c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800230e:	6803      	ldr	r3, [r0, #0]
{
 8002310:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002312:	681a      	ldr	r2, [r3, #0]
{
 8002314:	b082      	sub	sp, #8
  if (errorflags == RESET)
 8002316:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002318:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800231a:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800231c:	d14e      	bne.n	80023bc <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800231e:	0696      	lsls	r6, r2, #26
 8002320:	d502      	bpl.n	8002328 <HAL_UART_IRQHandler+0x1c>
 8002322:	068d      	lsls	r5, r1, #26
 8002324:	f100 8090 	bmi.w	8002448 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002328:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800232a:	2801      	cmp	r0, #1
 800232c:	d00b      	beq.n	8002346 <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800232e:	0616      	lsls	r6, r2, #24
 8002330:	d502      	bpl.n	8002338 <HAL_UART_IRQHandler+0x2c>
 8002332:	060d      	lsls	r5, r1, #24
 8002334:	f100 8092 	bmi.w	800245c <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002338:	0650      	lsls	r0, r2, #25
 800233a:	d502      	bpl.n	8002342 <HAL_UART_IRQHandler+0x36>
 800233c:	064a      	lsls	r2, r1, #25
 800233e:	f100 80ab 	bmi.w	8002498 <HAL_UART_IRQHandler+0x18c>
}
 8002342:	b002      	add	sp, #8
 8002344:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002346:	06d5      	lsls	r5, r2, #27
 8002348:	d5f1      	bpl.n	800232e <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800234a:	06c8      	lsls	r0, r1, #27
 800234c:	d5ef      	bpl.n	800232e <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800234e:	2100      	movs	r1, #0
 8002350:	9101      	str	r1, [sp, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	9201      	str	r2, [sp, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	9201      	str	r2, [sp, #4]
 800235a:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8002362:	f000 80d2 	beq.w	800250a <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002366:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002368:	6802      	ldr	r2, [r0, #0]
 800236a:	6852      	ldr	r2, [r2, #4]
 800236c:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800236e:	2a00      	cmp	r2, #0
 8002370:	d0e7      	beq.n	8002342 <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002372:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8002374:	4295      	cmp	r5, r2
 8002376:	d9e4      	bls.n	8002342 <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002378:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 800237a:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800237c:	2e20      	cmp	r6, #32
 800237e:	d016      	beq.n	80023ae <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 8002380:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002388:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002398:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800239a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800239e:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	f022 0210 	bic.w	r2, r2, #16
 80023a6:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023a8:	f7fe ff1c 	bl	80011e4 <HAL_DMA_Abort>
 80023ac:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023ae:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80023b0:	4620      	mov	r0, r4
 80023b2:	1a69      	subs	r1, r5, r1
 80023b4:	b289      	uxth	r1, r1
 80023b6:	f7ff ff4b 	bl	8002250 <HAL_UARTEx_RxEventCallback>
 80023ba:	e7c2      	b.n	8002342 <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023bc:	f005 0501 	and.w	r5, r5, #1
 80023c0:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80023c4:	4328      	orrs	r0, r5
 80023c6:	d0af      	beq.n	8002328 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023c8:	07d0      	lsls	r0, r2, #31
 80023ca:	d505      	bpl.n	80023d8 <HAL_UART_IRQHandler+0xcc>
 80023cc:	05ce      	lsls	r6, r1, #23
 80023ce:	d503      	bpl.n	80023d8 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80023d2:	f040 0001 	orr.w	r0, r0, #1
 80023d6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023d8:	0750      	lsls	r0, r2, #29
 80023da:	d52c      	bpl.n	8002436 <HAL_UART_IRQHandler+0x12a>
 80023dc:	b12d      	cbz	r5, 80023ea <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023de:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023e0:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023e2:	f040 0002 	orr.w	r0, r0, #2
 80023e6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023e8:	d429      	bmi.n	800243e <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023ea:	0716      	lsls	r6, r2, #28
 80023ec:	d507      	bpl.n	80023fe <HAL_UART_IRQHandler+0xf2>
 80023ee:	f001 0020 	and.w	r0, r1, #32
 80023f2:	4328      	orrs	r0, r5
 80023f4:	d003      	beq.n	80023fe <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80023f8:	f040 0008 	orr.w	r0, r0, #8
 80023fc:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002400:	2800      	cmp	r0, #0
 8002402:	d09e      	beq.n	8002342 <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002404:	0690      	lsls	r0, r2, #26
 8002406:	d509      	bpl.n	800241c <HAL_UART_IRQHandler+0x110>
 8002408:	068a      	lsls	r2, r1, #26
 800240a:	d507      	bpl.n	800241c <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800240c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002410:	2a22      	cmp	r2, #34	; 0x22
 8002412:	d103      	bne.n	800241c <HAL_UART_IRQHandler+0x110>
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff ff1d 	bl	8002254 <UART_Receive_IT.part.0>
 800241a:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800241c:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800241e:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002420:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002424:	f005 0508 	and.w	r5, r5, #8
 8002428:	4315      	orrs	r5, r2
 800242a:	d140      	bne.n	80024ae <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff ff05 	bl	800223c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002432:	6425      	str	r5, [r4, #64]	; 0x40
 8002434:	e785      	b.n	8002342 <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002436:	0790      	lsls	r0, r2, #30
 8002438:	d5d7      	bpl.n	80023ea <HAL_UART_IRQHandler+0xde>
 800243a:	2d00      	cmp	r5, #0
 800243c:	d0d5      	beq.n	80023ea <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800243e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002440:	f040 0004 	orr.w	r0, r0, #4
 8002444:	6420      	str	r0, [r4, #64]	; 0x40
 8002446:	e7d0      	b.n	80023ea <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002448:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800244c:	2b22      	cmp	r3, #34	; 0x22
 800244e:	f47f af78 	bne.w	8002342 <HAL_UART_IRQHandler+0x36>
}
 8002452:	b002      	add	sp, #8
 8002454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002458:	f7ff befc 	b.w	8002254 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800245c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002460:	2a21      	cmp	r2, #33	; 0x21
 8002462:	f47f af6e 	bne.w	8002342 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002466:	68a2      	ldr	r2, [r4, #8]
 8002468:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800246c:	d06e      	beq.n	800254c <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800246e:	6a22      	ldr	r2, [r4, #32]
 8002470:	1c51      	adds	r1, r2, #1
 8002472:	6221      	str	r1, [r4, #32]
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002478:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800247a:	3a01      	subs	r2, #1
 800247c:	b292      	uxth	r2, r2
 800247e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002480:	2a00      	cmp	r2, #0
 8002482:	f47f af5e 	bne.w	8002342 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800248c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	e754      	b.n	8002342 <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8002498:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800249a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800249c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800249e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80024a4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80024a8:	f7ff fec6 	bl	8002238 <HAL_UART_TxCpltCallback>
    return;
 80024ac:	e749      	b.n	8002342 <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	f022 0201 	bic.w	r2, r2, #1
 80024bc:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80024c0:	2a01      	cmp	r2, #1
 80024c2:	d103      	bne.n	80024cc <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	f022 0210 	bic.w	r2, r2, #16
 80024ca:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024cc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80024ce:	2120      	movs	r1, #32
 80024d0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d4:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	0656      	lsls	r6, r2, #25
 80024da:	d512      	bpl.n	8002502 <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024dc:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80024de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e4:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80024e6:	b160      	cbz	r0, 8002502 <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_UART_IRQHandler+0x258>)
 80024ea:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024ec:	f7fe fe9c 	bl	8001228 <HAL_DMA_Abort_IT>
 80024f0:	2800      	cmp	r0, #0
 80024f2:	f43f af26 	beq.w	8002342 <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80024fa:	b002      	add	sp, #8
 80024fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002500:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002502:	4620      	mov	r0, r4
 8002504:	f7ff fe9a 	bl	800223c <HAL_UART_ErrorCallback>
 8002508:	e71b      	b.n	8002342 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800250a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800250c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800250e:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8002510:	b289      	uxth	r1, r1
 8002512:	2900      	cmp	r1, #0
 8002514:	f43f af15 	beq.w	8002342 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002518:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800251a:	1a08      	subs	r0, r1, r0
 800251c:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800251e:	2900      	cmp	r1, #0
 8002520:	f43f af0f 	beq.w	8002342 <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 8002524:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002526:	68d8      	ldr	r0, [r3, #12]
 8002528:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800252c:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252e:	6958      	ldr	r0, [r3, #20]
 8002530:	f020 0001 	bic.w	r0, r0, #1
 8002534:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8002536:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253a:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800253c:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800253e:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002540:	f022 0210 	bic.w	r2, r2, #16
 8002544:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002546:	f7ff fe83 	bl	8002250 <HAL_UARTEx_RxEventCallback>
 800254a:	e6fa      	b.n	8002342 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254c:	6922      	ldr	r2, [r4, #16]
 800254e:	2a00      	cmp	r2, #0
 8002550:	d18d      	bne.n	800246e <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002552:	6a22      	ldr	r2, [r4, #32]
 8002554:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002558:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800255c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800255e:	6222      	str	r2, [r4, #32]
 8002560:	e78a      	b.n	8002478 <HAL_UART_IRQHandler+0x16c>
 8002562:	bf00      	nop
 8002564:	08002241 	.word	0x08002241

08002568 <__libc_init_array>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	2600      	movs	r6, #0
 800256c:	4d0c      	ldr	r5, [pc, #48]	; (80025a0 <__libc_init_array+0x38>)
 800256e:	4c0d      	ldr	r4, [pc, #52]	; (80025a4 <__libc_init_array+0x3c>)
 8002570:	1b64      	subs	r4, r4, r5
 8002572:	10a4      	asrs	r4, r4, #2
 8002574:	42a6      	cmp	r6, r4
 8002576:	d109      	bne.n	800258c <__libc_init_array+0x24>
 8002578:	f000 f81a 	bl	80025b0 <_init>
 800257c:	2600      	movs	r6, #0
 800257e:	4d0a      	ldr	r5, [pc, #40]	; (80025a8 <__libc_init_array+0x40>)
 8002580:	4c0a      	ldr	r4, [pc, #40]	; (80025ac <__libc_init_array+0x44>)
 8002582:	1b64      	subs	r4, r4, r5
 8002584:	10a4      	asrs	r4, r4, #2
 8002586:	42a6      	cmp	r6, r4
 8002588:	d105      	bne.n	8002596 <__libc_init_array+0x2e>
 800258a:	bd70      	pop	{r4, r5, r6, pc}
 800258c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002590:	4798      	blx	r3
 8002592:	3601      	adds	r6, #1
 8002594:	e7ee      	b.n	8002574 <__libc_init_array+0xc>
 8002596:	f855 3b04 	ldr.w	r3, [r5], #4
 800259a:	4798      	blx	r3
 800259c:	3601      	adds	r6, #1
 800259e:	e7f2      	b.n	8002586 <__libc_init_array+0x1e>
 80025a0:	080028fc 	.word	0x080028fc
 80025a4:	080028fc 	.word	0x080028fc
 80025a8:	080028fc 	.word	0x080028fc
 80025ac:	08002900 	.word	0x08002900

080025b0 <_init>:
 80025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b2:	bf00      	nop
 80025b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b6:	bc08      	pop	{r3}
 80025b8:	469e      	mov	lr, r3
 80025ba:	4770      	bx	lr

080025bc <_fini>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	bf00      	nop
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr
