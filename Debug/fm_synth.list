
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000506c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001644  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067bc  080067bc  000208a4  2**0
                  CONTENTS
  4 .ARM          00000000  080067bc  080067bc  000208a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067bc  080067bc  000208a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008a4  20000000  080067c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d10  200008a4  08007068  000208a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  08007068  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000208a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4d0  00000000  00000000  000208cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bec  00000000  00000000  0003fd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000173ee  00000000  00000000  00043989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  0005ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000042b8  00000000  00000000  0005bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c39  00000000  00000000  0005ff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022d2f  00000000  00000000  00078b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e9ae  00000000  00000000  0009b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a246  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039c4  00000000  00000000  0012a29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200008a4 	.word	0x200008a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08005160 	.word	0x08005160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200008a8 	.word	0x200008a8
 8000148:	08005160 	.word	0x08005160

0800014c <init_audio_out>:
 */

#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	audio_spi = hspi->Instance;
 800014c:	6803      	ldr	r3, [r0, #0]
void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
 800014e:	b510      	push	{r4, lr}
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000150:	681a      	ldr	r2, [r3, #0]
	audio_spi = hspi->Instance;
 8000152:	4c06      	ldr	r4, [pc, #24]	; (800016c <init_audio_out+0x20>)
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	audio_spi = hspi->Instance;
 8000158:	6023      	str	r3, [r4, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015a:	4608      	mov	r0, r1
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 800015c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015e:	f004 fe47 	bl	8004df0 <HAL_TIM_Base_Start_IT>
	output_volume = 0x3800;
 8000162:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000166:	4b02      	ldr	r3, [pc, #8]	; (8000170 <init_audio_out+0x24>)
 8000168:	801a      	strh	r2, [r3, #0]
}
 800016a:	bd10      	pop	{r4, pc}
 800016c:	20000a98 	.word	0x20000a98
 8000170:	20000abc 	.word	0x20000abc

08000174 <update_volume>:

void update_volume() {
	AUDIO_GPIO->BSRR = (AUDIO_SPI_CS_PIN << 16);	//pull CS pin low
 8000174:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
void update_volume() {
 8000178:	b538      	push	{r3, r4, r5, lr}
	AUDIO_GPIO->BSRR = (AUDIO_SPI_CS_PIN << 16);	//pull CS pin low
 800017a:	4c07      	ldr	r4, [pc, #28]	; (8000198 <update_volume+0x24>)
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 800017c:	4d07      	ldr	r5, [pc, #28]	; (800019c <update_volume+0x28>)
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <update_volume+0x2c>)
	AUDIO_GPIO->BSRR = (AUDIO_SPI_CS_PIN << 16);	//pull CS pin low
 8000180:	6122      	str	r2, [r4, #16]
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	882a      	ldrh	r2, [r5, #0]
 8000186:	60da      	str	r2, [r3, #12]
	output_volume = synth_sample();
 8000188:	f001 f988 	bl	800149c <synth_sample>
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 800018c:	2310      	movs	r3, #16
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 800018e:	f440 5040 	orr.w	r0, r0, #12288	; 0x3000
 8000192:	8028      	strh	r0, [r5, #0]
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 8000194:	6123      	str	r3, [r4, #16]
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	40010800 	.word	0x40010800
 800019c:	20000abc 	.word	0x20000abc
 80001a0:	20000a98 	.word	0x20000a98

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a8:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2601      	movs	r6, #1
 80001ae:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b0:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001b4:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ca:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001cc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d0:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001d4:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f004 fa5f 	bl	8004698 <HAL_RCC_OscConfig>
 80001da:	b108      	cbz	r0, 80001e0 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001de:	e7fe      	b.n	80001de <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	f04f 080f 	mov.w	r8, #15
 80001e6:	f04f 0902 	mov.w	r9, #2
 80001ea:	2600      	movs	r6, #0
 80001ec:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f0:	4621      	mov	r1, r4
 80001f2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	e9cd 8900 	strd	r8, r9, [sp]
 80001f8:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fe:	f004 fc4b 	bl	8004a98 <HAL_RCC_ClockConfig>
 8000202:	b108      	cbz	r0, 8000208 <SystemClock_Config+0x64>
 8000204:	b672      	cpsid	i
  while (1)
 8000206:	e7fe      	b.n	8000206 <SystemClock_Config+0x62>
}
 8000208:	b010      	add	sp, #64	; 0x40
 800020a:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800020e:	bf00      	nop

08000210 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000210:	2500      	movs	r5, #0
{
 8000212:	b580      	push	{r7, lr}
 8000214:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8000216:	f002 fcd9 	bl	8002bcc <HAL_Init>
  SystemClock_Config();
 800021a:	f7ff ffc3 	bl	80001a4 <SystemClock_Config>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000220:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8000224:	e9cd 5508 	strd	r5, r5, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000228:	4c7b      	ldr	r4, [pc, #492]	; (8000418 <main+0x208>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800022a:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022c:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800022e:	487b      	ldr	r0, [pc, #492]	; (800041c <main+0x20c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	61a3      	str	r3, [r4, #24]
 8000236:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000238:	4616      	mov	r6, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000242:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000244:	f04f 0810 	mov.w	r8, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	61a3      	str	r3, [r4, #24]
 800024e:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000250:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000254:	f003 0308 	and.w	r3, r3, #8
 8000258:	9303      	str	r3, [sp, #12]
 800025a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800025c:	f002 ffbe 	bl	80031dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000260:	2200      	movs	r2, #0
 8000262:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000264:	486d      	ldr	r0, [pc, #436]	; (800041c <main+0x20c>)
 8000266:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000268:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800026c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000270:	f002 fea8 	bl	8002fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_5;
 8000274:	f245 0228 	movw	r2, #20520	; 0x5028
 8000278:	4b69      	ldr	r3, [pc, #420]	; (8000420 <main+0x210>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027a:	486a      	ldr	r0, [pc, #424]	; (8000424 <main+0x214>)
 800027c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_5;
 800027e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000282:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000284:	f002 fe9e 	bl	8002fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6;
 8000288:	f24a 0250 	movw	r2, #41040	; 0xa050
 800028c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028e:	4865      	ldr	r0, [pc, #404]	; (8000424 <main+0x214>)
 8000290:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6;
 8000292:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000296:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000298:	f002 fe94 	bl	8002fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800029c:	f44f 7260 	mov.w	r2, #896	; 0x380
 80002a0:	4b61      	ldr	r3, [pc, #388]	; (8000428 <main+0x218>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a2:	4860      	ldr	r0, [pc, #384]	; (8000424 <main+0x214>)
 80002a4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80002a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ac:	f002 fe8a 	bl	8002fc4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80002b0:	462a      	mov	r2, r5
 80002b2:	4631      	mov	r1, r6
 80002b4:	2009      	movs	r0, #9
 80002b6:	f002 fcd1 	bl	8002c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80002ba:	2009      	movs	r0, #9
 80002bc:	f002 fd06 	bl	8002ccc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80002c0:	462a      	mov	r2, r5
 80002c2:	4631      	mov	r1, r6
 80002c4:	2017      	movs	r0, #23
 80002c6:	f002 fcc9 	bl	8002c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002ca:	2017      	movs	r0, #23
 80002cc:	f002 fcfe 	bl	8002ccc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80002d0:	462a      	mov	r2, r5
 80002d2:	4631      	mov	r1, r6
 80002d4:	2028      	movs	r0, #40	; 0x28
 80002d6:	f002 fcc1 	bl	8002c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002da:	2028      	movs	r0, #40	; 0x28
 80002dc:	f002 fcf6 	bl	8002ccc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002e0:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002e2:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002e4:	4333      	orrs	r3, r6
 80002e6:	6163      	str	r3, [r4, #20]
 80002e8:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002ea:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ec:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002ee:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002f4:	f002 fcb2 	bl	8002c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002f8:	200e      	movs	r0, #14
 80002fa:	f002 fce7 	bl	8002ccc <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 31250;
 80002fe:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 8000302:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 8000304:	4c49      	ldr	r4, [pc, #292]	; (800042c <main+0x21c>)
 8000306:	494a      	ldr	r1, [pc, #296]	; (8000430 <main+0x220>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000308:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 800030a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800030e:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart1.Init.BaudRate = 31250;
 8000312:	e9c4 1200 	strd	r1, r2, [r4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000316:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000318:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031a:	f004 fe6b 	bl	8004ff4 <HAL_UART_Init>
 800031e:	b108      	cbz	r0, 8000324 <main+0x114>
 8000320:	b672      	cpsid	i
  while (1)
 8000322:	e7fe      	b.n	8000322 <main+0x112>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000324:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 8000326:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1451-1;
 800032a:	f240 52aa 	movw	r2, #1450	; 0x5aa
  htim2.Instance = TIM2;
 800032e:	4f41      	ldr	r7, [pc, #260]	; (8000434 <main+0x224>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000330:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8000334:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000338:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800033a:	4638      	mov	r0, r7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	e9c7 3301 	strd	r3, r3, [r7, #4]
  htim2.Instance = TIM2;
 8000340:	6039      	str	r1, [r7, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	613b      	str	r3, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000344:	61bb      	str	r3, [r7, #24]
  htim2.Init.Period = 1451-1;
 8000346:	60fa      	str	r2, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000348:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034a:	f004 fced 	bl	8004d28 <HAL_TIM_Base_Init>
 800034e:	b108      	cbz	r0, 8000354 <main+0x144>
 8000350:	b672      	cpsid	i
  while (1)
 8000352:	e7fe      	b.n	8000352 <main+0x142>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000358:	4638      	mov	r0, r7
 800035a:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800035e:	f004 fd73 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8000362:	b108      	cbz	r0, 8000368 <main+0x158>
 8000364:	b672      	cpsid	i
  while (1)
 8000366:	e7fe      	b.n	8000366 <main+0x156>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000368:	2300      	movs	r3, #0
 800036a:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036c:	4638      	mov	r0, r7
 800036e:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000374:	f004 fe0c 	bl	8004f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000378:	4603      	mov	r3, r0
 800037a:	b9e0      	cbnz	r0, 80003b6 <main+0x1a6>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037c:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000380:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000384:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 8000386:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000388:	f44f 6600 	mov.w	r6, #2048	; 0x800
  hspi1.Instance = SPI1;
 800038c:	4d2a      	ldr	r5, [pc, #168]	; (8000438 <main+0x228>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800038e:	e9c5 c301 	strd	ip, r3, [r5, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000392:	e9c5 3304 	strd	r3, r3, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000396:	e9c5 3308 	strd	r3, r3, [r5, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800039a:	62ab      	str	r3, [r5, #40]	; 0x28
  hspi1.Instance = SPI1;
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <main+0x22c>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039e:	61a8      	str	r0, [r5, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a0:	4628      	mov	r0, r5
  hspi1.Instance = SPI1;
 80003a2:	602b      	str	r3, [r5, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003a4:	60ee      	str	r6, [r5, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003a6:	61e9      	str	r1, [r5, #28]
  hspi1.Init.CRCPolynomial = 10;
 80003a8:	62ea      	str	r2, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003aa:	f004 fc63 	bl	8004c74 <HAL_SPI_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	b118      	cbz	r0, 80003ba <main+0x1aa>
 80003b2:	b672      	cpsid	i
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <main+0x1a4>
 80003b6:	b672      	cpsid	i
 80003b8:	e7fe      	b.n	80003b8 <main+0x1a8>
  hi2c2.Init.ClockSpeed = 10000;
 80003ba:	f242 7010 	movw	r0, #10000	; 0x2710
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Instance = I2C2;
 80003c2:	4e1f      	ldr	r6, [pc, #124]	; (8000440 <main+0x230>)
 80003c4:	491f      	ldr	r1, [pc, #124]	; (8000444 <main+0x234>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003c6:	e9c6 0301 	strd	r0, r3, [r6, #4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003ca:	4630      	mov	r0, r6
  hi2c2.Init.OwnAddress2 = 0;
 80003cc:	e9c6 3305 	strd	r3, r3, [r6, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d0:	e9c6 3307 	strd	r3, r3, [r6, #28]
  hi2c2.Init.OwnAddress1 = 0;
 80003d4:	60f3      	str	r3, [r6, #12]
  hi2c2.Instance = I2C2;
 80003d6:	6031      	str	r1, [r6, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d8:	6132      	str	r2, [r6, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003da:	f002 ff9b 	bl	8003314 <HAL_I2C_Init>
 80003de:	b108      	cbz	r0, 80003e4 <main+0x1d4>
 80003e0:	b672      	cpsid	i
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <main+0x1d2>
  init_midi(&huart1);
 80003e4:	4620      	mov	r0, r4
 80003e6:	f000 f8b7 	bl	8000558 <init_midi>
  init_synth();
 80003ea:	f000 fd25 	bl	8000e38 <init_synth>
  init_audio_out(&hspi1, &htim2);
 80003ee:	4628      	mov	r0, r5
 80003f0:	4639      	mov	r1, r7
 80003f2:	f7ff feab 	bl	800014c <init_audio_out>
  init_ui(&hi2c2);
 80003f6:	4630      	mov	r0, r6
 80003f8:	f002 f94a 	bl	8002690 <init_ui>
 80003fc:	4e12      	ldr	r6, [pc, #72]	; (8000448 <main+0x238>)
 80003fe:	4d13      	ldr	r5, [pc, #76]	; (800044c <main+0x23c>)
	if (midi_buffer_read != midi_buffer_write) {
 8000400:	7832      	ldrb	r2, [r6, #0]
 8000402:	782b      	ldrb	r3, [r5, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d0fb      	beq.n	8000400 <main+0x1f0>
		process_midi_byte(&huart1);
 8000408:	4620      	mov	r0, r4
 800040a:	f000 f8c9 	bl	80005a0 <process_midi_byte>
	if (midi_buffer_read != midi_buffer_write) {
 800040e:	7832      	ldrb	r2, [r6, #0]
 8000410:	782b      	ldrb	r3, [r5, #0]
 8000412:	429a      	cmp	r2, r3
 8000414:	d0f4      	beq.n	8000400 <main+0x1f0>
 8000416:	e7f7      	b.n	8000408 <main+0x1f8>
 8000418:	40021000 	.word	0x40021000
 800041c:	40010800 	.word	0x40010800
 8000420:	10210000 	.word	0x10210000
 8000424:	40010c00 	.word	0x40010c00
 8000428:	10110000 	.word	0x10110000
 800042c:	20001040 	.word	0x20001040
 8000430:	40013800 	.word	0x40013800
 8000434:	200013c8 	.word	0x200013c8
 8000438:	20001370 	.word	0x20001370
 800043c:	40013000 	.word	0x40013000
 8000440:	20000acc 	.word	0x20000acc
 8000444:	40005800 	.word	0x40005800
 8000448:	20001410 	.word	0x20001410
 800044c:	20000bf8 	.word	0x20000bf8

08000450 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin) {
 8000450:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8000454:	d038      	beq.n	80004c8 <HAL_GPIO_EXTI_Callback+0x78>
 8000456:	d806      	bhi.n	8000466 <HAL_GPIO_EXTI_Callback+0x16>
 8000458:	2820      	cmp	r0, #32
 800045a:	d038      	beq.n	80004ce <HAL_GPIO_EXTI_Callback+0x7e>
 800045c:	2880      	cmp	r0, #128	; 0x80
 800045e:	d119      	bne.n	8000494 <HAL_GPIO_EXTI_Callback+0x44>
		fsm(pb_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f002 b969 	b.w	8002738 <fsm>
	switch (GPIO_Pin) {
 8000466:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800046a:	d03e      	beq.n	80004ea <HAL_GPIO_EXTI_Callback+0x9a>
 800046c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000470:	d122      	bne.n	80004b8 <HAL_GPIO_EXTI_Callback+0x68>
uint8_t temp[MAX_PARAMS];
uint8_t instrument;

void init_ui(I2C_HandleTypeDef* hi2c);
void fsm(input key);
static inline void fsm_change_op(uint8_t op) { fsm_op = op; };
 8000472:	2101      	movs	r1, #1
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT1_A | UI_ROT1_B)) == (UI_ROT1_A | UI_ROT1_B)
 8000476:	4a25      	ldr	r2, [pc, #148]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000478:	7019      	strb	r1, [r3, #0]
 800047a:	6893      	ldr	r3, [r2, #8]
 800047c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000480:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000484:	d003      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT1_A | UI_ROT1_B))) {
 8000486:	6893      	ldr	r3, [r2, #8]
 8000488:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800048c:	d111      	bne.n	80004b2 <HAL_GPIO_EXTI_Callback+0x62>
			fsm(rot_dec);
 800048e:	2004      	movs	r0, #4
 8000490:	f002 b952 	b.w	8002738 <fsm>
	switch (GPIO_Pin) {
 8000494:	2808      	cmp	r0, #8
 8000496:	d115      	bne.n	80004c4 <HAL_GPIO_EXTI_Callback+0x74>
 8000498:	2102      	movs	r1, #2
 800049a:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT2_A | UI_ROT2_B)) == (UI_ROT2_A | UI_ROT2_B)
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 800049e:	7019      	strb	r1, [r3, #0]
 80004a0:	6893      	ldr	r3, [r2, #8]
 80004a2:	f003 0318 	and.w	r3, r3, #24
 80004a6:	2b18      	cmp	r3, #24
 80004a8:	d0f1      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT2_A | UI_ROT2_B))) {
 80004aa:	6893      	ldr	r3, [r2, #8]
 80004ac:	f013 0f18 	tst.w	r3, #24
 80004b0:	d0ed      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			fsm(rot_inc);
 80004b2:	2003      	movs	r0, #3
 80004b4:	f002 b940 	b.w	8002738 <fsm>
	switch (GPIO_Pin) {
 80004b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80004bc:	d103      	bne.n	80004c6 <HAL_GPIO_EXTI_Callback+0x76>
		fsm(pb_2);
 80004be:	2002      	movs	r0, #2
 80004c0:	f002 b93a 	b.w	8002738 <fsm>
 80004c4:	4770      	bx	lr
 80004c6:	4770      	bx	lr
		fsm(pb_1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f002 b935 	b.w	8002738 <fsm>
 80004ce:	2103      	movs	r1, #3
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT3_A | UI_ROT3_B)) == (UI_ROT3_A | UI_ROT3_B)
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 80004d4:	7019      	strb	r1, [r3, #0]
 80004d6:	6893      	ldr	r3, [r2, #8]
 80004d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80004dc:	2b60      	cmp	r3, #96	; 0x60
 80004de:	d0d6      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT3_A | UI_ROT3_B))) {
 80004e0:	6893      	ldr	r3, [r2, #8]
 80004e2:	f013 0f60 	tst.w	r3, #96	; 0x60
 80004e6:	d0d2      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
 80004e8:	e7e3      	b.n	80004b2 <HAL_GPIO_EXTI_Callback+0x62>
 80004ea:	2100      	movs	r1, #0
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT0_A | UI_ROT0_B)) == (UI_ROT0_A | UI_ROT0_B)
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 80004f0:	7019      	strb	r1, [r3, #0]
 80004f2:	6893      	ldr	r3, [r2, #8]
 80004f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80004f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80004fc:	d0c7      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT0_A | UI_ROT0_B))) {
 80004fe:	6893      	ldr	r3, [r2, #8]
 8000500:	f413 5f40 	tst.w	r3, #12288	; 0x3000
 8000504:	d0c3      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
 8000506:	e7d4      	b.n	80004b2 <HAL_GPIO_EXTI_Callback+0x62>
 8000508:	20000ac8 	.word	0x20000ac8
 800050c:	40010c00 	.word	0x40010c00

08000510 <midi_read>:
	uint8_t midi_uart_stat = midi_uart->SR;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <midi_read+0x2c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
	if ((midi_uart_stat & USART_SR_PE) |
 8000516:	0752      	lsls	r2, r2, #29
 8000518:	d10c      	bne.n	8000534 <midi_read+0x24>
void midi_read() {
 800051a:	b410      	push	{r4}
	midi_buffer[midi_buffer_write] = midi_uart->DR;
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <midi_read+0x30>)
 800051e:	685c      	ldr	r4, [r3, #4]
 8000520:	7811      	ldrb	r1, [r2, #0]
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000522:	7813      	ldrb	r3, [r2, #0]
	midi_buffer[midi_buffer_write] = midi_uart->DR;
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <midi_read+0x34>)
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000526:	3301      	adds	r3, #1
 8000528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	midi_buffer[midi_buffer_write] = midi_uart->DR;
 800052c:	5444      	strb	r4, [r0, r1]
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 800052e:	7013      	strb	r3, [r2, #0]
}
 8000530:	bc10      	pop	{r4}
 8000532:	4770      	bx	lr
		midi_uart->DR;
 8000534:	685b      	ldr	r3, [r3, #4]
		reset();
 8000536:	f000 b8f7 	b.w	8000728 <reset>
 800053a:	bf00      	nop
 800053c:	200011d0 	.word	0x200011d0
 8000540:	20000bf8 	.word	0x20000bf8
 8000544:	20001084 	.word	0x20001084

08000548 <sample>:
	TIM2->SR = 0;
 8000548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
	update_volume();
 8000550:	f7ff be10 	b.w	8000174 <update_volume>

08000554 <Error_Handler>:
 8000554:	b672      	cpsid	i
  while (1)
 8000556:	e7fe      	b.n	8000556 <Error_Handler+0x2>

08000558 <init_midi>:

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
	midi_uart = huart->Instance;
	data[0] = -1;
 8000558:	21ff      	movs	r1, #255	; 0xff
void init_midi(UART_HandleTypeDef* huart) {
 800055a:	b538      	push	{r3, r4, r5, lr}
	data[1] = -1;
	for (uint8_t i = 0; i < RING_BUFFER_SIZE; i++) {
		midi_buffer[i] = -1;
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <init_midi+0x34>)
	midi_uart = huart->Instance;
 800055e:	6804      	ldr	r4, [r0, #0]
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <init_midi+0x38>)
		midi_buffer[i] = -1;
 8000562:	f803 1b01 	strb.w	r1, [r3], #1
	data[0] = -1;
 8000566:	4d0b      	ldr	r5, [pc, #44]	; (8000594 <init_midi+0x3c>)
 8000568:	4618      	mov	r0, r3
	midi_uart = huart->Instance;
 800056a:	6014      	str	r4, [r2, #0]
	data[0] = -1;
 800056c:	227f      	movs	r2, #127	; 0x7f
 800056e:	7029      	strb	r1, [r5, #0]
	data[1] = -1;
 8000570:	7069      	strb	r1, [r5, #1]
		if (i == RING_BUFFER_SIZE - 1) {
 8000572:	f004 fdcd 	bl	8005110 <memset>
			break;
		}
	}
	midi_buffer_read = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <init_midi+0x40>)
	midi_buffer_write = 0;
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <init_midi+0x44>)
	midi_buffer_read = 0;
 800057c:	700b      	strb	r3, [r1, #0]
	midi_buffer_write = 0;
 800057e:	7013      	strb	r3, [r2, #0]
	midi_uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_RE;		//enable reciever interrupt
 8000580:	68e3      	ldr	r3, [r4, #12]
 8000582:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000586:	60e3      	str	r3, [r4, #12]
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20001084 	.word	0x20001084
 8000590:	200011d0 	.word	0x200011d0
 8000594:	200011d4 	.word	0x200011d4
 8000598:	20001410 	.word	0x20001410
 800059c:	20000bf8 	.word	0x20000bf8

080005a0 <process_midi_byte>:

void process_midi_byte() {
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 80005a2:	4c59      	ldr	r4, [pc, #356]	; (8000708 <process_midi_byte+0x168>)
 80005a4:	4959      	ldr	r1, [pc, #356]	; (800070c <process_midi_byte+0x16c>)
 80005a6:	7822      	ldrb	r2, [r4, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 80005a8:	7823      	ldrb	r3, [r4, #0]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80005aa:	5688      	ldrsb	r0, [r1, r2]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 80005ac:	3301      	adds	r3, #1
 80005ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80005b2:	2800      	cmp	r0, #0
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 80005b4:	5c8a      	ldrb	r2, [r1, r2]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 80005b6:	7023      	strb	r3, [r4, #0]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80005b8:	db48      	blt.n	800064c <process_midi_byte+0xac>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {													//if byte received was data byte
		switch (status & 0xF0) {
 80005ba:	4b55      	ldr	r3, [pc, #340]	; (8000710 <process_midi_byte+0x170>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005c2:	2bc0      	cmp	r3, #192	; 0xc0
 80005c4:	d03f      	beq.n	8000646 <process_midi_byte+0xa6>
 80005c6:	d81c      	bhi.n	8000602 <process_midi_byte+0x62>
 80005c8:	2ba0      	cmp	r3, #160	; 0xa0
 80005ca:	d002      	beq.n	80005d2 <process_midi_byte+0x32>
 80005cc:	d907      	bls.n	80005de <process_midi_byte+0x3e>
 80005ce:	2bb0      	cmp	r3, #176	; 0xb0
 80005d0:	d16d      	bne.n	80006ae <process_midi_byte+0x10e>
				data[1] = midi_in;
				polyphonic_pressure();
			}
			break;
		case 0xB0:												//control change (unimplemented)
			if (data[0] == (uint8_t)-1) {
 80005d2:	4b50      	ldr	r3, [pc, #320]	; (8000714 <process_midi_byte+0x174>)
 80005d4:	7819      	ldrb	r1, [r3, #0]
 80005d6:	29ff      	cmp	r1, #255	; 0xff
 80005d8:	d036      	beq.n	8000648 <process_midi_byte+0xa8>
				data[0] = midi_in;
			}
			else {
				data[1] = midi_in;
 80005da:	705a      	strb	r2, [r3, #1]
			reset();
		default:
			reset();
		}
	}
}
 80005dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (status & 0xF0) {
 80005de:	2b80      	cmp	r3, #128	; 0x80
 80005e0:	d03b      	beq.n	800065a <process_midi_byte+0xba>
 80005e2:	2b90      	cmp	r3, #144	; 0x90
 80005e4:	d163      	bne.n	80006ae <process_midi_byte+0x10e>
			if (data[0] == (uint8_t)-1) {
 80005e6:	4c4b      	ldr	r4, [pc, #300]	; (8000714 <process_midi_byte+0x174>)
 80005e8:	7820      	ldrb	r0, [r4, #0]
 80005ea:	28ff      	cmp	r0, #255	; 0xff
 80005ec:	d039      	beq.n	8000662 <process_midi_byte+0xc2>
				data[1] = midi_in;
 80005ee:	7062      	strb	r2, [r4, #1]
				if (data[1] == 0) {
 80005f0:	2a00      	cmp	r2, #0
 80005f2:	f040 8082 	bne.w	80006fa <process_midi_byte+0x15a>
	midi_buffer_write = 0;
	clear_voices();
}

void note_off() {
	release_voice(data[0]);
 80005f6:	f000 ff13 	bl	8001420 <release_voice>
	data[0] = -1;
 80005fa:	23ff      	movs	r3, #255	; 0xff
 80005fc:	7023      	strb	r3, [r4, #0]
	data[1] = -1;
 80005fe:	7063      	strb	r3, [r4, #1]
}
 8000600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (status & 0xF0) {
 8000602:	2be0      	cmp	r3, #224	; 0xe0
 8000604:	d02f      	beq.n	8000666 <process_midi_byte+0xc6>
 8000606:	2bf0      	cmp	r3, #240	; 0xf0
 8000608:	d11b      	bne.n	8000642 <process_midi_byte+0xa2>
	midi_uart->CR1 &= ~USART_CR1_RXNEIE;					//disable usart interrupt
 800060a:	4f43      	ldr	r7, [pc, #268]	; (8000718 <process_midi_byte+0x178>)
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	f022 0220 	bic.w	r2, r2, #32
 8000614:	60da      	str	r2, [r3, #12]
	while (midi_uart->SR & USART_SR_RXNE) {
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	0695      	lsls	r5, r2, #26
 800061a:	d503      	bpl.n	8000624 <process_midi_byte+0x84>
		midi_uart->DR;										//flush RDR usart buffer
 800061c:	685a      	ldr	r2, [r3, #4]
	while (midi_uart->SR & USART_SR_RXNE) {
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	0690      	lsls	r0, r2, #26
 8000622:	d4fb      	bmi.n	800061c <process_midi_byte+0x7c>
	midi_buffer_read = 0;
 8000624:	2000      	movs	r0, #0
	data[0] = -1;
 8000626:	21ff      	movs	r1, #255	; 0xff
	midi_uart->CR1 |= USART_CR1_RXNEIE;						//re-enable usart interrupt
 8000628:	68da      	ldr	r2, [r3, #12]
	data[0] = -1;
 800062a:	4d3a      	ldr	r5, [pc, #232]	; (8000714 <process_midi_byte+0x174>)
	midi_buffer_write = 0;
 800062c:	4e3b      	ldr	r6, [pc, #236]	; (800071c <process_midi_byte+0x17c>)
	midi_uart->CR1 |= USART_CR1_RXNEIE;						//re-enable usart interrupt
 800062e:	f042 0220 	orr.w	r2, r2, #32
 8000632:	60da      	str	r2, [r3, #12]
	data[0] = -1;
 8000634:	7029      	strb	r1, [r5, #0]
	midi_buffer_read = 0;
 8000636:	7020      	strb	r0, [r4, #0]
	data[1] = -1;
 8000638:	7069      	strb	r1, [r5, #1]
	midi_buffer_write = 0;
 800063a:	7030      	strb	r0, [r6, #0]
	clear_voices();
 800063c:	f000 fd9a 	bl	8001174 <clear_voices>
}
 8000640:	e038      	b.n	80006b4 <process_midi_byte+0x114>
		switch (status & 0xF0) {
 8000642:	2bd0      	cmp	r3, #208	; 0xd0
 8000644:	d133      	bne.n	80006ae <process_midi_byte+0x10e>
			data[0] = midi_in;
 8000646:	4b33      	ldr	r3, [pc, #204]	; (8000714 <process_midi_byte+0x174>)
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data[0] = -1;
 800064c:	21ff      	movs	r1, #255	; 0xff
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <process_midi_byte+0x174>)
		status = midi_in;
 8000650:	482f      	ldr	r0, [pc, #188]	; (8000710 <process_midi_byte+0x170>)
		data[0] = -1;
 8000652:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 8000654:	7059      	strb	r1, [r3, #1]
		status = midi_in;
 8000656:	7002      	strb	r2, [r0, #0]
}
 8000658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (data[0] == (uint8_t)-1) {
 800065a:	4c2e      	ldr	r4, [pc, #184]	; (8000714 <process_midi_byte+0x174>)
 800065c:	7820      	ldrb	r0, [r4, #0]
 800065e:	28ff      	cmp	r0, #255	; 0xff
 8000660:	d142      	bne.n	80006e8 <process_midi_byte+0x148>
				data[0] = midi_in;
 8000662:	7022      	strb	r2, [r4, #0]
}
 8000664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (data[0] == (uint8_t)-1) {
 8000666:	482b      	ldr	r0, [pc, #172]	; (8000714 <process_midi_byte+0x174>)
 8000668:	7803      	ldrb	r3, [r0, #0]
 800066a:	2bff      	cmp	r3, #255	; 0xff
 800066c:	d043      	beq.n	80006f6 <process_midi_byte+0x156>
	pitch -= MIDI_PITCH_ZERO;
	pitch >>= 7;
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
	}
	data[0] = -1;
 800066e:	24ff      	movs	r4, #255	; 0xff
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 8000670:	4e2b      	ldr	r6, [pc, #172]	; (8000720 <process_midi_byte+0x180>)
	int16_t pitch = ((int16_t)data[1] << 7) | data[0];
 8000672:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 8000676:	7835      	ldrb	r5, [r6, #0]
 8000678:	7871      	ldrb	r1, [r6, #1]
 800067a:	78b2      	ldrb	r2, [r6, #2]
	pitch -= MIDI_PITCH_ZERO;
 800067c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 8000680:	78f6      	ldrb	r6, [r6, #3]
 8000682:	f343 13c8 	sbfx	r3, r3, #7, #9
 8000686:	fb03 f505 	mul.w	r5, r3, r5
 800068a:	fb03 f101 	mul.w	r1, r3, r1
 800068e:	fb03 f202 	mul.w	r2, r3, r2
 8000692:	fb03 f306 	mul.w	r3, r3, r6
 8000696:	4e23      	ldr	r6, [pc, #140]	; (8000724 <process_midi_byte+0x184>)
 8000698:	112d      	asrs	r5, r5, #4
 800069a:	1109      	asrs	r1, r1, #4
 800069c:	1112      	asrs	r2, r2, #4
 800069e:	111b      	asrs	r3, r3, #4
 80006a0:	7035      	strb	r5, [r6, #0]
 80006a2:	7071      	strb	r1, [r6, #1]
 80006a4:	70b2      	strb	r2, [r6, #2]
 80006a6:	70f3      	strb	r3, [r6, #3]
	data[0] = -1;
 80006a8:	7004      	strb	r4, [r0, #0]
	data[1] = -1;
 80006aa:	7044      	strb	r4, [r0, #1]
}
 80006ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ae:	4d19      	ldr	r5, [pc, #100]	; (8000714 <process_midi_byte+0x174>)
 80006b0:	4f19      	ldr	r7, [pc, #100]	; (8000718 <process_midi_byte+0x178>)
 80006b2:	4e1a      	ldr	r6, [pc, #104]	; (800071c <process_midi_byte+0x17c>)
	midi_uart->CR1 &= ~USART_CR1_RXNEIE;					//disable usart interrupt
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	f022 0220 	bic.w	r2, r2, #32
 80006bc:	60da      	str	r2, [r3, #12]
	while (midi_uart->SR & USART_SR_RXNE) {
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	0691      	lsls	r1, r2, #26
 80006c2:	d503      	bpl.n	80006cc <process_midi_byte+0x12c>
		midi_uart->DR;										//flush RDR usart buffer
 80006c4:	685a      	ldr	r2, [r3, #4]
	while (midi_uart->SR & USART_SR_RXNE) {
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	0692      	lsls	r2, r2, #26
 80006ca:	d4fb      	bmi.n	80006c4 <process_midi_byte+0x124>
	midi_buffer_read = 0;
 80006cc:	2100      	movs	r1, #0
	data[0] = -1;
 80006ce:	20ff      	movs	r0, #255	; 0xff
	midi_uart->CR1 |= USART_CR1_RXNEIE;						//re-enable usart interrupt
 80006d0:	68da      	ldr	r2, [r3, #12]
	data[0] = -1;
 80006d2:	7028      	strb	r0, [r5, #0]
	midi_uart->CR1 |= USART_CR1_RXNEIE;						//re-enable usart interrupt
 80006d4:	f042 0220 	orr.w	r2, r2, #32
 80006d8:	60da      	str	r2, [r3, #12]
	data[1] = -1;
 80006da:	7068      	strb	r0, [r5, #1]
	midi_buffer_read = 0;
 80006dc:	7021      	strb	r1, [r4, #0]
	midi_buffer_write = 0;
 80006de:	7031      	strb	r1, [r6, #0]
}
 80006e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	clear_voices();
 80006e4:	f000 bd46 	b.w	8001174 <clear_voices>
				data[1] = midi_in;
 80006e8:	7062      	strb	r2, [r4, #1]
	release_voice(data[0]);
 80006ea:	f000 fe99 	bl	8001420 <release_voice>
	data[0] = -1;
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	7023      	strb	r3, [r4, #0]
	data[1] = -1;
 80006f2:	7063      	strb	r3, [r4, #1]
}
 80006f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data[0] = midi_in;
 80006f6:	7002      	strb	r2, [r0, #0]
}
 80006f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	add_voice(data[0]);
 80006fa:	f000 fd4d 	bl	8001198 <add_voice>
	data[0] = -1;
 80006fe:	23ff      	movs	r3, #255	; 0xff
 8000700:	7023      	strb	r3, [r4, #0]
	data[1] = -1;
 8000702:	7063      	strb	r3, [r4, #1]
}
 8000704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000706:	bf00      	nop
 8000708:	20001410 	.word	0x20001410
 800070c:	20001084 	.word	0x20001084
 8000710:	200015ac 	.word	0x200015ac
 8000714:	200011d4 	.word	0x200011d4
 8000718:	200011d0 	.word	0x200011d0
 800071c:	20000bf8 	.word	0x20000bf8
 8000720:	20000ac0 	.word	0x20000ac0
 8000724:	20000ab4 	.word	0x20000ab4

08000728 <reset>:
	midi_uart->CR1 &= ~USART_CR1_RXNEIE;					//disable usart interrupt
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <reset+0x3c>)
void reset() {
 800072a:	b430      	push	{r4, r5}
	midi_uart->CR1 &= ~USART_CR1_RXNEIE;					//disable usart interrupt
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	f022 0220 	bic.w	r2, r2, #32
 8000734:	60da      	str	r2, [r3, #12]
	while (midi_uart->SR & USART_SR_RXNE) {
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	0691      	lsls	r1, r2, #26
 800073a:	d503      	bpl.n	8000744 <reset+0x1c>
		midi_uart->DR;										//flush RDR usart buffer
 800073c:	685a      	ldr	r2, [r3, #4]
	while (midi_uart->SR & USART_SR_RXNE) {
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	0692      	lsls	r2, r2, #26
 8000742:	d4fb      	bmi.n	800073c <reset+0x14>
	data[0] = -1;
 8000744:	21ff      	movs	r1, #255	; 0xff
	midi_buffer_read = 0;
 8000746:	2000      	movs	r0, #0
	midi_uart->CR1 |= USART_CR1_RXNEIE;						//re-enable usart interrupt
 8000748:	68da      	ldr	r2, [r3, #12]
	midi_buffer_read = 0;
 800074a:	4d07      	ldr	r5, [pc, #28]	; (8000768 <reset+0x40>)
	midi_uart->CR1 |= USART_CR1_RXNEIE;						//re-enable usart interrupt
 800074c:	f042 0220 	orr.w	r2, r2, #32
 8000750:	60da      	str	r2, [r3, #12]
	data[0] = -1;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <reset+0x44>)
	midi_buffer_write = 0;
 8000754:	4c06      	ldr	r4, [pc, #24]	; (8000770 <reset+0x48>)
	data[0] = -1;
 8000756:	7019      	strb	r1, [r3, #0]
	data[1] = -1;
 8000758:	7059      	strb	r1, [r3, #1]
	midi_buffer_read = 0;
 800075a:	7028      	strb	r0, [r5, #0]
	midi_buffer_write = 0;
 800075c:	7020      	strb	r0, [r4, #0]
}
 800075e:	bc30      	pop	{r4, r5}
	clear_voices();
 8000760:	f000 bd08 	b.w	8001174 <clear_voices>
 8000764:	200011d0 	.word	0x200011d0
 8000768:	20001410 	.word	0x20001410
 800076c:	200011d4 	.word	0x200011d4
 8000770:	20000bf8 	.word	0x20000bf8

08000774 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <note_to_freq+0x8>)
}
 8000776:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800077a:	4770      	bx	lr
 800077c:	08005188 	.word	0x08005188

08000780 <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 8000782:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000784:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 8000788:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	be37c63b 	.word	0xbe37c63b

08000794 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <HAL_MspInit+0x3c>)
{
 8000796:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000798:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079a:	490e      	ldr	r1, [pc, #56]	; (80007d4 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800079c:	f042 0201 	orr.w	r2, r2, #1
 80007a0:	619a      	str	r2, [r3, #24]
 80007a2:	699a      	ldr	r2, [r3, #24]
 80007a4:	f002 0201 	and.w	r2, r2, #1
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	69da      	ldr	r2, [r3, #28]
 80007ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007b2:	61da      	str	r2, [r3, #28]
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007be:	684b      	ldr	r3, [r1, #4]
 80007c0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	b002      	add	sp, #8
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010000 	.word	0x40010000

080007d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C2)
 80007de:	6802      	ldr	r2, [r0, #0]
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <HAL_I2C_MspInit+0xa0>)
{
 80007e2:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 80007e4:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80007ea:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hi2c->Instance==I2C2)
 80007ee:	d002      	beq.n	80007f6 <HAL_I2C_MspInit+0x1e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007f0:	b007      	add	sp, #28
 80007f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f6:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007f8:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 80007fc:	f04f 0912 	mov.w	r9, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4f1e      	ldr	r7, [pc, #120]	; (800087c <HAL_I2C_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	4605      	mov	r5, r0
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	481b      	ldr	r0, [pc, #108]	; (8000880 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081a:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800081c:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f002 fbd0 	bl	8002fc4 <HAL_GPIO_Init>
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000824:	f04f 0c10 	mov.w	ip, #16
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000828:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C2_CLK_ENABLE();
 800082a:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800082c:	4e15      	ldr	r6, [pc, #84]	; (8000884 <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 800082e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000836:	4914      	ldr	r1, [pc, #80]	; (8000888 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800083c:	9301      	str	r3, [sp, #4]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800083e:	4630      	mov	r0, r6
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000840:	e9c6 c401 	strd	ip, r4, [r6, #4]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000844:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000848:	e9c6 4406 	strd	r4, r4, [r6, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
 800084c:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800084e:	6031      	str	r1, [r6, #0]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	60f2      	str	r2, [r6, #12]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000852:	f002 fa61 	bl	8002d18 <HAL_DMA_Init>
 8000856:	b960      	cbnz	r0, 8000872 <HAL_I2C_MspInit+0x9a>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	2021      	movs	r0, #33	; 0x21
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800085e:	636e      	str	r6, [r5, #52]	; 0x34
 8000860:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8000862:	f002 f9fb 	bl	8002c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000866:	2021      	movs	r0, #33	; 0x21
 8000868:	f002 fa30 	bl	8002ccc <HAL_NVIC_EnableIRQ>
}
 800086c:	b007      	add	sp, #28
 800086e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8000872:	f7ff fe6f 	bl	8000554 <Error_Handler>
 8000876:	e7ef      	b.n	8000858 <HAL_I2C_MspInit+0x80>
 8000878:	40005800 	.word	0x40005800
 800087c:	40021000 	.word	0x40021000
 8000880:	40010c00 	.word	0x40010c00
 8000884:	20000d98 	.word	0x20000d98
 8000888:	40020044 	.word	0x40020044

0800088c <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	2300      	movs	r3, #0
{
 800088e:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 8000890:	6801      	ldr	r1, [r0, #0]
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <HAL_SPI_MspInit+0x60>)
{
 8000894:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8000896:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800089c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI1)
 80008a0:	d001      	beq.n	80008a6 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008a2:	b006      	add	sp, #24
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008a6:	24a0      	movs	r4, #160	; 0xa0
 80008a8:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008b0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80008b4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	480e      	ldr	r0, [pc, #56]	; (80008f0 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008bc:	619a      	str	r2, [r3, #24]
 80008be:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80008c6:	9200      	str	r2, [sp, #0]
 80008c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	699a      	ldr	r2, [r3, #24]
 80008cc:	f042 0204 	orr.w	r2, r2, #4
 80008d0:	619a      	str	r2, [r3, #24]
 80008d2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f002 fb6f 	bl	8002fc4 <HAL_GPIO_Init>
}
 80008e6:	b006      	add	sp, #24
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
 80008ea:	bf00      	nop
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40010800 	.word	0x40010800

080008f4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80008f4:	6803      	ldr	r3, [r0, #0]
 80008f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008fa:	d000      	beq.n	80008fe <HAL_TIM_Base_MspInit+0xa>
 80008fc:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000902:	69d8      	ldr	r0, [r3, #28]
{
 8000904:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000906:	f040 0001 	orr.w	r0, r0, #1
 800090a:	61d8      	str	r0, [r3, #28]
 800090c:	69db      	ldr	r3, [r3, #28]
{
 800090e:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2102      	movs	r1, #2
 800091a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800091c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800091e:	f002 f99d 	bl	8002c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000922:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000924:	b003      	add	sp, #12
 8000926:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800092a:	f002 b9cf 	b.w	8002ccc <HAL_NVIC_EnableIRQ>
 800092e:	bf00      	nop

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8000934:	6802      	ldr	r2, [r0, #0]
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_UART_MspInit+0x88>)
{
 8000938:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 800093a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000940:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8000944:	d001      	beq.n	800094a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000946:	b007      	add	sp, #28
 8000948:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800094a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800094e:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8000952:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000956:	699a      	ldr	r2, [r3, #24]
 8000958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800095c:	619a      	str	r2, [r3, #24]
 800095e:	699a      	ldr	r2, [r3, #24]
 8000960:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000964:	9200      	str	r2, [sp, #0]
 8000966:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	f042 0204 	orr.w	r2, r2, #4
 800096e:	619a      	str	r2, [r3, #24]
 8000970:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000972:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	a902      	add	r1, sp, #8
 8000982:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000988:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f002 fb1b 	bl	8002fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800098e:	2300      	movs	r3, #0
 8000990:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	a902      	add	r1, sp, #8
 8000996:	4809      	ldr	r0, [pc, #36]	; (80009bc <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000998:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f002 fb11 	bl	8002fc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009a2:	4622      	mov	r2, r4
 80009a4:	4621      	mov	r1, r4
 80009a6:	2025      	movs	r0, #37	; 0x25
 80009a8:	f002 f958 	bl	8002c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ac:	2025      	movs	r0, #37	; 0x25
 80009ae:	f002 f98d 	bl	8002ccc <HAL_NVIC_EnableIRQ>
}
 80009b2:	b007      	add	sp, #28
 80009b4:	bd30      	pop	{r4, r5, pc}
 80009b6:	bf00      	nop
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40010800 	.word	0x40010800

080009c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler>
 80009c2:	bf00      	nop

080009c4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <HardFault_Handler>
 80009c6:	bf00      	nop

080009c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler>
 80009ca:	bf00      	nop

080009cc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <BusFault_Handler>
 80009ce:	bf00      	nop

080009d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler>
 80009d2:	bf00      	nop

080009d4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <DebugMon_Handler>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <PendSV_Handler>:
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop

080009e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f002 b906 	b.w	8002bf0 <HAL_IncTick>

080009e4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80009e4:	2008      	movs	r0, #8
 80009e6:	f002 bbfd 	b.w	80031e4 <HAL_GPIO_EXTI_IRQHandler>
 80009ea:	bf00      	nop

080009ec <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80009ec:	4801      	ldr	r0, [pc, #4]	; (80009f4 <DMA1_Channel4_IRQHandler+0x8>)
 80009ee:	f002 ba51 	b.w	8002e94 <HAL_DMA_IRQHandler>
 80009f2:	bf00      	nop
 80009f4:	20000d98 	.word	0x20000d98

080009f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80009fa:	2020      	movs	r0, #32
 80009fc:	f002 fbf2 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a00:	2080      	movs	r0, #128	; 0x80
 8000a02:	f002 fbef 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a0a:	f002 fbeb 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000a12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a16:	f002 bbe5 	b.w	80031e4 <HAL_GPIO_EXTI_IRQHandler>
 8000a1a:	bf00      	nop

08000a1c <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 8000a1c:	f7ff bd94 	b.w	8000548 <sample>

08000a20 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000a20:	4801      	ldr	r0, [pc, #4]	; (8000a28 <I2C2_EV_IRQHandler+0x8>)
 8000a22:	f003 b97f 	b.w	8003d24 <HAL_I2C_EV_IRQHandler>
 8000a26:	bf00      	nop
 8000a28:	20000acc 	.word	0x20000acc

08000a2c <USART1_IRQHandler>:
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	midi_read();
 8000a2c:	f7ff bd70 	b.w	8000510 <midi_read>

08000a30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a36:	f002 fbd5 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000a3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a42:	f002 bbcf 	b.w	80031e4 <HAL_GPIO_EXTI_IRQHandler>
 8000a46:	bf00      	nop

08000a48 <modulate>:
		}
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
	}
}

static inline int8_t modulate(uint8_t voice_index) {
 8000a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/*update phase of active operator*/
	op[0][voice_index].phase = update_phase(op[0][voice_index].delta + op_pitch_bend[0], op[0][voice_index].phase);
 8000a4c:	4fc4      	ldr	r7, [pc, #784]	; (8000d60 <modulate+0x318>)
 8000a4e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8000a52:	eb07 0343 	add.w	r3, r7, r3, lsl #1
	-27, -25, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9,  -7,  -5,  -3,  -2,
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 8000a56:	891e      	ldrh	r6, [r3, #8]
 8000a58:	f8b3 1078 	ldrh.w	r1, [r3, #120]	; 0x78
 8000a5c:	f8b3 4076 	ldrh.w	r4, [r3, #118]	; 0x76
 8000a60:	88dd      	ldrh	r5, [r3, #6]
 8000a62:	f8df c308 	ldr.w	ip, [pc, #776]	; 8000d6c <modulate+0x324>
 8000a66:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	; 0xe8
 8000a6a:	eb04 0801 	add.w	r8, r4, r1
 8000a6e:	f8b3 e0e6 	ldrh.w	lr, [r3, #230]	; 0xe6
 8000a72:	f8b3 1156 	ldrh.w	r1, [r3, #342]	; 0x156
 8000a76:	4435      	add	r5, r6
 8000a78:	f8b3 6158 	ldrh.w	r6, [r3, #344]	; 0x158
 8000a7c:	f99c 9000 	ldrsb.w	r9, [ip]
 8000a80:	440e      	add	r6, r1
	op[1][voice_index].phase = update_phase(op[1][voice_index].delta + op_pitch_bend[1], op[1][voice_index].phase);
 8000a82:	f99c 4001 	ldrsb.w	r4, [ip, #1]
	op[2][voice_index].phase = update_phase(op[2][voice_index].delta + op_pitch_bend[2], op[2][voice_index].phase);
	op[3][voice_index].phase = update_phase(op[3][voice_index].delta + op_pitch_bend[3], op[3][voice_index].phase);
 8000a86:	f99c 1003 	ldrsb.w	r1, [ip, #3]
 8000a8a:	4496      	add	lr, r2
	op[2][voice_index].phase = update_phase(op[2][voice_index].delta + op_pitch_bend[2], op[2][voice_index].phase);
 8000a8c:	f99c 2002 	ldrsb.w	r2, [ip, #2]


	switch (algo) {
 8000a90:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8000d70 <modulate+0x328>
 8000a94:	4431      	add	r1, r6
 8000a96:	444d      	add	r5, r9
 8000a98:	4444      	add	r4, r8
 8000a9a:	4472      	add	r2, lr
 8000a9c:	f89c 6000 	ldrb.w	r6, [ip]
 8000aa0:	b2ad      	uxth	r5, r5
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	b292      	uxth	r2, r2
 8000aa6:	b289      	uxth	r1, r1
	op[0][voice_index].phase = update_phase(op[0][voice_index].delta + op_pitch_bend[0], op[0][voice_index].phase);
 8000aa8:	811d      	strh	r5, [r3, #8]
	op[1][voice_index].phase = update_phase(op[1][voice_index].delta + op_pitch_bend[1], op[1][voice_index].phase);
 8000aaa:	f8a3 4078 	strh.w	r4, [r3, #120]	; 0x78
	op[2][voice_index].phase = update_phase(op[2][voice_index].delta + op_pitch_bend[2], op[2][voice_index].phase);
 8000aae:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	op[3][voice_index].phase = update_phase(op[3][voice_index].delta + op_pitch_bend[3], op[3][voice_index].phase);
 8000ab2:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
	op[0][voice_index].phase = update_phase(op[0][voice_index].delta + op_pitch_bend[0], op[0][voice_index].phase);
 8000ab6:	00c3      	lsls	r3, r0, #3
 8000ab8:	2e0b      	cmp	r6, #11
 8000aba:	f200 81b5 	bhi.w	8000e28 <modulate+0x3e0>
 8000abe:	e8df f016 	tbh	[pc, r6, lsl #1]
 8000ac2:	0038      	.short	0x0038
 8000ac4:	00790061 	.word	0x00790061
 8000ac8:	00cb00a0 	.word	0x00cb00a0
 8000acc:	011400e9 	.word	0x011400e9
 8000ad0:	01590131 	.word	0x01590131
 8000ad4:	01a2018d 	.word	0x01a2018d
 8000ad8:	000c      	.short	0x000c
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
		return ((int16_t)op2 + op1 + op0) / 0x03;
		break;
	case 0x0B:
		op3 = get_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ada:	1a18      	subs	r0, r3, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000adc:	4ba1      	ldr	r3, [pc, #644]	; (8000d64 <modulate+0x31c>)
 8000ade:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000ae2:	0a09      	lsrs	r1, r1, #8
 8000ae4:	0a12      	lsrs	r2, r2, #8
 8000ae6:	f913 e001 	ldrsb.w	lr, [r3, r1]
		op2 = get_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000aea:	f913 c002 	ldrsb.w	ip, [r3, r2]
 8000aee:	0a24      	lsrs	r4, r4, #8
		op3 = get_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000af0:	f897 0154 	ldrb.w	r0, [r7, #340]	; 0x154
		op2 = get_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000af4:	f897 10e4 	ldrb.w	r1, [r7, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000af8:	571e      	ldrsb	r6, [r3, r4]
 8000afa:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8000afe:	0a2d      	lsrs	r5, r5, #8
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b00:	575c      	ldrsb	r4, [r3, r5]
		op3 = get_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b02:	fb00 f00e 	mul.w	r0, r0, lr
		op2 = get_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b06:	fb01 f10c 	mul.w	r1, r1, ip
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b0a:	793b      	ldrb	r3, [r7, #4]
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b0c:	fb02 f206 	mul.w	r2, r2, r6
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b10:	fb03 f304 	mul.w	r3, r3, r4
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 8000b14:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000b18:	f341 11c7 	sbfx	r1, r1, #7, #8
 8000b1c:	4408      	add	r0, r1
 8000b1e:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000b22:	4410      	add	r0, r2
 8000b24:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000b28:	4418      	add	r0, r3
 8000b2a:	f340 0087 	sbfx	r0, r0, #2, #8
		break;
	default:
		break;
	}
	return 0;
}
 8000b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b32:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b34:	4b8c      	ldr	r3, [pc, #560]	; (8000d68 <modulate+0x320>)
 8000b36:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000b3a:	0a09      	lsrs	r1, r1, #8
 8000b3c:	f897 0154 	ldrb.w	r0, [r7, #340]	; 0x154
 8000b40:	5659      	ldrsb	r1, [r3, r1]
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b42:	0a12      	lsrs	r2, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b44:	fb00 f101 	mul.w	r1, r0, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b48:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	5699      	ldrsb	r1, [r3, r2]
 8000b50:	f897 20e4 	ldrb.w	r2, [r7, #228]	; 0xe4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b54:	0a24      	lsrs	r4, r4, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b56:	fb02 f201 	mul.w	r2, r2, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b5a:	eb04 14e2 	add.w	r4, r4, r2, asr #7
 8000b5e:	b2e4      	uxtb	r4, r4
 8000b60:	571a      	ldrsb	r2, [r3, r4]
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b62:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b66:	0a2d      	lsrs	r5, r5, #8
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b68:	fb03 f302 	mul.w	r3, r3, r2
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000b6c:	4a7d      	ldr	r2, [pc, #500]	; (8000d64 <modulate+0x31c>)
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b6e:	eb05 15e3 	add.w	r5, r5, r3, asr #7
 8000b72:	b2ed      	uxtb	r5, r5
 8000b74:	7938      	ldrb	r0, [r7, #4]
 8000b76:	5753      	ldrsb	r3, [r2, r5]
 8000b78:	fb00 f003 	mul.w	r0, r0, r3
 8000b7c:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b84:	4e78      	ldr	r6, [pc, #480]	; (8000d68 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b86:	1a18      	subs	r0, r3, r0
 8000b88:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000b8c:	0a12      	lsrs	r2, r2, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b8e:	56b0      	ldrsb	r0, [r6, r2]
 8000b90:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8000b94:	0a09      	lsrs	r1, r1, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b96:	5671      	ldrsb	r1, [r6, r1]
 8000b98:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b9c:	fb03 f300 	mul.w	r3, r3, r0
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba0:	fb02 f201 	mul.w	r2, r2, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba4:	11db      	asrs	r3, r3, #7
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba6:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000baa:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8000bae:	b2e4      	uxtb	r4, r4
 8000bb0:	5732      	ldrsb	r2, [r6, r4]
 8000bb2:	e7d6      	b.n	8000b62 <modulate+0x11a>
 8000bb4:	4e6c      	ldr	r6, [pc, #432]	; (8000d68 <modulate+0x320>)
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bb6:	1a18      	subs	r0, r3, r0
 8000bb8:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000bbc:	0a12      	lsrs	r2, r2, #8
 8000bbe:	56b2      	ldrsb	r2, [r6, r2]
 8000bc0:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bc4:	0a24      	lsrs	r4, r4, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bc6:	fb03 f302 	mul.w	r3, r3, r2
 8000bca:	0a09      	lsrs	r1, r1, #8
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bcc:	eb04 14e3 	add.w	r4, r4, r3, asr #7
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bd0:	5671      	ldrsb	r1, [r6, r1]
 8000bd2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8000bd6:	b2e4      	uxtb	r4, r4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bd8:	5730      	ldrsb	r0, [r6, r4]
 8000bda:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bde:	fb03 f101 	mul.w	r1, r3, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000be2:	fb02 f200 	mul.w	r2, r2, r0
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000be6:	0a2b      	lsrs	r3, r5, #8
 8000be8:	eb03 13e1 	add.w	r3, r3, r1, asr #7
 8000bec:	eb03 13e2 	add.w	r3, r3, r2, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000bf0:	4a5c      	ldr	r2, [pc, #368]	; (8000d64 <modulate+0x31c>)
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	7938      	ldrb	r0, [r7, #4]
 8000bf6:	56d3      	ldrsb	r3, [r2, r3]
 8000bf8:	fb00 f003 	mul.w	r0, r0, r3
 8000bfc:	f340 10c7 	sbfx	r0, r0, #7, #8
		return op0;
 8000c00:	e795      	b.n	8000b2e <modulate+0xe6>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c02:	4e59      	ldr	r6, [pc, #356]	; (8000d68 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c04:	1a18      	subs	r0, r3, r0
 8000c06:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000c0a:	0a0b      	lsrs	r3, r1, #8
 8000c0c:	56f0      	ldrsb	r0, [r6, r3]
 8000c0e:	f897 1154 	ldrb.w	r1, [r7, #340]	; 0x154
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c12:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c16:	fb01 f100 	mul.w	r1, r1, r0
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c1a:	f3c1 11c7 	ubfx	r1, r1, #7, #8
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c1e:	eb01 2414 	add.w	r4, r1, r4, lsr #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c22:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8000c26:	b2e4      	uxtb	r4, r4
 8000c28:	b2d2      	uxtb	r2, r2
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c2a:	5730      	ldrsb	r0, [r6, r4]
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c2c:	56b1      	ldrsb	r1, [r6, r2]
 8000c2e:	f897 20e4 	ldrb.w	r2, [r7, #228]	; 0xe4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c32:	fb03 f300 	mul.w	r3, r3, r0
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c36:	fb02 f201 	mul.w	r2, r2, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c3a:	11db      	asrs	r3, r3, #7
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c3c:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000c40:	eb03 2515 	add.w	r5, r3, r5, lsr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000c44:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <modulate+0x31c>)
 8000c46:	b2ed      	uxtb	r5, r5
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c48:	7938      	ldrb	r0, [r7, #4]
 8000c4a:	575b      	ldrsb	r3, [r3, r5]
 8000c4c:	fb00 f003 	mul.w	r0, r0, r3
 8000c50:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c58:	4e43      	ldr	r6, [pc, #268]	; (8000d68 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c5a:	1a18      	subs	r0, r3, r0
 8000c5c:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000c60:	0a12      	lsrs	r2, r2, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c62:	56b0      	ldrsb	r0, [r6, r2]
 8000c64:	0a09      	lsrs	r1, r1, #8
 8000c66:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c6a:	5672      	ldrsb	r2, [r6, r1]
 8000c6c:	f897 1154 	ldrb.w	r1, [r7, #340]	; 0x154
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c70:	fb03 f300 	mul.w	r3, r3, r0
 8000c74:	0a24      	lsrs	r4, r4, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c76:	fb01 f102 	mul.w	r1, r1, r2
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c7a:	5730      	ldrsb	r0, [r6, r4]
 8000c7c:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c80:	11db      	asrs	r3, r3, #7
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c82:	fb02 f200 	mul.w	r2, r2, r0
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c86:	eb03 13e1 	add.w	r3, r3, r1, asr #7
 8000c8a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8000c8e:	eb05 15e2 	add.w	r5, r5, r2, asr #7
 8000c92:	e7d7      	b.n	8000c44 <modulate+0x1fc>
 8000c94:	4e34      	ldr	r6, [pc, #208]	; (8000d68 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c96:	1a18      	subs	r0, r3, r0
 8000c98:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000c9c:	0a09      	lsrs	r1, r1, #8
 8000c9e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8000ca2:	5671      	ldrsb	r1, [r6, r1]
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ca4:	0a12      	lsrs	r2, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ca6:	fb03 f301 	mul.w	r3, r3, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000caa:	eb02 12e3 	add.w	r2, r2, r3, asr #7
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	56b2      	ldrsb	r2, [r6, r2]
 8000cb2:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000cb6:	0a24      	lsrs	r4, r4, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000cb8:	fb03 f302 	mul.w	r3, r3, r2
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000cbc:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <modulate+0x31c>)
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000cbe:	eb04 14e3 	add.w	r4, r4, r3, asr #7
 8000cc2:	0a2d      	lsrs	r5, r5, #8
 8000cc4:	b2e4      	uxtb	r4, r4
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000cc6:	5711      	ldrsb	r1, [r2, r4]
 8000cc8:	f897 0074 	ldrb.w	r0, [r7, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ccc:	5752      	ldrsb	r2, [r2, r5]
 8000cce:	793b      	ldrb	r3, [r7, #4]
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000cd0:	fb00 f001 	mul.w	r0, r0, r1
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000cd4:	fb03 f302 	mul.w	r3, r3, r2
		return ((int16_t)op1 + op0) >> 1;
 8000cd8:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000cdc:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000ce0:	4418      	add	r0, r3
 8000ce2:	f340 0047 	sbfx	r0, r0, #1, #8
}
 8000ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000cea:	4e1f      	ldr	r6, [pc, #124]	; (8000d68 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000cec:	1a18      	subs	r0, r3, r0
 8000cee:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000cf2:	0a09      	lsrs	r1, r1, #8
 8000cf4:	5671      	ldrsb	r1, [r6, r1]
 8000cf6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000cfa:	0a12      	lsrs	r2, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000cfc:	fb03 f301 	mul.w	r3, r3, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d00:	eb02 12e3 	add.w	r2, r2, r3, asr #7
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	56b1      	ldrsb	r1, [r6, r2]
 8000d08:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <modulate+0x31c>)
 8000d0e:	fb03 f301 	mul.w	r3, r3, r1
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d12:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8000d16:	eb03 2414 	add.w	r4, r3, r4, lsr #8
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d1a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8000d1e:	b2e4      	uxtb	r4, r4
 8000d20:	b2ed      	uxtb	r5, r5
 8000d22:	e7d0      	b.n	8000cc6 <modulate+0x27e>
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000d24:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <modulate+0x320>)
 8000d28:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000d2c:	0a09      	lsrs	r1, r1, #8
 8000d2e:	0a24      	lsrs	r4, r4, #8
 8000d30:	f897 0154 	ldrb.w	r0, [r7, #340]	; 0x154
 8000d34:	5659      	ldrsb	r1, [r3, r1]
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d36:	571c      	ldrsb	r4, [r3, r4]
 8000d38:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000d3c:	fb00 f101 	mul.w	r1, r0, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d40:	fb03 f304 	mul.w	r3, r3, r4
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d44:	0a12      	lsrs	r2, r2, #8
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d46:	0a2d      	lsrs	r5, r5, #8
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d48:	eb02 12e1 	add.w	r2, r2, r1, asr #7
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d4c:	eb05 15e3 	add.w	r5, r5, r3, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <modulate+0x31c>)
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	b2ed      	uxtb	r5, r5
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d56:	5699      	ldrsb	r1, [r3, r2]
 8000d58:	f897 00e4 	ldrb.w	r0, [r7, #228]	; 0xe4
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d5c:	575a      	ldrsb	r2, [r3, r5]
 8000d5e:	e7b6      	b.n	8000cce <modulate+0x286>
 8000d60:	200008c0 	.word	0x200008c0
 8000d64:	08005388 	.word	0x08005388
 8000d68:	08005288 	.word	0x08005288
 8000d6c:	20000ab4 	.word	0x20000ab4
 8000d70:	20000a84 	.word	0x20000a84
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000d74:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <modulate+0x3e4>)
 8000d78:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000d7c:	0a09      	lsrs	r1, r1, #8
 8000d7e:	5658      	ldrsb	r0, [r3, r1]
 8000d80:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d84:	492a      	ldr	r1, [pc, #168]	; (8000e30 <modulate+0x3e8>)
 8000d86:	fb03 f300 	mul.w	r3, r3, r0
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d8a:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8000d8e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
		op1 = get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d92:	eb03 2414 	add.w	r4, r3, r4, lsr #8
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d96:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	b2e4      	uxtb	r4, r4
 8000d9e:	b2ed      	uxtb	r5, r5
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000da0:	568e      	ldrsb	r6, [r1, r2]
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000da2:	570c      	ldrsb	r4, [r1, r4]
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000da4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000da8:	f897 0074 	ldrb.w	r0, [r7, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000dac:	5749      	ldrsb	r1, [r1, r5]
 8000dae:	793a      	ldrb	r2, [r7, #4]
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000db0:	fb03 f306 	mul.w	r3, r3, r6
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000db4:	fb00 f004 	mul.w	r0, r0, r4
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000db8:	fb02 f201 	mul.w	r2, r2, r1
		return ((int16_t)op2 + op1 + op0) / 0x03;
 8000dbc:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000dc0:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000dc4:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000dc8:	4403      	add	r3, r0
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <modulate+0x3ec>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	fb80 2003 	smull	r2, r0, r0, r3
 8000dd2:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000dd6:	b240      	sxtb	r0, r0
}
 8000dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ddc:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <modulate+0x3e4>)
 8000de0:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000de4:	0a09      	lsrs	r1, r1, #8
 8000de6:	5658      	ldrsb	r0, [r3, r1]
 8000de8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000dec:	4910      	ldr	r1, [pc, #64]	; (8000e30 <modulate+0x3e8>)
 8000dee:	fb03 f300 	mul.w	r3, r3, r0
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000df2:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8000df6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
		op1 = get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000dfa:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	b2e4      	uxtb	r4, r4
 8000e02:	0a2d      	lsrs	r5, r5, #8
 8000e04:	e7cc      	b.n	8000da0 <modulate+0x358>
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000e06:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <modulate+0x3e4>)
 8000e0a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000e0e:	0a09      	lsrs	r1, r1, #8
 8000e10:	5659      	ldrsb	r1, [r3, r1]
 8000e12:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000e16:	0a12      	lsrs	r2, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000e18:	fb03 f301 	mul.w	r3, r3, r1
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000e1c:	eb02 12e3 	add.w	r2, r2, r3, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000e20:	4903      	ldr	r1, [pc, #12]	; (8000e30 <modulate+0x3e8>)
 8000e22:	0a24      	lsrs	r4, r4, #8
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	e7ec      	b.n	8000e02 <modulate+0x3ba>
	switch (algo) {
 8000e28:	2000      	movs	r0, #0
 8000e2a:	e680      	b.n	8000b2e <modulate+0xe6>
 8000e2c:	08005288 	.word	0x08005288
 8000e30:	08005388 	.word	0x08005388
 8000e34:	55555556 	.word	0x55555556

08000e38 <init_synth>:
 *      Author: Tennyson Cheng
 */

#include "synth.h"

void init_synth() {
 8000e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		op_release[i] = ENV_MAX_RATE;				//default release 128
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
		op_release_inc[i] = calculate_env_inc(op_release[i]);
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e3c:	4cbe      	ldr	r4, [pc, #760]	; (8001138 <init_synth+0x300>)
 8000e3e:	4bbf      	ldr	r3, [pc, #764]	; (800113c <init_synth+0x304>)
 8000e40:	4625      	mov	r5, r4
 8000e42:	46a2      	mov	sl, r4
 8000e44:	cd07      	ldmia	r5!, {r0, r1, r2}
 8000e46:	882d      	ldrh	r5, [r5, #0]
void init_synth() {
 8000e48:	b099      	sub	sp, #100	; 0x64
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e4a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000e4e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000e52:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000e56:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000e5a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000e5e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000e62:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000e66:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8000e6a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8000e6e:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8000e72:	9415      	str	r4, [sp, #84]	; 0x54
 8000e74:	6018      	str	r0, [r3, #0]
 8000e76:	9416      	str	r4, [sp, #88]	; 0x58
 8000e78:	6059      	str	r1, [r3, #4]
 8000e7a:	9417      	str	r4, [sp, #92]	; 0x5c
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	819d      	strh	r5, [r3, #12]
 8000e80:	835d      	strh	r5, [r3, #26]
 8000e82:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8000e86:	f8c3 1012 	str.w	r1, [r3, #18]
		algo = 0x00;								//default algorithm 0
 8000e8a:	f04f 0100 	mov.w	r1, #0
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e8e:	f8c3 2016 	str.w	r2, [r3, #22]
		algo = 0x00;								//default algorithm 0
 8000e92:	4aab      	ldr	r2, [pc, #684]	; (8001140 <init_synth+0x308>)
 8000e94:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
 8000e98:	7011      	strb	r1, [r2, #0]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4aa9      	ldr	r2, [pc, #676]	; (8001144 <init_synth+0x30c>)
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000e9e:	f04f 2680 	mov.w	r6, #2147516416	; 0x80008000
 8000ea2:	6011      	str	r1, [r2, #0]
 8000ea4:	4aa8      	ldr	r2, [pc, #672]	; (8001148 <init_synth+0x310>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ea6:	46a2      	mov	sl, r4
 8000ea8:	6011      	str	r1, [r2, #0]
 8000eaa:	f04f 3110 	mov.w	r1, #269488144	; 0x10101010
 8000eae:	4aa7      	ldr	r2, [pc, #668]	; (800114c <init_synth+0x314>)
 8000eb0:	46a0      	mov	r8, r4
 8000eb2:	f8c2 9000 	str.w	r9, [r2]
 8000eb6:	4aa6      	ldr	r2, [pc, #664]	; (8001150 <init_synth+0x318>)
 8000eb8:	46a6      	mov	lr, r4
 8000eba:	f8c2 9000 	str.w	r9, [r2]
 8000ebe:	4aa5      	ldr	r2, [pc, #660]	; (8001154 <init_synth+0x31c>)
 8000ec0:	46a4      	mov	ip, r4
 8000ec2:	f8c2 9000 	str.w	r9, [r2]
 8000ec6:	4aa4      	ldr	r2, [pc, #656]	; (8001158 <init_synth+0x320>)
 8000ec8:	4627      	mov	r7, r4
 8000eca:	f8c2 9000 	str.w	r9, [r2]
 8000ece:	4aa3      	ldr	r2, [pc, #652]	; (800115c <init_synth+0x324>)
 8000ed0:	f8c3 000e 	str.w	r0, [r3, #14]
 8000ed4:	f8c2 9000 	str.w	r9, [r2]
	SILENT
} ADSR_STATES;

uint16_t env_period;

static inline uint16_t calculate_env_inc(uint8_t rate) { return (ENV_MAX_RATE << 8) / (uint16_t)(ENV_MAX_RATE - rate + 1); };
 8000ed8:	4aa1      	ldr	r2, [pc, #644]	; (8001160 <init_synth+0x328>)
 8000eda:	851d      	strh	r5, [r3, #40]	; 0x28
 8000edc:	6011      	str	r1, [r2, #0]
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000ede:	4aa1      	ldr	r2, [pc, #644]	; (8001164 <init_synth+0x32c>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ee0:	86dd      	strh	r5, [r3, #54]	; 0x36
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000ee2:	6016      	str	r6, [r2, #0]
 8000ee4:	6056      	str	r6, [r2, #4]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000ee6:	4aa0      	ldr	r2, [pc, #640]	; (8001168 <init_synth+0x330>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ee8:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000eec:	6016      	str	r6, [r2, #0]
 8000eee:	6056      	str	r6, [r2, #4]
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000ef0:	4a9e      	ldr	r2, [pc, #632]	; (800116c <init_synth+0x334>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ef2:	f8a3 5052 	strh.w	r5, [r3, #82]	; 0x52
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000ef6:	6016      	str	r6, [r2, #0]
 8000ef8:	6056      	str	r6, [r2, #4]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000efa:	4656      	mov	r6, sl
 8000efc:	46a3      	mov	fp, r4
 8000efe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000f00:	61d8      	str	r0, [r3, #28]
 8000f02:	6219      	str	r1, [r3, #32]
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
 8000f06:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8000f0a:	f8c3 002a 	str.w	r0, [r3, #42]	; 0x2a
 8000f0e:	f8c3 102e 	str.w	r1, [r3, #46]	; 0x2e
 8000f12:	f8c3 2032 	str.w	r2, [r3, #50]	; 0x32
 8000f16:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8000f1a:	6398      	str	r0, [r3, #56]	; 0x38
 8000f1c:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f20:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8000f24:	f8c3 0046 	str.w	r0, [r3, #70]	; 0x46
 8000f28:	f8c3 104a 	str.w	r1, [r3, #74]	; 0x4a
 8000f2c:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
 8000f30:	cf07      	ldmia	r7!, {r0, r1, r2}
 8000f32:	6558      	str	r0, [r3, #84]	; 0x54
 8000f34:	6599      	str	r1, [r3, #88]	; 0x58
 8000f36:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f38:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f3a:	4656      	mov	r6, sl
 8000f3c:	f8a3 5060 	strh.w	r5, [r3, #96]	; 0x60
 8000f40:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8000f44:	f8a3 507c 	strh.w	r5, [r3, #124]	; 0x7c
 8000f48:	f8a3 508a 	strh.w	r5, [r3, #138]	; 0x8a
 8000f4c:	f8a3 5098 	strh.w	r5, [r3, #152]	; 0x98
 8000f50:	f8c3 0062 	str.w	r0, [r3, #98]	; 0x62
 8000f54:	f8c3 1066 	str.w	r1, [r3, #102]	; 0x66
 8000f58:	f8c3 206a 	str.w	r2, [r3, #106]	; 0x6a
 8000f5c:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f5e:	4656      	mov	r6, sl
 8000f60:	6718      	str	r0, [r3, #112]	; 0x70
 8000f62:	6759      	str	r1, [r3, #116]	; 0x74
 8000f64:	679a      	str	r2, [r3, #120]	; 0x78
 8000f66:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f68:	4656      	mov	r6, sl
 8000f6a:	f8c3 007e 	str.w	r0, [r3, #126]	; 0x7e
 8000f6e:	f8c3 1082 	str.w	r1, [r3, #130]	; 0x82
 8000f72:	f8c3 2086 	str.w	r2, [r3, #134]	; 0x86
 8000f76:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f78:	4656      	mov	r6, sl
 8000f7a:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000f7e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8000f82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000f86:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f88:	4656      	mov	r6, sl
 8000f8a:	f8a3 50a6 	strh.w	r5, [r3, #166]	; 0xa6
 8000f8e:	f8a3 50b4 	strh.w	r5, [r3, #180]	; 0xb4
 8000f92:	f8a3 50c2 	strh.w	r5, [r3, #194]	; 0xc2
 8000f96:	f8a3 50d0 	strh.w	r5, [r3, #208]	; 0xd0
 8000f9a:	f8a3 50de 	strh.w	r5, [r3, #222]	; 0xde
 8000f9e:	f8c3 009a 	str.w	r0, [r3, #154]	; 0x9a
 8000fa2:	f8c3 109e 	str.w	r1, [r3, #158]	; 0x9e
 8000fa6:	f8c3 20a2 	str.w	r2, [r3, #162]	; 0xa2
 8000faa:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fac:	4656      	mov	r6, sl
 8000fae:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 8000fb2:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8000fb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000fba:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fbc:	4656      	mov	r6, sl
 8000fbe:	f8c3 00b6 	str.w	r0, [r3, #182]	; 0xb6
 8000fc2:	f8c3 10ba 	str.w	r1, [r3, #186]	; 0xba
 8000fc6:	f8c3 20be 	str.w	r2, [r3, #190]	; 0xbe
 8000fca:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fcc:	4656      	mov	r6, sl
 8000fce:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
 8000fd2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8000fd6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000fda:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fdc:	4656      	mov	r6, sl
 8000fde:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
 8000fe2:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
 8000fe6:	f8c3 20da 	str.w	r2, [r3, #218]	; 0xda
 8000fea:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fec:	4656      	mov	r6, sl
 8000fee:	f8a3 50ec 	strh.w	r5, [r3, #236]	; 0xec
 8000ff2:	f8a3 50fa 	strh.w	r5, [r3, #250]	; 0xfa
 8000ff6:	f8a3 5108 	strh.w	r5, [r3, #264]	; 0x108
 8000ffa:	f8a3 5116 	strh.w	r5, [r3, #278]	; 0x116
 8000ffe:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8001002:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8001006:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800100a:	ce07      	ldmia	r6!, {r0, r1, r2}
 800100c:	4656      	mov	r6, sl
 800100e:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
 8001012:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
 8001016:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
 800101a:	ce07      	ldmia	r6!, {r0, r1, r2}
 800101c:	4656      	mov	r6, sl
 800101e:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
 8001022:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 8001026:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800102a:	ce07      	ldmia	r6!, {r0, r1, r2}
 800102c:	4656      	mov	r6, sl
 800102e:	f8c3 010a 	str.w	r0, [r3, #266]	; 0x10a
 8001032:	f8c3 110e 	str.w	r1, [r3, #270]	; 0x10e
 8001036:	f8c3 2112 	str.w	r2, [r3, #274]	; 0x112
 800103a:	ce07      	ldmia	r6!, {r0, r1, r2}
 800103c:	4656      	mov	r6, sl
 800103e:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8001042:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
 8001046:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 800104a:	ce07      	ldmia	r6!, {r0, r1, r2}
 800104c:	4656      	mov	r6, sl
 800104e:	f8a3 5124 	strh.w	r5, [r3, #292]	; 0x124
 8001052:	f8a3 5132 	strh.w	r5, [r3, #306]	; 0x132
 8001056:	f8a3 5140 	strh.w	r5, [r3, #320]	; 0x140
 800105a:	f8a3 514e 	strh.w	r5, [r3, #334]	; 0x14e
 800105e:	f8a3 515c 	strh.w	r5, [r3, #348]	; 0x15c
 8001062:	f8c3 0126 	str.w	r0, [r3, #294]	; 0x126
 8001066:	f8c3 112a 	str.w	r1, [r3, #298]	; 0x12a
 800106a:	f8c3 212e 	str.w	r2, [r3, #302]	; 0x12e
 800106e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001070:	4656      	mov	r6, sl
 8001072:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8001076:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
 800107a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800107e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001080:	4656      	mov	r6, sl
 8001082:	f8c3 0142 	str.w	r0, [r3, #322]	; 0x142
 8001086:	f8c3 1146 	str.w	r1, [r3, #326]	; 0x146
 800108a:	f8c3 214a 	str.w	r2, [r3, #330]	; 0x14a
 800108e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001090:	4656      	mov	r6, sl
 8001092:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8001096:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
 800109a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800109e:	ce07      	ldmia	r6!, {r0, r1, r2}
 80010a0:	4656      	mov	r6, sl
 80010a2:	f8a3 516a 	strh.w	r5, [r3, #362]	; 0x16a
 80010a6:	f8a3 5178 	strh.w	r5, [r3, #376]	; 0x178
 80010aa:	f8a3 5186 	strh.w	r5, [r3, #390]	; 0x186
 80010ae:	f8a3 5194 	strh.w	r5, [r3, #404]	; 0x194
 80010b2:	f8a3 51a2 	strh.w	r5, [r3, #418]	; 0x1a2
 80010b6:	f8c3 015e 	str.w	r0, [r3, #350]	; 0x15e
 80010ba:	f8c3 1162 	str.w	r1, [r3, #354]	; 0x162
 80010be:	f8c3 2166 	str.w	r2, [r3, #358]	; 0x166
 80010c2:	ce07      	ldmia	r6!, {r0, r1, r2}
 80010c4:	4656      	mov	r6, sl
 80010c6:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
 80010ca:	f8c3 1170 	str.w	r1, [r3, #368]	; 0x170
 80010ce:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80010d2:	4654      	mov	r4, sl
 80010d4:	ce07      	ldmia	r6!, {r0, r1, r2}
 80010d6:	4656      	mov	r6, sl
 80010d8:	f8a3 51b0 	strh.w	r5, [r3, #432]	; 0x1b0
 80010dc:	f8a3 51be 	strh.w	r5, [r3, #446]	; 0x1be
		}
	}
	env_period = ENV_MAX_PERIOD;
 80010e0:	f240 5562 	movw	r5, #1378	; 0x562
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 80010e4:	f8c3 017a 	str.w	r0, [r3, #378]	; 0x17a
 80010e8:	f8c3 117e 	str.w	r1, [r3, #382]	; 0x17e
 80010ec:	f8c3 2182 	str.w	r2, [r3, #386]	; 0x182
 80010f0:	ce07      	ldmia	r6!, {r0, r1, r2}
 80010f2:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 80010f6:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 80010fa:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 80010fe:	cc07      	ldmia	r4!, {r0, r1, r2}
	env_period = ENV_MAX_PERIOD;
 8001100:	4c1b      	ldr	r4, [pc, #108]	; (8001170 <init_synth+0x338>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8001102:	f8c3 0196 	str.w	r0, [r3, #406]	; 0x196
 8001106:	f8c3 119a 	str.w	r1, [r3, #410]	; 0x19a
 800110a:	f8c3 219e 	str.w	r2, [r3, #414]	; 0x19e
 800110e:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8001112:	f8c3 01a4 	str.w	r0, [r3, #420]	; 0x1a4
 8001116:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
 800111a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 800111e:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
	env_period = ENV_MAX_PERIOD;
 8001122:	8025      	strh	r5, [r4, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8001124:	f8c3 01b2 	str.w	r0, [r3, #434]	; 0x1b2
 8001128:	f8c3 11b6 	str.w	r1, [r3, #438]	; 0x1b6
 800112c:	f8c3 21ba 	str.w	r2, [r3, #442]	; 0x1ba
}
 8001130:	b019      	add	sp, #100	; 0x64
 8001132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001136:	bf00      	nop
 8001138:	08005178 	.word	0x08005178
 800113c:	200008c0 	.word	0x200008c0
 8001140:	20000a84 	.word	0x20000a84
 8001144:	20000aa8 	.word	0x20000aa8
 8001148:	20000ab4 	.word	0x20000ab4
 800114c:	20000a9c 	.word	0x20000a9c
 8001150:	20000a8c 	.word	0x20000a8c
 8001154:	20000ab8 	.word	0x20000ab8
 8001158:	20000a80 	.word	0x20000a80
 800115c:	20000a88 	.word	0x20000a88
 8001160:	20000ac0 	.word	0x20000ac0
 8001164:	20000aac 	.word	0x20000aac
 8001168:	20000aa0 	.word	0x20000aa0
 800116c:	20000a90 	.word	0x20000a90
 8001170:	20000a86 	.word	0x20000a86

08001174 <clear_voices>:

void clear_voices() {
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		op[0][i].note_value = -1;
 8001174:	22ff      	movs	r2, #255	; 0xff
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <clear_voices+0x20>)
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	739a      	strb	r2, [r3, #14]
 800117c:	771a      	strb	r2, [r3, #28]
 800117e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800118a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800118e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}
}
 8001192:	4770      	bx	lr
 8001194:	200008c0 	.word	0x200008c0

08001198 <add_voice>:

void add_voice(uint8_t note_value) {
 8001198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t voice_index, released_voice = (uint8_t)-1;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800119c:	4d9c      	ldr	r5, [pc, #624]	; (8001410 <add_voice+0x278>)
void add_voice(uint8_t note_value) {
 800119e:	4606      	mov	r6, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80011a0:	782b      	ldrb	r3, [r5, #0]
void add_voice(uint8_t note_value) {
 80011a2:	b083      	sub	sp, #12
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80011a4:	2bff      	cmp	r3, #255	; 0xff
 80011a6:	f000 810a 	beq.w	80013be <add_voice+0x226>
 80011aa:	7baa      	ldrb	r2, [r5, #14]
 80011ac:	2aff      	cmp	r2, #255	; 0xff
 80011ae:	f000 810b 	beq.w	80013c8 <add_voice+0x230>
 80011b2:	7f2a      	ldrb	r2, [r5, #28]
 80011b4:	2aff      	cmp	r2, #255	; 0xff
 80011b6:	f000 810c 	beq.w	80013d2 <add_voice+0x23a>
 80011ba:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 80011be:	2aff      	cmp	r2, #255	; 0xff
 80011c0:	f000 810c 	beq.w	80013dc <add_voice+0x244>
 80011c4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
 80011c8:	2aff      	cmp	r2, #255	; 0xff
 80011ca:	f000 810c 	beq.w	80013e6 <add_voice+0x24e>
 80011ce:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
 80011d2:	2aff      	cmp	r2, #255	; 0xff
 80011d4:	f000 810c 	beq.w	80013f0 <add_voice+0x258>
 80011d8:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
 80011dc:	2aff      	cmp	r2, #255	; 0xff
 80011de:	f000 810c 	beq.w	80013fa <add_voice+0x262>
 80011e2:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
 80011e6:	2aff      	cmp	r2, #255	; 0xff
 80011e8:	f000 810e 	beq.w	8001408 <add_voice+0x270>
 80011ec:	2408      	movs	r4, #8
 80011ee:	4620      	mov	r0, r4
			break;
		}
	}
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011f0:	429e      	cmp	r6, r3
 80011f2:	f000 80e7 	beq.w	80013c4 <add_voice+0x22c>
			voice_index = i;
			break;
		}
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011f6:	7aab      	ldrb	r3, [r5, #10]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011f8:	7baa      	ldrb	r2, [r5, #14]
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	bf14      	ite	ne
 80011fe:	23ff      	movne	r3, #255	; 0xff
 8001200:	2300      	moveq	r3, #0
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001202:	42b2      	cmp	r2, r6
 8001204:	f000 80e3 	beq.w	80013ce <add_voice+0x236>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001208:	7e29      	ldrb	r1, [r5, #24]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800120a:	7f2a      	ldrb	r2, [r5, #28]
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800120c:	2903      	cmp	r1, #3
 800120e:	bf08      	it	eq
 8001210:	2301      	moveq	r3, #1
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001212:	42b2      	cmp	r2, r6
 8001214:	f000 80e0 	beq.w	80013d8 <add_voice+0x240>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001218:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800121c:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001220:	2903      	cmp	r1, #3
 8001222:	bf08      	it	eq
 8001224:	2302      	moveq	r3, #2
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001226:	42b2      	cmp	r2, r6
 8001228:	f000 80db 	beq.w	80013e2 <add_voice+0x24a>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800122c:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001230:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001234:	2903      	cmp	r1, #3
 8001236:	bf08      	it	eq
 8001238:	2303      	moveq	r3, #3
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800123a:	42b2      	cmp	r2, r6
 800123c:	f000 80d6 	beq.w	80013ec <add_voice+0x254>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001240:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001244:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001248:	2903      	cmp	r1, #3
 800124a:	bf08      	it	eq
 800124c:	2304      	moveq	r3, #4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800124e:	42b2      	cmp	r2, r6
 8001250:	f000 80d1 	beq.w	80013f6 <add_voice+0x25e>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001254:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001258:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800125c:	2903      	cmp	r1, #3
 800125e:	bf08      	it	eq
 8001260:	2305      	moveq	r3, #5
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001262:	42b2      	cmp	r2, r6
 8001264:	f000 80cc 	beq.w	8001400 <add_voice+0x268>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001268:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800126c:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001270:	2903      	cmp	r1, #3
 8001272:	bf08      	it	eq
 8001274:	2306      	moveq	r3, #6
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001276:	42b2      	cmp	r2, r6
 8001278:	f000 80c4 	beq.w	8001404 <add_voice+0x26c>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800127c:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
 8001280:	2a03      	cmp	r2, #3
 8001282:	f000 8097 	beq.w	80013b4 <add_voice+0x21c>
			released_voice = i;
		}
	}
	if (voice_index == MAX_VOICES) {
 8001286:	2808      	cmp	r0, #8
 8001288:	d103      	bne.n	8001292 <add_voice+0xfa>
		if (released_voice == (uint8_t)-1) {
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	f000 808f 	beq.w	80013ae <add_voice+0x216>
 8001290:	461c      	mov	r4, r3
		}
		else {
			voice_index = released_voice;
		}
	}
	uint16_t carrier_freq = note_to_freq(note_value);
 8001292:	4630      	mov	r0, r6
 8001294:	f7ff fa6e 	bl	8000774 <note_to_freq>
 8001298:	4607      	mov	r7, r0
	uint16_t carrier_delta = calculate_delta(carrier_freq);
 800129a:	f7ff fa71 	bl	8000780 <calculate_delta>
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
		op[op_index][voice_index].delta = (op_ratio[op_index] * carrier_delta) >> 4;			//multiply delta based off of ratio of carrier
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 800129e:	495d      	ldr	r1, [pc, #372]	; (8001414 <add_voice+0x27c>)
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 80012a0:	2300      	movs	r3, #0
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 80012a2:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80012a6:	f8b1 9000 	ldrh.w	r9, [r1]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80012aa:	f5ae 4200 	sub.w	r2, lr, #32768	; 0x8000
 80012ae:	fab2 f282 	clz	r2, r2
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 80012b2:	f8b1 8002 	ldrh.w	r8, [r1, #2]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80012b6:	f5a9 4b00 	sub.w	fp, r9, #32768	; 0x8000
 80012ba:	f5a8 4a00 	sub.w	sl, r8, #32768	; 0x8000
 80012be:	fabb fb8b 	clz	fp, fp
 80012c2:	faba fa8a 	clz	sl, sl
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 80012c6:	f8df c154 	ldr.w	ip, [pc, #340]	; 800141c <add_voice+0x284>
		op[op_index][voice_index].note_value = note_value;										//store note
 80012ca:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80012ce:	f805 6014 	strb.w	r6, [r5, r4, lsl #1]
 80012d2:	eb05 0544 	add.w	r5, r5, r4, lsl #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 80012d6:	f89c 4000 	ldrb.w	r4, [ip]
		op[op_index][voice_index].note_value = note_value;										//store note
 80012da:	f885 6070 	strb.w	r6, [r5, #112]	; 0x70
 80012de:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
 80012e2:	f885 6150 	strb.w	r6, [r5, #336]	; 0x150
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 80012e6:	fb07 f604 	mul.w	r6, r7, r4
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80012ea:	0952      	lsrs	r2, r2, #5
 80012ec:	9201      	str	r2, [sp, #4]
		op[op_index][voice_index].delta = (op_ratio[op_index] * carrier_delta) >> 4;			//multiply delta based off of ratio of carrier
 80012ee:	fb00 f404 	mul.w	r4, r0, r4
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 80012f2:	4a49      	ldr	r2, [pc, #292]	; (8001418 <add_voice+0x280>)
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 80012f4:	1136      	asrs	r6, r6, #4
 80012f6:	806e      	strh	r6, [r5, #2]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 80012f8:	f8a5 900c 	strh.w	r9, [r5, #12]
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 80012fc:	f992 6000 	ldrsb.w	r6, [r2]
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 8001300:	f89c 9001 	ldrb.w	r9, [ip, #1]
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001304:	eb06 1424 	add.w	r4, r6, r4, asr #4
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 8001308:	fb07 f609 	mul.w	r6, r7, r9
		op[op_index][voice_index].delta = (op_ratio[op_index] * carrier_delta) >> 4;			//multiply delta based off of ratio of carrier
 800130c:	fb00 f909 	mul.w	r9, r0, r9
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 8001310:	1136      	asrs	r6, r6, #4
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001312:	80ec      	strh	r4, [r5, #6]
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 8001314:	f8a5 6072 	strh.w	r6, [r5, #114]	; 0x72
 8001318:	f89c 4002 	ldrb.w	r4, [ip, #2]
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 800131c:	f992 6001 	ldrsb.w	r6, [r2, #1]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001320:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001324:	eb06 1929 	add.w	r9, r6, r9, asr #4
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 8001328:	fb04 f607 	mul.w	r6, r4, r7
		op[op_index][voice_index].delta = (op_ratio[op_index] * carrier_delta) >> 4;			//multiply delta based off of ratio of carrier
 800132c:	fb04 f400 	mul.w	r4, r4, r0
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 8001330:	1136      	asrs	r6, r6, #4
 8001332:	f8a5 60e2 	strh.w	r6, [r5, #226]	; 0xe2
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001336:	f992 6002 	ldrsb.w	r6, [r2, #2]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 800133a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 800133e:	eb06 1424 	add.w	r4, r6, r4, asr #4
 8001342:	f8a5 40e6 	strh.w	r4, [r5, #230]	; 0xe6
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001346:	9c01      	ldr	r4, [sp, #4]
 8001348:	f885 b00a 	strb.w	fp, [r5, #10]
 800134c:	f885 40ea 	strb.w	r4, [r5, #234]	; 0xea
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001350:	f8a5 807c 	strh.w	r8, [r5, #124]	; 0x7c
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001354:	f8a5 9076 	strh.w	r9, [r5, #118]	; 0x76
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001358:	f885 a07a 	strb.w	sl, [r5, #122]	; 0x7a
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 800135c:	f8a5 e0ec 	strh.w	lr, [r5, #236]	; 0xec
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8001360:	812b      	strh	r3, [r5, #8]
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8001362:	712b      	strb	r3, [r5, #4]
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8001364:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8001368:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 800136c:	f8a5 30e8 	strh.w	r3, [r5, #232]	; 0xe8
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8001370:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001374:	88c9      	ldrh	r1, [r1, #6]
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 8001376:	f89c 4003 	ldrb.w	r4, [ip, #3]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 800137a:	f5a1 4600 	sub.w	r6, r1, #32768	; 0x8000
 800137e:	fab6 f686 	clz	r6, r6
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 8001382:	fb07 f704 	mul.w	r7, r7, r4
		op[op_index][voice_index].delta = (op_ratio[op_index] * carrier_delta) >> 4;			//multiply delta based off of ratio of carrier
 8001386:	fb00 f004 	mul.w	r0, r0, r4
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 800138a:	f992 2003 	ldrsb.w	r2, [r2, #3]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 800138e:	0976      	lsrs	r6, r6, #5
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 8001390:	113f      	asrs	r7, r7, #4
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001392:	eb02 1020 	add.w	r0, r2, r0, asr #4
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8001396:	f8a5 3158 	strh.w	r3, [r5, #344]	; 0x158
		op[op_index][voice_index].freq = (op_ratio[op_index] * carrier_freq) >> 4;				//calculate and store frequency (>> 4 for integer)
 800139a:	f8a5 7152 	strh.w	r7, [r5, #338]	; 0x152
		op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 800139e:	f8a5 0156 	strh.w	r0, [r5, #342]	; 0x156
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 80013a2:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 80013a6:	f8a5 115c 	strh.w	r1, [r5, #348]	; 0x15c
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80013aa:	f885 615a 	strb.w	r6, [r5, #346]	; 0x15a
		}
		else {
			op[op_index][voice_index].adsr_state = ATTACK;											//else, start on attack state
		}
	}
}
 80013ae:	b003      	add	sp, #12
 80013b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (voice_index == MAX_VOICES) {
 80013b4:	2808      	cmp	r0, #8
 80013b6:	f47f af6c 	bne.w	8001292 <add_voice+0xfa>
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80013ba:	2307      	movs	r3, #7
 80013bc:	e768      	b.n	8001290 <add_voice+0xf8>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80013be:	2400      	movs	r4, #0
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80013c0:	4620      	mov	r0, r4
 80013c2:	e715      	b.n	80011f0 <add_voice+0x58>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80013c4:	2400      	movs	r4, #0
 80013c6:	e764      	b.n	8001292 <add_voice+0xfa>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80013c8:	2401      	movs	r4, #1
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80013ca:	4620      	mov	r0, r4
 80013cc:	e710      	b.n	80011f0 <add_voice+0x58>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80013ce:	2401      	movs	r4, #1
 80013d0:	e75f      	b.n	8001292 <add_voice+0xfa>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80013d2:	2402      	movs	r4, #2
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80013d4:	4620      	mov	r0, r4
 80013d6:	e70b      	b.n	80011f0 <add_voice+0x58>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80013d8:	2402      	movs	r4, #2
 80013da:	e75a      	b.n	8001292 <add_voice+0xfa>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80013dc:	2403      	movs	r4, #3
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80013de:	4620      	mov	r0, r4
 80013e0:	e706      	b.n	80011f0 <add_voice+0x58>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80013e2:	2403      	movs	r4, #3
 80013e4:	e755      	b.n	8001292 <add_voice+0xfa>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80013e6:	2404      	movs	r4, #4
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80013e8:	4620      	mov	r0, r4
 80013ea:	e701      	b.n	80011f0 <add_voice+0x58>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80013ec:	2404      	movs	r4, #4
 80013ee:	e750      	b.n	8001292 <add_voice+0xfa>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80013f0:	2405      	movs	r4, #5
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80013f2:	4620      	mov	r0, r4
 80013f4:	e6fc      	b.n	80011f0 <add_voice+0x58>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80013f6:	2405      	movs	r4, #5
 80013f8:	e74b      	b.n	8001292 <add_voice+0xfa>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80013fa:	2406      	movs	r4, #6
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80013fc:	4620      	mov	r0, r4
 80013fe:	e6f7      	b.n	80011f0 <add_voice+0x58>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001400:	2406      	movs	r4, #6
 8001402:	e746      	b.n	8001292 <add_voice+0xfa>
 8001404:	2407      	movs	r4, #7
 8001406:	e744      	b.n	8001292 <add_voice+0xfa>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001408:	2407      	movs	r4, #7
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 800140a:	4620      	mov	r0, r4
 800140c:	e6f0      	b.n	80011f0 <add_voice+0x58>
 800140e:	bf00      	nop
 8001410:	200008c0 	.word	0x200008c0
 8001414:	20000aac 	.word	0x20000aac
 8001418:	20000aa8 	.word	0x20000aa8
 800141c:	20000ac0 	.word	0x20000ac0

08001420 <release_voice>:

void release_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <release_voice+0x78>)
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	4282      	cmp	r2, r0
 8001426:	d01a      	beq.n	800145e <release_voice+0x3e>
 8001428:	7b9a      	ldrb	r2, [r3, #14]
 800142a:	4282      	cmp	r2, r0
 800142c:	d025      	beq.n	800147a <release_voice+0x5a>
 800142e:	7f1a      	ldrb	r2, [r3, #28]
 8001430:	4282      	cmp	r2, r0
 8001432:	d024      	beq.n	800147e <release_voice+0x5e>
 8001434:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8001438:	4282      	cmp	r2, r0
 800143a:	d022      	beq.n	8001482 <release_voice+0x62>
 800143c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001440:	4282      	cmp	r2, r0
 8001442:	d020      	beq.n	8001486 <release_voice+0x66>
 8001444:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8001448:	4282      	cmp	r2, r0
 800144a:	d01e      	beq.n	800148a <release_voice+0x6a>
 800144c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001450:	4282      	cmp	r2, r0
 8001452:	d01c      	beq.n	800148e <release_voice+0x6e>
 8001454:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8001458:	4282      	cmp	r2, r0
 800145a:	d01a      	beq.n	8001492 <release_voice+0x72>
		return;
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op[op_index][voice_index].adsr_state = RELEASE;
	}
}
 800145c:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 800145e:	2100      	movs	r1, #0
		op[op_index][voice_index].adsr_state = RELEASE;
 8001460:	2203      	movs	r2, #3
 8001462:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001466:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800146a:	729a      	strb	r2, [r3, #10]
 800146c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8001470:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8001474:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
}
 8001478:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 800147a:	2101      	movs	r1, #1
 800147c:	e7f0      	b.n	8001460 <release_voice+0x40>
 800147e:	2102      	movs	r1, #2
 8001480:	e7ee      	b.n	8001460 <release_voice+0x40>
 8001482:	2103      	movs	r1, #3
 8001484:	e7ec      	b.n	8001460 <release_voice+0x40>
 8001486:	2104      	movs	r1, #4
 8001488:	e7ea      	b.n	8001460 <release_voice+0x40>
 800148a:	2105      	movs	r1, #5
 800148c:	e7e8      	b.n	8001460 <release_voice+0x40>
 800148e:	2106      	movs	r1, #6
 8001490:	e7e6      	b.n	8001460 <release_voice+0x40>
 8001492:	2107      	movs	r1, #7
 8001494:	e7e4      	b.n	8001460 <release_voice+0x40>
 8001496:	bf00      	nop
 8001498:	200008c0 	.word	0x200008c0

0800149c <synth_sample>:

int16_t synth_sample() {
 800149c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t output_volume = 0x0800;											//default output volume 2048
	if (--env_period == 0x00) {												//decrement and check envelope period
 80014a0:	4bc3      	ldr	r3, [pc, #780]	; (80017b0 <synth_sample+0x314>)
 80014a2:	881d      	ldrh	r5, [r3, #0]
 80014a4:	3d01      	subs	r5, #1
 80014a6:	b2ad      	uxth	r5, r5
 80014a8:	bb2d      	cbnz	r5, 80014f6 <synth_sample+0x5a>
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 80014aa:	f240 5262 	movw	r2, #1378	; 0x562
	int16_t output_volume = 0x0800;											//default output volume 2048
 80014ae:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80014b2:	4cc0      	ldr	r4, [pc, #768]	; (80017b4 <synth_sample+0x318>)
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014b4:	f8df 930c 	ldr.w	r9, [pc, #780]	; 80017c4 <synth_sample+0x328>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80014b8:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80017c8 <synth_sample+0x32c>
 80014bc:	4fbe      	ldr	r7, [pc, #760]	; (80017b8 <synth_sample+0x31c>)
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 80014be:	801a      	strh	r2, [r3, #0]
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80014c0:	7823      	ldrb	r3, [r4, #0]
 80014c2:	b2e8      	uxtb	r0, r5
 80014c4:	2bff      	cmp	r3, #255	; 0xff
 80014c6:	d00e      	beq.n	80014e6 <synth_sample+0x4a>
		switch (op[op_index][voice_index].adsr_state) {
 80014c8:	7aa3      	ldrb	r3, [r4, #10]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	f200 808d 	bhi.w	80015ea <synth_sample+0x14e>
 80014d0:	e8df f003 	tbb	[pc, r3]
 80014d4:	588b6375 	.word	0x588b6375
 80014d8:	03          	.byte	0x03
 80014d9:	00          	.byte	0x00
static inline void delete_voice(uint8_t voice_index) { op[0][voice_index].note_value = -1; };
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	7023      	strb	r3, [r4, #0]
				cycle_envelope(voice_index);
				output_volume += modulate(voice_index);
 80014de:	f7ff fab3 	bl	8000a48 <modulate>
 80014e2:	4406      	add	r6, r0
 80014e4:	b236      	sxth	r6, r6
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
 80014e6:	3501      	adds	r5, #1
 80014e8:	2d08      	cmp	r5, #8
 80014ea:	f104 040e 	add.w	r4, r4, #14
 80014ee:	d1e7      	bne.n	80014c0 <synth_sample+0x24>
				output_volume += modulate(voice_index);
			}
		}
	}
	return output_volume;
}
 80014f0:	4630      	mov	r0, r6
 80014f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80014f6:	4caf      	ldr	r4, [pc, #700]	; (80017b4 <synth_sample+0x318>)
	if (--env_period == 0x00) {												//decrement and check envelope period
 80014f8:	801d      	strh	r5, [r3, #0]
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80014fa:	7823      	ldrb	r3, [r4, #0]
 80014fc:	2bff      	cmp	r3, #255	; 0xff
 80014fe:	d16d      	bne.n	80015dc <synth_sample+0x140>
	int16_t output_volume = 0x0800;											//default output volume 2048
 8001500:	f44f 6600 	mov.w	r6, #2048	; 0x800
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001504:	7ba3      	ldrb	r3, [r4, #14]
 8001506:	2bff      	cmp	r3, #255	; 0xff
 8001508:	d004      	beq.n	8001514 <synth_sample+0x78>
				output_volume += modulate(voice_index);
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff fa9c 	bl	8000a48 <modulate>
 8001510:	4406      	add	r6, r0
 8001512:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001514:	7f23      	ldrb	r3, [r4, #28]
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d004      	beq.n	8001524 <synth_sample+0x88>
				output_volume += modulate(voice_index);
 800151a:	2002      	movs	r0, #2
 800151c:	f7ff fa94 	bl	8000a48 <modulate>
 8001520:	4406      	add	r6, r0
 8001522:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001524:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001528:	2bff      	cmp	r3, #255	; 0xff
 800152a:	d004      	beq.n	8001536 <synth_sample+0x9a>
				output_volume += modulate(voice_index);
 800152c:	2003      	movs	r0, #3
 800152e:	f7ff fa8b 	bl	8000a48 <modulate>
 8001532:	4406      	add	r6, r0
 8001534:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001536:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800153a:	2bff      	cmp	r3, #255	; 0xff
 800153c:	d004      	beq.n	8001548 <synth_sample+0xac>
				output_volume += modulate(voice_index);
 800153e:	2004      	movs	r0, #4
 8001540:	f7ff fa82 	bl	8000a48 <modulate>
 8001544:	4406      	add	r6, r0
 8001546:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001548:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800154c:	2bff      	cmp	r3, #255	; 0xff
 800154e:	d004      	beq.n	800155a <synth_sample+0xbe>
				output_volume += modulate(voice_index);
 8001550:	2005      	movs	r0, #5
 8001552:	f7ff fa79 	bl	8000a48 <modulate>
 8001556:	4406      	add	r6, r0
 8001558:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800155a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	d004      	beq.n	800156c <synth_sample+0xd0>
				output_volume += modulate(voice_index);
 8001562:	2006      	movs	r0, #6
 8001564:	f7ff fa70 	bl	8000a48 <modulate>
 8001568:	4406      	add	r6, r0
 800156a:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800156c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8001570:	2bff      	cmp	r3, #255	; 0xff
 8001572:	d0bd      	beq.n	80014f0 <synth_sample+0x54>
				output_volume += modulate(voice_index);
 8001574:	2007      	movs	r0, #7
 8001576:	f7ff fa67 	bl	8000a48 <modulate>
 800157a:	4406      	add	r6, r0
 800157c:	b236      	sxth	r6, r6
}
 800157e:	4630      	mov	r0, r6
 8001580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001584:	4a8d      	ldr	r2, [pc, #564]	; (80017bc <synth_sample+0x320>)
 8001586:	89a3      	ldrh	r3, [r4, #12]
 8001588:	8812      	ldrh	r2, [r2, #0]
 800158a:	4293      	cmp	r3, r2
 800158c:	f080 8136 	bcs.w	80017fc <synth_sample+0x360>
				op[op_index][voice_index].env_amp = 0;
 8001590:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001592:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001594:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SILENT;
 8001596:	72a2      	strb	r2, [r4, #10]
 8001598:	e028      	b.n	80015ec <synth_sample+0x150>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 800159a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 800159e:	f8b8 1000 	ldrh.w	r1, [r8]
 80015a2:	783a      	ldrb	r2, [r7, #0]
 80015a4:	ebac 0e01 	sub.w	lr, ip, r1
 80015a8:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80015ac:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80015b0:	dd5f      	ble.n	8001672 <synth_sample+0x1d6>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80015b2:	458c      	cmp	ip, r1
 80015b4:	d35d      	bcc.n	8001672 <synth_sample+0x1d6>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80015b6:	fa1f f38e 	uxth.w	r3, lr
 80015ba:	81a3      	strh	r3, [r4, #12]
 80015bc:	e016      	b.n	80015ec <synth_sample+0x150>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 80015be:	4a80      	ldr	r2, [pc, #512]	; (80017c0 <synth_sample+0x324>)
 80015c0:	89a3      	ldrh	r3, [r4, #12]
 80015c2:	8812      	ldrh	r2, [r2, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ca:	f2c0 8114 	blt.w	80017f6 <synth_sample+0x35a>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80015ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 80015d2:	2101      	movs	r1, #1
 80015d4:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80015d6:	81a2      	strh	r2, [r4, #12]
				op[op_index][voice_index].adsr_state = DECAY;
 80015d8:	72a1      	strb	r1, [r4, #10]
 80015da:	e007      	b.n	80015ec <synth_sample+0x150>
				output_volume += modulate(voice_index);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fa33 	bl	8000a48 <modulate>
 80015e2:	f500 6600 	add.w	r6, r0, #2048	; 0x800
 80015e6:	b236      	sxth	r6, r6
 80015e8:	e78c      	b.n	8001504 <synth_sample+0x68>
 80015ea:	89a3      	ldrh	r3, [r4, #12]
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80015ec:	f899 2000 	ldrb.w	r2, [r9]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 80015f6:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80015fa:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 80015fc:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80015fe:	7123      	strb	r3, [r4, #4]
		switch (op[op_index][voice_index].adsr_state) {
 8001600:	d05f      	beq.n	80016c2 <synth_sample+0x226>
 8001602:	2a03      	cmp	r2, #3
 8001604:	d04f      	beq.n	80016a6 <synth_sample+0x20a>
 8001606:	2a00      	cmp	r2, #0
 8001608:	d03b      	beq.n	8001682 <synth_sample+0x1e6>
 800160a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800160e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8001618:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800161c:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 800161e:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001620:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		switch (op[op_index][voice_index].adsr_state) {
 8001624:	d06a      	beq.n	80016fc <synth_sample+0x260>
 8001626:	2a03      	cmp	r2, #3
 8001628:	f000 8096 	beq.w	8001758 <synth_sample+0x2bc>
 800162c:	2a00      	cmp	r2, #0
 800162e:	f000 8082 	beq.w	8001736 <synth_sample+0x29a>
 8001632:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001636:	f899 2002 	ldrb.w	r2, [r9, #2]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8001640:	f894 215a 	ldrb.w	r2, [r4, #346]	; 0x15a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001644:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8001646:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001648:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
		switch (op[op_index][voice_index].adsr_state) {
 800164c:	f000 80be 	beq.w	80017cc <synth_sample+0x330>
 8001650:	2a03      	cmp	r2, #3
 8001652:	f000 809f 	beq.w	8001794 <synth_sample+0x2f8>
 8001656:	2a00      	cmp	r2, #0
 8001658:	f000 808b 	beq.w	8001772 <synth_sample+0x2d6>
 800165c:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001660:	f899 2003 	ldrb.w	r2, [r9, #3]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	11db      	asrs	r3, r3, #7
 800166c:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001670:	e735      	b.n	80014de <synth_sample+0x42>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001672:	b29b      	uxth	r3, r3
 8001674:	81a3      	strh	r3, [r4, #12]
				if (op_sustain[op_index] == 0x00) {
 8001676:	2a00      	cmp	r2, #0
 8001678:	f040 80cd 	bne.w	8001816 <synth_sample+0x37a>
					op[op_index][voice_index].adsr_state = SILENT;
 800167c:	2204      	movs	r2, #4
 800167e:	72a2      	strb	r2, [r4, #10]
 8001680:	e7b4      	b.n	80015ec <synth_sample+0x150>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001682:	4a4f      	ldr	r2, [pc, #316]	; (80017c0 <synth_sample+0x324>)
 8001684:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8001688:	8852      	ldrh	r2, [r2, #2]
 800168a:	4413      	add	r3, r2
 800168c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001690:	f2c0 80bd 	blt.w	800180e <synth_sample+0x372>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001694:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001698:	2101      	movs	r1, #1
 800169a:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800169c:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = DECAY;
 80016a0:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
 80016a4:	e7b3      	b.n	800160e <synth_sample+0x172>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 80016a6:	4a45      	ldr	r2, [pc, #276]	; (80017bc <synth_sample+0x320>)
 80016a8:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80016ac:	8852      	ldrh	r2, [r2, #2]
 80016ae:	4293      	cmp	r3, r2
 80016b0:	f080 80a8 	bcs.w	8001804 <synth_sample+0x368>
				op[op_index][voice_index].env_amp = 0;
 80016b4:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 80016b6:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 80016b8:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SILENT;
 80016bc:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 80016c0:	e7a5      	b.n	800160e <synth_sample+0x172>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80016c2:	f8b4 c07c 	ldrh.w	ip, [r4, #124]	; 0x7c
 80016c6:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80016ca:	787a      	ldrb	r2, [r7, #1]
 80016cc:	ebac 0e01 	sub.w	lr, ip, r1
 80016d0:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80016d4:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80016d8:	dd06      	ble.n	80016e8 <synth_sample+0x24c>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80016da:	458c      	cmp	ip, r1
 80016dc:	d304      	bcc.n	80016e8 <synth_sample+0x24c>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80016de:	fa1f f38e 	uxth.w	r3, lr
 80016e2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80016e6:	e792      	b.n	800160e <synth_sample+0x172>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				if (op_sustain[op_index] == 0x00) {
 80016ee:	2a00      	cmp	r2, #0
 80016f0:	f040 809d 	bne.w	800182e <synth_sample+0x392>
					op[op_index][voice_index].adsr_state = SILENT;
 80016f4:	2204      	movs	r2, #4
 80016f6:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 80016fa:	e788      	b.n	800160e <synth_sample+0x172>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80016fc:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	; 0xec
 8001700:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8001704:	78ba      	ldrb	r2, [r7, #2]
 8001706:	ebac 0e01 	sub.w	lr, ip, r1
 800170a:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 800170e:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8001712:	dd06      	ble.n	8001722 <synth_sample+0x286>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001714:	458c      	cmp	ip, r1
 8001716:	d304      	bcc.n	8001722 <synth_sample+0x286>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001718:	fa1f f38e 	uxth.w	r3, lr
 800171c:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001720:	e789      	b.n	8001636 <synth_sample+0x19a>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001722:	b29b      	uxth	r3, r3
 8001724:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				if (op_sustain[op_index] == 0x00) {
 8001728:	2a00      	cmp	r2, #0
 800172a:	f040 8094 	bne.w	8001856 <synth_sample+0x3ba>
					op[op_index][voice_index].adsr_state = SILENT;
 800172e:	2204      	movs	r2, #4
 8001730:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001734:	e77f      	b.n	8001636 <synth_sample+0x19a>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <synth_sample+0x324>)
 8001738:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800173c:	8892      	ldrh	r2, [r2, #4]
 800173e:	4413      	add	r3, r2
 8001740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001744:	db6f      	blt.n	8001826 <synth_sample+0x38a>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001746:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 800174a:	2101      	movs	r1, #1
 800174c:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800174e:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = DECAY;
 8001752:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
 8001756:	e76e      	b.n	8001636 <synth_sample+0x19a>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <synth_sample+0x320>)
 800175a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800175e:	8892      	ldrh	r2, [r2, #4]
 8001760:	4293      	cmp	r3, r2
 8001762:	d25b      	bcs.n	800181c <synth_sample+0x380>
				op[op_index][voice_index].env_amp = 0;
 8001764:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001766:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001768:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SILENT;
 800176c:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001770:	e761      	b.n	8001636 <synth_sample+0x19a>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <synth_sample+0x324>)
 8001774:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 8001778:	88d2      	ldrh	r2, [r2, #6]
 800177a:	4413      	add	r3, r2
 800177c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001780:	db65      	blt.n	800184e <synth_sample+0x3b2>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001782:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001786:	2101      	movs	r1, #1
 8001788:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800178a:	f8a4 215c 	strh.w	r2, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = DECAY;
 800178e:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
 8001792:	e765      	b.n	8001660 <synth_sample+0x1c4>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001794:	4a09      	ldr	r2, [pc, #36]	; (80017bc <synth_sample+0x320>)
 8001796:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 800179a:	88d2      	ldrh	r2, [r2, #6]
 800179c:	4293      	cmp	r3, r2
 800179e:	d251      	bcs.n	8001844 <synth_sample+0x3a8>
				op[op_index][voice_index].env_amp = 0;
 80017a0:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 80017a2:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 80017a4:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SILENT;
 80017a8:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 80017ac:	e758      	b.n	8001660 <synth_sample+0x1c4>
 80017ae:	bf00      	nop
 80017b0:	20000a86 	.word	0x20000a86
 80017b4:	200008c0 	.word	0x200008c0
 80017b8:	20000a80 	.word	0x20000a80
 80017bc:	20000a90 	.word	0x20000a90
 80017c0:	20000aac 	.word	0x20000aac
 80017c4:	20000a9c 	.word	0x20000a9c
 80017c8:	20000aa0 	.word	0x20000aa0
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80017cc:	f8b4 c15c 	ldrh.w	ip, [r4, #348]	; 0x15c
 80017d0:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	ebac 0e01 	sub.w	lr, ip, r1
 80017da:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80017de:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80017e2:	dc28      	bgt.n	8001836 <synth_sample+0x39a>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				if (op_sustain[op_index] == 0x00) {
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	d037      	beq.n	800185e <synth_sample+0x3c2>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 80017ee:	2202      	movs	r2, #2
 80017f0:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 80017f4:	e734      	b.n	8001660 <synth_sample+0x1c4>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	81a3      	strh	r3, [r4, #12]
 80017fa:	e6f7      	b.n	80015ec <synth_sample+0x150>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	b29b      	uxth	r3, r3
 8001800:	81a3      	strh	r3, [r4, #12]
 8001802:	e6f3      	b.n	80015ec <synth_sample+0x150>
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 800180c:	e6ff      	b.n	800160e <synth_sample+0x172>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 800180e:	b29b      	uxth	r3, r3
 8001810:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8001814:	e6fb      	b.n	800160e <synth_sample+0x172>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 8001816:	2202      	movs	r2, #2
 8001818:	72a2      	strb	r2, [r4, #10]
 800181a:	e6e7      	b.n	80015ec <synth_sample+0x150>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	b29b      	uxth	r3, r3
 8001820:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001824:	e707      	b.n	8001636 <synth_sample+0x19a>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001826:	b29b      	uxth	r3, r3
 8001828:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 800182c:	e703      	b.n	8001636 <synth_sample+0x19a>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 800182e:	2202      	movs	r2, #2
 8001830:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 8001834:	e6eb      	b.n	800160e <synth_sample+0x172>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001836:	458c      	cmp	ip, r1
 8001838:	d3d4      	bcc.n	80017e4 <synth_sample+0x348>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 800183a:	fa1f f38e 	uxth.w	r3, lr
 800183e:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001842:	e70d      	b.n	8001660 <synth_sample+0x1c4>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	b29b      	uxth	r3, r3
 8001848:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 800184c:	e708      	b.n	8001660 <synth_sample+0x1c4>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 800184e:	b29b      	uxth	r3, r3
 8001850:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001854:	e704      	b.n	8001660 <synth_sample+0x1c4>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 8001856:	2202      	movs	r2, #2
 8001858:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 800185c:	e6eb      	b.n	8001636 <synth_sample+0x19a>
					op[op_index][voice_index].adsr_state = SILENT;
 800185e:	2204      	movs	r2, #4
 8001860:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 8001864:	e6fc      	b.n	8001660 <synth_sample+0x1c4>
 8001866:	bf00      	nop

08001868 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <display_send_command>:
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
	//turn on display
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
}

void display_send_command(uint8_t cmd) {
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
	display_i2c_write(data_LSB | DISPLAY_BIT_E);	//pull enable bit HIGH
	display_i2c_write(data_LSB);					//pull enable bit LOW
}

void display_i2c_write(uint8_t byte) {
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800186e:	26ff      	movs	r6, #255	; 0xff
 8001870:	4d27      	ldr	r5, [pc, #156]	; (8001910 <display_send_command+0xa4>)
void display_send_command(uint8_t cmd) {
 8001872:	b085      	sub	sp, #20
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 8001874:	f020 070f 	bic.w	r7, r0, #15
 8001878:	f047 0708 	orr.w	r7, r7, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800187c:	f10d 020f 	add.w	r2, sp, #15
 8001880:	2301      	movs	r3, #1
 8001882:	214e      	movs	r1, #78	; 0x4e
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001884:	0104      	lsls	r4, r0, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001886:	9600      	str	r6, [sp, #0]
 8001888:	6828      	ldr	r0, [r5, #0]
 800188a:	f88d 700f 	strb.w	r7, [sp, #15]
 800188e:	f001 fe05 	bl	800349c <HAL_I2C_Master_Transmit>
	display_i2c_write(cmd_MSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 8001892:	f047 0c04 	orr.w	ip, r7, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001896:	f10d 020f 	add.w	r2, sp, #15
 800189a:	2301      	movs	r3, #1
 800189c:	214e      	movs	r1, #78	; 0x4e
 800189e:	6828      	ldr	r0, [r5, #0]
 80018a0:	9600      	str	r6, [sp, #0]
 80018a2:	f88d c00f 	strb.w	ip, [sp, #15]
 80018a6:	f001 fdf9 	bl	800349c <HAL_I2C_Master_Transmit>
 80018aa:	f10d 020f 	add.w	r2, sp, #15
 80018ae:	2301      	movs	r3, #1
 80018b0:	214e      	movs	r1, #78	; 0x4e
 80018b2:	6828      	ldr	r0, [r5, #0]
 80018b4:	9600      	str	r6, [sp, #0]
 80018b6:	f88d 700f 	strb.w	r7, [sp, #15]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80018ba:	f044 0408 	orr.w	r4, r4, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80018be:	f001 fded 	bl	800349c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);									//wait 5 ms
 80018c2:	2005      	movs	r0, #5
 80018c4:	f001 f9a6 	bl	8002c14 <HAL_Delay>
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80018c8:	b2e4      	uxtb	r4, r4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80018ca:	f10d 020f 	add.w	r2, sp, #15
 80018ce:	2301      	movs	r3, #1
 80018d0:	214e      	movs	r1, #78	; 0x4e
 80018d2:	6828      	ldr	r0, [r5, #0]
 80018d4:	9600      	str	r6, [sp, #0]
 80018d6:	f88d 400f 	strb.w	r4, [sp, #15]
	display_i2c_write(cmd_LSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 80018da:	f044 0704 	orr.w	r7, r4, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80018de:	f001 fddd 	bl	800349c <HAL_I2C_Master_Transmit>
 80018e2:	f10d 020f 	add.w	r2, sp, #15
 80018e6:	2301      	movs	r3, #1
 80018e8:	214e      	movs	r1, #78	; 0x4e
 80018ea:	6828      	ldr	r0, [r5, #0]
 80018ec:	9600      	str	r6, [sp, #0]
 80018ee:	f88d 700f 	strb.w	r7, [sp, #15]
 80018f2:	f001 fdd3 	bl	800349c <HAL_I2C_Master_Transmit>
 80018f6:	2301      	movs	r3, #1
 80018f8:	214e      	movs	r1, #78	; 0x4e
 80018fa:	6828      	ldr	r0, [r5, #0]
 80018fc:	9600      	str	r6, [sp, #0]
 80018fe:	f10d 020f 	add.w	r2, sp, #15
 8001902:	f88d 400f 	strb.w	r4, [sp, #15]
 8001906:	f001 fdc9 	bl	800349c <HAL_I2C_Master_Transmit>
}
 800190a:	b005      	add	sp, #20
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190e:	bf00      	nop
 8001910:	20000b24 	.word	0x20000b24

08001914 <init_display>:
void init_display(I2C_HandleTypeDef* hi2c) {
 8001914:	4602      	mov	r2, r0
 8001916:	b508      	push	{r3, lr}
	display_i2c = hi2c;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <init_display+0x30>)
	display_send_command(init_4_bit_cmd);
 800191a:	2033      	movs	r0, #51	; 0x33
	display_i2c = hi2c;
 800191c:	601a      	str	r2, [r3, #0]
	display_send_command(init_4_bit_cmd);
 800191e:	f7ff ffa5 	bl	800186c <display_send_command>
	display_send_command(init_4_bit_cmd);
 8001922:	2032      	movs	r0, #50	; 0x32
 8001924:	f7ff ffa2 	bl	800186c <display_send_command>
	display_send_command(DISPLAY_CMD_FUNC |  DISPLAY_BIT_FUNC_DOUBLE);
 8001928:	2028      	movs	r0, #40	; 0x28
 800192a:	f7ff ff9f 	bl	800186c <display_send_command>
	display_send_command(DISPLAY_CMD_CLEAR);
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff ff9c 	bl	800186c <display_send_command>
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
 8001934:	2006      	movs	r0, #6
 8001936:	f7ff ff99 	bl	800186c <display_send_command>
}
 800193a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
 800193e:	200e      	movs	r0, #14
 8001940:	f7ff bf94 	b.w	800186c <display_send_command>
 8001944:	20000b24 	.word	0x20000b24

08001948 <display_i2c_dma_write>:
}

void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 8001948:	b410      	push	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 800194a:	4c04      	ldr	r4, [pc, #16]	; (800195c <display_i2c_dma_write+0x14>)
void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 8001950:	6820      	ldr	r0, [r4, #0]
 8001952:	214e      	movs	r1, #78	; 0x4e
}
 8001954:	bc10      	pop	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 8001956:	f001 beed 	b.w	8003734 <HAL_I2C_Master_Transmit_DMA>
 800195a:	bf00      	nop
 800195c:	20000b24 	.word	0x20000b24

08001960 <display_convert_cmd>:

void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = cmd_MSB;
 8001960:	7813      	ldrb	r3, [r2, #0]
void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
 8001962:	b470      	push	{r4, r5, r6}
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 8001964:	f020 040f 	bic.w	r4, r0, #15
 8001968:	f044 0408 	orr.w	r4, r4, #8
	*(buffer + (*pos)++) = cmd_MSB;
 800196c:	1c5d      	adds	r5, r3, #1
 800196e:	7015      	strb	r5, [r2, #0]
 8001970:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB | DISPLAY_BIT_E;
 8001972:	7813      	ldrb	r3, [r2, #0]
 8001974:	f044 0504 	orr.w	r5, r4, #4
 8001978:	1c5e      	adds	r6, r3, #1
 800197a:	7016      	strb	r6, [r2, #0]
 800197c:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB;
 800197e:	7815      	ldrb	r5, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001980:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = cmd_MSB;
 8001982:	1c68      	adds	r0, r5, #1
 8001984:	7010      	strb	r0, [r2, #0]
 8001986:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = cmd_LSB;
 8001988:	7810      	ldrb	r0, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = cmd_LSB;
 8001990:	1c44      	adds	r4, r0, #1
 8001992:	7014      	strb	r4, [r2, #0]
 8001994:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB | DISPLAY_BIT_E;
 8001996:	7810      	ldrb	r0, [r2, #0]
 8001998:	f043 0404 	orr.w	r4, r3, #4
 800199c:	1c45      	adds	r5, r0, #1
 800199e:	7015      	strb	r5, [r2, #0]
 80019a0:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB;
 80019a2:	7810      	ldrb	r0, [r2, #0]
 80019a4:	1c44      	adds	r4, r0, #1
 80019a6:	7014      	strb	r4, [r2, #0]
 80019a8:	540b      	strb	r3, [r1, r0]
}
 80019aa:	bc70      	pop	{r4, r5, r6}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <display_convert_data>:

void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = data_MSB;
 80019b0:	7813      	ldrb	r3, [r2, #0]
void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
 80019b2:	b470      	push	{r4, r5, r6}
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 80019b4:	f020 040f 	bic.w	r4, r0, #15
 80019b8:	f044 0409 	orr.w	r4, r4, #9
	*(buffer + (*pos)++) = data_MSB;
 80019bc:	1c5d      	adds	r5, r3, #1
 80019be:	7015      	strb	r5, [r2, #0]
 80019c0:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = data_MSB | DISPLAY_BIT_E;
 80019c2:	7813      	ldrb	r3, [r2, #0]
 80019c4:	f044 0504 	orr.w	r5, r4, #4
 80019c8:	1c5e      	adds	r6, r3, #1
 80019ca:	7016      	strb	r6, [r2, #0]
 80019cc:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = data_MSB;
 80019ce:	7815      	ldrb	r5, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 80019d0:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = data_MSB;
 80019d2:	1c68      	adds	r0, r5, #1
 80019d4:	7010      	strb	r0, [r2, #0]
 80019d6:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = data_LSB;
 80019d8:	7810      	ldrb	r0, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 80019da:	f043 0309 	orr.w	r3, r3, #9
 80019de:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = data_LSB;
 80019e0:	1c44      	adds	r4, r0, #1
 80019e2:	7014      	strb	r4, [r2, #0]
 80019e4:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = data_LSB | DISPLAY_BIT_E;
 80019e6:	7810      	ldrb	r0, [r2, #0]
 80019e8:	f043 0404 	orr.w	r4, r3, #4
 80019ec:	1c45      	adds	r5, r0, #1
 80019ee:	7015      	strb	r5, [r2, #0]
 80019f0:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = data_LSB;
 80019f2:	7810      	ldrb	r0, [r2, #0]
 80019f4:	1c44      	adds	r4, r0, #1
 80019f6:	7014      	strb	r4, [r2, #0]
 80019f8:	540b      	strb	r3, [r1, r0]
}
 80019fa:	bc70      	pop	{r4, r5, r6}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <input_invalid>:
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
}

void input_invalid() {
}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <change_inc_dec>:

void change_inc_dec() {
	if (inc_dec == INC_DEC_DEFAULT) {
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <change_inc_dec+0x10>)
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	2a01      	cmp	r2, #1
		inc_dec = INC_DEC_ALT;
	}
	else {
		inc_dec = INC_DEC_DEFAULT;
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2208      	moveq	r2, #8
 8001a0e:	2201      	movne	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
	}
}
 8001a12:	4770      	bx	lr
 8001a14:	20000b20 	.word	0x20000b20

08001a18 <select_menu_amp>:

void select_menu_amp() {
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 8001a18:	21cc      	movs	r1, #204	; 0xcc
 8001a1a:	4801      	ldr	r0, [pc, #4]	; (8001a20 <select_menu_amp+0x8>)
 8001a1c:	f7ff bf94 	b.w	8001948 <display_i2c_dma_write>
 8001a20:	20000ddc 	.word	0x20000ddc

08001a24 <select_menu_ratio>:
}

void select_menu_ratio() {
	display_i2c_dma_write(ui_menu_ratio_converted, UI_STRING_CONVERTED_SIZE);
 8001a24:	21cc      	movs	r1, #204	; 0xcc
 8001a26:	4801      	ldr	r0, [pc, #4]	; (8001a2c <select_menu_ratio+0x8>)
 8001a28:	f7ff bf8e 	b.w	8001948 <display_i2c_dma_write>
 8001a2c:	200012a4 	.word	0x200012a4

08001a30 <select_menu_detune>:
}
void select_menu_detune() {
	display_i2c_dma_write(ui_menu_detune_converted, UI_STRING_CONVERTED_SIZE);
 8001a30:	21cc      	movs	r1, #204	; 0xcc
 8001a32:	4801      	ldr	r0, [pc, #4]	; (8001a38 <select_menu_detune+0x8>)
 8001a34:	f7ff bf88 	b.w	8001948 <display_i2c_dma_write>
 8001a38:	20001414 	.word	0x20001414

08001a3c <select_menu_env>:
}

void select_menu_env() {
	display_i2c_dma_write(ui_menu_env_converted, UI_STRING_CONVERTED_SIZE);
 8001a3c:	21cc      	movs	r1, #204	; 0xcc
 8001a3e:	4801      	ldr	r0, [pc, #4]	; (8001a44 <select_menu_env+0x8>)
 8001a40:	f7ff bf82 	b.w	8001948 <display_i2c_dma_write>
 8001a44:	20000ea8 	.word	0x20000ea8

08001a48 <select_menu_algo>:
}

void select_menu_algo() {
	display_i2c_dma_write(ui_menu_algo_converted, UI_STRING_CONVERTED_SIZE);
 8001a48:	21cc      	movs	r1, #204	; 0xcc
 8001a4a:	4801      	ldr	r0, [pc, #4]	; (8001a50 <select_menu_algo+0x8>)
 8001a4c:	f7ff bf7c 	b.w	8001948 <display_i2c_dma_write>
 8001a50:	20000f74 	.word	0x20000f74

08001a54 <select_menu_instr>:
}

void select_menu_instr() {
	display_i2c_dma_write(ui_menu_instr_converted, UI_STRING_CONVERTED_SIZE);
 8001a54:	21cc      	movs	r1, #204	; 0xcc
 8001a56:	4801      	ldr	r0, [pc, #4]	; (8001a5c <select_menu_instr+0x8>)
 8001a58:	f7ff bf76 	b.w	8001948 <display_i2c_dma_write>
 8001a5c:	20001104 	.word	0x20001104

08001a60 <enter_menu_env>:
	}
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
}

void display_update_menu_env() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a60:	2300      	movs	r3, #0
void enter_menu_env() {
 8001a62:	b570      	push	{r4, r5, r6, lr}
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001a64:	4911      	ldr	r1, [pc, #68]	; (8001aac <enter_menu_env+0x4c>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <enter_menu_env+0x50>)
 8001a68:	7809      	ldrb	r1, [r1, #0]
void enter_menu_env() {
 8001a6a:	b086      	sub	sp, #24
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a6c:	ad02      	add	r5, sp, #8
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001a6e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001a72:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a74:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001a78:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001a7c:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001a7e:	f003 fb67 	bl	8005150 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001a82:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < 4; i++) {
		display_convert_data(
 8001a84:	4e0b      	ldr	r6, [pc, #44]	; (8001ab4 <enter_menu_env+0x54>)
 8001a86:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001a88:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001a8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a90:	4631      	mov	r1, r6
 8001a92:	f10d 0203 	add.w	r2, sp, #3
 8001a96:	f7ff ff8b 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001a9a:	42ac      	cmp	r4, r5
 8001a9c:	d1f6      	bne.n	8001a8c <enter_menu_env+0x2c>
			params[i], ui_menu_env_op_converted, &index
		);
	}
	display_i2c_dma_write(ui_menu_env_op_converted, UI_STRING_CONVERTED_SIZE);
 8001a9e:	21cc      	movs	r1, #204	; 0xcc
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <enter_menu_env+0x54>)
 8001aa2:	f7ff ff51 	bl	8001948 <display_i2c_dma_write>
}
 8001aa6:	b006      	add	sp, #24
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000bf9 	.word	0x20000bf9
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	20000b28 	.word	0x20000b28

08001ab8 <inc_menu_env_op>:
void inc_menu_env_op() {
 8001ab8:	b570      	push	{r4, r5, r6, lr}
	if (++fsm_env_op == MAX_OPERATORS) {
 8001aba:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <inc_menu_env_op+0x5c>)
void inc_menu_env_op() {
 8001abc:	b086      	sub	sp, #24
	if (++fsm_env_op == MAX_OPERATORS) {
 8001abe:	7813      	ldrb	r3, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001ac0:	ad02      	add	r5, sp, #8
	if (++fsm_env_op == MAX_OPERATORS) {
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b04      	cmp	r3, #4
		fsm_env_op = 0x00;
 8001ac8:	bf05      	ittet	eq
 8001aca:	2100      	moveq	r1, #0
 8001acc:	460b      	moveq	r3, r1
	if (++fsm_env_op == MAX_OPERATORS) {
 8001ace:	7013      	strbne	r3, [r2, #0]
		fsm_env_op = 0x00;
 8001ad0:	7011      	strbeq	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001ad2:	2200      	movs	r2, #0
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001ad4:	4910      	ldr	r1, [pc, #64]	; (8001b18 <inc_menu_env_op+0x60>)
 8001ad6:	a801      	add	r0, sp, #4
 8001ad8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001adc:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8001ae0:	e9c5 2201 	strd	r2, r2, [r5, #4]
 8001ae4:	732a      	strb	r2, [r5, #12]
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001ae6:	f003 fb33 	bl	8005150 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001aea:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001aec:	4e0b      	ldr	r6, [pc, #44]	; (8001b1c <inc_menu_env_op+0x64>)
 8001aee:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001af0:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001af4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001af8:	4631      	mov	r1, r6
 8001afa:	f10d 0203 	add.w	r2, sp, #3
 8001afe:	f7ff ff57 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001b02:	42ac      	cmp	r4, r5
 8001b04:	d1f6      	bne.n	8001af4 <inc_menu_env_op+0x3c>
	display_i2c_dma_write(ui_menu_env_op_converted, UI_STRING_CONVERTED_SIZE);
 8001b06:	21cc      	movs	r1, #204	; 0xcc
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <inc_menu_env_op+0x64>)
 8001b0a:	f7ff ff1d 	bl	8001948 <display_i2c_dma_write>
}
 8001b0e:	b006      	add	sp, #24
 8001b10:	bd70      	pop	{r4, r5, r6, pc}
 8001b12:	bf00      	nop
 8001b14:	20000bf9 	.word	0x20000bf9
 8001b18:	20000004 	.word	0x20000004
 8001b1c:	20000b28 	.word	0x20000b28

08001b20 <enter_menu_algo>:
	}
	display_i2c_dma_write(ui_set_env_converted, UI_STRING_CONVERTED_SIZE);
}

void display_update_menu_algo() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b20:	2300      	movs	r3, #0
void enter_menu_algo() {
 8001b22:	b570      	push	{r4, r5, r6, lr}
	temp[0] = algo;
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <enter_menu_algo+0x50>)
 8001b26:	4813      	ldr	r0, [pc, #76]	; (8001b74 <enter_menu_algo+0x54>)
 8001b28:	7812      	ldrb	r2, [r2, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001b2a:	4913      	ldr	r1, [pc, #76]	; (8001b78 <enter_menu_algo+0x58>)
void enter_menu_algo() {
 8001b2c:	b086      	sub	sp, #24
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b2e:	ad02      	add	r5, sp, #8
	temp[0] = algo;
 8001b30:	7002      	strb	r2, [r0, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001b32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001b36:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b38:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001b3c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001b40:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[algo]);
 8001b42:	f003 fb05 	bl	8005150 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b46:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < 4; i++) {
		display_convert_data(
 8001b48:	4e0c      	ldr	r6, [pc, #48]	; (8001b7c <enter_menu_algo+0x5c>)
 8001b4a:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b4c:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001b50:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001b54:	4631      	mov	r1, r6
 8001b56:	f10d 0203 	add.w	r2, sp, #3
 8001b5a:	f7ff ff29 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001b5e:	42ac      	cmp	r4, r5
 8001b60:	d1f6      	bne.n	8001b50 <enter_menu_algo+0x30>
			params[i], ui_set_algo_converted, &index
		);
	}
	display_i2c_dma_write(ui_set_algo_converted, UI_STRING_CONVERTED_SIZE);
 8001b62:	21cc      	movs	r1, #204	; 0xcc
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <enter_menu_algo+0x5c>)
 8001b66:	f7ff feef 	bl	8001948 <display_i2c_dma_write>
}
 8001b6a:	b006      	add	sp, #24
 8001b6c:	bd70      	pop	{r4, r5, r6, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000a84 	.word	0x20000a84
 8001b74:	20000bf4 	.word	0x20000bf4
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	200011d8 	.word	0x200011d8

08001b80 <temp_set_algo>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b80:	2300      	movs	r3, #0
void temp_set_algo() {
 8001b82:	b570      	push	{r4, r5, r6, lr}
	temp[0] = algo;
 8001b84:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <temp_set_algo+0x54>)
	uint8_t temp2 = temp[0];
 8001b86:	4c14      	ldr	r4, [pc, #80]	; (8001bd8 <temp_set_algo+0x58>)
	temp[0] = algo;
 8001b88:	7815      	ldrb	r5, [r2, #0]
	uint8_t temp2 = temp[0];
 8001b8a:	7820      	ldrb	r0, [r4, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001b8c:	4913      	ldr	r1, [pc, #76]	; (8001bdc <temp_set_algo+0x5c>)
void temp_set_algo() {
 8001b8e:	b086      	sub	sp, #24
	temp[0] = algo;
 8001b90:	7025      	strb	r5, [r4, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001b92:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b96:	ad02      	add	r5, sp, #8
	algo = temp2;
 8001b98:	7010      	strb	r0, [r2, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001b9a:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b9c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001ba0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001ba4:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[algo]);
 8001ba6:	f003 fad3 	bl	8005150 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001baa:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001bac:	4e0c      	ldr	r6, [pc, #48]	; (8001be0 <temp_set_algo+0x60>)
 8001bae:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001bb0:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001bb4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001bb8:	4631      	mov	r1, r6
 8001bba:	f10d 0203 	add.w	r2, sp, #3
 8001bbe:	f7ff fef7 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001bc2:	42ac      	cmp	r4, r5
 8001bc4:	d1f6      	bne.n	8001bb4 <temp_set_algo+0x34>
	display_i2c_dma_write(ui_set_algo_converted, UI_STRING_CONVERTED_SIZE);
 8001bc6:	21cc      	movs	r1, #204	; 0xcc
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <temp_set_algo+0x60>)
 8001bca:	f7ff febd 	bl	8001948 <display_i2c_dma_write>
}
 8001bce:	b006      	add	sp, #24
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000a84 	.word	0x20000a84
 8001bd8:	20000bf4 	.word	0x20000bf4
 8001bdc:	20000004 	.word	0x20000004
 8001be0:	200011d8 	.word	0x200011d8

08001be4 <inc_set_algo>:
void inc_set_algo() {
 8001be4:	b570      	push	{r4, r5, r6, lr}
	if (++algo == (MAX_ALGO + 1)) {
 8001be6:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <inc_set_algo+0x5c>)
void inc_set_algo() {
 8001be8:	b086      	sub	sp, #24
	if (++algo == (MAX_ALGO + 1)) {
 8001bea:	7813      	ldrb	r3, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001bec:	ad02      	add	r5, sp, #8
	if (++algo == (MAX_ALGO + 1)) {
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b0c      	cmp	r3, #12
		algo = 0x00;
 8001bf4:	bf05      	ittet	eq
 8001bf6:	2100      	moveq	r1, #0
 8001bf8:	460b      	moveq	r3, r1
	if (++algo == (MAX_ALGO + 1)) {
 8001bfa:	7013      	strbne	r3, [r2, #0]
		algo = 0x00;
 8001bfc:	7011      	strbeq	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001bfe:	2200      	movs	r2, #0
	strcat(params, HEX_TO_STRING[algo]);
 8001c00:	4910      	ldr	r1, [pc, #64]	; (8001c44 <inc_set_algo+0x60>)
 8001c02:	a801      	add	r0, sp, #4
 8001c04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c08:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8001c0c:	e9c5 2201 	strd	r2, r2, [r5, #4]
 8001c10:	732a      	strb	r2, [r5, #12]
	strcat(params, HEX_TO_STRING[algo]);
 8001c12:	f003 fa9d 	bl	8005150 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c16:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001c18:	4e0b      	ldr	r6, [pc, #44]	; (8001c48 <inc_set_algo+0x64>)
 8001c1a:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c1c:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001c20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001c24:	4631      	mov	r1, r6
 8001c26:	f10d 0203 	add.w	r2, sp, #3
 8001c2a:	f7ff fec1 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001c2e:	42ac      	cmp	r4, r5
 8001c30:	d1f6      	bne.n	8001c20 <inc_set_algo+0x3c>
	display_i2c_dma_write(ui_set_algo_converted, UI_STRING_CONVERTED_SIZE);
 8001c32:	21cc      	movs	r1, #204	; 0xcc
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <inc_set_algo+0x64>)
 8001c36:	f7ff fe87 	bl	8001948 <display_i2c_dma_write>
}
 8001c3a:	b006      	add	sp, #24
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000a84 	.word	0x20000a84
 8001c44:	20000004 	.word	0x20000004
 8001c48:	200011d8 	.word	0x200011d8

08001c4c <enter_menu_amp>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c4c:	2300      	movs	r3, #0
		temp[i] = op_amp[i];
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <enter_menu_amp+0x60>)
void enter_menu_amp() {
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	4614      	mov	r4, r2
 8001c54:	b086      	sub	sp, #24
		temp[i] = op_amp[i];
 8001c56:	6811      	ldr	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c58:	e9cd 3301 	strd	r3, r3, [sp, #4]
		temp[i] = op_amp[i];
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <enter_menu_amp+0x64>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c5e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001c62:	4e14      	ldr	r6, [pc, #80]	; (8001cb4 <enter_menu_amp+0x68>)
		temp[i] = op_amp[i];
 8001c64:	6011      	str	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c66:	1d25      	adds	r5, r4, #4
 8001c68:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001c70:	a801      	add	r0, sp, #4
 8001c72:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001c76:	f003 fa5c 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001c7a:	42a5      	cmp	r5, r4
 8001c7c:	d1f6      	bne.n	8001c6c <enter_menu_amp+0x20>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c7e:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001c80:	4e0d      	ldr	r6, [pc, #52]	; (8001cb8 <enter_menu_amp+0x6c>)
 8001c82:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c86:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c8a:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001c8e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001c92:	4631      	mov	r1, r6
 8001c94:	f10d 0203 	add.w	r2, sp, #3
 8001c98:	f7ff fe8a 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c9c:	42a5      	cmp	r5, r4
 8001c9e:	d1f6      	bne.n	8001c8e <enter_menu_amp+0x42>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001ca0:	21cc      	movs	r1, #204	; 0xcc
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <enter_menu_amp+0x6c>)
 8001ca4:	f7ff fe50 	bl	8001948 <display_i2c_dma_write>
}
 8001ca8:	b006      	add	sp, #24
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
 8001cac:	20000a9c 	.word	0x20000a9c
 8001cb0:	20000bf4 	.word	0x20000bf4
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	20000bfc 	.word	0x20000bfc

08001cbc <enter_menu_ratio>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cbc:	2300      	movs	r3, #0
		temp[i] = op_ratio[i];
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <enter_menu_ratio+0x60>)
void enter_menu_ratio() {
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	4614      	mov	r4, r2
 8001cc4:	b086      	sub	sp, #24
		temp[i] = op_ratio[i];
 8001cc6:	6811      	ldr	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cc8:	e9cd 3301 	strd	r3, r3, [sp, #4]
		temp[i] = op_ratio[i];
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <enter_menu_ratio+0x64>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cce:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001cd2:	4e14      	ldr	r6, [pc, #80]	; (8001d24 <enter_menu_ratio+0x68>)
		temp[i] = op_ratio[i];
 8001cd4:	6011      	str	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cd6:	1d25      	adds	r5, r4, #4
 8001cd8:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 8001cdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ce0:	a801      	add	r0, sp, #4
 8001ce2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001ce6:	f003 fa24 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001cea:	42a5      	cmp	r5, r4
 8001cec:	d1f6      	bne.n	8001cdc <enter_menu_ratio+0x20>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001cee:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001cf0:	4e0d      	ldr	r6, [pc, #52]	; (8001d28 <enter_menu_ratio+0x6c>)
 8001cf2:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001cf6:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001cfa:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001cfe:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001d02:	4631      	mov	r1, r6
 8001d04:	f10d 0203 	add.w	r2, sp, #3
 8001d08:	f7ff fe52 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001d0c:	42a5      	cmp	r5, r4
 8001d0e:	d1f6      	bne.n	8001cfe <enter_menu_ratio+0x42>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001d10:	21cc      	movs	r1, #204	; 0xcc
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <enter_menu_ratio+0x6c>)
 8001d14:	f7ff fe18 	bl	8001948 <display_i2c_dma_write>
}
 8001d18:	b006      	add	sp, #24
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	20000ac0 	.word	0x20000ac0
 8001d20:	20000bf4 	.word	0x20000bf4
 8001d24:	20000608 	.word	0x20000608
 8001d28:	20000bfc 	.word	0x20000bfc

08001d2c <enter_menu_detune>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d2c:	2300      	movs	r3, #0
		temp[i] = op_detune[i];
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <enter_menu_detune+0x64>)
void enter_menu_detune() {
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	4614      	mov	r4, r2
 8001d34:	b086      	sub	sp, #24
		temp[i] = op_detune[i];
 8001d36:	6811      	ldr	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d38:	e9cd 3301 	strd	r3, r3, [sp, #4]
		temp[i] = op_detune[i];
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <enter_menu_detune+0x68>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d3e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001d42:	4e15      	ldr	r6, [pc, #84]	; (8001d98 <enter_menu_detune+0x6c>)
		temp[i] = op_detune[i];
 8001d44:	6011      	str	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d46:	1d25      	adds	r5, r4, #4
 8001d48:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001d4c:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001d50:	a801      	add	r0, sp, #4
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001d58:	f003 f9eb 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001d5c:	42a5      	cmp	r5, r4
 8001d5e:	d1f5      	bne.n	8001d4c <enter_menu_detune+0x20>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001d60:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001d62:	4e0e      	ldr	r6, [pc, #56]	; (8001d9c <enter_menu_detune+0x70>)
 8001d64:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001d68:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001d6c:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001d70:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001d74:	4631      	mov	r1, r6
 8001d76:	f10d 0203 	add.w	r2, sp, #3
 8001d7a:	f7ff fe19 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001d7e:	42ac      	cmp	r4, r5
 8001d80:	d1f6      	bne.n	8001d70 <enter_menu_detune+0x44>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001d82:	21cc      	movs	r1, #204	; 0xcc
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <enter_menu_detune+0x70>)
 8001d86:	f7ff fddf 	bl	8001948 <display_i2c_dma_write>
}
 8001d8a:	b006      	add	sp, #24
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000aa8 	.word	0x20000aa8
 8001d94:	20000bf4 	.word	0x20000bf4
 8001d98:	20000208 	.word	0x20000208
 8001d9c:	20000bfc 	.word	0x20000bfc

08001da0 <enter_menu_instr>:
}

void display_update_menu_instr() {
	uint8_t index = SECOND_LINE_START_INDEX - (4*6);	//index set on first line, 15th position
 8001da0:	2154      	movs	r1, #84	; 0x54
void enter_menu_instr() {
 8001da2:	b570      	push	{r4, r5, r6, lr}
	display_convert_data(
		*HEX_TO_STRING[instrument], ui_set_instr_converted, &index
 8001da4:	4c1a      	ldr	r4, [pc, #104]	; (8001e10 <enter_menu_instr+0x70>)
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <enter_menu_instr+0x74>)
 8001da8:	7822      	ldrb	r2, [r4, #0]
void enter_menu_instr() {
 8001daa:	b086      	sub	sp, #24
	display_convert_data(
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	uint8_t index = SECOND_LINE_START_INDEX - (4*6);	//index set on first line, 15th position
 8001db0:	f88d 1003 	strb.w	r1, [sp, #3]
	display_convert_data(
 8001db4:	7818      	ldrb	r0, [r3, #0]
 8001db6:	4918      	ldr	r1, [pc, #96]	; (8001e18 <enter_menu_instr+0x78>)
 8001db8:	f10d 0203 	add.w	r2, sp, #3
 8001dbc:	f7ff fdf8 	bl	80019b0 <display_convert_data>
	);

	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001dc0:	2300      	movs	r3, #0
	strcat(params, instruments[instrument].name);
 8001dc2:	7822      	ldrb	r2, [r4, #0]
 8001dc4:	4915      	ldr	r1, [pc, #84]	; (8001e1c <enter_menu_instr+0x7c>)
 8001dc6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8001dca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001dce:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001dd0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001dd4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001dd8:	f88d 3014 	strb.w	r3, [sp, #20]
	strcat(params, instruments[instrument].name);
 8001ddc:	f003 f9b8 	bl	8005150 <strcpy>
	index = SECOND_LINE_START_INDEX;
 8001de0:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
		display_convert_data(
 8001de2:	4e0d      	ldr	r6, [pc, #52]	; (8001e18 <enter_menu_instr+0x78>)
 8001de4:	f10d 0403 	add.w	r4, sp, #3
	index = SECOND_LINE_START_INDEX;
 8001de8:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001dec:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001df0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001df4:	4631      	mov	r1, r6
 8001df6:	f10d 0203 	add.w	r2, sp, #3
 8001dfa:	f7ff fdd9 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001dfe:	42ac      	cmp	r4, r5
 8001e00:	d1f6      	bne.n	8001df0 <enter_menu_instr+0x50>
			params[i], ui_set_instr_converted, &index
		);
	}
	display_i2c_dma_write(ui_set_instr_converted, UI_STRING_CONVERTED_SIZE);
 8001e02:	21cc      	movs	r1, #204	; 0xcc
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <enter_menu_instr+0x78>)
 8001e06:	f7ff fd9f 	bl	8001948 <display_i2c_dma_write>
}
 8001e0a:	b006      	add	sp, #24
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000ac4 	.word	0x20000ac4
 8001e14:	20000004 	.word	0x20000004
 8001e18:	20000ccc 	.word	0x20000ccc
 8001e1c:	080064d0 	.word	0x080064d0

08001e20 <temp_set_detune>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001e20:	2300      	movs	r3, #0
		temp[i] = op_detune[i];
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <temp_set_detune+0x68>)
void temp_set_detune() {
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	4614      	mov	r4, r2
		uint8_t temp2 = temp[i];
 8001e28:	4918      	ldr	r1, [pc, #96]	; (8001e8c <temp_set_detune+0x6c>)
void temp_set_detune() {
 8001e2a:	b086      	sub	sp, #24
		uint8_t temp2 = temp[i];
 8001e2c:	680d      	ldr	r5, [r1, #0]
		temp[i] = op_detune[i];
 8001e2e:	6810      	ldr	r0, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001e30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001e34:	4e16      	ldr	r6, [pc, #88]	; (8001e90 <temp_set_detune+0x70>)
		op_detune[i] = temp2;
 8001e36:	6015      	str	r5, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001e38:	9301      	str	r3, [sp, #4]
		temp[i] = op_detune[i];
 8001e3a:	6008      	str	r0, [r1, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001e3c:	1d15      	adds	r5, r2, #4
 8001e3e:	9304      	str	r3, [sp, #16]
 8001e40:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001e44:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001e48:	a801      	add	r0, sp, #4
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001e50:	f003 f96f 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001e54:	42ac      	cmp	r4, r5
 8001e56:	d1f5      	bne.n	8001e44 <temp_set_detune+0x24>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001e58:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001e5a:	4e0e      	ldr	r6, [pc, #56]	; (8001e94 <temp_set_detune+0x74>)
 8001e5c:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001e60:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001e64:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001e68:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001e6c:	4631      	mov	r1, r6
 8001e6e:	f10d 0203 	add.w	r2, sp, #3
 8001e72:	f7ff fd9d 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001e76:	42a5      	cmp	r5, r4
 8001e78:	d1f6      	bne.n	8001e68 <temp_set_detune+0x48>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001e7a:	21cc      	movs	r1, #204	; 0xcc
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <temp_set_detune+0x74>)
 8001e7e:	f7ff fd63 	bl	8001948 <display_i2c_dma_write>
}
 8001e82:	b006      	add	sp, #24
 8001e84:	bd70      	pop	{r4, r5, r6, pc}
 8001e86:	bf00      	nop
 8001e88:	20000aa8 	.word	0x20000aa8
 8001e8c:	20000bf4 	.word	0x20000bf4
 8001e90:	20000208 	.word	0x20000208
 8001e94:	20000bfc 	.word	0x20000bfc

08001e98 <temp_set_amp>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001e98:	2300      	movs	r3, #0
		temp[i] = op_amp[i];
 8001e9a:	4a18      	ldr	r2, [pc, #96]	; (8001efc <temp_set_amp+0x64>)
void temp_set_amp() {
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	4614      	mov	r4, r2
		uint8_t temp2 = temp[i];
 8001ea0:	4917      	ldr	r1, [pc, #92]	; (8001f00 <temp_set_amp+0x68>)
void temp_set_amp() {
 8001ea2:	b086      	sub	sp, #24
		uint8_t temp2 = temp[i];
 8001ea4:	680d      	ldr	r5, [r1, #0]
		temp[i] = op_amp[i];
 8001ea6:	6810      	ldr	r0, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001ea8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001eac:	4e15      	ldr	r6, [pc, #84]	; (8001f04 <temp_set_amp+0x6c>)
		op_amp[i] = temp2;
 8001eae:	6015      	str	r5, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001eb0:	9301      	str	r3, [sp, #4]
		temp[i] = op_amp[i];
 8001eb2:	6008      	str	r0, [r1, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001eb4:	1d15      	adds	r5, r2, #4
 8001eb6:	9304      	str	r3, [sp, #16]
 8001eb8:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001ebc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ec0:	a801      	add	r0, sp, #4
 8001ec2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001ec6:	f003 f934 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001eca:	42ac      	cmp	r4, r5
 8001ecc:	d1f6      	bne.n	8001ebc <temp_set_amp+0x24>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001ece:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001ed0:	4e0d      	ldr	r6, [pc, #52]	; (8001f08 <temp_set_amp+0x70>)
 8001ed2:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001ed6:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001eda:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001ede:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001ee2:	4631      	mov	r1, r6
 8001ee4:	f10d 0203 	add.w	r2, sp, #3
 8001ee8:	f7ff fd62 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001eec:	42a5      	cmp	r5, r4
 8001eee:	d1f6      	bne.n	8001ede <temp_set_amp+0x46>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001ef0:	21cc      	movs	r1, #204	; 0xcc
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <temp_set_amp+0x70>)
 8001ef4:	f7ff fd28 	bl	8001948 <display_i2c_dma_write>
}
 8001ef8:	b006      	add	sp, #24
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	20000a9c 	.word	0x20000a9c
 8001f00:	20000bf4 	.word	0x20000bf4
 8001f04:	20000004 	.word	0x20000004
 8001f08:	20000bfc 	.word	0x20000bfc

08001f0c <temp_set_ratio>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001f0c:	2300      	movs	r3, #0
		temp[i] = op_ratio[i];
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <temp_set_ratio+0x64>)
void temp_set_ratio() {
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4614      	mov	r4, r2
		uint8_t temp2 = temp[i];
 8001f14:	4917      	ldr	r1, [pc, #92]	; (8001f74 <temp_set_ratio+0x68>)
void temp_set_ratio() {
 8001f16:	b086      	sub	sp, #24
		uint8_t temp2 = temp[i];
 8001f18:	680d      	ldr	r5, [r1, #0]
		temp[i] = op_ratio[i];
 8001f1a:	6810      	ldr	r0, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001f1c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001f20:	4e15      	ldr	r6, [pc, #84]	; (8001f78 <temp_set_ratio+0x6c>)
		op_ratio[i] = temp2;
 8001f22:	6015      	str	r5, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001f24:	9301      	str	r3, [sp, #4]
		temp[i] = op_ratio[i];
 8001f26:	6008      	str	r0, [r1, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001f28:	1d15      	adds	r5, r2, #4
 8001f2a:	9304      	str	r3, [sp, #16]
 8001f2c:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 8001f30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001f34:	a801      	add	r0, sp, #4
 8001f36:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001f3a:	f003 f8fa 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001f3e:	42ac      	cmp	r4, r5
 8001f40:	d1f6      	bne.n	8001f30 <temp_set_ratio+0x24>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001f42:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001f44:	4e0d      	ldr	r6, [pc, #52]	; (8001f7c <temp_set_ratio+0x70>)
 8001f46:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001f4a:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001f4e:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001f52:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001f56:	4631      	mov	r1, r6
 8001f58:	f10d 0203 	add.w	r2, sp, #3
 8001f5c:	f7ff fd28 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001f60:	42a5      	cmp	r5, r4
 8001f62:	d1f6      	bne.n	8001f52 <temp_set_ratio+0x46>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001f64:	21cc      	movs	r1, #204	; 0xcc
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <temp_set_ratio+0x70>)
 8001f68:	f7ff fcee 	bl	8001948 <display_i2c_dma_write>
}
 8001f6c:	b006      	add	sp, #24
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	20000ac0 	.word	0x20000ac0
 8001f74:	20000bf4 	.word	0x20000bf4
 8001f78:	20000608 	.word	0x20000608
 8001f7c:	20000bfc 	.word	0x20000bfc

08001f80 <inc_set_amp>:
void inc_set_amp() {
 8001f80:	b570      	push	{r4, r5, r6, lr}
	op_amp[fsm_op] += inc_dec;
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <inc_set_amp+0x70>)
 8001f84:	491b      	ldr	r1, [pc, #108]	; (8001ff4 <inc_set_amp+0x74>)
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	481b      	ldr	r0, [pc, #108]	; (8001ff8 <inc_set_amp+0x78>)
 8001f8a:	5c8b      	ldrb	r3, [r1, r2]
 8001f8c:	7800      	ldrb	r0, [r0, #0]
void inc_set_amp() {
 8001f8e:	b086      	sub	sp, #24
	op_amp[fsm_op] += inc_dec;
 8001f90:	4403      	add	r3, r0
 8001f92:	b2db      	uxtb	r3, r3
	if (op_amp[fsm_op] > MAX_VOLUME) {
 8001f94:	2b80      	cmp	r3, #128	; 0x80
		op_amp[fsm_op] = MAX_VOLUME;
 8001f96:	bf88      	it	hi
 8001f98:	2380      	movhi	r3, #128	; 0x80
 8001f9a:	548b      	strb	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	4c15      	ldr	r4, [pc, #84]	; (8001ff4 <inc_set_amp+0x74>)
 8001fa0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001fa4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001fa8:	4e14      	ldr	r6, [pc, #80]	; (8001ffc <inc_set_amp+0x7c>)
 8001faa:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001fae:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001fb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001fb4:	a801      	add	r0, sp, #4
 8001fb6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001fba:	f003 f8ba 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001fbe:	42ac      	cmp	r4, r5
 8001fc0:	d1f6      	bne.n	8001fb0 <inc_set_amp+0x30>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001fc2:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001fc4:	4e0e      	ldr	r6, [pc, #56]	; (8002000 <inc_set_amp+0x80>)
 8001fc6:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001fca:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001fce:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001fd2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001fd6:	4631      	mov	r1, r6
 8001fd8:	f10d 0203 	add.w	r2, sp, #3
 8001fdc:	f7ff fce8 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001fe0:	42a5      	cmp	r5, r4
 8001fe2:	d1f6      	bne.n	8001fd2 <inc_set_amp+0x52>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001fe4:	21cc      	movs	r1, #204	; 0xcc
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <inc_set_amp+0x80>)
 8001fe8:	f7ff fcae 	bl	8001948 <display_i2c_dma_write>
}
 8001fec:	b006      	add	sp, #24
 8001fee:	bd70      	pop	{r4, r5, r6, pc}
 8001ff0:	20000ac8 	.word	0x20000ac8
 8001ff4:	20000a9c 	.word	0x20000a9c
 8001ff8:	20000b20 	.word	0x20000b20
 8001ffc:	20000004 	.word	0x20000004
 8002000:	20000bfc 	.word	0x20000bfc

08002004 <dec_set_amp>:
void dec_set_amp() {
 8002004:	b570      	push	{r4, r5, r6, lr}
	op_amp[fsm_op] -= inc_dec;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <dec_set_amp+0x70>)
 8002008:	491b      	ldr	r1, [pc, #108]	; (8002078 <dec_set_amp+0x74>)
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	481b      	ldr	r0, [pc, #108]	; (800207c <dec_set_amp+0x78>)
 800200e:	5c8b      	ldrb	r3, [r1, r2]
 8002010:	7800      	ldrb	r0, [r0, #0]
void dec_set_amp() {
 8002012:	b086      	sub	sp, #24
	op_amp[fsm_op] -= inc_dec;
 8002014:	1a1b      	subs	r3, r3, r0
 8002016:	b2db      	uxtb	r3, r3
	if (op_amp[fsm_op] > MAX_VOLUME) {
 8002018:	2b80      	cmp	r3, #128	; 0x80
		op_amp[fsm_op] = 0x00;
 800201a:	bf88      	it	hi
 800201c:	2300      	movhi	r3, #0
 800201e:	548b      	strb	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002020:	2300      	movs	r3, #0
 8002022:	4c15      	ldr	r4, [pc, #84]	; (8002078 <dec_set_amp+0x74>)
 8002024:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002028:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800202c:	4e14      	ldr	r6, [pc, #80]	; (8002080 <dec_set_amp+0x7c>)
 800202e:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8002032:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8002034:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002038:	a801      	add	r0, sp, #4
 800203a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800203e:	f003 f878 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8002042:	42ac      	cmp	r4, r5
 8002044:	d1f6      	bne.n	8002034 <dec_set_amp+0x30>
	uint8_t index = SECOND_LINE_START_INDEX;
 8002046:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8002048:	4e0e      	ldr	r6, [pc, #56]	; (8002084 <dec_set_amp+0x80>)
 800204a:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 800204e:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002052:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8002056:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800205a:	4631      	mov	r1, r6
 800205c:	f10d 0203 	add.w	r2, sp, #3
 8002060:	f7ff fca6 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002064:	42a5      	cmp	r5, r4
 8002066:	d1f6      	bne.n	8002056 <dec_set_amp+0x52>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8002068:	21cc      	movs	r1, #204	; 0xcc
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <dec_set_amp+0x80>)
 800206c:	f7ff fc6c 	bl	8001948 <display_i2c_dma_write>
}
 8002070:	b006      	add	sp, #24
 8002072:	bd70      	pop	{r4, r5, r6, pc}
 8002074:	20000ac8 	.word	0x20000ac8
 8002078:	20000a9c 	.word	0x20000a9c
 800207c:	20000b20 	.word	0x20000b20
 8002080:	20000004 	.word	0x20000004
 8002084:	20000bfc 	.word	0x20000bfc

08002088 <inc_set_detune>:
void inc_set_detune() {
 8002088:	b570      	push	{r4, r5, r6, lr}
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <inc_set_detune+0x78>)
 800208c:	481d      	ldr	r0, [pc, #116]	; (8002104 <inc_set_detune+0x7c>)
 800208e:	7819      	ldrb	r1, [r3, #0]
		op_detune[fsm_op] += inc_dec;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <inc_set_detune+0x80>)
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8002092:	5642      	ldrsb	r2, [r0, r1]
		op_detune[fsm_op] += inc_dec;
 8002094:	781b      	ldrb	r3, [r3, #0]
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8002096:	2a00      	cmp	r2, #0
void inc_set_detune() {
 8002098:	b086      	sub	sp, #24
		op_detune[fsm_op] += inc_dec;
 800209a:	4413      	add	r3, r2
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 800209c:	db03      	blt.n	80020a6 <inc_set_detune+0x1e>
		op_detune[fsm_op] += inc_dec;
 800209e:	b25b      	sxtb	r3, r3
		if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {
 80020a0:	2b00      	cmp	r3, #0
			op_detune[fsm_op] = MAX_POS_DETUNE;
 80020a2:	bfb8      	it	lt
 80020a4:	237f      	movlt	r3, #127	; 0x7f
 80020a6:	5443      	strb	r3, [r0, r1]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80020a8:	2300      	movs	r3, #0
 80020aa:	4c16      	ldr	r4, [pc, #88]	; (8002104 <inc_set_detune+0x7c>)
 80020ac:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80020b0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80020b4:	4e15      	ldr	r6, [pc, #84]	; (800210c <inc_set_detune+0x84>)
 80020b6:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 80020ba:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 80020bc:	f914 3b01 	ldrsb.w	r3, [r4], #1
 80020c0:	a801      	add	r0, sp, #4
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80020c8:	f003 f833 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 80020cc:	42a5      	cmp	r5, r4
 80020ce:	d1f5      	bne.n	80020bc <inc_set_detune+0x34>
	uint8_t index = SECOND_LINE_START_INDEX;
 80020d0:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 80020d2:	4e0f      	ldr	r6, [pc, #60]	; (8002110 <inc_set_detune+0x88>)
 80020d4:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 80020d8:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80020dc:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 80020e0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80020e4:	4631      	mov	r1, r6
 80020e6:	f10d 0203 	add.w	r2, sp, #3
 80020ea:	f7ff fc61 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80020ee:	42a5      	cmp	r5, r4
 80020f0:	d1f6      	bne.n	80020e0 <inc_set_detune+0x58>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 80020f2:	21cc      	movs	r1, #204	; 0xcc
 80020f4:	4806      	ldr	r0, [pc, #24]	; (8002110 <inc_set_detune+0x88>)
 80020f6:	f7ff fc27 	bl	8001948 <display_i2c_dma_write>
}
 80020fa:	b006      	add	sp, #24
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
 80020fe:	bf00      	nop
 8002100:	20000ac8 	.word	0x20000ac8
 8002104:	20000aa8 	.word	0x20000aa8
 8002108:	20000b20 	.word	0x20000b20
 800210c:	20000208 	.word	0x20000208
 8002110:	20000bfc 	.word	0x20000bfc

08002114 <dec_set_detune>:
void dec_set_detune() {
 8002114:	b570      	push	{r4, r5, r6, lr}
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <dec_set_detune+0x78>)
 8002118:	491d      	ldr	r1, [pc, #116]	; (8002190 <dec_set_detune+0x7c>)
 800211a:	781a      	ldrb	r2, [r3, #0]
		op_detune[fsm_op] -= inc_dec;
 800211c:	481d      	ldr	r0, [pc, #116]	; (8002194 <dec_set_detune+0x80>)
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 800211e:	568b      	ldrsb	r3, [r1, r2]
		op_detune[fsm_op] -= inc_dec;
 8002120:	7800      	ldrb	r0, [r0, #0]
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8002122:	2b00      	cmp	r3, #0
void dec_set_detune() {
 8002124:	b086      	sub	sp, #24
		op_detune[fsm_op] -= inc_dec;
 8002126:	eba3 0300 	sub.w	r3, r3, r0
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 800212a:	da03      	bge.n	8002134 <dec_set_detune+0x20>
		op_detune[fsm_op] -= inc_dec;
 800212c:	b25b      	sxtb	r3, r3
		if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {
 800212e:	2b00      	cmp	r3, #0
			op_detune[fsm_op] = MAX_NEG_DETUNE;
 8002130:	bfa8      	it	ge
 8002132:	2380      	movge	r3, #128	; 0x80
 8002134:	548b      	strb	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002136:	2300      	movs	r3, #0
 8002138:	4c15      	ldr	r4, [pc, #84]	; (8002190 <dec_set_detune+0x7c>)
 800213a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800213e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002142:	4e15      	ldr	r6, [pc, #84]	; (8002198 <dec_set_detune+0x84>)
 8002144:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8002148:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 800214a:	f914 3b01 	ldrsb.w	r3, [r4], #1
 800214e:	a801      	add	r0, sp, #4
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8002156:	f002 ffec 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 800215a:	42a5      	cmp	r5, r4
 800215c:	d1f5      	bne.n	800214a <dec_set_detune+0x36>
	uint8_t index = SECOND_LINE_START_INDEX;
 800215e:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8002160:	4e0e      	ldr	r6, [pc, #56]	; (800219c <dec_set_detune+0x88>)
 8002162:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8002166:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 800216a:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 800216e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002172:	4631      	mov	r1, r6
 8002174:	f10d 0203 	add.w	r2, sp, #3
 8002178:	f7ff fc1a 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 800217c:	42a5      	cmp	r5, r4
 800217e:	d1f6      	bne.n	800216e <dec_set_detune+0x5a>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8002180:	21cc      	movs	r1, #204	; 0xcc
 8002182:	4806      	ldr	r0, [pc, #24]	; (800219c <dec_set_detune+0x88>)
 8002184:	f7ff fbe0 	bl	8001948 <display_i2c_dma_write>
}
 8002188:	b006      	add	sp, #24
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	20000ac8 	.word	0x20000ac8
 8002190:	20000aa8 	.word	0x20000aa8
 8002194:	20000b20 	.word	0x20000b20
 8002198:	20000208 	.word	0x20000208
 800219c:	20000bfc 	.word	0x20000bfc

080021a0 <inc_set_ratio>:
void inc_set_ratio() {
 80021a0:	b570      	push	{r4, r5, r6, lr}
	if (inc_dec == INC_DEC_DEFAULT) {
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <inc_set_ratio+0x7c>)
		op_ratio[fsm_op] += 0x01;
 80021a4:	491e      	ldr	r1, [pc, #120]	; (8002220 <inc_set_ratio+0x80>)
	if (inc_dec == INC_DEC_DEFAULT) {
 80021a6:	781b      	ldrb	r3, [r3, #0]
void inc_set_ratio() {
 80021a8:	b086      	sub	sp, #24
	if (inc_dec == INC_DEC_DEFAULT) {
 80021aa:	2b01      	cmp	r3, #1
		op_ratio[fsm_op] += 0x01;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <inc_set_ratio+0x84>)
 80021ae:	4c1c      	ldr	r4, [pc, #112]	; (8002220 <inc_set_ratio+0x80>)
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	4e1d      	ldr	r6, [pc, #116]	; (8002228 <inc_set_ratio+0x88>)
 80021b4:	5c8b      	ldrb	r3, [r1, r2]
 80021b6:	f104 0504 	add.w	r5, r4, #4
 80021ba:	bf0c      	ite	eq
 80021bc:	3301      	addeq	r3, #1
		op_ratio[fsm_op] += 0x10;
 80021be:	3310      	addne	r3, #16
 80021c0:	b2db      	uxtb	r3, r3
	if (op_ratio[fsm_op] > MAX_RATIO) {
 80021c2:	2b80      	cmp	r3, #128	; 0x80
		op_ratio[fsm_op] += 0x10;
 80021c4:	548b      	strb	r3, [r1, r2]
		op_ratio[fsm_op] = MAX_RATIO;
 80021c6:	bf84      	itt	hi
 80021c8:	2380      	movhi	r3, #128	; 0x80
 80021ca:	548b      	strbhi	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80021cc:	2300      	movs	r3, #0
 80021ce:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80021d2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80021d6:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 80021da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80021de:	a801      	add	r0, sp, #4
 80021e0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80021e4:	f002 ffa5 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 80021e8:	42ac      	cmp	r4, r5
 80021ea:	d1f6      	bne.n	80021da <inc_set_ratio+0x3a>
	uint8_t index = SECOND_LINE_START_INDEX;
 80021ec:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 80021ee:	4e0f      	ldr	r6, [pc, #60]	; (800222c <inc_set_ratio+0x8c>)
 80021f0:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 80021f4:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80021f8:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 80021fc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002200:	4631      	mov	r1, r6
 8002202:	f10d 0203 	add.w	r2, sp, #3
 8002206:	f7ff fbd3 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 800220a:	42a5      	cmp	r5, r4
 800220c:	d1f6      	bne.n	80021fc <inc_set_ratio+0x5c>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 800220e:	21cc      	movs	r1, #204	; 0xcc
 8002210:	4806      	ldr	r0, [pc, #24]	; (800222c <inc_set_ratio+0x8c>)
 8002212:	f7ff fb99 	bl	8001948 <display_i2c_dma_write>
}
 8002216:	b006      	add	sp, #24
 8002218:	bd70      	pop	{r4, r5, r6, pc}
 800221a:	bf00      	nop
 800221c:	20000b20 	.word	0x20000b20
 8002220:	20000ac0 	.word	0x20000ac0
 8002224:	20000ac8 	.word	0x20000ac8
 8002228:	20000608 	.word	0x20000608
 800222c:	20000bfc 	.word	0x20000bfc

08002230 <dec_set_ratio>:
void dec_set_ratio() {
 8002230:	b570      	push	{r4, r5, r6, lr}
	if (inc_dec == INC_DEC_DEFAULT) {
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <dec_set_ratio+0x80>)
		op_ratio[fsm_op] -= 0x01;
 8002234:	491f      	ldr	r1, [pc, #124]	; (80022b4 <dec_set_ratio+0x84>)
	if (inc_dec == INC_DEC_DEFAULT) {
 8002236:	781b      	ldrb	r3, [r3, #0]
void dec_set_ratio() {
 8002238:	b086      	sub	sp, #24
	if (inc_dec == INC_DEC_DEFAULT) {
 800223a:	2b01      	cmp	r3, #1
		op_ratio[fsm_op] -= 0x01;
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <dec_set_ratio+0x88>)
 800223e:	4c1d      	ldr	r4, [pc, #116]	; (80022b4 <dec_set_ratio+0x84>)
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	4e1e      	ldr	r6, [pc, #120]	; (80022bc <dec_set_ratio+0x8c>)
 8002244:	5c8b      	ldrb	r3, [r1, r2]
 8002246:	f104 0504 	add.w	r5, r4, #4
 800224a:	bf0c      	ite	eq
 800224c:	f103 33ff 	addeq.w	r3, r3, #4294967295
		op_ratio[fsm_op] -= 0x10;
 8002250:	3b10      	subne	r3, #16
 8002252:	b2db      	uxtb	r3, r3
 8002254:	548b      	strb	r3, [r1, r2]
	if (op_ratio[fsm_op] > MAX_RATIO || op_ratio[fsm_op] == 0x00) {
 8002256:	3b01      	subs	r3, #1
 8002258:	061b      	lsls	r3, r3, #24
		op_ratio[fsm_op] = 0x01;
 800225a:	bf44      	itt	mi
 800225c:	2301      	movmi	r3, #1
 800225e:	548b      	strbmi	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002260:	2300      	movs	r3, #0
 8002262:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002266:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800226a:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 800226e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002272:	a801      	add	r0, sp, #4
 8002274:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8002278:	f002 ff5b 	bl	8005132 <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 800227c:	42a5      	cmp	r5, r4
 800227e:	d1f6      	bne.n	800226e <dec_set_ratio+0x3e>
	uint8_t index = SECOND_LINE_START_INDEX;
 8002280:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8002282:	4e0f      	ldr	r6, [pc, #60]	; (80022c0 <dec_set_ratio+0x90>)
 8002284:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8002288:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 800228c:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8002290:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002294:	4631      	mov	r1, r6
 8002296:	f10d 0203 	add.w	r2, sp, #3
 800229a:	f7ff fb89 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 800229e:	42a5      	cmp	r5, r4
 80022a0:	d1f6      	bne.n	8002290 <dec_set_ratio+0x60>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 80022a2:	21cc      	movs	r1, #204	; 0xcc
 80022a4:	4806      	ldr	r0, [pc, #24]	; (80022c0 <dec_set_ratio+0x90>)
 80022a6:	f7ff fb4f 	bl	8001948 <display_i2c_dma_write>
}
 80022aa:	b006      	add	sp, #24
 80022ac:	bd70      	pop	{r4, r5, r6, pc}
 80022ae:	bf00      	nop
 80022b0:	20000b20 	.word	0x20000b20
 80022b4:	20000ac0 	.word	0x20000ac0
 80022b8:	20000ac8 	.word	0x20000ac8
 80022bc:	20000608 	.word	0x20000608
 80022c0:	20000bfc 	.word	0x20000bfc

080022c4 <dec_set_instr>:
void dec_set_instr() {
 80022c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instrument == 0x00) {
 80022c8:	4f67      	ldr	r7, [pc, #412]	; (8002468 <dec_set_instr+0x1a4>)
void dec_set_instr() {
 80022ca:	b089      	sub	sp, #36	; 0x24
	if (instrument == 0x00) {
 80022cc:	7839      	ldrb	r1, [r7, #0]
 80022ce:	2900      	cmp	r1, #0
 80022d0:	f000 80c2 	beq.w	8002458 <dec_set_instr+0x194>
		--instrument;
 80022d4:	3901      	subs	r1, #1
 80022d6:	b2c9      	uxtb	r1, r1
 80022d8:	468b      	mov	fp, r1
 80022da:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800249c <dec_set_instr+0x1d8>
 80022de:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80022e2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80022e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022f0:	eb0b 03cb 	add.w	r3, fp, fp, lsl #3
 80022f4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80022f8:	7d98      	ldrb	r0, [r3, #22]
 80022fa:	7039      	strb	r1, [r7, #0]
 80022fc:	f1c0 0181 	rsb	r1, r0, #129	; 0x81
 8002300:	b289      	uxth	r1, r1
 8002302:	fbb2 f1f1 	udiv	r1, r2, r1
 8002306:	7cde      	ldrb	r6, [r3, #19]
 8002308:	7d5c      	ldrb	r4, [r3, #21]
 800230a:	f1c6 0681 	rsb	r6, r6, #129	; 0x81
 800230e:	b2b6      	uxth	r6, r6
 8002310:	fbb2 f6f6 	udiv	r6, r2, r6
 8002314:	f893 9010 	ldrb.w	r9, [r3, #16]
 8002318:	f893 e011 	ldrb.w	lr, [r3, #17]
 800231c:	f893 c012 	ldrb.w	ip, [r3, #18]
 8002320:	7d1d      	ldrb	r5, [r3, #20]
 8002322:	f1c4 0481 	rsb	r4, r4, #129	; 0x81
 8002326:	7dd8      	ldrb	r0, [r3, #23]
 8002328:	b2a4      	uxth	r4, r4
 800232a:	fbb2 f4f4 	udiv	r4, r2, r4
 800232e:	f1c9 0981 	rsb	r9, r9, #129	; 0x81
 8002332:	f1ce 0e81 	rsb	lr, lr, #129	; 0x81
 8002336:	f1cc 0c81 	rsb	ip, ip, #129	; 0x81
 800233a:	f1c5 0581 	rsb	r5, r5, #129	; 0x81
 800233e:	fa1f f989 	uxth.w	r9, r9
 8002342:	fa1f fe8e 	uxth.w	lr, lr
 8002346:	fa1f fc8c 	uxth.w	ip, ip
 800234a:	b2ad      	uxth	r5, r5
 800234c:	f1c0 0081 	rsb	r0, r0, #129	; 0x81
 8002350:	fbb2 fefe 	udiv	lr, r2, lr
 8002354:	fbb2 fcfc 	udiv	ip, r2, ip
 8002358:	fbb2 f5f5 	udiv	r5, r2, r5
 800235c:	fbb2 f9f9 	udiv	r9, r2, r9
 8002360:	b280      	uxth	r0, r0
 8002362:	fbb2 f0f0 	udiv	r0, r2, r0
 8002366:	9101      	str	r1, [sp, #4]
 8002368:	7f19      	ldrb	r1, [r3, #28]
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 800236a:	f8df a134 	ldr.w	sl, [pc, #308]	; 80024a0 <dec_set_instr+0x1dc>
 800236e:	f1c1 0181 	rsb	r1, r1, #129	; 0x81
 8002372:	b289      	uxth	r1, r1
 8002374:	fbb2 f1f1 	udiv	r1, r2, r1
 8002378:	f8aa 6006 	strh.w	r6, [sl, #6]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 800237c:	4e3b      	ldr	r6, [pc, #236]	; (800246c <dec_set_instr+0x1a8>)
 800237e:	f8aa e002 	strh.w	lr, [sl, #2]
 8002382:	8074      	strh	r4, [r6, #2]
 8002384:	9c01      	ldr	r4, [sp, #4]
 8002386:	f8aa c004 	strh.w	ip, [sl, #4]
 800238a:	8035      	strh	r5, [r6, #0]
 800238c:	80b4      	strh	r4, [r6, #4]
 800238e:	f8aa 9000 	strh.w	r9, [sl]
 8002392:	685d      	ldr	r5, [r3, #4]
 8002394:	80f0      	strh	r0, [r6, #6]
 8002396:	4836      	ldr	r0, [pc, #216]	; (8002470 <dec_set_instr+0x1ac>)
 8002398:	689c      	ldr	r4, [r3, #8]
 800239a:	6005      	str	r5, [r0, #0]
 800239c:	4835      	ldr	r0, [pc, #212]	; (8002474 <dec_set_instr+0x1b0>)
 800239e:	68dd      	ldr	r5, [r3, #12]
 80023a0:	6004      	str	r4, [r0, #0]
 80023a2:	4835      	ldr	r0, [pc, #212]	; (8002478 <dec_set_instr+0x1b4>)
 80023a4:	691c      	ldr	r4, [r3, #16]
 80023a6:	6005      	str	r5, [r0, #0]
 80023a8:	4834      	ldr	r0, [pc, #208]	; (800247c <dec_set_instr+0x1b8>)
 80023aa:	695d      	ldr	r5, [r3, #20]
 80023ac:	6004      	str	r4, [r0, #0]
 80023ae:	4834      	ldr	r0, [pc, #208]	; (8002480 <dec_set_instr+0x1bc>)
 80023b0:	699c      	ldr	r4, [r3, #24]
 80023b2:	6005      	str	r5, [r0, #0]
 80023b4:	4833      	ldr	r0, [pc, #204]	; (8002484 <dec_set_instr+0x1c0>)
 80023b6:	69dd      	ldr	r5, [r3, #28]
 80023b8:	6004      	str	r4, [r0, #0]
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 80023ba:	4833      	ldr	r0, [pc, #204]	; (8002488 <dec_set_instr+0x1c4>)
 80023bc:	4c33      	ldr	r4, [pc, #204]	; (800248c <dec_set_instr+0x1c8>)
 80023be:	8001      	strh	r1, [r0, #0]
 80023c0:	7f99      	ldrb	r1, [r3, #30]
 80023c2:	6025      	str	r5, [r4, #0]
 80023c4:	7f5c      	ldrb	r4, [r3, #29]
 80023c6:	7fdd      	ldrb	r5, [r3, #31]
 80023c8:	f1c1 0381 	rsb	r3, r1, #129	; 0x81
 80023cc:	f1c4 0481 	rsb	r4, r4, #129	; 0x81
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	f1c5 0581 	rsb	r5, r5, #129	; 0x81
 80023da:	b2a1      	uxth	r1, r4
 80023dc:	fbb2 f1f1 	udiv	r1, r2, r1
 80023e0:	b2ac      	uxth	r4, r5
 80023e2:	fbb2 f2f4 	udiv	r2, r2, r4
	uint8_t index = SECOND_LINE_START_INDEX - (4*6);	//index set on first line, 15th position
 80023e6:	2554      	movs	r5, #84	; 0x54
		*HEX_TO_STRING[instrument], ui_set_instr_converted, &index
 80023e8:	4e29      	ldr	r6, [pc, #164]	; (8002490 <dec_set_instr+0x1cc>)
 80023ea:	8083      	strh	r3, [r0, #4]
 80023ec:	4c29      	ldr	r4, [pc, #164]	; (8002494 <dec_set_instr+0x1d0>)
 80023ee:	9b00      	ldr	r3, [sp, #0]
 80023f0:	8041      	strh	r1, [r0, #2]
	display_convert_data(
 80023f2:	f856 102b 	ldr.w	r1, [r6, fp, lsl #2]
 80023f6:	7023      	strb	r3, [r4, #0]
 80023f8:	80c2      	strh	r2, [r0, #6]
	uint8_t index = SECOND_LINE_START_INDEX - (4*6);	//index set on first line, 15th position
 80023fa:	f88d 500b 	strb.w	r5, [sp, #11]
	display_convert_data(
 80023fe:	7808      	ldrb	r0, [r1, #0]
 8002400:	f10d 020b 	add.w	r2, sp, #11
 8002404:	4924      	ldr	r1, [pc, #144]	; (8002498 <dec_set_instr+0x1d4>)
 8002406:	f7ff fad3 	bl	80019b0 <display_convert_data>
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 800240a:	2300      	movs	r3, #0
	strcat(params, instruments[instrument].name);
 800240c:	783a      	ldrb	r2, [r7, #0]
 800240e:	a803      	add	r0, sp, #12
 8002410:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8002414:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002418:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800241c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002420:	f88d 301c 	strb.w	r3, [sp, #28]
	strcat(params, instruments[instrument].name);
 8002424:	f002 fe94 	bl	8005150 <strcpy>
	index = SECOND_LINE_START_INDEX;
 8002428:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 800242a:	4e1b      	ldr	r6, [pc, #108]	; (8002498 <dec_set_instr+0x1d4>)
 800242c:	f10d 040b 	add.w	r4, sp, #11
	index = SECOND_LINE_START_INDEX;
 8002430:	f88d 300b 	strb.w	r3, [sp, #11]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002434:	f10d 051b 	add.w	r5, sp, #27
		display_convert_data(
 8002438:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800243c:	4631      	mov	r1, r6
 800243e:	f10d 020b 	add.w	r2, sp, #11
 8002442:	f7ff fab5 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002446:	42a5      	cmp	r5, r4
 8002448:	d1f6      	bne.n	8002438 <dec_set_instr+0x174>
	display_i2c_dma_write(ui_set_instr_converted, UI_STRING_CONVERTED_SIZE);
 800244a:	21cc      	movs	r1, #204	; 0xcc
 800244c:	4812      	ldr	r0, [pc, #72]	; (8002498 <dec_set_instr+0x1d4>)
 800244e:	f7ff fa7b 	bl	8001948 <display_i2c_dma_write>
}
 8002452:	b009      	add	sp, #36	; 0x24
 8002454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002458:	f04f 0b01 	mov.w	fp, #1
 800245c:	2307      	movs	r3, #7
		instrument = (MAX_INSTRUMENTS-1);
 800245e:	4659      	mov	r1, fp
 8002460:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800249c <dec_set_instr+0x1d8>
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	e741      	b.n	80022ec <dec_set_instr+0x28>
 8002468:	20000ac4 	.word	0x20000ac4
 800246c:	20000aa0 	.word	0x20000aa0
 8002470:	20000a9c 	.word	0x20000a9c
 8002474:	20000ac0 	.word	0x20000ac0
 8002478:	20000aa8 	.word	0x20000aa8
 800247c:	20000a8c 	.word	0x20000a8c
 8002480:	20000ab8 	.word	0x20000ab8
 8002484:	20000a80 	.word	0x20000a80
 8002488:	20000a90 	.word	0x20000a90
 800248c:	20000a88 	.word	0x20000a88
 8002490:	20000004 	.word	0x20000004
 8002494:	20000a84 	.word	0x20000a84
 8002498:	20000ccc 	.word	0x20000ccc
 800249c:	080064d0 	.word	0x080064d0
 80024a0:	20000aac 	.word	0x20000aac

080024a4 <inc_set_instr>:
void inc_set_instr() {
 80024a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++instrument == MAX_INSTRUMENTS) {
 80024a8:	4f6a      	ldr	r7, [pc, #424]	; (8002654 <inc_set_instr+0x1b0>)
void inc_set_instr() {
 80024aa:	b089      	sub	sp, #36	; 0x24
	if (++instrument == MAX_INSTRUMENTS) {
 80024ac:	7839      	ldrb	r1, [r7, #0]
 80024ae:	3101      	adds	r1, #1
 80024b0:	b2c9      	uxtb	r1, r1
 80024b2:	2902      	cmp	r1, #2
 80024b4:	7039      	strb	r1, [r7, #0]
 80024b6:	f000 80c6 	beq.w	8002646 <inc_set_instr+0x1a2>
 80024ba:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8002684 <inc_set_instr+0x1e0>
 80024be:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80024c2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80024c6:	f893 b020 	ldrb.w	fp, [r3, #32]
 80024ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024ce:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80024d2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80024d6:	7d9c      	ldrb	r4, [r3, #22]
 80024d8:	7c18      	ldrb	r0, [r3, #16]
 80024da:	f1c4 0481 	rsb	r4, r4, #129	; 0x81
 80024de:	f1c0 0081 	rsb	r0, r0, #129	; 0x81
 80024e2:	b2a4      	uxth	r4, r4
 80024e4:	fbb2 f4f4 	udiv	r4, r2, r4
 80024e8:	b280      	uxth	r0, r0
 80024ea:	fbb2 f0f0 	udiv	r0, r2, r0
 80024ee:	f893 c013 	ldrb.w	ip, [r3, #19]
 80024f2:	7d5d      	ldrb	r5, [r3, #21]
 80024f4:	f1cc 0c81 	rsb	ip, ip, #129	; 0x81
 80024f8:	fa1f fc8c 	uxth.w	ip, ip
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 80024fc:	f8df a188 	ldr.w	sl, [pc, #392]	; 8002688 <inc_set_instr+0x1e4>
 8002500:	fbb2 fcfc 	udiv	ip, r2, ip
 8002504:	f1c5 0581 	rsb	r5, r5, #129	; 0x81
 8002508:	f893 9011 	ldrb.w	r9, [r3, #17]
 800250c:	f893 e012 	ldrb.w	lr, [r3, #18]
 8002510:	7d1e      	ldrb	r6, [r3, #20]
 8002512:	9401      	str	r4, [sp, #4]
 8002514:	b2ad      	uxth	r5, r5
 8002516:	7ddc      	ldrb	r4, [r3, #23]
 8002518:	f8aa 0000 	strh.w	r0, [sl]
 800251c:	fbb2 f5f5 	udiv	r5, r2, r5
 8002520:	7f18      	ldrb	r0, [r3, #28]
 8002522:	f1c9 0981 	rsb	r9, r9, #129	; 0x81
 8002526:	f1ce 0e81 	rsb	lr, lr, #129	; 0x81
 800252a:	f1c6 0681 	rsb	r6, r6, #129	; 0x81
 800252e:	f1c4 0481 	rsb	r4, r4, #129	; 0x81
 8002532:	fa1f f989 	uxth.w	r9, r9
 8002536:	fa1f fe8e 	uxth.w	lr, lr
 800253a:	b2b6      	uxth	r6, r6
 800253c:	b2a4      	uxth	r4, r4
 800253e:	f1c0 0081 	rsb	r0, r0, #129	; 0x81
 8002542:	fbb2 fefe 	udiv	lr, r2, lr
 8002546:	fbb2 f6f6 	udiv	r6, r2, r6
 800254a:	fbb2 f4f4 	udiv	r4, r2, r4
 800254e:	fbb2 f9f9 	udiv	r9, r2, r9
 8002552:	b280      	uxth	r0, r0
 8002554:	fbb2 f0f0 	udiv	r0, r2, r0
 8002558:	f8aa c006 	strh.w	ip, [sl, #6]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 800255c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800268c <inc_set_instr+0x1e8>
 8002560:	f8aa e004 	strh.w	lr, [sl, #4]
 8002564:	f8ac 5002 	strh.w	r5, [ip, #2]
 8002568:	9d01      	ldr	r5, [sp, #4]
 800256a:	f8ac 6000 	strh.w	r6, [ip]
 800256e:	f8ac 5004 	strh.w	r5, [ip, #4]
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8002572:	4d39      	ldr	r5, [pc, #228]	; (8002658 <inc_set_instr+0x1b4>)
 8002574:	f8aa 9002 	strh.w	r9, [sl, #2]
 8002578:	f8ac 4006 	strh.w	r4, [ip, #6]
 800257c:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8002580:	4e36      	ldr	r6, [pc, #216]	; (800265c <inc_set_instr+0x1b8>)
 8002582:	8028      	strh	r0, [r5, #0]
 8002584:	689c      	ldr	r4, [r3, #8]
 8002586:	4836      	ldr	r0, [pc, #216]	; (8002660 <inc_set_instr+0x1bc>)
 8002588:	f8c6 c000 	str.w	ip, [r6]
 800258c:	68de      	ldr	r6, [r3, #12]
 800258e:	6004      	str	r4, [r0, #0]
 8002590:	4834      	ldr	r0, [pc, #208]	; (8002664 <inc_set_instr+0x1c0>)
 8002592:	691c      	ldr	r4, [r3, #16]
 8002594:	6006      	str	r6, [r0, #0]
 8002596:	4834      	ldr	r0, [pc, #208]	; (8002668 <inc_set_instr+0x1c4>)
 8002598:	695e      	ldr	r6, [r3, #20]
 800259a:	6004      	str	r4, [r0, #0]
 800259c:	4833      	ldr	r0, [pc, #204]	; (800266c <inc_set_instr+0x1c8>)
 800259e:	699c      	ldr	r4, [r3, #24]
 80025a0:	6006      	str	r6, [r0, #0]
 80025a2:	4833      	ldr	r0, [pc, #204]	; (8002670 <inc_set_instr+0x1cc>)
 80025a4:	69de      	ldr	r6, [r3, #28]
 80025a6:	6004      	str	r4, [r0, #0]
 80025a8:	4832      	ldr	r0, [pc, #200]	; (8002674 <inc_set_instr+0x1d0>)
 80025aa:	f893 c01f 	ldrb.w	ip, [r3, #31]
 80025ae:	6006      	str	r6, [r0, #0]
 80025b0:	7f5e      	ldrb	r6, [r3, #29]
 80025b2:	7f98      	ldrb	r0, [r3, #30]
 80025b4:	f1c6 0681 	rsb	r6, r6, #129	; 0x81
 80025b8:	f1c0 0381 	rsb	r3, r0, #129	; 0x81
 80025bc:	b2b0      	uxth	r0, r6
 80025be:	fbb2 f0f0 	udiv	r0, r2, r0
 80025c2:	f1cc 0c81 	rsb	ip, ip, #129	; 0x81
 80025c6:	fa1f f68c 	uxth.w	r6, ip
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
	uint8_t index = SECOND_LINE_START_INDEX - (4*6);	//index set on first line, 15th position
 80025d0:	2454      	movs	r4, #84	; 0x54
 80025d2:	fbb2 f2f6 	udiv	r2, r2, r6
		*HEX_TO_STRING[instrument], ui_set_instr_converted, &index
 80025d6:	4e28      	ldr	r6, [pc, #160]	; (8002678 <inc_set_instr+0x1d4>)
 80025d8:	8068      	strh	r0, [r5, #2]
 80025da:	4828      	ldr	r0, [pc, #160]	; (800267c <inc_set_instr+0x1d8>)
	display_convert_data(
 80025dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80025e0:	80ab      	strh	r3, [r5, #4]
 80025e2:	80ea      	strh	r2, [r5, #6]
	uint8_t index = SECOND_LINE_START_INDEX - (4*6);	//index set on first line, 15th position
 80025e4:	f88d 400b 	strb.w	r4, [sp, #11]
 80025e8:	f880 b000 	strb.w	fp, [r0]
	display_convert_data(
 80025ec:	7808      	ldrb	r0, [r1, #0]
 80025ee:	f10d 020b 	add.w	r2, sp, #11
 80025f2:	4923      	ldr	r1, [pc, #140]	; (8002680 <inc_set_instr+0x1dc>)
 80025f4:	f7ff f9dc 	bl	80019b0 <display_convert_data>
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80025f8:	2300      	movs	r3, #0
	strcat(params, instruments[instrument].name);
 80025fa:	783a      	ldrb	r2, [r7, #0]
 80025fc:	a803      	add	r0, sp, #12
 80025fe:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8002602:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002606:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800260a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800260e:	f88d 301c 	strb.w	r3, [sp, #28]
	strcat(params, instruments[instrument].name);
 8002612:	f002 fd9d 	bl	8005150 <strcpy>
	index = SECOND_LINE_START_INDEX;
 8002616:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8002618:	4e19      	ldr	r6, [pc, #100]	; (8002680 <inc_set_instr+0x1dc>)
 800261a:	f10d 040b 	add.w	r4, sp, #11
	index = SECOND_LINE_START_INDEX;
 800261e:	f88d 300b 	strb.w	r3, [sp, #11]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002622:	f10d 051b 	add.w	r5, sp, #27
		display_convert_data(
 8002626:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800262a:	4631      	mov	r1, r6
 800262c:	f10d 020b 	add.w	r2, sp, #11
 8002630:	f7ff f9be 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002634:	42a5      	cmp	r5, r4
 8002636:	d1f6      	bne.n	8002626 <inc_set_instr+0x182>
	display_i2c_dma_write(ui_set_instr_converted, UI_STRING_CONVERTED_SIZE);
 8002638:	21cc      	movs	r1, #204	; 0xcc
 800263a:	4811      	ldr	r0, [pc, #68]	; (8002680 <inc_set_instr+0x1dc>)
 800263c:	f7ff f984 	bl	8001948 <display_i2c_dma_write>
}
 8002640:	b009      	add	sp, #36	; 0x24
 8002642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		instrument = 0x00;
 8002646:	2300      	movs	r3, #0
 8002648:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8002684 <inc_set_instr+0x1e0>
 800264c:	469b      	mov	fp, r3
 800264e:	4619      	mov	r1, r3
 8002650:	703b      	strb	r3, [r7, #0]
 8002652:	e73a      	b.n	80024ca <inc_set_instr+0x26>
 8002654:	20000ac4 	.word	0x20000ac4
 8002658:	20000a90 	.word	0x20000a90
 800265c:	20000a9c 	.word	0x20000a9c
 8002660:	20000ac0 	.word	0x20000ac0
 8002664:	20000aa8 	.word	0x20000aa8
 8002668:	20000a8c 	.word	0x20000a8c
 800266c:	20000ab8 	.word	0x20000ab8
 8002670:	20000a80 	.word	0x20000a80
 8002674:	20000a88 	.word	0x20000a88
 8002678:	20000004 	.word	0x20000004
 800267c:	20000a84 	.word	0x20000a84
 8002680:	20000ccc 	.word	0x20000ccc
 8002684:	080064d0 	.word	0x080064d0
 8002688:	20000aac 	.word	0x20000aac
 800268c:	20000aa0 	.word	0x20000aa0

08002690 <init_ui>:
void init_ui(I2C_HandleTypeDef* hi2c) {
 8002690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002694:	b082      	sub	sp, #8
	init_display(hi2c);
 8002696:	f7ff f93d 	bl	8001914 <init_display>
		uint8_t index = 0;
 800269a:	f04f 0800 	mov.w	r8, #0
 800269e:	4d1f      	ldr	r5, [pc, #124]	; (800271c <init_ui+0x8c>)
 80026a0:	4e1f      	ldr	r6, [pc, #124]	; (8002720 <init_ui+0x90>)
 80026a2:	f105 072c 	add.w	r7, r5, #44	; 0x2c
		display_convert_cmd(							//start DDRAM address at beginning of first line
 80026a6:	2080      	movs	r0, #128	; 0x80
 80026a8:	f855 1b04 	ldr.w	r1, [r5], #4
 80026ac:	f10d 0207 	add.w	r2, sp, #7
 80026b0:	2400      	movs	r4, #0
		uint8_t index = 0;
 80026b2:	f88d 8007 	strb.w	r8, [sp, #7]
		display_convert_cmd(							//start DDRAM address at beginning of first line
 80026b6:	f7ff f953 	bl	8001960 <display_convert_cmd>
			display_convert_data(						//convert chars to 4-bit bus data for 1602 LCD
 80026ba:	6833      	ldr	r3, [r6, #0]
 80026bc:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80026c0:	5d18      	ldrb	r0, [r3, r4]
 80026c2:	f10d 0207 	add.w	r2, sp, #7
 80026c6:	3401      	adds	r4, #1
 80026c8:	f7ff f972 	bl	80019b0 <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 80026cc:	2c10      	cmp	r4, #16
 80026ce:	d1f4      	bne.n	80026ba <init_ui+0x2a>
		display_convert_cmd(							//move DDRAM address at beginning of second line
 80026d0:	20c0      	movs	r0, #192	; 0xc0
 80026d2:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80026d6:	f10d 0207 	add.w	r2, sp, #7
 80026da:	f7ff f941 	bl	8001960 <display_convert_cmd>
			display_convert_data(						//write spaces for second line
 80026de:	2020      	movs	r0, #32
 80026e0:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80026e4:	f10d 0207 	add.w	r2, sp, #7
 80026e8:	3c01      	subs	r4, #1
 80026ea:	f7ff f961 	bl	80019b0 <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 80026ee:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80026f2:	d1f4      	bne.n	80026de <init_ui+0x4e>
	for (uint8_t i = 0; i < NUM_OF_UI_STRINGS; i++) {	//loop through all UI strings to convert
 80026f4:	42bd      	cmp	r5, r7
 80026f6:	f106 0604 	add.w	r6, r6, #4
 80026fa:	d1d4      	bne.n	80026a6 <init_ui+0x16>
	fsm_op = 0;
 80026fc:	4a09      	ldr	r2, [pc, #36]	; (8002724 <init_ui+0x94>)
	fsm_env_op = 0;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <init_ui+0x98>)
	present_state = menu_amp;				//set state to menu_amp
 8002700:	4d0a      	ldr	r5, [pc, #40]	; (800272c <init_ui+0x9c>)
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 8002702:	21cc      	movs	r1, #204	; 0xcc
 8002704:	480a      	ldr	r0, [pc, #40]	; (8002730 <init_ui+0xa0>)
	fsm_op = 0;
 8002706:	7014      	strb	r4, [r2, #0]
	fsm_env_op = 0;
 8002708:	701c      	strb	r4, [r3, #0]
	present_state = menu_amp;				//set state to menu_amp
 800270a:	702c      	strb	r4, [r5, #0]
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 800270c:	f7ff f91c 	bl	8001948 <display_i2c_dma_write>
	inc_dec = 0x01;
 8002710:	2201      	movs	r2, #1
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <init_ui+0xa4>)
 8002714:	701a      	strb	r2, [r3, #0]
}
 8002716:	b002      	add	sp, #8
 8002718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800271c:	20000870 	.word	0x20000870
 8002720:	20000844 	.word	0x20000844
 8002724:	20000ac8 	.word	0x20000ac8
 8002728:	20000bf9 	.word	0x20000bf9
 800272c:	20000cc8 	.word	0x20000cc8
 8002730:	20000ddc 	.word	0x20000ddc
 8002734:	20000b20 	.word	0x20000b20

08002738 <fsm>:
void fsm(input key) {
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 800273a:	4e11      	ldr	r6, [pc, #68]	; (8002780 <fsm+0x48>)
 800273c:	4f11      	ldr	r7, [pc, #68]	; (8002784 <fsm+0x4c>)
 800273e:	7833      	ldrb	r3, [r6, #0]
 8002740:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8002744:	780a      	ldrb	r2, [r1, #0]
 8002746:	4290      	cmp	r0, r2
 8002748:	d017      	beq.n	800277a <fsm+0x42>
 800274a:	2300      	movs	r3, #0
 800274c:	460d      	mov	r5, r1
 800274e:	461c      	mov	r4, r3
 8002750:	e006      	b.n	8002760 <fsm+0x28>
 8002752:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
 8002756:	00dc      	lsls	r4, r3, #3
 8002758:	4282      	cmp	r2, r0
 800275a:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
 800275e:	d003      	beq.n	8002768 <fsm+0x30>
		fsm_transition_table[present_state][i].key != invalid; i++);	//point i to the correct transition
 8002760:	3301      	adds	r3, #1
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8002762:	2a05      	cmp	r2, #5
		fsm_transition_table[present_state][i].key != invalid; i++);	//point i to the correct transition
 8002764:	b2db      	uxtb	r3, r3
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8002766:	d1f4      	bne.n	8002752 <fsm+0x1a>
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
 8002768:	686b      	ldr	r3, [r5, #4]
 800276a:	4798      	blx	r3
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
 800276c:	7833      	ldrb	r3, [r6, #0]
 800276e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8002772:	441c      	add	r4, r3
 8002774:	7863      	ldrb	r3, [r4, #1]
 8002776:	7033      	strb	r3, [r6, #0]
}
 8002778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 800277a:	460d      	mov	r5, r1
 800277c:	2400      	movs	r4, #0
 800277e:	e7f3      	b.n	8002768 <fsm+0x30>
 8002780:	20000cc8 	.word	0x20000cc8
 8002784:	2000080c 	.word	0x2000080c

08002788 <display_update_menu_env_op>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002788:	2300      	movs	r3, #0
void display_update_menu_env_op() {
 800278a:	b570      	push	{r4, r5, r6, lr}
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 800278c:	491c      	ldr	r1, [pc, #112]	; (8002800 <display_update_menu_env_op+0x78>)
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <display_update_menu_env_op+0x7c>)
 8002790:	780e      	ldrb	r6, [r1, #0]
 8002792:	4d1d      	ldr	r5, [pc, #116]	; (8002808 <display_update_menu_env_op+0x80>)
 8002794:	5d92      	ldrb	r2, [r2, r6]
void display_update_menu_env_op() {
 8002796:	b086      	sub	sp, #24
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 8002798:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 800279c:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 800279e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80027a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80027a6:	f88d 3014 	strb.w	r3, [sp, #20]
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 80027aa:	f002 fcb9 	bl	8005120 <stpcpy>
	strcat(params, HEX_TO_STRING[op_decay[fsm_env_op]]);
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <display_update_menu_env_op+0x84>)
 80027b0:	f10d 0403 	add.w	r4, sp, #3
 80027b4:	5d9b      	ldrb	r3, [r3, r6]
 80027b6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80027ba:	f002 fcb1 	bl	8005120 <stpcpy>
	strcat(params, HEX_TO_STRING[op_sustain[fsm_env_op]]);
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <display_update_menu_env_op+0x88>)
 80027c0:	5d9b      	ldrb	r3, [r3, r6]
 80027c2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80027c6:	f002 fcab 	bl	8005120 <stpcpy>
	strcat(params, HEX_TO_STRING[op_release[fsm_env_op]]);
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <display_update_menu_env_op+0x8c>)
 80027cc:	5d9b      	ldrb	r3, [r3, r6]
		display_convert_data(
 80027ce:	4e12      	ldr	r6, [pc, #72]	; (8002818 <display_update_menu_env_op+0x90>)
	strcat(params, HEX_TO_STRING[op_release[fsm_env_op]]);
 80027d0:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80027d4:	f002 fcbc 	bl	8005150 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 80027d8:	236c      	movs	r3, #108	; 0x6c
 80027da:	f10d 0513 	add.w	r5, sp, #19
 80027de:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 80027e2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80027e6:	4631      	mov	r1, r6
 80027e8:	f10d 0203 	add.w	r2, sp, #3
 80027ec:	f7ff f8e0 	bl	80019b0 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80027f0:	42ac      	cmp	r4, r5
 80027f2:	d1f6      	bne.n	80027e2 <display_update_menu_env_op+0x5a>
	display_i2c_dma_write(ui_set_env_converted, UI_STRING_CONVERTED_SIZE);
 80027f4:	21cc      	movs	r1, #204	; 0xcc
 80027f6:	4808      	ldr	r0, [pc, #32]	; (8002818 <display_update_menu_env_op+0x90>)
 80027f8:	f7ff f8a6 	bl	8001948 <display_i2c_dma_write>
}
 80027fc:	b006      	add	sp, #24
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	20000bf9 	.word	0x20000bf9
 8002804:	20000a8c 	.word	0x20000a8c
 8002808:	20000004 	.word	0x20000004
 800280c:	20000ab8 	.word	0x20000ab8
 8002810:	20000a80 	.word	0x20000a80
 8002814:	20000a88 	.word	0x20000a88
 8002818:	200014e0 	.word	0x200014e0

0800281c <enter_menu_env_op>:
	temp[0] = op_attack[fsm_env_op];
 800281c:	2300      	movs	r3, #0
void enter_menu_env_op() {
 800281e:	b430      	push	{r4, r5}
	temp[0] = op_attack[fsm_env_op];
 8002820:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <enter_menu_env_op+0x34>)
 8002822:	480c      	ldr	r0, [pc, #48]	; (8002854 <enter_menu_env_op+0x38>)
 8002824:	7812      	ldrb	r2, [r2, #0]
	temp[1] = op_decay[fsm_env_op];
 8002826:	490c      	ldr	r1, [pc, #48]	; (8002858 <enter_menu_env_op+0x3c>)
	temp[0] = op_attack[fsm_env_op];
 8002828:	5c85      	ldrb	r5, [r0, r2]
	temp[2] = op_sustain[fsm_env_op];
 800282a:	480c      	ldr	r0, [pc, #48]	; (800285c <enter_menu_env_op+0x40>)
	temp[0] = op_attack[fsm_env_op];
 800282c:	5c8c      	ldrb	r4, [r1, r2]
	temp[3] = op_release[fsm_env_op];
 800282e:	490c      	ldr	r1, [pc, #48]	; (8002860 <enter_menu_env_op+0x44>)
	temp[0] = op_attack[fsm_env_op];
 8002830:	5c80      	ldrb	r0, [r0, r2]
 8002832:	f365 0307 	bfi	r3, r5, #0, #8
 8002836:	5c89      	ldrb	r1, [r1, r2]
 8002838:	f364 230f 	bfi	r3, r4, #8, #8
 800283c:	4a09      	ldr	r2, [pc, #36]	; (8002864 <enter_menu_env_op+0x48>)
 800283e:	f360 4317 	bfi	r3, r0, #16, #8
 8002842:	f361 631f 	bfi	r3, r1, #24, #8
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bc30      	pop	{r4, r5}
	display_update_menu_env_op();
 800284a:	f7ff bf9d 	b.w	8002788 <display_update_menu_env_op>
 800284e:	bf00      	nop
 8002850:	20000bf9 	.word	0x20000bf9
 8002854:	20000a8c 	.word	0x20000a8c
 8002858:	20000ab8 	.word	0x20000ab8
 800285c:	20000a80 	.word	0x20000a80
 8002860:	20000a88 	.word	0x20000a88
 8002864:	20000bf4 	.word	0x20000bf4

08002868 <inc_set_env>:
void inc_set_env() {
 8002868:	b410      	push	{r4}
	switch (fsm_op) {
 800286a:	4b37      	ldr	r3, [pc, #220]	; (8002948 <inc_set_env+0xe0>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d818      	bhi.n	80028a4 <inc_set_env+0x3c>
 8002872:	e8df f003 	tbb	[pc, r3]
 8002876:	4102      	.short	0x4102
 8002878:	1a32      	.short	0x1a32
		op_attack[fsm_env_op] += inc_dec;
 800287a:	4b34      	ldr	r3, [pc, #208]	; (800294c <inc_set_env+0xe4>)
 800287c:	4834      	ldr	r0, [pc, #208]	; (8002950 <inc_set_env+0xe8>)
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	4934      	ldr	r1, [pc, #208]	; (8002954 <inc_set_env+0xec>)
 8002882:	5c83      	ldrb	r3, [r0, r2]
 8002884:	7809      	ldrb	r1, [r1, #0]
 8002886:	440b      	add	r3, r1
 8002888:	b2db      	uxtb	r3, r3
		if (op_attack[fsm_env_op] > ENV_MAX_RATE) {
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d84c      	bhi.n	8002928 <inc_set_env+0xc0>
 800288e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002892:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 8002896:	b2a4      	uxth	r4, r4
		op_attack[fsm_env_op] += inc_dec;
 8002898:	5483      	strb	r3, [r0, r2]
 800289a:	fbb1 f3f4 	udiv	r3, r1, r4
		op_attack_inc[fsm_env_op] = calculate_env_inc(op_attack[fsm_env_op]);
 800289e:	492e      	ldr	r1, [pc, #184]	; (8002958 <inc_set_env+0xf0>)
 80028a0:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
 80028a4:	bc10      	pop	{r4}
	display_update_menu_env_op();
 80028a6:	f7ff bf6f 	b.w	8002788 <display_update_menu_env_op>
		op_release[fsm_env_op] += inc_dec;
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <inc_set_env+0xe4>)
 80028ac:	482b      	ldr	r0, [pc, #172]	; (800295c <inc_set_env+0xf4>)
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	4928      	ldr	r1, [pc, #160]	; (8002954 <inc_set_env+0xec>)
 80028b2:	5c83      	ldrb	r3, [r0, r2]
 80028b4:	7809      	ldrb	r1, [r1, #0]
 80028b6:	440b      	add	r3, r1
 80028b8:	b2db      	uxtb	r3, r3
		if (op_release[fsm_env_op] > ENV_MAX_RATE) {
 80028ba:	2b80      	cmp	r3, #128	; 0x80
 80028bc:	d83e      	bhi.n	800293c <inc_set_env+0xd4>
 80028be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c2:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 80028c6:	b2a4      	uxth	r4, r4
		op_release[fsm_env_op] += inc_dec;
 80028c8:	5483      	strb	r3, [r0, r2]
 80028ca:	fbb1 f3f4 	udiv	r3, r1, r4
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 80028ce:	4924      	ldr	r1, [pc, #144]	; (8002960 <inc_set_env+0xf8>)
}
 80028d0:	bc10      	pop	{r4}
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 80028d2:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 80028d6:	f7ff bf57 	b.w	8002788 <display_update_menu_env_op>
		op_sustain[fsm_env_op] += inc_dec;
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <inc_set_env+0xe4>)
 80028dc:	4921      	ldr	r1, [pc, #132]	; (8002964 <inc_set_env+0xfc>)
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	481c      	ldr	r0, [pc, #112]	; (8002954 <inc_set_env+0xec>)
 80028e2:	5c8b      	ldrb	r3, [r1, r2]
 80028e4:	7800      	ldrb	r0, [r0, #0]
 80028e6:	4403      	add	r3, r0
 80028e8:	b2db      	uxtb	r3, r3
		if (op_sustain[fsm_env_op] > MAX_VOLUME) {
 80028ea:	2b80      	cmp	r3, #128	; 0x80
			op_sustain[fsm_env_op] = MAX_VOLUME;
 80028ec:	bf88      	it	hi
 80028ee:	2380      	movhi	r3, #128	; 0x80
 80028f0:	548b      	strb	r3, [r1, r2]
}
 80028f2:	bc10      	pop	{r4}
	display_update_menu_env_op();
 80028f4:	f7ff bf48 	b.w	8002788 <display_update_menu_env_op>
		op_decay[fsm_env_op] += inc_dec;
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <inc_set_env+0xe4>)
 80028fa:	481b      	ldr	r0, [pc, #108]	; (8002968 <inc_set_env+0x100>)
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	4915      	ldr	r1, [pc, #84]	; (8002954 <inc_set_env+0xec>)
 8002900:	5c83      	ldrb	r3, [r0, r2]
 8002902:	7809      	ldrb	r1, [r1, #0]
 8002904:	440b      	add	r3, r1
 8002906:	b2db      	uxtb	r3, r3
		if (op_decay[fsm_env_op] > ENV_MAX_RATE) {
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d812      	bhi.n	8002932 <inc_set_env+0xca>
 800290c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002910:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 8002914:	b2a4      	uxth	r4, r4
		op_decay[fsm_env_op] += inc_dec;
 8002916:	5483      	strb	r3, [r0, r2]
 8002918:	fbb1 f3f4 	udiv	r3, r1, r4
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 800291c:	4913      	ldr	r1, [pc, #76]	; (800296c <inc_set_env+0x104>)
}
 800291e:	bc10      	pop	{r4}
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 8002920:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 8002924:	f7ff bf30 	b.w	8002788 <display_update_menu_env_op>
			op_attack[fsm_env_op] = ENV_MAX_RATE;
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800292e:	5481      	strb	r1, [r0, r2]
 8002930:	e7b5      	b.n	800289e <inc_set_env+0x36>
			op_decay[fsm_env_op] = ENV_MAX_RATE;
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002938:	5481      	strb	r1, [r0, r2]
 800293a:	e7ef      	b.n	800291c <inc_set_env+0xb4>
			op_release[fsm_env_op] = ENV_MAX_RATE;
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002942:	5481      	strb	r1, [r0, r2]
 8002944:	e7c3      	b.n	80028ce <inc_set_env+0x66>
 8002946:	bf00      	nop
 8002948:	20000ac8 	.word	0x20000ac8
 800294c:	20000bf9 	.word	0x20000bf9
 8002950:	20000a8c 	.word	0x20000a8c
 8002954:	20000b20 	.word	0x20000b20
 8002958:	20000aac 	.word	0x20000aac
 800295c:	20000a88 	.word	0x20000a88
 8002960:	20000a90 	.word	0x20000a90
 8002964:	20000a80 	.word	0x20000a80
 8002968:	20000ab8 	.word	0x20000ab8
 800296c:	20000aa0 	.word	0x20000aa0

08002970 <dec_set_env>:
void dec_set_env() {
 8002970:	b410      	push	{r4}
	switch (fsm_op) {
 8002972:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <dec_set_env+0xe4>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d819      	bhi.n	80029ae <dec_set_env+0x3e>
 800297a:	e8df f003 	tbb	[pc, r3]
 800297e:	4302      	.short	0x4302
 8002980:	1b34      	.short	0x1b34
		op_attack[fsm_env_op] -= inc_dec;
 8002982:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <dec_set_env+0xe8>)
 8002984:	4835      	ldr	r0, [pc, #212]	; (8002a5c <dec_set_env+0xec>)
 8002986:	781a      	ldrb	r2, [r3, #0]
 8002988:	4935      	ldr	r1, [pc, #212]	; (8002a60 <dec_set_env+0xf0>)
 800298a:	5c83      	ldrb	r3, [r0, r2]
 800298c:	7809      	ldrb	r1, [r1, #0]
 800298e:	1a5b      	subs	r3, r3, r1
 8002990:	b2db      	uxtb	r3, r3
		if (op_attack[fsm_env_op] > ENV_MAX_RATE || op_attack[fsm_env_op] == 0x00) {
 8002992:	1e59      	subs	r1, r3, #1
 8002994:	0609      	lsls	r1, r1, #24
 8002996:	d453      	bmi.n	8002a40 <dec_set_env+0xd0>
 8002998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800299c:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 80029a0:	b2a4      	uxth	r4, r4
		op_attack[fsm_env_op] -= inc_dec;
 80029a2:	5483      	strb	r3, [r0, r2]
 80029a4:	fbb1 f3f4 	udiv	r3, r1, r4
		op_attack_inc[fsm_env_op] = calculate_env_inc(op_attack[fsm_env_op]);
 80029a8:	492e      	ldr	r1, [pc, #184]	; (8002a64 <dec_set_env+0xf4>)
 80029aa:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
 80029ae:	bc10      	pop	{r4}
	display_update_menu_env_op();
 80029b0:	f7ff beea 	b.w	8002788 <display_update_menu_env_op>
		op_release[fsm_env_op] -= inc_dec;
 80029b4:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <dec_set_env+0xe8>)
 80029b6:	482c      	ldr	r0, [pc, #176]	; (8002a68 <dec_set_env+0xf8>)
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	4929      	ldr	r1, [pc, #164]	; (8002a60 <dec_set_env+0xf0>)
 80029bc:	5c83      	ldrb	r3, [r0, r2]
 80029be:	7809      	ldrb	r1, [r1, #0]
 80029c0:	1a5b      	subs	r3, r3, r1
 80029c2:	b2db      	uxtb	r3, r3
		if (op_release[fsm_env_op] > ENV_MAX_RATE || op_release[fsm_env_op] == 0x00) {
 80029c4:	1e59      	subs	r1, r3, #1
 80029c6:	0609      	lsls	r1, r1, #24
 80029c8:	d435      	bmi.n	8002a36 <dec_set_env+0xc6>
 80029ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ce:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 80029d2:	b2a4      	uxth	r4, r4
		op_release[fsm_env_op] -= inc_dec;
 80029d4:	5483      	strb	r3, [r0, r2]
 80029d6:	fbb1 f3f4 	udiv	r3, r1, r4
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 80029da:	4924      	ldr	r1, [pc, #144]	; (8002a6c <dec_set_env+0xfc>)
}
 80029dc:	bc10      	pop	{r4}
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 80029de:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 80029e2:	f7ff bed1 	b.w	8002788 <display_update_menu_env_op>
		op_sustain[fsm_env_op] -= inc_dec;
 80029e6:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <dec_set_env+0xe8>)
 80029e8:	4921      	ldr	r1, [pc, #132]	; (8002a70 <dec_set_env+0x100>)
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	481c      	ldr	r0, [pc, #112]	; (8002a60 <dec_set_env+0xf0>)
 80029ee:	5c8b      	ldrb	r3, [r1, r2]
 80029f0:	7800      	ldrb	r0, [r0, #0]
 80029f2:	1a1b      	subs	r3, r3, r0
 80029f4:	b2db      	uxtb	r3, r3
		if (op_sustain[fsm_env_op] > MAX_VOLUME) {
 80029f6:	2b80      	cmp	r3, #128	; 0x80
			op_sustain[fsm_env_op] = 0x00;
 80029f8:	bf88      	it	hi
 80029fa:	2300      	movhi	r3, #0
 80029fc:	548b      	strb	r3, [r1, r2]
}
 80029fe:	bc10      	pop	{r4}
	display_update_menu_env_op();
 8002a00:	f7ff bec2 	b.w	8002788 <display_update_menu_env_op>
		op_decay[fsm_env_op] -= inc_dec;
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <dec_set_env+0xe8>)
 8002a06:	481b      	ldr	r0, [pc, #108]	; (8002a74 <dec_set_env+0x104>)
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	4915      	ldr	r1, [pc, #84]	; (8002a60 <dec_set_env+0xf0>)
 8002a0c:	5c83      	ldrb	r3, [r0, r2]
 8002a0e:	7809      	ldrb	r1, [r1, #0]
 8002a10:	1a5b      	subs	r3, r3, r1
 8002a12:	b2db      	uxtb	r3, r3
		if (op_decay[fsm_env_op] > ENV_MAX_RATE || op_decay[fsm_env_op] == 0x00) {
 8002a14:	1e59      	subs	r1, r3, #1
 8002a16:	060c      	lsls	r4, r1, #24
 8002a18:	d417      	bmi.n	8002a4a <dec_set_env+0xda>
 8002a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1e:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 8002a22:	b2a4      	uxth	r4, r4
		op_decay[fsm_env_op] -= inc_dec;
 8002a24:	5483      	strb	r3, [r0, r2]
 8002a26:	fbb1 f3f4 	udiv	r3, r1, r4
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 8002a2a:	4913      	ldr	r1, [pc, #76]	; (8002a78 <dec_set_env+0x108>)
}
 8002a2c:	bc10      	pop	{r4}
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 8002a2e:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 8002a32:	f7ff bea9 	b.w	8002788 <display_update_menu_env_op>
			op_release[fsm_env_op] = 0x01;
 8002a36:	2101      	movs	r1, #1
 8002a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a3c:	5481      	strb	r1, [r0, r2]
 8002a3e:	e7cc      	b.n	80029da <dec_set_env+0x6a>
			op_attack[fsm_env_op] = 0x01;
 8002a40:	2101      	movs	r1, #1
 8002a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a46:	5481      	strb	r1, [r0, r2]
 8002a48:	e7ae      	b.n	80029a8 <dec_set_env+0x38>
			op_decay[fsm_env_op] = 0x01;
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a50:	5481      	strb	r1, [r0, r2]
 8002a52:	e7ea      	b.n	8002a2a <dec_set_env+0xba>
 8002a54:	20000ac8 	.word	0x20000ac8
 8002a58:	20000bf9 	.word	0x20000bf9
 8002a5c:	20000a8c 	.word	0x20000a8c
 8002a60:	20000b20 	.word	0x20000b20
 8002a64:	20000aac 	.word	0x20000aac
 8002a68:	20000a88 	.word	0x20000a88
 8002a6c:	20000a90 	.word	0x20000a90
 8002a70:	20000a80 	.word	0x20000a80
 8002a74:	20000ab8 	.word	0x20000ab8
 8002a78:	20000aa0 	.word	0x20000aa0

08002a7c <temp_set_env>:
 8002a7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
void temp_set_env() {
 8002a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	temp2 = temp[0];
 8002a84:	4823      	ldr	r0, [pc, #140]	; (8002b14 <temp_set_env+0x98>)
	temp[0] = op_attack[fsm_env_op];
 8002a86:	2400      	movs	r4, #0
	temp2 = temp[0];
 8002a88:	f890 c000 	ldrb.w	ip, [r0]
	temp2 = temp[1];
 8002a8c:	7847      	ldrb	r7, [r0, #1]
 8002a8e:	f1cc 0581 	rsb	r5, ip, #129	; 0x81
 8002a92:	b2ad      	uxth	r5, r5
 8002a94:	fbb2 f5f5 	udiv	r5, r2, r5
	temp2 = temp[3];
 8002a98:	78c6      	ldrb	r6, [r0, #3]
 8002a9a:	f1c7 0181 	rsb	r1, r7, #129	; 0x81
 8002a9e:	f1c6 0381 	rsb	r3, r6, #129	; 0x81
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	b289      	uxth	r1, r1
 8002aa6:	fbb2 f1f1 	udiv	r1, r2, r1
 8002aaa:	fbb2 f2f3 	udiv	r2, r2, r3
	temp[0] = op_attack[fsm_env_op];
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <temp_set_env+0x9c>)
 8002ab0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8002b28 <temp_set_env+0xac>
 8002ab4:	781b      	ldrb	r3, [r3, #0]
	temp[1] = op_decay[fsm_env_op];
 8002ab6:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002b2c <temp_set_env+0xb0>
	op_attack_inc[fsm_env_op] = calculate_env_inc(op_attack[fsm_env_op]);
 8002aba:	f8df a074 	ldr.w	sl, [pc, #116]	; 8002b30 <temp_set_env+0xb4>
	temp[0] = op_attack[fsm_env_op];
 8002abe:	f818 9003 	ldrb.w	r9, [r8, r3]
 8002ac2:	f82a 5013 	strh.w	r5, [sl, r3, lsl #1]
	op_attack[fsm_env_op] = temp2;
 8002ac6:	f808 c003 	strb.w	ip, [r8, r3]
	temp[2] = op_sustain[fsm_env_op];
 8002aca:	4d14      	ldr	r5, [pc, #80]	; (8002b1c <temp_set_env+0xa0>)
	temp[1] = op_decay[fsm_env_op];
 8002acc:	f81e 8003 	ldrb.w	r8, [lr, r3]
	temp[3] = op_release[fsm_env_op];
 8002ad0:	f8df c060 	ldr.w	ip, [pc, #96]	; 8002b34 <temp_set_env+0xb8>
	temp[0] = op_attack[fsm_env_op];
 8002ad4:	f369 0407 	bfi	r4, r9, #0, #8
 8002ad8:	f368 240f 	bfi	r4, r8, #8, #8
	temp[2] = op_sustain[fsm_env_op];
 8002adc:	f815 8003 	ldrb.w	r8, [r5, r3]
	op_decay[fsm_env_op] = temp2;
 8002ae0:	f80e 7003 	strb.w	r7, [lr, r3]
	temp[0] = op_attack[fsm_env_op];
 8002ae4:	f81c e003 	ldrb.w	lr, [ip, r3]
 8002ae8:	f368 4417 	bfi	r4, r8, #16, #8
	op_release[fsm_env_op] = temp2;
 8002aec:	f80c 6003 	strb.w	r6, [ip, r3]
	op_sustain[fsm_env_op] = temp2;
 8002af0:	f890 c002 	ldrb.w	ip, [r0, #2]
	op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 8002af4:	4f0a      	ldr	r7, [pc, #40]	; (8002b20 <temp_set_env+0xa4>)
	op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 8002af6:	4e0b      	ldr	r6, [pc, #44]	; (8002b24 <temp_set_env+0xa8>)
	temp[0] = op_attack[fsm_env_op];
 8002af8:	f36e 641f 	bfi	r4, lr, #24, #8
 8002afc:	6004      	str	r4, [r0, #0]
	op_sustain[fsm_env_op] = temp2;
 8002afe:	f805 c003 	strb.w	ip, [r5, r3]
 8002b02:	f827 1013 	strh.w	r1, [r7, r3, lsl #1]
 8002b06:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
}
 8002b0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	display_update_menu_env_op();
 8002b0e:	f7ff be3b 	b.w	8002788 <display_update_menu_env_op>
 8002b12:	bf00      	nop
 8002b14:	20000bf4 	.word	0x20000bf4
 8002b18:	20000bf9 	.word	0x20000bf9
 8002b1c:	20000a80 	.word	0x20000a80
 8002b20:	20000aa0 	.word	0x20000aa0
 8002b24:	20000a90 	.word	0x20000a90
 8002b28:	20000a8c 	.word	0x20000a8c
 8002b2c:	20000ab8 	.word	0x20000ab8
 8002b30:	20000aac 	.word	0x20000aac
 8002b34:	20000a88 	.word	0x20000a88

08002b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b3a:	490d      	ldr	r1, [pc, #52]	; (8002b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b40:	e002      	b.n	8002b48 <LoopCopyDataInit>

08002b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b46:	3304      	adds	r3, #4

08002b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b4c:	d3f9      	bcc.n	8002b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b50:	4c0a      	ldr	r4, [pc, #40]	; (8002b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b54:	e001      	b.n	8002b5a <LoopFillZerobss>

08002b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b58:	3204      	adds	r2, #4

08002b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b5c:	d3fb      	bcc.n	8002b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b5e:	f7fe fe83 	bl	8001868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b62:	f002 fab1 	bl	80050c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b66:	f7fd fb53 	bl	8000210 <main>
  bx lr
 8002b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b70:	200008a4 	.word	0x200008a4
  ldr r2, =_sidata
 8002b74:	080067c4 	.word	0x080067c4
  ldr r2, =_sbss
 8002b78:	200008a4 	.word	0x200008a4
  ldr r4, =_ebss
 8002b7c:	200015b4 	.word	0x200015b4

08002b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b80:	e7fe      	b.n	8002b80 <ADC1_2_IRQHandler>
	...

08002b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b84:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8a:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_InitTick+0x3c>)
{
 8002b8c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b8e:	7811      	ldrb	r1, [r2, #0]
 8002b90:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <HAL_InitTick+0x40>)
 8002b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	fbb2 f0f3 	udiv	r0, r2, r3
 8002b9c:	f000 f8a4 	bl	8002ce8 <HAL_SYSTICK_Config>
 8002ba0:	b908      	cbnz	r0, 8002ba6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba2:	2d0f      	cmp	r5, #15
 8002ba4:	d901      	bls.n	8002baa <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002ba6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002ba8:	bd38      	pop	{r3, r4, r5, pc}
 8002baa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bac:	4602      	mov	r2, r0
 8002bae:	4629      	mov	r1, r5
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f000 f852 	bl	8002c5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_InitTick+0x44>)
 8002bba:	4620      	mov	r0, r4
 8002bbc:	601d      	str	r5, [r3, #0]
}
 8002bbe:	bd38      	pop	{r3, r4, r5, pc}
 8002bc0:	2000089c 	.word	0x2000089c
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	200008a0 	.word	0x200008a0

08002bcc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bcc:	4a07      	ldr	r2, [pc, #28]	; (8002bec <HAL_Init+0x20>)
{
 8002bce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd4:	f043 0310 	orr.w	r3, r3, #16
 8002bd8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bda:	f000 f82d 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7ff ffd0 	bl	8002b84 <HAL_InitTick>
  HAL_MspInit();
 8002be4:	f7fd fdd6 	bl	8000794 <HAL_MspInit>
}
 8002be8:	2000      	movs	r0, #0
 8002bea:	bd08      	pop	{r3, pc}
 8002bec:	40022000 	.word	0x40022000

08002bf0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002bf0:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <HAL_IncTick+0x10>)
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_IncTick+0x14>)
 8002bf4:	6811      	ldr	r1, [r2, #0]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	440b      	add	r3, r1
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	200015b0 	.word	0x200015b0
 8002c04:	2000089c 	.word	0x2000089c

08002c08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c08:	4b01      	ldr	r3, [pc, #4]	; (8002c10 <HAL_GetTick+0x8>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	200015b0 	.word	0x200015b0

08002c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff fff6 	bl	8002c08 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002c1e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002c20:	d002      	beq.n	8002c28 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <HAL_Delay+0x20>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c28:	f7ff ffee 	bl	8002c08 <HAL_GetTick>
 8002c2c:	1b40      	subs	r0, r0, r5
 8002c2e:	42a0      	cmp	r0, r4
 8002c30:	d3fa      	bcc.n	8002c28 <HAL_Delay+0x14>
  {
  }
}
 8002c32:	bd38      	pop	{r3, r4, r5, pc}
 8002c34:	2000089c 	.word	0x2000089c

08002c38 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c38:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c3e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c40:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c46:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c48:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002c4a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002c52:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c5e:	b430      	push	{r4, r5}
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c66:	f1c3 0507 	rsb	r5, r3, #7
 8002c6a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c70:	bf28      	it	cs
 8002c72:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c74:	2c06      	cmp	r4, #6
 8002c76:	d919      	bls.n	8002cac <HAL_NVIC_SetPriority+0x50>
 8002c78:	f04f 34ff 	mov.w	r4, #4294967295
 8002c7c:	3b03      	subs	r3, #3
 8002c7e:	409c      	lsls	r4, r3
 8002c80:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	f04f 34ff 	mov.w	r4, #4294967295
 8002c88:	40ac      	lsls	r4, r5
 8002c8a:	ea21 0104 	bic.w	r1, r1, r4
 8002c8e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002c90:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c92:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002c96:	db0c      	blt.n	8002cb2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	0109      	lsls	r1, r1, #4
 8002c9a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002c9e:	b2c9      	uxtb	r1, r1
 8002ca0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002ca4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ca8:	bc30      	pop	{r4, r5}
 8002caa:	4770      	bx	lr
 8002cac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cae:	4613      	mov	r3, r2
 8002cb0:	e7e8      	b.n	8002c84 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_NVIC_SetPriority+0x6c>)
 8002cb4:	f000 000f 	and.w	r0, r0, #15
 8002cb8:	0109      	lsls	r1, r1, #4
 8002cba:	b2c9      	uxtb	r1, r1
 8002cbc:	4403      	add	r3, r0
 8002cbe:	7619      	strb	r1, [r3, #24]
 8002cc0:	bc30      	pop	{r4, r5}
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00
 8002cc8:	e000ecfc 	.word	0xe000ecfc

08002ccc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	db07      	blt.n	8002ce0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f000 011f 	and.w	r1, r0, #31
 8002cd6:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HAL_NVIC_EnableIRQ+0x18>)
 8002cd8:	408b      	lsls	r3, r1
 8002cda:	0940      	lsrs	r0, r0, #5
 8002cdc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000e100 	.word	0xe000e100

08002ce8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce8:	3801      	subs	r0, #1
 8002cea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002cee:	d20d      	bcs.n	8002d0c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf0:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cf6:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfa:	4c06      	ldr	r4, [pc, #24]	; (8002d14 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d02:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8002d04:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d06:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d08:	6019      	str	r1, [r3, #0]
 8002d0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	4770      	bx	lr
 8002d10:	e000e010 	.word	0xe000e010
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d18:	b340      	cbz	r0, 8002d6c <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d1a:	4603      	mov	r3, r0
{
 8002d1c:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d1e:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d22:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d26:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8002d28:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2a:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d2c:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d30:	490f      	ldr	r1, [pc, #60]	; (8002d70 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d32:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d34:	4f0f      	ldr	r7, [pc, #60]	; (8002d74 <HAL_DMA_Init+0x5c>)
 8002d36:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d38:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d3c:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d40:	4332      	orrs	r2, r6
 8002d42:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d44:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d46:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 8002d48:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d4a:	0909      	lsrs	r1, r1, #4
 8002d4c:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d4e:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d52:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d54:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d58:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d5a:	4907      	ldr	r1, [pc, #28]	; (8002d78 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 8002d5c:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 8002d5e:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8002d60:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8002d62:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 8002d64:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d66:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002d68:	bcf0      	pop	{r4, r5, r6, r7}
 8002d6a:	4770      	bx	lr
    return HAL_ERROR;
 8002d6c:	2001      	movs	r0, #1
}
 8002d6e:	4770      	bx	lr
 8002d70:	bffdfff8 	.word	0xbffdfff8
 8002d74:	cccccccd 	.word	0xcccccccd
 8002d78:	40020000 	.word	0x40020000

08002d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d7c:	b4f0      	push	{r4, r5, r6, r7}
 8002d7e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d80:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002d84:	2801      	cmp	r0, #1
 8002d86:	d038      	beq.n	8002dfa <HAL_DMA_Start_IT+0x7e>
 8002d88:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d8a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002d8e:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d92:	42a8      	cmp	r0, r5
 8002d94:	d005      	beq.n	8002da2 <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d96:	2300      	movs	r3, #0
 8002d98:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d9c:	2002      	movs	r0, #2
  }    
  return status;
}
 8002d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8002da0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da2:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da4:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 8002da6:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da8:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dac:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dae:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002db0:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002db2:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 8002db4:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002db8:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002dba:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dbc:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dbe:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002dc0:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8002dc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc4:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dc6:	bf0b      	itete	eq
 8002dc8:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002dca:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002dcc:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002dce:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002dd0:	b153      	cbz	r3, 8002de8 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd2:	682b      	ldr	r3, [r5, #0]
 8002dd4:	f043 030e 	orr.w	r3, r3, #14
 8002dd8:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8002dda:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	602b      	str	r3, [r5, #0]
}
 8002de4:	bcf0      	pop	{r4, r5, r6, r7}
 8002de6:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002de8:	682b      	ldr	r3, [r5, #0]
 8002dea:	f023 0304 	bic.w	r3, r3, #4
 8002dee:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	f043 030a 	orr.w	r3, r3, #10
 8002df6:	602b      	str	r3, [r5, #0]
 8002df8:	e7ef      	b.n	8002dda <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8002dfa:	2002      	movs	r0, #2
}
 8002dfc:	bcf0      	pop	{r4, r5, r6, r7}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e00:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002e04:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e06:	2a02      	cmp	r2, #2
 8002e08:	d003      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0a:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8002e0c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e10:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e12:	6802      	ldr	r2, [r0, #0]
{  
 8002e14:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e16:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e18:	481b      	ldr	r0, [pc, #108]	; (8002e88 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1a:	f021 010e 	bic.w	r1, r1, #14
 8002e1e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e20:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e22:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002e24:	f021 0101 	bic.w	r1, r1, #1
 8002e28:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e2a:	d021      	beq.n	8002e70 <HAL_DMA_Abort_IT+0x70>
 8002e2c:	4917      	ldr	r1, [pc, #92]	; (8002e8c <HAL_DMA_Abort_IT+0x8c>)
 8002e2e:	428a      	cmp	r2, r1
 8002e30:	d01a      	beq.n	8002e68 <HAL_DMA_Abort_IT+0x68>
 8002e32:	3114      	adds	r1, #20
 8002e34:	428a      	cmp	r2, r1
 8002e36:	d01d      	beq.n	8002e74 <HAL_DMA_Abort_IT+0x74>
 8002e38:	3114      	adds	r1, #20
 8002e3a:	428a      	cmp	r2, r1
 8002e3c:	d01d      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x7a>
 8002e3e:	3114      	adds	r1, #20
 8002e40:	428a      	cmp	r2, r1
 8002e42:	d01d      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x80>
 8002e44:	3114      	adds	r1, #20
 8002e46:	428a      	cmp	r2, r1
 8002e48:	bf0c      	ite	eq
 8002e4a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8002e4e:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8002e52:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e56:	4c0e      	ldr	r4, [pc, #56]	; (8002e90 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8002e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e5a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002e5c:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8002e5e:	b129      	cbz	r1, 8002e6c <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8002e60:	4618      	mov	r0, r3
 8002e62:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2000      	movs	r0, #0
}
 8002e66:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e68:	2210      	movs	r2, #16
 8002e6a:	e7f2      	b.n	8002e52 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	4608      	mov	r0, r1
}
 8002e6e:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e70:	2201      	movs	r2, #1
 8002e72:	e7ee      	b.n	8002e52 <HAL_DMA_Abort_IT+0x52>
 8002e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e78:	e7eb      	b.n	8002e52 <HAL_DMA_Abort_IT+0x52>
 8002e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e7e:	e7e8      	b.n	8002e52 <HAL_DMA_Abort_IT+0x52>
 8002e80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e84:	e7e5      	b.n	8002e52 <HAL_DMA_Abort_IT+0x52>
 8002e86:	bf00      	nop
 8002e88:	40020008 	.word	0x40020008
 8002e8c:	4002001c 	.word	0x4002001c
 8002e90:	40020000 	.word	0x40020000

08002e94 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e94:	2204      	movs	r2, #4
{
 8002e96:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e98:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e9c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002e9e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ea0:	408a      	lsls	r2, r1
 8002ea2:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002ea4:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ea6:	d01f      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x54>
 8002ea8:	076a      	lsls	r2, r5, #29
 8002eaa:	d51d      	bpl.n	8002ee8 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	0691      	lsls	r1, r2, #26
 8002eb0:	d403      	bmi.n	8002eba <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	f022 0204 	bic.w	r2, r2, #4
 8002eb8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002eba:	4a3e      	ldr	r2, [pc, #248]	; (8002fb4 <HAL_DMA_IRQHandler+0x120>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d05a      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xe2>
 8002ec0:	3214      	adds	r2, #20
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d05f      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xf2>
 8002ec6:	3214      	adds	r2, #20
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d066      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x106>
 8002ecc:	3214      	adds	r2, #20
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d069      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x112>
 8002ed2:	3214      	adds	r2, #20
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d05b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xfc>
 8002ed8:	3214      	adds	r2, #20
 8002eda:	4293      	cmp	r3, r2
 8002edc:	bf0c      	ite	eq
 8002ede:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002ee2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002ee6:	e047      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ee8:	2202      	movs	r2, #2
 8002eea:	408a      	lsls	r2, r1
 8002eec:	4222      	tst	r2, r4
 8002eee:	d022      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xa2>
 8002ef0:	07aa      	lsls	r2, r5, #30
 8002ef2:	d520      	bpl.n	8002f36 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	0691      	lsls	r1, r2, #26
 8002ef8:	d406      	bmi.n	8002f08 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8002efa:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	f022 020a 	bic.w	r2, r2, #10
 8002f02:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002f04:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f08:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <HAL_DMA_IRQHandler+0x120>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d029      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xce>
 8002f0e:	3214      	adds	r2, #20
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d040      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x102>
 8002f14:	3214      	adds	r2, #20
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d042      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x10c>
 8002f1a:	3214      	adds	r2, #20
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d034      	beq.n	8002f8a <HAL_DMA_IRQHandler+0xf6>
 8002f20:	3214      	adds	r2, #20
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d042      	beq.n	8002fac <HAL_DMA_IRQHandler+0x118>
 8002f26:	3214      	adds	r2, #20
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf0c      	ite	eq
 8002f2c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002f30:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002f34:	e016      	b.n	8002f64 <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f36:	2208      	movs	r2, #8
 8002f38:	408a      	lsls	r2, r1
 8002f3a:	4222      	tst	r2, r4
 8002f3c:	d019      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xde>
 8002f3e:	072a      	lsls	r2, r5, #28
 8002f40:	d517      	bpl.n	8002f72 <HAL_DMA_IRQHandler+0xde>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f42:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 8002f44:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f48:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f4a:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4e:	f022 020e 	bic.w	r2, r2, #14
 8002f52:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8002f54:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f56:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f58:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002f5a:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002f5c:	b14b      	cbz	r3, 8002f72 <HAL_DMA_IRQHandler+0xde>
}
 8002f5e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002f60:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f62:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8002f64:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f66:	4c14      	ldr	r4, [pc, #80]	; (8002fb8 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8002f68:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f6a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002f6c:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002f70:	b93a      	cbnz	r2, 8002f82 <HAL_DMA_IRQHandler+0xee>
}
 8002f72:	bc70      	pop	{r4, r5, r6}
 8002f74:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f76:	2304      	movs	r3, #4
 8002f78:	490f      	ldr	r1, [pc, #60]	; (8002fb8 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8002f7a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f7c:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	d0f7      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xde>
}
 8002f82:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002f84:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f86:	2340      	movs	r3, #64	; 0x40
 8002f88:	e7f6      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f8e:	e7e9      	b.n	8002f64 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f94:	e7f0      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f96:	2320      	movs	r3, #32
 8002f98:	e7e4      	b.n	8002f64 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f9e:	e7eb      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa4:	e7de      	b.n	8002f64 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002faa:	e7e5      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb0:	e7d8      	b.n	8002f64 <HAL_DMA_IRQHandler+0xd0>
 8002fb2:	bf00      	nop
 8002fb4:	40020008 	.word	0x40020008
 8002fb8:	40020000 	.word	0x40020000

08002fbc <HAL_DMA_GetState>:
}
 8002fbc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc8:	680c      	ldr	r4, [r1, #0]
{
 8002fca:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fcc:	2c00      	cmp	r4, #0
 8002fce:	f000 809e 	beq.w	800310e <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 8002fd2:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fd4:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 80031cc <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 8002fd8:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fda:	4f77      	ldr	r7, [pc, #476]	; (80031b8 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 8002fdc:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80031d0 <HAL_GPIO_Init+0x20c>
 8002fe0:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 80031d4 <HAL_GPIO_Init+0x210>
 8002fe4:	9000      	str	r0, [sp, #0]
 8002fe6:	e004      	b.n	8002ff2 <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8002fe8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fea:	fa34 f203 	lsrs.w	r2, r4, r3
 8002fee:	f000 808e 	beq.w	800310e <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 8002ff6:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffa:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8002ffe:	d1f3      	bne.n	8002fe8 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8003000:	684c      	ldr	r4, [r1, #4]
 8003002:	2c12      	cmp	r4, #18
 8003004:	f200 8086 	bhi.w	8003114 <HAL_GPIO_Init+0x150>
 8003008:	2c12      	cmp	r4, #18
 800300a:	d80c      	bhi.n	8003026 <HAL_GPIO_Init+0x62>
 800300c:	e8df f004 	tbb	[pc, r4]
 8003010:	0abcbf8a 	.word	0x0abcbf8a
 8003014:	0b0b0b0b 	.word	0x0b0b0b0b
 8003018:	0b0b0b0b 	.word	0x0b0b0b0b
 800301c:	0b0b0b0b 	.word	0x0b0b0b0b
 8003020:	b90b      	.short	0xb90b
 8003022:	b6          	.byte	0xb6
 8003023:	00          	.byte	0x00
 8003024:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003026:	2dff      	cmp	r5, #255	; 0xff
 8003028:	f200 8083 	bhi.w	8003132 <HAL_GPIO_Init+0x16e>
 800302c:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003030:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003034:	240f      	movs	r4, #15
 8003036:	f8d9 2000 	ldr.w	r2, [r9]
 800303a:	fa04 fb0a 	lsl.w	fp, r4, sl
 800303e:	ea22 020b 	bic.w	r2, r2, fp
 8003042:	fa06 fa0a 	lsl.w	sl, r6, sl
 8003046:	ea42 020a 	orr.w	r2, r2, sl
 800304a:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800304e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8003052:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8003056:	f000 808f 	beq.w	8003178 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800305a:	f8dc a018 	ldr.w	sl, [ip, #24]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	f04a 0a01 	orr.w	sl, sl, #1
 8003066:	f8cc a018 	str.w	sl, [ip, #24]
 800306a:	f8dc a018 	ldr.w	sl, [ip, #24]
 800306e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003072:	f00a 0a01 	and.w	sl, sl, #1
 8003076:	f8cd a00c 	str.w	sl, [sp, #12]
 800307a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800307e:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003082:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003086:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800308a:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800308e:	fa04 f40a 	lsl.w	r4, r4, sl
 8003092:	ea2b 0004 	bic.w	r0, fp, r4
 8003096:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003098:	9c00      	ldr	r4, [sp, #0]
 800309a:	4848      	ldr	r0, [pc, #288]	; (80031bc <HAL_GPIO_Init+0x1f8>)
 800309c:	4284      	cmp	r4, r0
 800309e:	d013      	beq.n	80030c8 <HAL_GPIO_Init+0x104>
 80030a0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80030a4:	4284      	cmp	r4, r0
 80030a6:	d07d      	beq.n	80031a4 <HAL_GPIO_Init+0x1e0>
 80030a8:	4845      	ldr	r0, [pc, #276]	; (80031c0 <HAL_GPIO_Init+0x1fc>)
 80030aa:	4284      	cmp	r4, r0
 80030ac:	d071      	beq.n	8003192 <HAL_GPIO_Init+0x1ce>
 80030ae:	4845      	ldr	r0, [pc, #276]	; (80031c4 <HAL_GPIO_Init+0x200>)
 80030b0:	4284      	cmp	r4, r0
 80030b2:	bf0c      	ite	eq
 80030b4:	f04f 0b03 	moveq.w	fp, #3
 80030b8:	f04f 0b04 	movne.w	fp, #4
 80030bc:	9801      	ldr	r0, [sp, #4]
 80030be:	fa0b fa0a 	lsl.w	sl, fp, sl
 80030c2:	ea40 000a 	orr.w	r0, r0, sl
 80030c6:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80030c8:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ca:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 80030ce:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	bf14      	ite	ne
 80030d4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030d6:	43aa      	biceq	r2, r5
 80030d8:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80030da:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030dc:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80030e0:	bf14      	ite	ne
 80030e2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030e4:	43aa      	biceq	r2, r5
 80030e6:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80030e8:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030ea:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80030ee:	bf14      	ite	ne
 80030f0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030f2:	43aa      	biceq	r2, r5
 80030f4:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030f6:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80030fa:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030fc:	d039      	beq.n	8003172 <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 80030fe:	4315      	orrs	r5, r2
 8003100:	60fd      	str	r5, [r7, #12]
 8003102:	680c      	ldr	r4, [r1, #0]
	position++;
 8003104:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003106:	fa34 f203 	lsrs.w	r2, r4, r3
 800310a:	f47f af72 	bne.w	8002ff2 <HAL_GPIO_Init+0x2e>
  }
}
 800310e:	b005      	add	sp, #20
 8003110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8003114:	4544      	cmp	r4, r8
 8003116:	d005      	beq.n	8003124 <HAL_GPIO_Init+0x160>
 8003118:	d913      	bls.n	8003142 <HAL_GPIO_Init+0x17e>
 800311a:	4574      	cmp	r4, lr
 800311c:	d002      	beq.n	8003124 <HAL_GPIO_Init+0x160>
 800311e:	482a      	ldr	r0, [pc, #168]	; (80031c8 <HAL_GPIO_Init+0x204>)
 8003120:	4284      	cmp	r4, r0
 8003122:	d180      	bne.n	8003026 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003124:	688c      	ldr	r4, [r1, #8]
 8003126:	b9e4      	cbnz	r4, 8003162 <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003128:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800312a:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800312e:	f67f af7d 	bls.w	800302c <HAL_GPIO_Init+0x68>
 8003132:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003134:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8003138:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800313c:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003140:	e778      	b.n	8003034 <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 8003142:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80031d8 <HAL_GPIO_Init+0x214>
 8003146:	454c      	cmp	r4, r9
 8003148:	d0ec      	beq.n	8003124 <HAL_GPIO_Init+0x160>
 800314a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800314e:	454c      	cmp	r4, r9
 8003150:	d0e8      	beq.n	8003124 <HAL_GPIO_Init+0x160>
 8003152:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003156:	454c      	cmp	r4, r9
 8003158:	f47f af65 	bne.w	8003026 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800315c:	688c      	ldr	r4, [r1, #8]
 800315e:	2c00      	cmp	r4, #0
 8003160:	d0e2      	beq.n	8003128 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 8003162:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003164:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003166:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 800316a:	bf0c      	ite	eq
 800316c:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 800316e:	6142      	strne	r2, [r0, #20]
 8003170:	e759      	b.n	8003026 <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003172:	ea22 0505 	bic.w	r5, r2, r5
 8003176:	60fd      	str	r5, [r7, #12]
 8003178:	680c      	ldr	r4, [r1, #0]
 800317a:	e735      	b.n	8002fe8 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800317c:	68ce      	ldr	r6, [r1, #12]
 800317e:	360c      	adds	r6, #12
          break;
 8003180:	e751      	b.n	8003026 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003182:	68ce      	ldr	r6, [r1, #12]
 8003184:	3604      	adds	r6, #4
          break;
 8003186:	e74e      	b.n	8003026 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003188:	68ce      	ldr	r6, [r1, #12]
 800318a:	3608      	adds	r6, #8
          break;
 800318c:	e74b      	b.n	8003026 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800318e:	68ce      	ldr	r6, [r1, #12]
          break;
 8003190:	e749      	b.n	8003026 <HAL_GPIO_Init+0x62>
 8003192:	f04f 0b02 	mov.w	fp, #2
 8003196:	9801      	ldr	r0, [sp, #4]
 8003198:	fa0b fa0a 	lsl.w	sl, fp, sl
 800319c:	ea40 000a 	orr.w	r0, r0, sl
 80031a0:	9001      	str	r0, [sp, #4]
 80031a2:	e791      	b.n	80030c8 <HAL_GPIO_Init+0x104>
 80031a4:	f04f 0b01 	mov.w	fp, #1
 80031a8:	9801      	ldr	r0, [sp, #4]
 80031aa:	fa0b fa0a 	lsl.w	sl, fp, sl
 80031ae:	ea40 000a 	orr.w	r0, r0, sl
 80031b2:	9001      	str	r0, [sp, #4]
 80031b4:	e788      	b.n	80030c8 <HAL_GPIO_Init+0x104>
 80031b6:	bf00      	nop
 80031b8:	40010400 	.word	0x40010400
 80031bc:	40010800 	.word	0x40010800
 80031c0:	40011000 	.word	0x40011000
 80031c4:	40011400 	.word	0x40011400
 80031c8:	10320000 	.word	0x10320000
 80031cc:	40021000 	.word	0x40021000
 80031d0:	10220000 	.word	0x10220000
 80031d4:	10310000 	.word	0x10310000
 80031d8:	10120000 	.word	0x10120000

080031dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031dc:	b902      	cbnz	r2, 80031e0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031de:	0409      	lsls	r1, r1, #16
 80031e0:	6101      	str	r1, [r0, #16]
  }
}
 80031e2:	4770      	bx	lr

080031e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80031e6:	6951      	ldr	r1, [r2, #20]
 80031e8:	4201      	tst	r1, r0
 80031ea:	d100      	bne.n	80031ee <HAL_GPIO_EXTI_IRQHandler+0xa>
 80031ec:	4770      	bx	lr
{
 80031ee:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031f0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f2:	f7fd f92d 	bl	8000450 <HAL_GPIO_EXTI_Callback>
  }
}
 80031f6:	bd08      	pop	{r3, pc}
 80031f8:	40010400 	.word	0x40010400

080031fc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	4605      	mov	r5, r0
 8003200:	460e      	mov	r6, r1
 8003202:	4617      	mov	r7, r2
 8003204:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003206:	682c      	ldr	r4, [r5, #0]
 8003208:	d003      	beq.n	8003212 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 800320a:	e009      	b.n	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800320c:	6963      	ldr	r3, [r4, #20]
 800320e:	055b      	lsls	r3, r3, #21
 8003210:	d424      	bmi.n	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003212:	6963      	ldr	r3, [r4, #20]
 8003214:	43db      	mvns	r3, r3
 8003216:	f013 0308 	ands.w	r3, r3, #8
 800321a:	d1f7      	bne.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800321c:	4618      	mov	r0, r3
}
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003220:	6963      	ldr	r3, [r4, #20]
 8003222:	43db      	mvns	r3, r3
 8003224:	f013 0308 	ands.w	r3, r3, #8
 8003228:	d0f8      	beq.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322a:	6963      	ldr	r3, [r4, #20]
 800322c:	0559      	lsls	r1, r3, #21
 800322e:	d415      	bmi.n	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003230:	f7ff fcea 	bl	8002c08 <HAL_GetTick>
 8003234:	1bc0      	subs	r0, r0, r7
 8003236:	4286      	cmp	r6, r0
 8003238:	d301      	bcc.n	800323e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 800323a:	2e00      	cmp	r6, #0
 800323c:	d1e2      	bne.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800324e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8003256:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003258:	642b      	str	r3, [r5, #64]	; 0x40
}
 800325a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800325c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003262:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326a:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326c:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003270:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003278:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800327a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800327e:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8003282:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003284:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003288 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	4605      	mov	r5, r0
 800328c:	460e      	mov	r6, r1
 800328e:	4617      	mov	r7, r2
 8003290:	1c72      	adds	r2, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003292:	682c      	ldr	r4, [r5, #0]
 8003294:	d003      	beq.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 8003296:	e009      	b.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003298:	6963      	ldr	r3, [r4, #20]
 800329a:	055b      	lsls	r3, r3, #21
 800329c:	d424      	bmi.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800329e:	6963      	ldr	r3, [r4, #20]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	f013 0302 	ands.w	r3, r3, #2
 80032a6:	d1f7      	bne.n	8003298 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 80032a8:	4618      	mov	r0, r3
}
 80032aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ac:	6963      	ldr	r3, [r4, #20]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	f013 0302 	ands.w	r3, r3, #2
 80032b4:	d0f8      	beq.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b6:	6963      	ldr	r3, [r4, #20]
 80032b8:	0559      	lsls	r1, r3, #21
 80032ba:	d415      	bmi.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032bc:	f7ff fca4 	bl	8002c08 <HAL_GetTick>
 80032c0:	1bc0      	subs	r0, r0, r7
 80032c2:	4286      	cmp	r6, r0
 80032c4:	d301      	bcc.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 80032c6:	2e00      	cmp	r6, #0
 80032c8:	d1e2      	bne.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80032cc:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032da:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 80032e2:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	642b      	str	r3, [r5, #64]	; 0x40
}
 80032e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e8:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ea:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ee:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f6:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f8:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fc:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003300:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003304:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003306:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330a:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 800330e:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003310:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003314 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003314:	2800      	cmp	r0, #0
 8003316:	f000 80b5 	beq.w	8003484 <HAL_I2C_Init+0x170>
{
 800331a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003320:	4604      	mov	r4, r0
 8003322:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8094 	beq.w	8003454 <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800332c:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800332e:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003330:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003342:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800334a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800334c:	f001 fc72 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003350:	6865      	ldr	r5, [r4, #4]
 8003352:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <HAL_I2C_Init+0x174>)
 8003354:	429d      	cmp	r5, r3
 8003356:	d84c      	bhi.n	80033f2 <HAL_I2C_Init+0xde>
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_I2C_Init+0x178>)
 800335a:	4298      	cmp	r0, r3
 800335c:	d978      	bls.n	8003450 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800335e:	1e42      	subs	r2, r0, #1
 8003360:	006d      	lsls	r5, r5, #1
 8003362:	fbb2 f2f5 	udiv	r2, r2, r5
 8003366:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 800336a:	4949      	ldr	r1, [pc, #292]	; (8003490 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800336c:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800336e:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003372:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003374:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003376:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800337a:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 800337e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003380:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8003382:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003384:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003388:	3001      	adds	r0, #1
 800338a:	4308      	orrs	r0, r1
 800338c:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800338e:	69d9      	ldr	r1, [r3, #28]
 8003390:	4232      	tst	r2, r6
 8003392:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003396:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800339a:	d160      	bne.n	800345e <HAL_I2C_Init+0x14a>
 800339c:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339e:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a2:	430a      	orrs	r2, r1
 80033a4:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 80033ac:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80033b0:	4302      	orrs	r2, r0
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b6:	6899      	ldr	r1, [r3, #8]
 80033b8:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 80033bc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80033c0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80033c4:	4302      	orrs	r2, r0
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033ca:	68d9      	ldr	r1, [r3, #12]
 80033cc:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80033d0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80033d4:	4302      	orrs	r2, r0
 80033d6:	430a      	orrs	r2, r1
 80033d8:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 80033da:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80033dc:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e4:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ea:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 80033f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_I2C_Init+0x180>)
 80033f4:	4298      	cmp	r0, r3
 80033f6:	d92b      	bls.n	8003450 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033f8:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80033fc:	4e24      	ldr	r6, [pc, #144]	; (8003490 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033fe:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003400:	fba6 2600 	umull	r2, r6, r6, r0
 8003404:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003406:	fb01 f102 	mul.w	r1, r1, r2
 800340a:	4f23      	ldr	r7, [pc, #140]	; (8003498 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800340c:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800340e:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003412:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003416:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 800341a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800341c:	6a1a      	ldr	r2, [r3, #32]
 800341e:	0989      	lsrs	r1, r1, #6
 8003420:	3101      	adds	r1, #1
 8003422:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003426:	4311      	orrs	r1, r2
 8003428:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800342a:	69d9      	ldr	r1, [r3, #28]
 800342c:	68a6      	ldr	r6, [r4, #8]
 800342e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003432:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003436:	b9ae      	cbnz	r6, 8003464 <HAL_I2C_Init+0x150>
 8003438:	3801      	subs	r0, #1
 800343a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800343e:	fbb0 f2f2 	udiv	r2, r0, r2
 8003442:	3201      	adds	r2, #1
 8003444:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003448:	b1d2      	cbz	r2, 8003480 <HAL_I2C_Init+0x16c>
 800344a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344e:	e7a6      	b.n	800339e <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8003450:	2001      	movs	r0, #1
}
 8003452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003454:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003458:	f7fd f9be 	bl	80007d8 <HAL_I2C_MspInit>
 800345c:	e766      	b.n	800332c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800345e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003462:	e79c      	b.n	800339e <HAL_I2C_Init+0x8a>
 8003464:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003468:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 800346c:	1e42      	subs	r2, r0, #1
 800346e:	fbb2 f2f5 	udiv	r2, r2, r5
 8003472:	3201      	adds	r2, #1
 8003474:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003478:	b112      	cbz	r2, 8003480 <HAL_I2C_Init+0x16c>
 800347a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800347e:	e78e      	b.n	800339e <HAL_I2C_Init+0x8a>
 8003480:	2201      	movs	r2, #1
 8003482:	e78c      	b.n	800339e <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8003484:	2001      	movs	r0, #1
}
 8003486:	4770      	bx	lr
 8003488:	000186a0 	.word	0x000186a0
 800348c:	001e847f 	.word	0x001e847f
 8003490:	431bde83 	.word	0x431bde83
 8003494:	003d08ff 	.word	0x003d08ff
 8003498:	10624dd3 	.word	0x10624dd3

0800349c <HAL_I2C_Master_Transmit>:
{
 800349c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a0:	4604      	mov	r4, r0
 80034a2:	b082      	sub	sp, #8
 80034a4:	469a      	mov	sl, r3
 80034a6:	4688      	mov	r8, r1
 80034a8:	4691      	mov	r9, r2
 80034aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff fbac 	bl	8002c08 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d005      	beq.n	80034c4 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 80034b8:	f04f 0802 	mov.w	r8, #2
}
 80034bc:	4640      	mov	r0, r8
 80034be:	b002      	add	sp, #8
 80034c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c4:	4607      	mov	r7, r0
 80034c6:	e005      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7ff fb9e 	bl	8002c08 <HAL_GetTick>
 80034cc:	1bc0      	subs	r0, r0, r7
 80034ce:	2819      	cmp	r0, #25
 80034d0:	f200 80f3 	bhi.w	80036ba <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	699d      	ldr	r5, [r3, #24]
 80034d8:	43ed      	mvns	r5, r5
 80034da:	f015 0502 	ands.w	r5, r5, #2
 80034de:	d0f3      	beq.n	80034c8 <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 80034e0:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80034e4:	2a01      	cmp	r2, #1
 80034e6:	d0e7      	beq.n	80034b8 <HAL_I2C_Master_Transmit+0x1c>
 80034e8:	2201      	movs	r2, #1
 80034ea:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	07d2      	lsls	r2, r2, #31
 80034f2:	d570      	bpl.n	80035d6 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034f4:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034f6:	2521      	movs	r5, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034f8:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003500:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003502:	4a8b      	ldr	r2, [pc, #556]	; (8003730 <HAL_I2C_Master_Transmit+0x294>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003504:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003508:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800350c:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800350e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003512:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003514:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003516:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8003518:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800351c:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 800351e:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003520:	d007      	beq.n	8003532 <HAL_I2C_Master_Transmit+0x96>
 8003522:	2a01      	cmp	r2, #1
 8003524:	d005      	beq.n	8003532 <HAL_I2C_Master_Transmit+0x96>
 8003526:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800352a:	d002      	beq.n	8003532 <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800352c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800352e:	2a12      	cmp	r2, #18
 8003530:	d103      	bne.n	800353a <HAL_I2C_Master_Transmit+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	1c75      	adds	r5, r6, #1
 800353c:	d13d      	bne.n	80035ba <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	07d0      	lsls	r0, r2, #31
 8003542:	d5fc      	bpl.n	800353e <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003544:	6922      	ldr	r2, [r4, #16]
 8003546:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800354a:	d149      	bne.n	80035e0 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800354c:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8003550:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003552:	463a      	mov	r2, r7
 8003554:	4631      	mov	r1, r6
 8003556:	4620      	mov	r0, r4
 8003558:	f7ff fe96 	bl	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 800355c:	4680      	mov	r8, r0
 800355e:	bb30      	cbnz	r0, 80035ae <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	9001      	str	r0, [sp, #4]
 8003564:	6959      	ldr	r1, [r3, #20]
    while (hi2c->XferSize > 0U)
 8003566:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003568:	9101      	str	r1, [sp, #4]
 800356a:	6999      	ldr	r1, [r3, #24]
 800356c:	9101      	str	r1, [sp, #4]
 800356e:	9901      	ldr	r1, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003570:	2a00      	cmp	r2, #0
 8003572:	d076      	beq.n	8003662 <HAL_I2C_Master_Transmit+0x1c6>
 8003574:	1c75      	adds	r5, r6, #1
 8003576:	f040 8081 	bne.w	800367c <HAL_I2C_Master_Transmit+0x1e0>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	0610      	lsls	r0, r2, #24
 800357e:	d442      	bmi.n	8003606 <HAL_I2C_Master_Transmit+0x16a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	0551      	lsls	r1, r2, #21
 8003584:	d5f9      	bpl.n	800357a <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358e:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003590:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003592:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003596:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800359a:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	f000 80ab 	beq.w	8003704 <HAL_I2C_Master_Transmit+0x268>
      return HAL_ERROR;
 80035ae:	f04f 0801 	mov.w	r8, #1
}
 80035b2:	4640      	mov	r0, r8
 80035b4:	b002      	add	sp, #8
 80035b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	07d1      	lsls	r1, r2, #31
 80035be:	d4c1      	bmi.n	8003544 <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7ff fb22 	bl	8002c08 <HAL_GetTick>
 80035c4:	1bc0      	subs	r0, r0, r7
 80035c6:	4286      	cmp	r6, r0
 80035c8:	f0c0 8084 	bcc.w	80036d4 <HAL_I2C_Master_Transmit+0x238>
 80035cc:	2e00      	cmp	r6, #0
 80035ce:	f000 8081 	beq.w	80036d4 <HAL_I2C_Master_Transmit+0x238>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	e7b1      	b.n	800353a <HAL_I2C_Master_Transmit+0x9e>
      __HAL_I2C_ENABLE(hi2c);
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e789      	b.n	80034f4 <HAL_I2C_Master_Transmit+0x58>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035e0:	ea4f 12e8 	mov.w	r2, r8, asr #7
 80035e4:	f002 0206 	and.w	r2, r2, #6
 80035e8:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80035ec:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035ee:	4631      	mov	r1, r6
 80035f0:	463a      	mov	r2, r7
 80035f2:	4620      	mov	r0, r4
 80035f4:	f7ff fe02 	bl	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d1d8      	bne.n	80035ae <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	fa5f f188 	uxtb.w	r1, r8
 8003602:	6119      	str	r1, [r3, #16]
 8003604:	e7a5      	b.n	8003552 <HAL_I2C_Master_Transmit+0xb6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003606:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003608:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360c:	4605      	mov	r5, r0
 800360e:	f815 2b01 	ldrb.w	r2, [r5], #1
      hi2c->XferSize--;
 8003612:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003616:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8003618:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800361a:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 800361c:	3a01      	subs	r2, #1
 800361e:	b292      	uxth	r2, r2
 8003620:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003622:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 8003624:	6265      	str	r5, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003626:	0755      	lsls	r5, r2, #29
      hi2c->XferSize--;
 8003628:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800362a:	d50c      	bpl.n	8003646 <HAL_I2C_Master_Transmit+0x1aa>
 800362c:	b159      	cbz	r1, 8003646 <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362e:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 8003630:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003634:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8003636:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003638:	3002      	adds	r0, #2
        hi2c->XferCount--;
 800363a:	3a01      	subs	r2, #1
 800363c:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800363e:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003642:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003644:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003646:	1c75      	adds	r5, r6, #1
 8003648:	d128      	bne.n	800369c <HAL_I2C_Master_Transmit+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	0750      	lsls	r0, r2, #29
 800364e:	d405      	bmi.n	800365c <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	0551      	lsls	r1, r2, #21
 8003654:	d497      	bmi.n	8003586 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	0750      	lsls	r0, r2, #29
 800365a:	d5f9      	bpl.n	8003650 <HAL_I2C_Master_Transmit+0x1b4>
    while (hi2c->XferSize > 0U)
 800365c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800365e:	2a00      	cmp	r2, #0
 8003660:	d188      	bne.n	8003574 <HAL_I2C_Master_Transmit+0xd8>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003662:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003664:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800366e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003672:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 800367a:	e71f      	b.n	80034bc <HAL_I2C_Master_Transmit+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	0612      	lsls	r2, r2, #24
 8003680:	d4c1      	bmi.n	8003606 <HAL_I2C_Master_Transmit+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	0552      	lsls	r2, r2, #21
 8003686:	f53f af7e 	bmi.w	8003586 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7ff fabd 	bl	8002c08 <HAL_GetTick>
 800368e:	1bc0      	subs	r0, r0, r7
 8003690:	4286      	cmp	r6, r0
 8003692:	d33f      	bcc.n	8003714 <HAL_I2C_Master_Transmit+0x278>
 8003694:	2e00      	cmp	r6, #0
 8003696:	d03d      	beq.n	8003714 <HAL_I2C_Master_Transmit+0x278>
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	e76b      	b.n	8003574 <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	0752      	lsls	r2, r2, #29
 80036a0:	d4dc      	bmi.n	800365c <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	0552      	lsls	r2, r2, #21
 80036a6:	f53f af6e 	bmi.w	8003586 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7ff faad 	bl	8002c08 <HAL_GetTick>
 80036ae:	1bc0      	subs	r0, r0, r7
 80036b0:	4286      	cmp	r6, r0
 80036b2:	d32f      	bcc.n	8003714 <HAL_I2C_Master_Transmit+0x278>
 80036b4:	b376      	cbz	r6, 8003714 <HAL_I2C_Master_Transmit+0x278>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	e7c5      	b.n	8003646 <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->State             = HAL_I2C_STATE_READY;
 80036ba:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036bc:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036c2:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80036c8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036cc:	f043 0320 	orr.w	r3, r3, #32
 80036d0:	6423      	str	r3, [r4, #64]	; 0x40
 80036d2:	e6f1      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036d4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80036d6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036d8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036de:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e4:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036e6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80036ea:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f0:	680b      	ldr	r3, [r1, #0]
 80036f2:	05de      	lsls	r6, r3, #23
 80036f4:	f57f af5b 	bpl.w	80035ae <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f8:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 80036fc:	f04f 0801 	mov.w	r8, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003700:	6423      	str	r3, [r4, #64]	; 0x40
 8003702:	e6db      	b.n	80034bc <HAL_I2C_Master_Transmit+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8003706:	f04f 0801 	mov.w	r8, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370a:	6813      	ldr	r3, [r2, #0]
 800370c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e6d3      	b.n	80034bc <HAL_I2C_Master_Transmit+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003714:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003716:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003718:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800371a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800371e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003722:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003724:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	f043 0320 	orr.w	r3, r3, #32
 800372c:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800372e:	e73a      	b.n	80035a6 <HAL_I2C_Master_Transmit+0x10a>
 8003730:	ffff0000 	.word	0xffff0000

08003734 <HAL_I2C_Master_Transmit_DMA>:
{
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003736:	2400      	movs	r4, #0
{
 8003738:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800373a:	9401      	str	r4, [sp, #4]
{
 800373c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800373e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8003742:	2820      	cmp	r0, #32
 8003744:	d126      	bne.n	8003794 <HAL_I2C_Master_Transmit_DMA+0x60>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003746:	484f      	ldr	r0, [pc, #316]	; (8003884 <HAL_I2C_Master_Transmit_DMA+0x150>)
 8003748:	4616      	mov	r6, r2
 800374a:	6800      	ldr	r0, [r0, #0]
 800374c:	4a4e      	ldr	r2, [pc, #312]	; (8003888 <HAL_I2C_Master_Transmit_DMA+0x154>)
 800374e:	08c0      	lsrs	r0, r0, #3
 8003750:	fba2 2000 	umull	r2, r0, r2, r0
 8003754:	0a00      	lsrs	r0, r0, #8
 8003756:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800375a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800375e:	9001      	str	r0, [sp, #4]
 8003760:	e003      	b.n	800376a <HAL_I2C_Master_Transmit_DMA+0x36>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003762:	682c      	ldr	r4, [r5, #0]
 8003764:	69a0      	ldr	r0, [r4, #24]
 8003766:	0780      	lsls	r0, r0, #30
 8003768:	d517      	bpl.n	800379a <HAL_I2C_Master_Transmit_DMA+0x66>
      count--;
 800376a:	9c01      	ldr	r4, [sp, #4]
 800376c:	3c01      	subs	r4, #1
 800376e:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8003770:	9801      	ldr	r0, [sp, #4]
 8003772:	2800      	cmp	r0, #0
 8003774:	d1f5      	bne.n	8003762 <HAL_I2C_Master_Transmit_DMA+0x2e>
        hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003778:	6328      	str	r0, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800377a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->State               = HAL_I2C_STATE_READY;
 800377e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003782:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        return HAL_ERROR;
 8003786:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800378a:	f043 0320 	orr.w	r3, r3, #32
 800378e:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003790:	b003      	add	sp, #12
 8003792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003794:	2002      	movs	r0, #2
}
 8003796:	b003      	add	sp, #12
 8003798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800379a:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 800379e:	2a01      	cmp	r2, #1
 80037a0:	d0f8      	beq.n	8003794 <HAL_I2C_Master_Transmit_DMA+0x60>
 80037a2:	2201      	movs	r2, #1
 80037a4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037a8:	6822      	ldr	r2, [r4, #0]
 80037aa:	07d2      	lsls	r2, r2, #31
 80037ac:	d403      	bmi.n	80037b6 <HAL_I2C_Master_Transmit_DMA+0x82>
      __HAL_I2C_ENABLE(hi2c);
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037b6:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037ba:	2010      	movs	r0, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037bc:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037be:	6822      	ldr	r2, [r4, #0]
 80037c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c4:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037c6:	f885 c03d 	strb.w	ip, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037ca:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ce:	642f      	str	r7, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80037d0:	856b      	strh	r3, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037d2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d4:	4a2d      	ldr	r2, [pc, #180]	; (800388c <HAL_I2C_Master_Transmit_DMA+0x158>)
    hi2c->XferSize    = hi2c->XferCount;
 80037d6:	b29b      	uxth	r3, r3
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d8:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80037da:	626e      	str	r6, [r5, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80037dc:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 80037de:	6469      	str	r1, [r5, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 80037e0:	b333      	cbz	r3, 8003830 <HAL_I2C_Master_Transmit_DMA+0xfc>
      if (hi2c->hdmatx != NULL)
 80037e2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d040      	beq.n	800386a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80037e8:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8003890 <HAL_I2C_Master_Transmit_DMA+0x15c>
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80037ec:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8003894 <HAL_I2C_Master_Transmit_DMA+0x160>
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80037f0:	4631      	mov	r1, r6
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80037f2:	62c7      	str	r7, [r0, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80037f4:	6347      	str	r7, [r0, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80037f6:	f104 0210 	add.w	r2, r4, #16
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80037fa:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80037fe:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003802:	f7ff fabb 	bl	8002d7c <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8003806:	bb18      	cbnz	r0, 8003850 <HAL_I2C_Master_Transmit_DMA+0x11c>
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003808:	682b      	ldr	r3, [r5, #0]
        __HAL_UNLOCK(hi2c);
 800380a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003814:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800381c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003824:	601a      	str	r2, [r3, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e7af      	b.n	8003790 <HAL_I2C_Master_Transmit_DMA+0x5c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003830:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8003832:	4618      	mov	r0, r3
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003838:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003840:	6022      	str	r2, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8003842:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003846:	6863      	ldr	r3, [r4, #4]
 8003848:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800384c:	6063      	str	r3, [r4, #4]
 800384e:	e79f      	b.n	8003790 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003850:	2320      	movs	r3, #32
 8003852:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003856:	f885 703e 	strb.w	r7, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800385a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800385c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800385e:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hi2c);
 8003862:	f885 703c 	strb.w	r7, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003866:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003868:	e792      	b.n	8003790 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800386a:	2320      	movs	r3, #32
 800386c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003870:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003874:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003876:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800387a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        return HAL_ERROR;
 800387e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003880:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003882:	e785      	b.n	8003790 <HAL_I2C_Master_Transmit_DMA+0x5c>
 8003884:	20000000 	.word	0x20000000
 8003888:	14f8b589 	.word	0x14f8b589
 800388c:	ffff0000 	.word	0xffff0000
 8003890:	080039b1 	.word	0x080039b1
 8003894:	08003975 	.word	0x08003975

08003898 <HAL_I2C_MasterTxCpltCallback>:
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop

0800389c <HAL_I2C_MasterRxCpltCallback>:
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <HAL_I2C_SlaveTxCpltCallback>:
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop

080038a4 <HAL_I2C_SlaveRxCpltCallback>:
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop

080038a8 <HAL_I2C_AddrCallback>:
}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop

080038ac <HAL_I2C_ListenCpltCallback>:
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop

080038b0 <HAL_I2C_MemTxCpltCallback>:
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop

080038b4 <I2C_MemoryTransmit_TXE_BTF>:
{
 80038b4:	b538      	push	{r3, r4, r5, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 80038ba:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80038bc:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 80038be:	b959      	cbnz	r1, 80038d8 <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038c0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038c2:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038c4:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038c8:	d032      	beq.n	8003930 <I2C_MemoryTransmit_TXE_BTF+0x7c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80038ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80038ce:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 80038d0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80038d2:	3201      	adds	r2, #1
 80038d4:	6502      	str	r2, [r0, #80]	; 0x50
}
 80038d6:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 80038d8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80038da:	2901      	cmp	r1, #1
 80038dc:	d020      	beq.n	8003920 <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 80038de:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80038e0:	2902      	cmp	r1, #2
 80038e2:	d1f8      	bne.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x22>
 80038e4:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038e6:	2a22      	cmp	r2, #34	; 0x22
 80038e8:	d02c      	beq.n	8003944 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038ea:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80038ec:	b289      	uxth	r1, r1
 80038ee:	bb29      	cbnz	r1, 800393c <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038f0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80038f2:	b289      	uxth	r1, r1
 80038f4:	2900      	cmp	r1, #0
 80038f6:	d1ee      	bne.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x22>
 80038f8:	2a21      	cmp	r2, #33	; 0x21
 80038fa:	d1ec      	bne.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	2520      	movs	r5, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038fe:	6802      	ldr	r2, [r0, #0]
 8003900:	6854      	ldr	r4, [r2, #4]
 8003902:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8003906:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003908:	6814      	ldr	r4, [r2, #0]
 800390a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800390e:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003910:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003912:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003916:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800391a:	f7ff ffc9 	bl	80038b0 <HAL_I2C_MemTxCpltCallback>
}
 800391e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003920:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003922:	6801      	ldr	r1, [r0, #0]
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8003928:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800392a:	3201      	adds	r2, #1
 800392c:	6502      	str	r2, [r0, #80]	; 0x50
}
 800392e:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8003934:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003936:	3202      	adds	r2, #2
 8003938:	6502      	str	r2, [r0, #80]	; 0x50
}
 800393a:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800393c:	2a21      	cmp	r2, #33	; 0x21
 800393e:	d00a      	beq.n	8003956 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 8003942:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003944:	6801      	ldr	r1, [r0, #0]
 8003946:	680a      	ldr	r2, [r1, #0]
 8003948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394c:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 800394e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003950:	3201      	adds	r2, #1
 8003952:	6502      	str	r2, [r0, #80]	; 0x50
}
 8003954:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003956:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003958:	6802      	ldr	r2, [r0, #0]
 800395a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800395e:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8003960:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003962:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003964:	3a01      	subs	r2, #1
 8003966:	b292      	uxth	r2, r2
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800396a:	bd38      	pop	{r3, r4, r5, pc}

0800396c <HAL_I2C_MemRxCpltCallback>:
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop

08003970 <HAL_I2C_ErrorCallback>:
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop

08003974 <I2C_DMAError>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003974:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003976:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8003978:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800397a:	b10b      	cbz	r3, 8003980 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800397c:	2200      	movs	r2, #0
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003980:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003982:	b10b      	cbz	r3, 8003988 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003984:	2200      	movs	r2, #0
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->XferCount       = 0U;
 8003988:	2200      	movs	r2, #0
  hi2c->State           = HAL_I2C_STATE_READY;
 800398a:	2420      	movs	r4, #32
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398c:	6801      	ldr	r1, [r0, #0]
 800398e:	680b      	ldr	r3, [r1, #0]
 8003990:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003994:	600b      	str	r3, [r1, #0]
  hi2c->XferCount       = 0U;
 8003996:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003998:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800399c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80039a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80039a2:	f043 0310 	orr.w	r3, r3, #16
 80039a6:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 80039a8:	f7ff ffe2 	bl	8003970 <HAL_I2C_ErrorCallback>
}
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop

080039b0 <I2C_DMAXferCplt>:
{
 80039b0:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039b4:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039ba:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039c0:	6859      	ldr	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 80039c2:	6b65      	ldr	r5, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039c4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039c8:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039ca:	b2c0      	uxtb	r0, r0
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039cc:	6059      	str	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 80039ce:	b10d      	cbz	r5, 80039d4 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039d0:	2100      	movs	r1, #0
 80039d2:	62a9      	str	r1, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 80039d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80039d6:	b109      	cbz	r1, 80039dc <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80039d8:	2500      	movs	r5, #0
 80039da:	628d      	str	r5, [r1, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80039dc:	f002 0121 	and.w	r1, r2, #33	; 0x21
 80039e0:	2921      	cmp	r1, #33	; 0x21
 80039e2:	d039      	beq.n	8003a58 <I2C_DMAXferCplt+0xa8>
 80039e4:	f002 0122 	and.w	r1, r2, #34	; 0x22
 80039e8:	2922      	cmp	r1, #34	; 0x22
 80039ea:	d033      	beq.n	8003a54 <I2C_DMAXferCplt+0xa4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80039ec:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80039f0:	b37a      	cbz	r2, 8003a52 <I2C_DMAXferCplt+0xa2>
    if (hi2c->XferCount == (uint16_t)1)
 80039f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039f4:	b292      	uxth	r2, r2
 80039f6:	2a01      	cmp	r2, #1
 80039f8:	d03d      	beq.n	8003a76 <I2C_DMAXferCplt+0xc6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039fa:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80039fc:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a06:	d006      	beq.n	8003a16 <I2C_DMAXferCplt+0x66>
 8003a08:	2e08      	cmp	r6, #8
 8003a0a:	d004      	beq.n	8003a16 <I2C_DMAXferCplt+0x66>
 8003a0c:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003a10:	d001      	beq.n	8003a16 <I2C_DMAXferCplt+0x66>
 8003a12:	2e20      	cmp	r6, #32
 8003a14:	d103      	bne.n	8003a1e <I2C_DMAXferCplt+0x6e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1c:	601a      	str	r2, [r3, #0]
    hi2c->XferCount = 0U;
 8003a1e:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a26:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2e:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003a30:	8561      	strh	r1, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a34:	bb23      	cbnz	r3, 8003a80 <I2C_DMAXferCplt+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	2220      	movs	r2, #32
 8003a38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a3c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003a40:	2a40      	cmp	r2, #64	; 0x40
 8003a42:	d035      	beq.n	8003ab0 <I2C_DMAXferCplt+0x100>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a44:	2212      	movs	r2, #18
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a4a:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a4c:	6322      	str	r2, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a4e:	f7ff ff25 	bl	800389c <HAL_I2C_MasterRxCpltCallback>
}
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003a54:	2820      	cmp	r0, #32
 8003a56:	d1c9      	bne.n	80039ec <I2C_DMAXferCplt+0x3c>
    hi2c->XferCount = 0U;
 8003a58:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a5a:	6859      	ldr	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a5c:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a5e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003a62:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 8003a64:	8560      	strh	r0, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a66:	d00f      	beq.n	8003a88 <I2C_DMAXferCplt+0xd8>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a68:	2a2a      	cmp	r2, #42	; 0x2a
 8003a6a:	d017      	beq.n	8003a9c <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003a72:	605a      	str	r2, [r3, #4]
}
 8003a74:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e7bc      	b.n	80039fa <I2C_DMAXferCplt+0x4a>
      HAL_I2C_ErrorCallback(hi2c);
 8003a80:	4620      	mov	r0, r4
 8003a82:	f7ff ff75 	bl	8003970 <HAL_I2C_ErrorCallback>
}
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a88:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a8a:	2221      	movs	r2, #33	; 0x21
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a8c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a8e:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a94:	f7ff ff04 	bl	80038a0 <HAL_I2C_SlaveTxCpltCallback>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	e7e7      	b.n	8003a6c <I2C_DMAXferCplt+0xbc>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a9c:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a9e:	2222      	movs	r2, #34	; 0x22
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aa0:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003aa2:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aa4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aa8:	f7ff fefc 	bl	80038a4 <HAL_I2C_SlaveRxCpltCallback>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	e7dd      	b.n	8003a6c <I2C_DMAXferCplt+0xbc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003ab4:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ab6:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003ab8:	f7ff ff58 	bl	800396c <HAL_I2C_MemRxCpltCallback>
}
 8003abc:	bd70      	pop	{r4, r5, r6, pc}
 8003abe:	bf00      	nop

08003ac0 <HAL_I2C_AbortCpltCallback>:
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop

08003ac4 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8003ac4:	2200      	movs	r2, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ac6:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <I2C_DMAAbort+0xec>)
{
 8003ac8:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4939      	ldr	r1, [pc, #228]	; (8003bb4 <I2C_DMAAbort+0xf0>)
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	fba1 1303 	umull	r1, r3, r1, r3
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ad4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003ad6:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003ad8:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ada:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003adc:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ae0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ae4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003ae8:	6802      	ldr	r2, [r0, #0]
 8003aea:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aec:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003aee:	e005      	b.n	8003afc <I2C_DMAAbort+0x38>
    count--;
 8003af0:	9b01      	ldr	r3, [sp, #4]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003af6:	6813      	ldr	r3, [r2, #0]
 8003af8:	059b      	lsls	r3, r3, #22
 8003afa:	d506      	bpl.n	8003b0a <I2C_DMAAbort+0x46>
    if (count == 0U)
 8003afc:	9b01      	ldr	r3, [sp, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f6      	bne.n	8003af0 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003b04:	f043 0320 	orr.w	r3, r3, #32
 8003b08:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8003b0a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003b0c:	b34c      	cbz	r4, 8003b62 <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b0e:	2500      	movs	r5, #0
  if (hi2c->hdmarx != NULL)
 8003b10:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b12:	62a5      	str	r5, [r4, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003b14:	b1f3      	cbz	r3, 8003b54 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b16:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b18:	629d      	str	r5, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1a:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8003b1e:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8003b20:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b22:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b24:	2400      	movs	r4, #0
 8003b26:	635c      	str	r4, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8003b28:	6813      	ldr	r3, [r2, #0]
 8003b2a:	f023 0301 	bic.w	r3, r3, #1
 8003b2e:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b30:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b34:	2b60      	cmp	r3, #96	; 0x60
 8003b36:	d02a      	beq.n	8003b8e <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b38:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003b3c:	2928      	cmp	r1, #40	; 0x28
 8003b3e:	d019      	beq.n	8003b74 <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b40:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003b44:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003b4c:	f7ff ff10 	bl	8003970 <HAL_I2C_ErrorCallback>
}
 8003b50:	b002      	add	sp, #8
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b54:	6815      	ldr	r5, [r2, #0]
 8003b56:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003b5a:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003b5c:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b5e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8003b60:	e7e2      	b.n	8003b28 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8003b62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b64:	b1f3      	cbz	r3, 8003ba4 <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b66:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b68:	629c      	str	r4, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003b6e:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003b70:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003b72:	e7d7      	b.n	8003b24 <I2C_DMAAbort+0x60>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b74:	2400      	movs	r4, #0
      __HAL_I2C_ENABLE(hi2c);
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b84:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b86:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b88:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8003b8c:	e7de      	b.n	8003b4c <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b8e:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b90:	2220      	movs	r2, #32
 8003b92:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b96:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b9a:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b9c:	f7ff ff90 	bl	8003ac0 <HAL_I2C_AbortCpltCallback>
}
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba4:	6814      	ldr	r4, [r2, #0]
 8003ba6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8003baa:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8003bac:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003bae:	e7bb      	b.n	8003b28 <I2C_DMAAbort+0x64>
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	14f8b589 	.word	0x14f8b589

08003bb8 <I2C_ITError>:
{
 8003bb8:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bba:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003bbe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 8003bc2:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bc4:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bc6:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bc8:	d039      	beq.n	8003c3e <I2C_ITError+0x86>
 8003bca:	b2d9      	uxtb	r1, r3
 8003bcc:	2940      	cmp	r1, #64	; 0x40
 8003bce:	d036      	beq.n	8003c3e <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd0:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003bd4:	2928      	cmp	r1, #40	; 0x28
 8003bd6:	d03d      	beq.n	8003c54 <I2C_ITError+0x9c>
 8003bd8:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	0508      	lsls	r0, r1, #20
 8003bde:	d407      	bmi.n	8003bf0 <I2C_ITError+0x38>
 8003be0:	2a60      	cmp	r2, #96	; 0x60
 8003be2:	d005      	beq.n	8003bf0 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003bfa:	d134      	bne.n	8003c66 <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bfc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003c00:	2960      	cmp	r1, #96	; 0x60
 8003c02:	d075      	beq.n	8003cf0 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	0650      	lsls	r0, r2, #25
 8003c08:	d505      	bpl.n	8003c16 <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c0e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c12:	3301      	adds	r3, #1
 8003c14:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003c16:	4620      	mov	r0, r4
 8003c18:	f7ff feaa 	bl	8003970 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003c1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c1e:	0719      	lsls	r1, r3, #28
 8003c20:	d004      	beq.n	8003c2c <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	6853      	ldr	r3, [r2, #4]
 8003c26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c2a:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003c2c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c30:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8003c32:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c34:	0752      	lsls	r2, r2, #29
 8003c36:	d501      	bpl.n	8003c3c <I2C_ITError+0x84>
 8003c38:	2b28      	cmp	r3, #40	; 0x28
 8003c3a:	d02f      	beq.n	8003c9c <I2C_ITError+0xe4>
}
 8003c3c:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c3e:	2a22      	cmp	r2, #34	; 0x22
 8003c40:	d1c6      	bne.n	8003bd0 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4a:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	0512      	lsls	r2, r2, #20
 8003c50:	d5c8      	bpl.n	8003be4 <I2C_ITError+0x2c>
 8003c52:	e7cd      	b.n	8003bf0 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c54:	2200      	movs	r2, #0
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c5a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003c64:	d0ca      	beq.n	8003bfc <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c66:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c68:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c70:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d01e      	beq.n	8003cb6 <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c78:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <I2C_ITError+0x164>)
 8003c7a:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c7c:	f7ff f8c0 	bl	8002e00 <HAL_DMA_Abort_IT>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d0cb      	beq.n	8003c1c <I2C_ITError+0x64>
        hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003c86:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c88:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c98:	4798      	blx	r3
 8003c9a:	e7bf      	b.n	8003c1c <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c9c:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c9e:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ca0:	491f      	ldr	r1, [pc, #124]	; (8003d20 <I2C_ITError+0x168>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ca2:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ca4:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ca6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ca8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cb0:	f7ff fdfc 	bl	80038ac <HAL_I2C_ListenCpltCallback>
}
 8003cb4:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cb6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cb8:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <I2C_ITError+0x164>)
 8003cba:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cbc:	f7ff f8a0 	bl	8002e00 <HAL_DMA_Abort_IT>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0ab      	beq.n	8003c1c <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	0651      	lsls	r1, r2, #25
 8003cca:	d506      	bpl.n	8003cda <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cd0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003cd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	3201      	adds	r2, #1
 8003cd8:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003cdc:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cde:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003ce6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003cec:	4798      	blx	r3
 8003cee:	e795      	b.n	8003c1c <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8003cf0:	2120      	movs	r1, #32
 8003cf2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf6:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	0652      	lsls	r2, r2, #25
 8003cfc:	d506      	bpl.n	8003d0c <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d02:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003d04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	3201      	adds	r2, #1
 8003d0a:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003d0c:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d0e:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d16:	f7ff fed3 	bl	8003ac0 <HAL_I2C_AbortCpltCallback>
 8003d1a:	e77f      	b.n	8003c1c <I2C_ITError+0x64>
 8003d1c:	08003ac5 	.word	0x08003ac5
 8003d20:	ffff0000 	.word	0xffff0000

08003d24 <HAL_I2C_EV_IRQHandler>:
{
 8003d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d26:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d28:	6803      	ldr	r3, [r0, #0]
{
 8003d2a:	b08f      	sub	sp, #60	; 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d2c:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d30:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d34:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d38:	2910      	cmp	r1, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d3a:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d3c:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d3e:	d022      	beq.n	8003d86 <HAL_I2C_EV_IRQHandler+0x62>
 8003d40:	2d40      	cmp	r5, #64	; 0x40
 8003d42:	d020      	beq.n	8003d86 <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d44:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d46:	2900      	cmp	r1, #0
 8003d48:	f000 8095 	beq.w	8003e76 <HAL_I2C_EV_IRQHandler+0x152>
  uint32_t sr2itflags               = 0U;
 8003d4c:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d4e:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d50:	078f      	lsls	r7, r1, #30
 8003d52:	f3c1 0640 	ubfx	r6, r1, #1, #1
 8003d56:	d559      	bpl.n	8003e0c <HAL_I2C_EV_IRQHandler+0xe8>
 8003d58:	0586      	lsls	r6, r0, #22
 8003d5a:	d559      	bpl.n	8003e10 <HAL_I2C_EV_IRQHandler+0xec>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d5e:	b102      	cbz	r2, 8003d62 <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d60:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d62:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003d66:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003d6a:	2a28      	cmp	r2, #40	; 0x28
 8003d6c:	f000 821d 	beq.w	80041aa <HAL_I2C_EV_IRQHandler+0x486>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d70:	2200      	movs	r2, #0
 8003d72:	920c      	str	r2, [sp, #48]	; 0x30
 8003d74:	6959      	ldr	r1, [r3, #20]
 8003d76:	910c      	str	r1, [sp, #48]	; 0x30
 8003d78:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 8003d7a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8003d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 8003d82:	b00f      	add	sp, #60	; 0x3c
 8003d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d86:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d88:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d8a:	f011 0f01 	tst.w	r1, #1
 8003d8e:	d11a      	bne.n	8003dc6 <HAL_I2C_EV_IRQHandler+0xa2>
 8003d90:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8003d94:	d0f5      	beq.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 8003d96:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003d9a:	d0f2      	beq.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9c:	070e      	lsls	r6, r1, #28
 8003d9e:	d56d      	bpl.n	8003e7c <HAL_I2C_EV_IRQHandler+0x158>
 8003da0:	0586      	lsls	r6, r0, #22
 8003da2:	f140 8083 	bpl.w	8003eac <HAL_I2C_EV_IRQHandler+0x188>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003da6:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003daa:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003dac:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dae:	2900      	cmp	r1, #0
 8003db0:	f000 81e2 	beq.w	8004178 <HAL_I2C_EV_IRQHandler+0x454>
 8003db4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003db6:	2a00      	cmp	r2, #0
 8003db8:	f000 81de 	beq.w	8004178 <HAL_I2C_EV_IRQHandler+0x454>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	e7dd      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc6:	0586      	lsls	r6, r0, #22
 8003dc8:	d56e      	bpl.n	8003ea8 <HAL_I2C_EV_IRQHandler+0x184>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003dca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003dcc:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8003dd0:	f000 81e8 	beq.w	80041a4 <HAL_I2C_EV_IRQHandler+0x480>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003dd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003dd6:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003dda:	bf04      	itt	eq
 8003ddc:	2208      	moveq	r2, #8
 8003dde:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003de4:	2a40      	cmp	r2, #64	; 0x40
 8003de6:	f000 81d6 	beq.w	8004196 <HAL_I2C_EV_IRQHandler+0x472>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dea:	6922      	ldr	r2, [r4, #16]
 8003dec:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003df0:	f000 81b1 	beq.w	8004156 <HAL_I2C_EV_IRQHandler+0x432>
      if (hi2c->EventCount == 0U)
 8003df4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003df6:	2a00      	cmp	r2, #0
 8003df8:	f040 81eb 	bne.w	80041d2 <HAL_I2C_EV_IRQHandler+0x4ae>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003dfc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003dfe:	11d2      	asrs	r2, r2, #7
 8003e00:	f002 0206 	and.w	r2, r2, #6
 8003e04:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003e08:	611a      	str	r2, [r3, #16]
 8003e0a:	e7ba      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e0c:	06cf      	lsls	r7, r1, #27
 8003e0e:	d47b      	bmi.n	8003f08 <HAL_I2C_EV_IRQHandler+0x1e4>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e10:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8003e14:	2a21      	cmp	r2, #33	; 0x21
 8003e16:	f000 80f4 	beq.w	8004002 <HAL_I2C_EV_IRQHandler+0x2de>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e1a:	064e      	lsls	r6, r1, #25
 8003e1c:	f140 8131 	bpl.w	8004082 <HAL_I2C_EV_IRQHandler+0x35e>
 8003e20:	0545      	lsls	r5, r0, #21
 8003e22:	f140 812e 	bpl.w	8004082 <HAL_I2C_EV_IRQHandler+0x35e>
 8003e26:	0749      	lsls	r1, r1, #29
 8003e28:	f100 812e 	bmi.w	8004088 <HAL_I2C_EV_IRQHandler+0x364>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e2c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003e30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e32:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8003e34:	b292      	uxth	r2, r2
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	d0a3      	beq.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e3e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003e40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003e42:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003e4c:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e4e:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003e50:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d195      	bne.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 8003e56:	292a      	cmp	r1, #42	; 0x2a
 8003e58:	d193      	bne.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e5a:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e5c:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e5e:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e60:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e62:	6853      	ldr	r3, [r2, #4]
 8003e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e68:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e6a:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e6c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e70:	f7ff fd18 	bl	80038a4 <HAL_I2C_SlaveRxCpltCallback>
 8003e74:	e785      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e76:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e78:	6959      	ldr	r1, [r3, #20]
 8003e7a:	e769      	b.n	8003d50 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e7c:	078e      	lsls	r6, r1, #30
 8003e7e:	d515      	bpl.n	8003eac <HAL_I2C_EV_IRQHandler+0x188>
 8003e80:	0586      	lsls	r6, r0, #22
 8003e82:	d513      	bpl.n	8003eac <HAL_I2C_EV_IRQHandler+0x188>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e84:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e8a:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e8c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e90:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e92:	2922      	cmp	r1, #34	; 0x22
 8003e94:	f000 81b2 	beq.w	80041fc <HAL_I2C_EV_IRQHandler+0x4d8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	920a      	str	r2, [sp, #40]	; 0x28
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	920a      	str	r2, [sp, #40]	; 0x28
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ea6:	e76c      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ea8:	070e      	lsls	r6, r1, #28
 8003eaa:	d5e7      	bpl.n	8003e7c <HAL_I2C_EV_IRQHandler+0x158>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003eac:	077f      	lsls	r7, r7, #29
 8003eae:	f140 80f4 	bpl.w	800409a <HAL_I2C_EV_IRQHandler+0x376>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003eb2:	685e      	ldr	r6, [r3, #4]
 8003eb4:	0536      	lsls	r6, r6, #20
 8003eb6:	f53f af64 	bmi.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eba:	060f      	lsls	r7, r1, #24
 8003ebc:	f140 8114 	bpl.w	80040e8 <HAL_I2C_EV_IRQHandler+0x3c4>
 8003ec0:	0546      	lsls	r6, r0, #21
 8003ec2:	f140 8111 	bpl.w	80040e8 <HAL_I2C_EV_IRQHandler+0x3c4>
 8003ec6:	074f      	lsls	r7, r1, #29
 8003ec8:	f100 8111 	bmi.w	80040ee <HAL_I2C_EV_IRQHandler+0x3ca>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ecc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ed0:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ed2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed6:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ed8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003eda:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f040 823a 	bne.w	8004356 <HAL_I2C_EV_IRQHandler+0x632>
 8003ee2:	2a21      	cmp	r2, #33	; 0x21
 8003ee4:	f000 8341 	beq.w	800456a <HAL_I2C_EV_IRQHandler+0x846>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ee8:	2940      	cmp	r1, #64	; 0x40
 8003eea:	f47f af4a 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003eee:	2a22      	cmp	r2, #34	; 0x22
 8003ef0:	f47f af47 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount == 0U)
 8003ef4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	f040 82c1 	bne.w	8004480 <HAL_I2C_EV_IRQHandler+0x75c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	e73c      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f08:	0585      	lsls	r5, r0, #22
 8003f0a:	d581      	bpl.n	8003e10 <HAL_I2C_EV_IRQHandler+0xec>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f0c:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f10:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f12:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f18:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f1a:	960d      	str	r6, [sp, #52]	; 0x34
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	920d      	str	r2, [sp, #52]	; 0x34
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f30:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	0511      	lsls	r1, r2, #20
 8003f36:	d521      	bpl.n	8003f7c <HAL_I2C_EV_IRQHandler+0x258>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f38:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8003f3c:	2a22      	cmp	r2, #34	; 0x22
 8003f3e:	f000 817a 	beq.w	8004236 <HAL_I2C_EV_IRQHandler+0x512>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003f42:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f44:	6802      	ldr	r2, [r0, #0]
 8003f46:	6852      	ldr	r2, [r2, #4]
 8003f48:	b292      	uxth	r2, r2
 8003f4a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003f4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f4e:	b292      	uxth	r2, r2
 8003f50:	b11a      	cbz	r2, 8003f5a <HAL_I2C_EV_IRQHandler+0x236>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f54:	f042 0204 	orr.w	r2, r2, #4
 8003f58:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f60:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f62:	f7ff f82b 	bl	8002fbc <HAL_DMA_GetState>
 8003f66:	2801      	cmp	r0, #1
 8003f68:	d008      	beq.n	8003f7c <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f6c:	4ba2      	ldr	r3, [pc, #648]	; (80041f8 <HAL_I2C_EV_IRQHandler+0x4d4>)
 8003f6e:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f70:	f7fe ff46 	bl	8002e00 <HAL_DMA_Abort_IT>
 8003f74:	b110      	cbz	r0, 8003f7c <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f76:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f7a:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8003f7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	b313      	cbz	r3, 8003fc8 <HAL_I2C_EV_IRQHandler+0x2a4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	0752      	lsls	r2, r2, #29
 8003f88:	d50a      	bpl.n	8003fa0 <HAL_I2C_EV_IRQHandler+0x27c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f8e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003f90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003f94:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003f96:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003f9e:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	0657      	lsls	r7, r2, #25
 8003fa4:	d509      	bpl.n	8003fba <HAL_I2C_EV_IRQHandler+0x296>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003faa:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003fac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003fae:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003fb4:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8003fb6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003fb8:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8003fba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	b11b      	cbz	r3, 8003fc8 <HAL_I2C_EV_IRQHandler+0x2a4>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc2:	f043 0304 	orr.w	r3, r3, #4
 8003fc6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 80dd 	bne.w	800418a <HAL_I2C_EV_IRQHandler+0x466>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003fd0:	2d2a      	cmp	r5, #42	; 0x2a
 8003fd2:	f000 8151 	beq.w	8004278 <HAL_I2C_EV_IRQHandler+0x554>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003fd6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003fda:	2b28      	cmp	r3, #40	; 0x28
 8003fdc:	f000 8154 	beq.w	8004288 <HAL_I2C_EV_IRQHandler+0x564>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fe0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fe2:	2b22      	cmp	r3, #34	; 0x22
 8003fe4:	d002      	beq.n	8003fec <HAL_I2C_EV_IRQHandler+0x2c8>
 8003fe6:	2d22      	cmp	r5, #34	; 0x22
 8003fe8:	f47f aecb 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fec:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ff0:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ff2:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ffc:	f7ff fc52 	bl	80038a4 <HAL_I2C_SlaveRxCpltCallback>
 8004000:	e6bf      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004002:	060e      	lsls	r6, r1, #24
 8004004:	d528      	bpl.n	8004058 <HAL_I2C_EV_IRQHandler+0x334>
 8004006:	0545      	lsls	r5, r0, #21
 8004008:	d526      	bpl.n	8004058 <HAL_I2C_EV_IRQHandler+0x334>
 800400a:	0749      	lsls	r1, r1, #29
 800400c:	d427      	bmi.n	800405e <HAL_I2C_EV_IRQHandler+0x33a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800400e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8004012:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004014:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8004016:	b289      	uxth	r1, r1
 8004018:	2900      	cmp	r1, #0
 800401a:	f43f aeb2 	beq.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800401e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004020:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004024:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8004026:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8004028:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800402a:	3901      	subs	r1, #1
 800402c:	b289      	uxth	r1, r1
 800402e:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004030:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004032:	b289      	uxth	r1, r1
 8004034:	2900      	cmp	r1, #0
 8004036:	f47f aea4 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 800403a:	2829      	cmp	r0, #41	; 0x29
 800403c:	f47f aea1 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004040:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004042:	6859      	ldr	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004044:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004046:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800404a:	6059      	str	r1, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800404c:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800404e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004052:	f7ff fc25 	bl	80038a0 <HAL_I2C_SlaveTxCpltCallback>
 8004056:	e694      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004058:	074a      	lsls	r2, r1, #29
 800405a:	f57f ae92 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 800405e:	0587      	lsls	r7, r0, #22
 8004060:	f57f ae8f 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8004064:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004066:	b292      	uxth	r2, r2
 8004068:	2a00      	cmp	r2, #0
 800406a:	f43f ae8a 	beq.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800406e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004070:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004074:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8004076:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8004078:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800407a:	3b01      	subs	r3, #1
 800407c:	b29b      	uxth	r3, r3
 800407e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004080:	e67f      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004082:	074a      	lsls	r2, r1, #29
 8004084:	f57f ae7d 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 8004088:	0587      	lsls	r7, r0, #22
 800408a:	f57f ae7a 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 800408e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004090:	b292      	uxth	r2, r2
 8004092:	2a00      	cmp	r2, #0
 8004094:	f43f ae75 	beq.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 8004098:	e01b      	b.n	80040d2 <HAL_I2C_EV_IRQHandler+0x3ae>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	0512      	lsls	r2, r2, #20
 800409e:	f53f ae70 	bmi.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040a2:	064f      	lsls	r7, r1, #25
 80040a4:	d432      	bmi.n	800410c <HAL_I2C_EV_IRQHandler+0x3e8>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a6:	0749      	lsls	r1, r1, #29
 80040a8:	f57f ae6b 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 80040ac:	0582      	lsls	r2, r0, #22
 80040ae:	f57f ae68 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80040b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80040b6:	b292      	uxth	r2, r2
 80040b8:	2a04      	cmp	r2, #4
 80040ba:	f000 8119 	beq.w	80042f0 <HAL_I2C_EV_IRQHandler+0x5cc>
  else if (hi2c->XferCount == 3U)
 80040be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80040c0:	b292      	uxth	r2, r2
 80040c2:	2a03      	cmp	r2, #3
 80040c4:	f000 8159 	beq.w	800437a <HAL_I2C_EV_IRQHandler+0x656>
  else if (hi2c->XferCount == 2U)
 80040c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80040ca:	b292      	uxth	r2, r2
 80040cc:	2a02      	cmp	r2, #2
 80040ce:	f000 8185 	beq.w	80043dc <HAL_I2C_EV_IRQHandler+0x6b8>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040d6:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80040d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80040da:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80040e0:	3201      	adds	r2, #1
    hi2c->XferCount--;
 80040e2:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80040e4:	6262      	str	r2, [r4, #36]	; 0x24
      }
 80040e6:	e64c      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040e8:	074e      	lsls	r6, r1, #29
 80040ea:	f57f ae4a 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 80040ee:	0581      	lsls	r1, r0, #22
 80040f0:	f57f ae47 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040f4:	2a21      	cmp	r2, #33	; 0x21
 80040f6:	f000 8103 	beq.w	8004300 <HAL_I2C_EV_IRQHandler+0x5dc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80040fa:	2d40      	cmp	r5, #64	; 0x40
 80040fc:	f47f ae41 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004100:	4620      	mov	r0, r4
}
 8004102:	b00f      	add	sp, #60	; 0x3c
 8004104:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004108:	f7ff bbd4 	b.w	80038b4 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800410c:	0546      	lsls	r6, r0, #21
 800410e:	d5ca      	bpl.n	80040a6 <HAL_I2C_EV_IRQHandler+0x382>
 8004110:	074d      	lsls	r5, r1, #29
 8004112:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8004116:	d4c9      	bmi.n	80040ac <HAL_I2C_EV_IRQHandler+0x388>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004118:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800411c:	2922      	cmp	r1, #34	; 0x22
 800411e:	f47f ae30 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    tmp = hi2c->XferCount;
 8004122:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004124:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8004126:	2903      	cmp	r1, #3
 8004128:	f240 81b0 	bls.w	800448c <HAL_I2C_EV_IRQHandler+0x768>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004130:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8004132:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004134:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004136:	3b01      	subs	r3, #1
 8004138:	b29b      	uxth	r3, r3
 800413a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800413c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800413e:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8004144:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8004146:	f47f ae1c 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	6853      	ldr	r3, [r2, #4]
 800414e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004152:	6053      	str	r3, [r2, #4]
 8004154:	e615      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004156:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800415a:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800415c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800415e:	bf16      	itet	ne
 8004160:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004164:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004168:	b2d2      	uxtbne	r2, r2
 800416a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800416c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800416e:	b11a      	cbz	r2, 8004178 <HAL_I2C_EV_IRQHandler+0x454>
 8004170:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004172:	2a00      	cmp	r2, #0
 8004174:	f47f ae22 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x98>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004178:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800417a:	2a00      	cmp	r2, #0
 800417c:	f43f ae01 	beq.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 8004180:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004182:	2a00      	cmp	r2, #0
 8004184:	f47f ae1a 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x98>
 8004188:	e5fb      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    I2C_ITError(hi2c);
 800418a:	4620      	mov	r0, r4
}
 800418c:	b00f      	add	sp, #60	; 0x3c
 800418e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8004192:	f7ff bd11 	b.w	8003bb8 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 8004196:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004198:	bb3a      	cbnz	r2, 80041ea <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800419a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800419c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041a0:	611a      	str	r2, [r3, #16]
 80041a2:	e5ee      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80041a4:	2201      	movs	r2, #1
 80041a6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80041a8:	e61a      	b.n	8003de0 <HAL_I2C_EV_IRQHandler+0xbc>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041aa:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041ac:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b4:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041b6:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 80041b8:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041bc:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041be:	bf54      	ite	pl
 80041c0:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041c2:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041c4:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 80041c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041cc:	f7ff fb6c 	bl	80038a8 <HAL_I2C_AddrCallback>
 80041d0:	e5d7      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 80041d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041d4:	2a01      	cmp	r2, #1
 80041d6:	f47f add4 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80041da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80041dc:	11d2      	asrs	r2, r2, #7
 80041de:	f002 0206 	and.w	r2, r2, #6
 80041e2:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80041e6:	611a      	str	r2, [r3, #16]
 80041e8:	e5cb      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	611a      	str	r2, [r3, #16]
 80041f4:	e5c5      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 80041f6:	bf00      	nop
 80041f8:	08003ac5 	.word	0x08003ac5
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80041fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80041fe:	b911      	cbnz	r1, 8004206 <HAL_I2C_EV_IRQHandler+0x4e2>
 8004200:	2a40      	cmp	r2, #64	; 0x40
 8004202:	f000 80a1 	beq.w	8004348 <HAL_I2C_EV_IRQHandler+0x624>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004206:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004208:	b922      	cbnz	r2, 8004214 <HAL_I2C_EV_IRQHandler+0x4f0>
 800420a:	6921      	ldr	r1, [r4, #16]
 800420c:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8004210:	f000 80a5 	beq.w	800435e <HAL_I2C_EV_IRQHandler+0x63a>
      if (hi2c->XferCount == 0U)
 8004214:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004216:	b292      	uxth	r2, r2
 8004218:	2a00      	cmp	r2, #0
 800421a:	d142      	bne.n	80042a2 <HAL_I2C_EV_IRQHandler+0x57e>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421c:	9202      	str	r2, [sp, #8]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	9202      	str	r2, [sp, #8]
 8004222:	699a      	ldr	r2, [r3, #24]
 8004224:	9202      	str	r2, [sp, #8]
 8004226:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	6523      	str	r3, [r4, #80]	; 0x50
 8004234:	e5a5      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004236:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004238:	6802      	ldr	r2, [r0, #0]
 800423a:	6852      	ldr	r2, [r2, #4]
 800423c:	b292      	uxth	r2, r2
 800423e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004240:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004242:	b292      	uxth	r2, r2
 8004244:	b11a      	cbz	r2, 800424e <HAL_I2C_EV_IRQHandler+0x52a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004246:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004248:	f042 0204 	orr.w	r2, r2, #4
 800424c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004254:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004256:	f7fe feb1 	bl	8002fbc <HAL_DMA_GetState>
 800425a:	2801      	cmp	r0, #1
 800425c:	f43f ae8e 	beq.w	8003f7c <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004260:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004262:	4ba6      	ldr	r3, [pc, #664]	; (80044fc <HAL_I2C_EV_IRQHandler+0x7d8>)
 8004264:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004266:	f7fe fdcb 	bl	8002e00 <HAL_DMA_Abort_IT>
 800426a:	2800      	cmp	r0, #0
 800426c:	f43f ae86 	beq.w	8003f7c <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004270:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004272:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004274:	4798      	blx	r3
 8004276:	e681      	b.n	8003f7c <HAL_I2C_EV_IRQHandler+0x258>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004278:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 800427a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800427c:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800427e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004282:	f7ff fb0f 	bl	80038a4 <HAL_I2C_SlaveRxCpltCallback>
 8004286:	e6a6      	b.n	8003fd6 <HAL_I2C_EV_IRQHandler+0x2b2>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004288:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800428a:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800428c:	499c      	ldr	r1, [pc, #624]	; (8004500 <HAL_I2C_EV_IRQHandler+0x7dc>)
      HAL_I2C_ListenCpltCallback(hi2c);
 800428e:	4620      	mov	r0, r4
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004290:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004292:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004294:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800429c:	f7ff fb06 	bl	80038ac <HAL_I2C_ListenCpltCallback>
 80042a0:	e56f      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->XferCount == 1U)
 80042a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042a4:	b292      	uxth	r2, r2
 80042a6:	2a01      	cmp	r2, #1
 80042a8:	d076      	beq.n	8004398 <HAL_I2C_EV_IRQHandler+0x674>
      else if (hi2c->XferCount == 2U)
 80042aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042ac:	b292      	uxth	r2, r2
 80042ae:	2a02      	cmp	r2, #2
 80042b0:	f000 812e 	beq.w	8004510 <HAL_I2C_EV_IRQHandler+0x7ec>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ba:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	0511      	lsls	r1, r2, #20
 80042c0:	d50e      	bpl.n	80042e0 <HAL_I2C_EV_IRQHandler+0x5bc>
 80042c2:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80042c6:	d007      	beq.n	80042d8 <HAL_I2C_EV_IRQHandler+0x5b4>
 80042c8:	3801      	subs	r0, #1
 80042ca:	281f      	cmp	r0, #31
 80042cc:	d808      	bhi.n	80042e0 <HAL_I2C_EV_IRQHandler+0x5bc>
 80042ce:	4a8d      	ldr	r2, [pc, #564]	; (8004504 <HAL_I2C_EV_IRQHandler+0x7e0>)
 80042d0:	fa22 f000 	lsr.w	r0, r2, r0
 80042d4:	07c2      	lsls	r2, r0, #31
 80042d6:	d503      	bpl.n	80042e0 <HAL_I2C_EV_IRQHandler+0x5bc>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042de:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e0:	2200      	movs	r2, #0
 80042e2:	9209      	str	r2, [sp, #36]	; 0x24
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	9209      	str	r2, [sp, #36]	; 0x24
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	9309      	str	r3, [sp, #36]	; 0x24
 80042ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ee:	e79f      	b.n	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f0:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f8:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80042fe:	e6eb      	b.n	80040d8 <HAL_I2C_EV_IRQHandler+0x3b4>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004300:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004302:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004306:	2a21      	cmp	r2, #33	; 0x21
 8004308:	f47f ad3b 	bne.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount != 0U)
 800430c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800430e:	b292      	uxth	r2, r2
 8004310:	2a00      	cmp	r2, #0
 8004312:	f47f aeac 	bne.w	800406e <HAL_I2C_EV_IRQHandler+0x34a>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004316:	2908      	cmp	r1, #8
 8004318:	f000 809a 	beq.w	8004450 <HAL_I2C_EV_IRQHandler+0x72c>
 800431c:	2920      	cmp	r1, #32
 800431e:	f000 8097 	beq.w	8004450 <HAL_I2C_EV_IRQHandler+0x72c>
 8004322:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8004326:	f000 8093 	beq.w	8004450 <HAL_I2C_EV_IRQHandler+0x72c>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800432a:	2611      	movs	r6, #17
        hi2c->State = HAL_I2C_STATE_READY;
 800432c:	2520      	movs	r5, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800432e:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004336:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004338:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800433e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004342:	f7ff faa9 	bl	8003898 <HAL_I2C_MasterTxCpltCallback>
 8004346:	e51c      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004348:	9100      	str	r1, [sp, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	e515      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004356:	2a21      	cmp	r2, #33	; 0x21
 8004358:	f43f adcc 	beq.w	8003ef4 <HAL_I2C_EV_IRQHandler+0x1d0>
 800435c:	e5c4      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x1c4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435e:	9201      	str	r2, [sp, #4]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	9201      	str	r2, [sp, #4]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	9201      	str	r2, [sp, #4]
 8004368:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004370:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004372:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004374:	3301      	adds	r3, #1
 8004376:	6523      	str	r3, [r4, #80]	; 0x50
 8004378:	e503      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800437a:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800437c:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800437e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004382:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004384:	f43f aea5 	beq.w	80040d2 <HAL_I2C_EV_IRQHandler+0x3ae>
 8004388:	2902      	cmp	r1, #2
 800438a:	f43f aea2 	beq.w	80040d2 <HAL_I2C_EV_IRQHandler+0x3ae>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e69c      	b.n	80040d2 <HAL_I2C_EV_IRQHandler+0x3ae>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004398:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800439c:	f000 8104 	beq.w	80045a8 <HAL_I2C_EV_IRQHandler+0x884>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043a0:	2808      	cmp	r0, #8
 80043a2:	f000 80d2 	beq.w	800454a <HAL_I2C_EV_IRQHandler+0x826>
 80043a6:	2820      	cmp	r0, #32
 80043a8:	f000 80cf 	beq.w	800454a <HAL_I2C_EV_IRQHandler+0x826>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043ac:	2d12      	cmp	r5, #18
 80043ae:	f000 8145 	beq.w	800463c <HAL_I2C_EV_IRQHandler+0x918>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043b2:	2810      	cmp	r0, #16
 80043b4:	f200 8144 	bhi.w	8004640 <HAL_I2C_EV_IRQHandler+0x91c>
 80043b8:	4a53      	ldr	r2, [pc, #332]	; (8004508 <HAL_I2C_EV_IRQHandler+0x7e4>)
 80043ba:	fa22 f000 	lsr.w	r0, r2, r0
 80043be:	07c7      	lsls	r7, r0, #31
 80043c0:	f140 813e 	bpl.w	8004640 <HAL_I2C_EV_IRQHandler+0x91c>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ca:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043cc:	2200      	movs	r2, #0
 80043ce:	9205      	str	r2, [sp, #20]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	9205      	str	r2, [sp, #20]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	9b05      	ldr	r3, [sp, #20]
 80043da:	e729      	b.n	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043dc:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043de:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043e0:	f000 80de 	beq.w	80045a0 <HAL_I2C_EV_IRQHandler+0x87c>
 80043e4:	2910      	cmp	r1, #16
 80043e6:	f000 80db 	beq.w	80045a0 <HAL_I2C_EV_IRQHandler+0x87c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80043ea:	2904      	cmp	r1, #4
 80043ec:	f000 8117 	beq.w	800461e <HAL_I2C_EV_IRQHandler+0x8fa>
 80043f0:	2902      	cmp	r1, #2
 80043f2:	f000 8114 	beq.w	800461e <HAL_I2C_EV_IRQHandler+0x8fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fa:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80043fc:	2020      	movs	r0, #32
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004402:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8004404:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount--;
 8004408:	3b01      	subs	r3, #1
 800440a:	b29b      	uxth	r3, r3
 800440c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800440e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	6912      	ldr	r2, [r2, #16]
    hi2c->pBuffPtr++;
 8004412:	1c59      	adds	r1, r3, #1
 8004414:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	705a      	strb	r2, [r3, #1]
    hi2c->XferCount--;
 8004418:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800441a:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 800441c:	3b01      	subs	r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004422:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8004424:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->pBuffPtr++;
 800442a:	3201      	adds	r2, #1
 800442c:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800442e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004430:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004434:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	f000 80c9 	beq.w	80045d0 <HAL_I2C_EV_IRQHandler+0x8ac>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800443e:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004440:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004446:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004448:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800444a:	f7ff fa27 	bl	800389c <HAL_I2C_MasterRxCpltCallback>
 800444e:	e498      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004452:	2020      	movs	r0, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800445a:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004462:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004464:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004466:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800446a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800446e:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004470:	2b40      	cmp	r3, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004476:	f47f af64 	bne.w	8004342 <HAL_I2C_EV_IRQHandler+0x61e>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800447a:	f7ff fa19 	bl	80038b0 <HAL_I2C_MemTxCpltCallback>
 800447e:	e480      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004480:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004484:	2a40      	cmp	r2, #64	; 0x40
 8004486:	f47f adf2 	bne.w	800406e <HAL_I2C_EV_IRQHandler+0x34a>
 800448a:	e639      	b.n	8004100 <HAL_I2C_EV_IRQHandler+0x3dc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800448c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800448e:	2802      	cmp	r0, #2
 8004490:	f43f ac77 	beq.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 8004494:	2901      	cmp	r1, #1
 8004496:	f63f ac74 	bhi.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800449a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800449e:	481b      	ldr	r0, [pc, #108]	; (800450c <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 80044a0:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80044a2:	6802      	ldr	r2, [r0, #0]
 80044a4:	fbb2 f2f1 	udiv	r2, r2, r1
 80044a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80044ae:	e004      	b.n	80044ba <HAL_I2C_EV_IRQHandler+0x796>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80044b6:	f000 80c8 	beq.w	800464a <HAL_I2C_EV_IRQHandler+0x926>
    count--;
 80044ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044bc:	3a01      	subs	r2, #1
 80044be:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 80044c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044c2:	2900      	cmp	r1, #0
 80044c4:	d1f4      	bne.n	80044b0 <HAL_I2C_EV_IRQHandler+0x78c>
        hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	2520      	movs	r5, #32
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	432a      	orrs	r2, r5
 80044ce:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d0:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_ErrorCallback(hi2c);
 80044d2:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	7033      	strb	r3, [r6, #0]
        hi2c->XferCount--;
 80044de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80044e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80044e6:	3201      	adds	r2, #1
        hi2c->XferCount--;
 80044e8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80044ea:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044f4:	f7ff fa3c 	bl	8003970 <HAL_I2C_ErrorCallback>
 80044f8:	e443      	b.n	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 80044fa:	bf00      	nop
 80044fc:	08003ac5 	.word	0x08003ac5
 8004500:	ffff0000 	.word	0xffff0000
 8004504:	80008081 	.word	0x80008081
 8004508:	00010014 	.word	0x00010014
 800450c:	20000000 	.word	0x20000000
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004510:	2810      	cmp	r0, #16
 8004512:	d966      	bls.n	80045e2 <HAL_I2C_EV_IRQHandler+0x8be>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004514:	2100      	movs	r1, #0
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	9107      	str	r1, [sp, #28]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	9207      	str	r2, [sp, #28]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	9207      	str	r2, [sp, #28]
 8004528:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	0516      	lsls	r6, r2, #20
 8004536:	f57f ae7b 	bpl.w	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
 800453a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800453e:	d164      	bne.n	800460a <HAL_I2C_EV_IRQHandler+0x8e6>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004546:	605a      	str	r2, [r3, #4]
 8004548:	e672      	b.n	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454a:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004552:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004554:	9106      	str	r1, [sp, #24]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	9206      	str	r2, [sp, #24]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	9206      	str	r2, [sp, #24]
 800455e:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	e662      	b.n	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800456a:	2d08      	cmp	r5, #8
 800456c:	f43f af70 	beq.w	8004450 <HAL_I2C_EV_IRQHandler+0x72c>
 8004570:	2d20      	cmp	r5, #32
 8004572:	f43f af6d 	beq.w	8004450 <HAL_I2C_EV_IRQHandler+0x72c>
 8004576:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 800457a:	f43f af69 	beq.w	8004450 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800457e:	2611      	movs	r6, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8004582:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004584:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004586:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004588:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800458c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800458e:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004594:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004598:	f7ff f97e 	bl	8003898 <HAL_I2C_MasterTxCpltCallback>
 800459c:	f7ff bbf1 	b.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e729      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x6d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ae:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80045b6:	d036      	beq.n	8004626 <HAL_I2C_EV_IRQHandler+0x902>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b8:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c0:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	9103      	str	r1, [sp, #12]
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	9203      	str	r2, [sp, #12]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	9303      	str	r3, [sp, #12]
 80045cc:	9b03      	ldr	r3, [sp, #12]
 80045ce:	e62f      	b.n	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d0:	2300      	movs	r3, #0
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045d2:	4620      	mov	r0, r4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045d8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045da:	f7ff f9c7 	bl	800396c <HAL_I2C_MemRxCpltCallback>
 80045de:	f7ff bbd0 	b.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045e2:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <HAL_I2C_EV_IRQHandler+0x96c>)
 80045e4:	40c2      	lsrs	r2, r0
 80045e6:	43d2      	mvns	r2, r2
 80045e8:	f012 0201 	ands.w	r2, r2, #1
 80045ec:	d192      	bne.n	8004514 <HAL_I2C_EV_IRQHandler+0x7f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ee:	6819      	ldr	r1, [r3, #0]
 80045f0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80045f4:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f6:	9208      	str	r2, [sp, #32]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	9208      	str	r2, [sp, #32]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	9208      	str	r2, [sp, #32]
 8004600:	9a08      	ldr	r2, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	0515      	lsls	r5, r2, #20
 8004606:	f57f ae13 	bpl.w	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
 800460a:	3801      	subs	r0, #1
 800460c:	281f      	cmp	r0, #31
 800460e:	f63f ae0f 	bhi.w	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
 8004612:	4a20      	ldr	r2, [pc, #128]	; (8004694 <HAL_I2C_EV_IRQHandler+0x970>)
 8004614:	40c2      	lsrs	r2, r0
 8004616:	07d0      	lsls	r0, r2, #31
 8004618:	f57f ae0a 	bpl.w	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
 800461c:	e790      	b.n	8004540 <HAL_I2C_EV_IRQHandler+0x81c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	e6ea      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x6d8>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004626:	9204      	str	r2, [sp, #16]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	9204      	str	r2, [sp, #16]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	9204      	str	r2, [sp, #16]
 8004630:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e5f9      	b.n	8004230 <HAL_I2C_EV_IRQHandler+0x50c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800463c:	2801      	cmp	r0, #1
 800463e:	d184      	bne.n	800454a <HAL_I2C_EV_IRQHandler+0x826>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e6c0      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x6a8>
        hi2c->State = HAL_I2C_STATE_READY;
 800464a:	2020      	movs	r0, #32
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464c:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464e:	6a65      	ldr	r5, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004650:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004654:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800465c:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	702b      	strb	r3, [r5, #0]
        hi2c->XferCount--;
 8004662:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8004664:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004666:	3b01      	subs	r3, #1
 8004668:	b29b      	uxth	r3, r3
 800466a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800466c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004670:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8004674:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004676:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8004678:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800467a:	f47f aee1 	bne.w	8004440 <HAL_I2C_EV_IRQHandler+0x71c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800467e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004682:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8004684:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004686:	f7ff f971 	bl	800396c <HAL_I2C_MemRxCpltCallback>
 800468a:	f7ff bb7a 	b.w	8003d82 <HAL_I2C_EV_IRQHandler+0x5e>
 800468e:	bf00      	nop
 8004690:	00010014 	.word	0x00010014
 8004694:	80008081 	.word	0x80008081

08004698 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004698:	2800      	cmp	r0, #0
 800469a:	f000 81c3 	beq.w	8004a24 <HAL_RCC_OscConfig+0x38c>
{
 800469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a2:	6803      	ldr	r3, [r0, #0]
 80046a4:	4604      	mov	r4, r0
 80046a6:	07dd      	lsls	r5, r3, #31
{
 80046a8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046aa:	d535      	bpl.n	8004718 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046ac:	49a6      	ldr	r1, [pc, #664]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 80046ae:	684a      	ldr	r2, [r1, #4]
 80046b0:	f002 020c 	and.w	r2, r2, #12
 80046b4:	2a04      	cmp	r2, #4
 80046b6:	f000 80ef 	beq.w	8004898 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046ba:	684a      	ldr	r2, [r1, #4]
 80046bc:	f002 020c 	and.w	r2, r2, #12
 80046c0:	2a08      	cmp	r2, #8
 80046c2:	f000 80e5 	beq.w	8004890 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c6:	6863      	ldr	r3, [r4, #4]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046cc:	d010      	beq.n	80046f0 <HAL_RCC_OscConfig+0x58>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 810d 	beq.w	80048ee <HAL_RCC_OscConfig+0x256>
 80046d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d8:	f000 818f 	beq.w	80049fa <HAL_RCC_OscConfig+0x362>
 80046dc:	4b9a      	ldr	r3, [pc, #616]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e004      	b.n	80046fa <HAL_RCC_OscConfig+0x62>
 80046f0:	4a95      	ldr	r2, [pc, #596]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fe fa85 	bl	8002c08 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4e92      	ldr	r6, [pc, #584]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004700:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	e005      	b.n	8004710 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fe fa80 	bl	8002c08 <HAL_GetTick>
 8004708:	1b40      	subs	r0, r0, r5
 800470a:	2864      	cmp	r0, #100	; 0x64
 800470c:	f200 80eb 	bhi.w	80048e6 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	039a      	lsls	r2, r3, #14
 8004714:	d5f6      	bpl.n	8004704 <HAL_RCC_OscConfig+0x6c>
 8004716:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004718:	079f      	lsls	r7, r3, #30
 800471a:	d528      	bpl.n	800476e <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800471c:	4a8a      	ldr	r2, [pc, #552]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 800471e:	6851      	ldr	r1, [r2, #4]
 8004720:	f011 0f0c 	tst.w	r1, #12
 8004724:	f000 808e 	beq.w	8004844 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004728:	6851      	ldr	r1, [r2, #4]
 800472a:	f001 010c 	and.w	r1, r1, #12
 800472e:	2908      	cmp	r1, #8
 8004730:	f000 8084 	beq.w	800483c <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004734:	6923      	ldr	r3, [r4, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8125 	beq.w	8004986 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473c:	2201      	movs	r2, #1
 800473e:	4b83      	ldr	r3, [pc, #524]	; (800494c <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	4e81      	ldr	r6, [pc, #516]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 8004742:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004744:	f7fe fa60 	bl	8002c08 <HAL_GetTick>
 8004748:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474a:	e005      	b.n	8004758 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474c:	f7fe fa5c 	bl	8002c08 <HAL_GetTick>
 8004750:	1b40      	subs	r0, r0, r5
 8004752:	2802      	cmp	r0, #2
 8004754:	f200 80c7 	bhi.w	80048e6 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004758:	6833      	ldr	r3, [r6, #0]
 800475a:	0798      	lsls	r0, r3, #30
 800475c:	d5f6      	bpl.n	800474c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475e:	6833      	ldr	r3, [r6, #0]
 8004760:	6962      	ldr	r2, [r4, #20]
 8004762:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004766:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800476a:	6033      	str	r3, [r6, #0]
 800476c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476e:	071a      	lsls	r2, r3, #28
 8004770:	d41f      	bmi.n	80047b2 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004772:	075d      	lsls	r5, r3, #29
 8004774:	d541      	bpl.n	80047fa <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004776:	4b74      	ldr	r3, [pc, #464]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	00d0      	lsls	r0, r2, #3
 800477c:	d57d      	bpl.n	800487a <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 800477e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	4b73      	ldr	r3, [pc, #460]	; (8004950 <HAL_RCC_OscConfig+0x2b8>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	05d1      	lsls	r1, r2, #23
 8004786:	f140 809d 	bpl.w	80048c4 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478a:	68e3      	ldr	r3, [r4, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	f000 810b 	beq.w	80049a8 <HAL_RCC_OscConfig+0x310>
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80c5 	beq.w	8004922 <HAL_RCC_OscConfig+0x28a>
 8004798:	2b05      	cmp	r3, #5
 800479a:	4b6b      	ldr	r3, [pc, #428]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	f000 8139 	beq.w	8004a14 <HAL_RCC_OscConfig+0x37c>
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	621a      	str	r2, [r3, #32]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	f022 0204 	bic.w	r2, r2, #4
 80047ae:	621a      	str	r2, [r3, #32]
 80047b0:	e0ff      	b.n	80049b2 <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047b2:	69a3      	ldr	r3, [r4, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d050      	beq.n	800485a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80047b8:	2201      	movs	r2, #1
 80047ba:	4b66      	ldr	r3, [pc, #408]	; (8004954 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047bc:	4e62      	ldr	r6, [pc, #392]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 80047be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80047c0:	f7fe fa22 	bl	8002c08 <HAL_GetTick>
 80047c4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c6:	e005      	b.n	80047d4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c8:	f7fe fa1e 	bl	8002c08 <HAL_GetTick>
 80047cc:	1b40      	subs	r0, r0, r5
 80047ce:	2802      	cmp	r0, #2
 80047d0:	f200 8089 	bhi.w	80048e6 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80047d6:	079b      	lsls	r3, r3, #30
 80047d8:	d5f6      	bpl.n	80047c8 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047da:	4b5f      	ldr	r3, [pc, #380]	; (8004958 <HAL_RCC_OscConfig+0x2c0>)
 80047dc:	4a5f      	ldr	r2, [pc, #380]	; (800495c <HAL_RCC_OscConfig+0x2c4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	0a5b      	lsrs	r3, r3, #9
 80047e6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80047e8:	bf00      	nop
  }
  while (Delay --);
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	1e5a      	subs	r2, r3, #1
 80047ee:	9201      	str	r2, [sp, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f9      	bne.n	80047e8 <HAL_RCC_OscConfig+0x150>
 80047f4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f6:	075d      	lsls	r5, r3, #29
 80047f8:	d4bd      	bmi.n	8004776 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047fa:	69e0      	ldr	r0, [r4, #28]
 80047fc:	b1d0      	cbz	r0, 8004834 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047fe:	4d52      	ldr	r5, [pc, #328]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 8004800:	686a      	ldr	r2, [r5, #4]
 8004802:	f002 020c 	and.w	r2, r2, #12
 8004806:	2a08      	cmp	r2, #8
 8004808:	f000 80e6 	beq.w	80049d8 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	4a53      	ldr	r2, [pc, #332]	; (8004960 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004814:	f000 8108 	beq.w	8004a28 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8004818:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800481a:	f7fe f9f5 	bl	8002c08 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004820:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004822:	e004      	b.n	800482e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004824:	f7fe f9f0 	bl	8002c08 <HAL_GetTick>
 8004828:	1b40      	subs	r0, r0, r5
 800482a:	2802      	cmp	r0, #2
 800482c:	d85b      	bhi.n	80048e6 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	019b      	lsls	r3, r3, #6
 8004832:	d4f7      	bmi.n	8004824 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8004834:	2000      	movs	r0, #0
}
 8004836:	b002      	add	sp, #8
 8004838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800483c:	6852      	ldr	r2, [r2, #4]
 800483e:	03d6      	lsls	r6, r2, #15
 8004840:	f53f af78 	bmi.w	8004734 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004844:	4a40      	ldr	r2, [pc, #256]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	0795      	lsls	r5, r2, #30
 800484a:	d52f      	bpl.n	80048ac <HAL_RCC_OscConfig+0x214>
 800484c:	6922      	ldr	r2, [r4, #16]
 800484e:	2a01      	cmp	r2, #1
 8004850:	d02c      	beq.n	80048ac <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8004852:	2001      	movs	r0, #1
}
 8004854:	b002      	add	sp, #8
 8004856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800485a:	4a3e      	ldr	r2, [pc, #248]	; (8004954 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485c:	4e3a      	ldr	r6, [pc, #232]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 800485e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004860:	f7fe f9d2 	bl	8002c08 <HAL_GetTick>
 8004864:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004866:	e004      	b.n	8004872 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004868:	f7fe f9ce 	bl	8002c08 <HAL_GetTick>
 800486c:	1b40      	subs	r0, r0, r5
 800486e:	2802      	cmp	r0, #2
 8004870:	d839      	bhi.n	80048e6 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004872:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004874:	079f      	lsls	r7, r3, #30
 8004876:	d4f7      	bmi.n	8004868 <HAL_RCC_OscConfig+0x1d0>
 8004878:	e7bc      	b.n	80047f4 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800487a:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 800487c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004882:	61da      	str	r2, [r3, #28]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800488e:	e777      	b.n	8004780 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004890:	684a      	ldr	r2, [r1, #4]
 8004892:	03d0      	lsls	r0, r2, #15
 8004894:	f57f af17 	bpl.w	80046c6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	4a2b      	ldr	r2, [pc, #172]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	0391      	lsls	r1, r2, #14
 800489e:	f57f af3b 	bpl.w	8004718 <HAL_RCC_OscConfig+0x80>
 80048a2:	6862      	ldr	r2, [r4, #4]
 80048a4:	2a00      	cmp	r2, #0
 80048a6:	f47f af37 	bne.w	8004718 <HAL_RCC_OscConfig+0x80>
 80048aa:	e7d2      	b.n	8004852 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ac:	4926      	ldr	r1, [pc, #152]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 80048ae:	6960      	ldr	r0, [r4, #20]
 80048b0:	680a      	ldr	r2, [r1, #0]
 80048b2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80048b6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80048ba:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048bc:	071a      	lsls	r2, r3, #28
 80048be:	f57f af58 	bpl.w	8004772 <HAL_RCC_OscConfig+0xda>
 80048c2:	e776      	b.n	80047b2 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c4:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c6:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80048ce:	f7fe f99b 	bl	8002c08 <HAL_GetTick>
 80048d2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	05da      	lsls	r2, r3, #23
 80048d8:	f53f af57 	bmi.w	800478a <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048dc:	f7fe f994 	bl	8002c08 <HAL_GetTick>
 80048e0:	1b80      	subs	r0, r0, r6
 80048e2:	2864      	cmp	r0, #100	; 0x64
 80048e4:	d9f6      	bls.n	80048d4 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 80048e6:	2003      	movs	r0, #3
}
 80048e8:	b002      	add	sp, #8
 80048ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80048f6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f8:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004906:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004908:	f7fe f97e 	bl	8002c08 <HAL_GetTick>
 800490c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490e:	e004      	b.n	800491a <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004910:	f7fe f97a 	bl	8002c08 <HAL_GetTick>
 8004914:	1b40      	subs	r0, r0, r5
 8004916:	2864      	cmp	r0, #100	; 0x64
 8004918:	d8e5      	bhi.n	80048e6 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491a:	6833      	ldr	r3, [r6, #0]
 800491c:	039b      	lsls	r3, r3, #14
 800491e:	d4f7      	bmi.n	8004910 <HAL_RCC_OscConfig+0x278>
 8004920:	e6f9      	b.n	8004716 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004926:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800492a:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492c:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	621a      	str	r2, [r3, #32]
 8004934:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493a:	f022 0204 	bic.w	r2, r2, #4
 800493e:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8004940:	f7fe f962 	bl	8002c08 <HAL_GetTick>
 8004944:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004946:	e012      	b.n	800496e <HAL_RCC_OscConfig+0x2d6>
 8004948:	40021000 	.word	0x40021000
 800494c:	42420000 	.word	0x42420000
 8004950:	40007000 	.word	0x40007000
 8004954:	42420480 	.word	0x42420480
 8004958:	20000000 	.word	0x20000000
 800495c:	10624dd3 	.word	0x10624dd3
 8004960:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004964:	f7fe f950 	bl	8002c08 <HAL_GetTick>
 8004968:	1b80      	subs	r0, r0, r6
 800496a:	4540      	cmp	r0, r8
 800496c:	d8bb      	bhi.n	80048e6 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	0798      	lsls	r0, r3, #30
 8004972:	d4f7      	bmi.n	8004964 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8004974:	2d00      	cmp	r5, #0
 8004976:	f43f af40 	beq.w	80047fa <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 800497a:	4a44      	ldr	r2, [pc, #272]	; (8004a8c <HAL_RCC_OscConfig+0x3f4>)
 800497c:	69d3      	ldr	r3, [r2, #28]
 800497e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004982:	61d3      	str	r3, [r2, #28]
 8004984:	e739      	b.n	80047fa <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8004986:	4a42      	ldr	r2, [pc, #264]	; (8004a90 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004988:	4e40      	ldr	r6, [pc, #256]	; (8004a8c <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 800498a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800498c:	f7fe f93c 	bl	8002c08 <HAL_GetTick>
 8004990:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	e004      	b.n	800499e <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004994:	f7fe f938 	bl	8002c08 <HAL_GetTick>
 8004998:	1b40      	subs	r0, r0, r5
 800499a:	2802      	cmp	r0, #2
 800499c:	d8a3      	bhi.n	80048e6 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499e:	6833      	ldr	r3, [r6, #0]
 80049a0:	0799      	lsls	r1, r3, #30
 80049a2:	d4f7      	bmi.n	8004994 <HAL_RCC_OscConfig+0x2fc>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	e6e2      	b.n	800476e <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a8:	4a38      	ldr	r2, [pc, #224]	; (8004a8c <HAL_RCC_OscConfig+0x3f4>)
 80049aa:	6a13      	ldr	r3, [r2, #32]
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80049b2:	f7fe f929 	bl	8002c08 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80049ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049bc:	4f33      	ldr	r7, [pc, #204]	; (8004a8c <HAL_RCC_OscConfig+0x3f4>)
 80049be:	e004      	b.n	80049ca <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fe f922 	bl	8002c08 <HAL_GetTick>
 80049c4:	1b80      	subs	r0, r0, r6
 80049c6:	4540      	cmp	r0, r8
 80049c8:	d88d      	bhi.n	80048e6 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	079b      	lsls	r3, r3, #30
 80049ce:	d5f7      	bpl.n	80049c0 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 80049d0:	2d00      	cmp	r5, #0
 80049d2:	f43f af12 	beq.w	80047fa <HAL_RCC_OscConfig+0x162>
 80049d6:	e7d0      	b.n	800497a <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d8:	2801      	cmp	r0, #1
 80049da:	f43f af2c 	beq.w	8004836 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 80049de:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e0:	6a22      	ldr	r2, [r4, #32]
 80049e2:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80049e6:	4291      	cmp	r1, r2
 80049e8:	f47f af33 	bne.w	8004852 <HAL_RCC_OscConfig+0x1ba>
 80049ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049ee:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80049f2:	1a18      	subs	r0, r3, r0
 80049f4:	bf18      	it	ne
 80049f6:	2001      	movne	r0, #1
 80049f8:	e71d      	b.n	8004836 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049fe:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e672      	b.n	80046fa <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a14:	f042 0204 	orr.w	r2, r2, #4
 8004a18:	621a      	str	r2, [r3, #32]
 8004a1a:	6a1a      	ldr	r2, [r3, #32]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	621a      	str	r2, [r3, #32]
 8004a22:	e7c6      	b.n	80049b2 <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8004a24:	2001      	movs	r0, #1
}
 8004a26:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8004a28:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8004a2a:	f7fe f8ed 	bl	8002c08 <HAL_GetTick>
 8004a2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a30:	e005      	b.n	8004a3e <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a32:	f7fe f8e9 	bl	8002c08 <HAL_GetTick>
 8004a36:	1b80      	subs	r0, r0, r6
 8004a38:	2802      	cmp	r0, #2
 8004a3a:	f63f af54 	bhi.w	80048e6 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a3e:	682b      	ldr	r3, [r5, #0]
 8004a40:	0199      	lsls	r1, r3, #6
 8004a42:	d4f6      	bmi.n	8004a32 <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a44:	6a23      	ldr	r3, [r4, #32]
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a4c:	686a      	ldr	r2, [r5, #4]
 8004a4e:	68a1      	ldr	r1, [r4, #8]
 8004a50:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004a54:	430a      	orrs	r2, r1
 8004a56:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004a58:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5a:	4d0c      	ldr	r5, [pc, #48]	; (8004a8c <HAL_RCC_OscConfig+0x3f4>)
 8004a5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a5e:	686a      	ldr	r2, [r5, #4]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8004a66:	490b      	ldr	r1, [pc, #44]	; (8004a94 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004a6c:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8004a6e:	f7fe f8cb 	bl	8002c08 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a72:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004a74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a76:	e005      	b.n	8004a84 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fe f8c6 	bl	8002c08 <HAL_GetTick>
 8004a7c:	1b40      	subs	r0, r0, r5
 8004a7e:	2802      	cmp	r0, #2
 8004a80:	f63f af31 	bhi.w	80048e6 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	019a      	lsls	r2, r3, #6
 8004a88:	d5f6      	bpl.n	8004a78 <HAL_RCC_OscConfig+0x3e0>
 8004a8a:	e6d3      	b.n	8004834 <HAL_RCC_OscConfig+0x19c>
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	42420000 	.word	0x42420000
 8004a94:	42420060 	.word	0x42420060

08004a98 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	f000 80af 	beq.w	8004bfc <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a9e:	4a5d      	ldr	r2, [pc, #372]	; (8004c14 <HAL_RCC_ClockConfig+0x17c>)
{
 8004aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	6813      	ldr	r3, [r2, #0]
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	428b      	cmp	r3, r1
 8004aae:	460d      	mov	r5, r1
{
 8004ab0:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab2:	d20d      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab4:	6813      	ldr	r3, [r2, #0]
 8004ab6:	f023 0307 	bic.w	r3, r3, #7
 8004aba:	430b      	orrs	r3, r1
 8004abc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	6813      	ldr	r3, [r2, #0]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	428b      	cmp	r3, r1
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8004ac8:	2001      	movs	r0, #1
}
 8004aca:	b006      	add	sp, #24
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	0798      	lsls	r0, r3, #30
 8004ad4:	d514      	bpl.n	8004b00 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad6:	0759      	lsls	r1, r3, #29
 8004ad8:	d504      	bpl.n	8004ae4 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ada:	494f      	ldr	r1, [pc, #316]	; (8004c18 <HAL_RCC_ClockConfig+0x180>)
 8004adc:	684a      	ldr	r2, [r1, #4]
 8004ade:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004ae2:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae4:	071a      	lsls	r2, r3, #28
 8004ae6:	d504      	bpl.n	8004af2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae8:	494b      	ldr	r1, [pc, #300]	; (8004c18 <HAL_RCC_ClockConfig+0x180>)
 8004aea:	684a      	ldr	r2, [r1, #4]
 8004aec:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004af0:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af2:	4949      	ldr	r1, [pc, #292]	; (8004c18 <HAL_RCC_ClockConfig+0x180>)
 8004af4:	68a0      	ldr	r0, [r4, #8]
 8004af6:	684a      	ldr	r2, [r1, #4]
 8004af8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004afc:	4302      	orrs	r2, r0
 8004afe:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b00:	07db      	lsls	r3, r3, #31
 8004b02:	d520      	bpl.n	8004b46 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b04:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	4b44      	ldr	r3, [pc, #272]	; (8004c18 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b08:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0c:	d078      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0e:	2a02      	cmp	r2, #2
 8004b10:	d071      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b12:	0798      	lsls	r0, r3, #30
 8004b14:	d5d8      	bpl.n	8004ac8 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b16:	4e40      	ldr	r6, [pc, #256]	; (8004c18 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b18:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1c:	6873      	ldr	r3, [r6, #4]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	4313      	orrs	r3, r2
 8004b24:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004b26:	f7fe f86f 	bl	8002c08 <HAL_GetTick>
 8004b2a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2c:	e004      	b.n	8004b38 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2e:	f7fe f86b 	bl	8002c08 <HAL_GetTick>
 8004b32:	1bc0      	subs	r0, r0, r7
 8004b34:	4540      	cmp	r0, r8
 8004b36:	d866      	bhi.n	8004c06 <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b38:	6873      	ldr	r3, [r6, #4]
 8004b3a:	6862      	ldr	r2, [r4, #4]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b44:	d1f3      	bne.n	8004b2e <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b46:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <HAL_RCC_ClockConfig+0x17c>)
 8004b48:	6813      	ldr	r3, [r2, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	42ab      	cmp	r3, r5
 8004b50:	d909      	bls.n	8004b66 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	6813      	ldr	r3, [r2, #0]
 8004b54:	f023 0307 	bic.w	r3, r3, #7
 8004b58:	432b      	orrs	r3, r5
 8004b5a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5c:	6813      	ldr	r3, [r2, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	42ab      	cmp	r3, r5
 8004b64:	d1b0      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	0759      	lsls	r1, r3, #29
 8004b6a:	d506      	bpl.n	8004b7a <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6c:	492a      	ldr	r1, [pc, #168]	; (8004c18 <HAL_RCC_ClockConfig+0x180>)
 8004b6e:	68e0      	ldr	r0, [r4, #12]
 8004b70:	684a      	ldr	r2, [r1, #4]
 8004b72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b76:	4302      	orrs	r2, r0
 8004b78:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7a:	071a      	lsls	r2, r3, #28
 8004b7c:	d507      	bpl.n	8004b8e <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b7e:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <HAL_RCC_ClockConfig+0x180>)
 8004b80:	6921      	ldr	r1, [r4, #16]
 8004b82:	6853      	ldr	r3, [r2, #4]
 8004b84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004b8c:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b8e:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b92:	4b22      	ldr	r3, [pc, #136]	; (8004c1c <HAL_RCC_ClockConfig+0x184>)
 8004b94:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b96:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b9c:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004ba0:	491d      	ldr	r1, [pc, #116]	; (8004c18 <HAL_RCC_ClockConfig+0x180>)
 8004ba2:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004ba4:	f002 030c 	and.w	r3, r2, #12
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d011      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8004bac:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bae:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <HAL_RCC_ClockConfig+0x180>)
 8004bb0:	481c      	ldr	r0, [pc, #112]	; (8004c24 <HAL_RCC_ClockConfig+0x18c>)
 8004bb2:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004bb4:	491c      	ldr	r1, [pc, #112]	; (8004c28 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bb6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004bba:	5c80      	ldrb	r0, [r0, r2]
 8004bbc:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <HAL_RCC_ClockConfig+0x194>)
 8004bbe:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8004bc0:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bc2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004bc4:	f7fd ffde 	bl	8002b84 <HAL_InitTick>
  return HAL_OK;
 8004bc8:	2000      	movs	r0, #0
}
 8004bca:	b006      	add	sp, #24
 8004bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bd0:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8004bd4:	4423      	add	r3, r4
 8004bd6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bda:	03d3      	lsls	r3, r2, #15
 8004bdc:	d515      	bpl.n	8004c0a <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bde:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004be2:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004be6:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bea:	4422      	add	r2, r4
 8004bec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bf4:	e7db      	b.n	8004bae <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf6:	019e      	lsls	r6, r3, #6
 8004bf8:	d48d      	bmi.n	8004b16 <HAL_RCC_ClockConfig+0x7e>
 8004bfa:	e765      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8004bfc:	2001      	movs	r0, #1
}
 8004bfe:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c00:	039f      	lsls	r7, r3, #14
 8004c02:	d488      	bmi.n	8004b16 <HAL_RCC_ClockConfig+0x7e>
 8004c04:	e760      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8004c06:	2003      	movs	r0, #3
 8004c08:	e75f      	b.n	8004aca <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x198>)
 8004c0c:	fb03 f300 	mul.w	r3, r3, r0
 8004c10:	e7cd      	b.n	8004bae <HAL_RCC_ClockConfig+0x116>
 8004c12:	bf00      	nop
 8004c14:	40022000 	.word	0x40022000
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	080067a8 	.word	0x080067a8
 8004c20:	007a1200 	.word	0x007a1200
 8004c24:	08005488 	.word	0x08005488
 8004c28:	200008a0 	.word	0x200008a0
 8004c2c:	20000000 	.word	0x20000000
 8004c30:	003d0900 	.word	0x003d0900

08004c34 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004c36:	4905      	ldr	r1, [pc, #20]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004c38:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c3c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c40:	5ccb      	ldrb	r3, [r1, r3]
 8004c42:	6810      	ldr	r0, [r2, #0]
}
 8004c44:	40d8      	lsrs	r0, r3
 8004c46:	4770      	bx	lr
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	08005498 	.word	0x08005498
 8004c50:	20000000 	.word	0x20000000

08004c54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004c56:	4905      	ldr	r1, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004c58:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8004c5a:	4a05      	ldr	r2, [pc, #20]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c5c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c60:	5ccb      	ldrb	r3, [r1, r3]
 8004c62:	6810      	ldr	r0, [r2, #0]
}
 8004c64:	40d8      	lsrs	r0, r3
 8004c66:	4770      	bx	lr
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	08005498 	.word	0x08005498
 8004c70:	20000000 	.word	0x20000000

08004c74 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d055      	beq.n	8004d24 <HAL_SPI_Init+0xb0>
{
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d041      	beq.n	8004d06 <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c82:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c84:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c88:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c8a:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c8e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c90:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d03c      	beq.n	8004d12 <HAL_SPI_Init+0x9e>
 8004c98:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c9a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004c9e:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8004ca0:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ca2:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca4:	68e1      	ldr	r1, [r4, #12]
 8004ca6:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8004caa:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004cae:	4303      	orrs	r3, r0
 8004cb0:	6920      	ldr	r0, [r4, #16]
 8004cb2:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8004cb6:	4038      	ands	r0, r7
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6961      	ldr	r1, [r4, #20]
 8004cbc:	4303      	orrs	r3, r0
 8004cbe:	69a0      	ldr	r0, [r4, #24]
 8004cc0:	4031      	ands	r1, r6
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004ccc:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cd0:	6a27      	ldr	r7, [r4, #32]
 8004cd2:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8004cdc:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cde:	433b      	orrs	r3, r7
 8004ce0:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8004ce2:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ce4:	0c00      	lsrs	r0, r0, #16
 8004ce6:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8004cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cee:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cf0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004cf2:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf4:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 8004cf6:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cfc:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cfe:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d00:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8004d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d06:	6842      	ldr	r2, [r0, #4]
 8004d08:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004d0c:	d0bc      	beq.n	8004c88 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d0e:	61c3      	str	r3, [r0, #28]
 8004d10:	e7ba      	b.n	8004c88 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8004d12:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004d16:	4620      	mov	r0, r4
 8004d18:	f7fb fdb8 	bl	800088c <HAL_SPI_MspInit>
 8004d1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d22:	e7ba      	b.n	8004c9a <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8004d24:	2001      	movs	r0, #1
}
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d05d      	beq.n	8004de8 <HAL_TIM_Base_Init+0xc0>
{
 8004d2c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d32:	4604      	mov	r4, r0
 8004d34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d03c      	beq.n	8004db6 <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d40:	492a      	ldr	r1, [pc, #168]	; (8004dec <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004d42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d46:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004d48:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d4a:	d039      	beq.n	8004dc0 <HAL_TIM_Base_Init+0x98>
 8004d4c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004d50:	d028      	beq.n	8004da4 <HAL_TIM_Base_Init+0x7c>
 8004d52:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004d56:	428a      	cmp	r2, r1
 8004d58:	d024      	beq.n	8004da4 <HAL_TIM_Base_Init+0x7c>
 8004d5a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d5e:	428a      	cmp	r2, r1
 8004d60:	d020      	beq.n	8004da4 <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d62:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d64:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d66:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d6c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004d6e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d70:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d72:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d74:	2301      	movs	r3, #1
 8004d76:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d78:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004d80:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004d84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004d88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004da0:	2000      	movs	r0, #0
}
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004da4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004daa:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dac:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db2:	430b      	orrs	r3, r1
 8004db4:	e7d5      	b.n	8004d62 <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 8004db6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004dba:	f7fb fd9b 	bl	80008f4 <HAL_TIM_Base_MspInit>
 8004dbe:	e7bd      	b.n	8004d3c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004dc0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004dc6:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dce:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	69a1      	ldr	r1, [r4, #24]
 8004dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004dd8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dda:	68e3      	ldr	r3, [r4, #12]
 8004ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004de2:	6963      	ldr	r3, [r4, #20]
 8004de4:	6313      	str	r3, [r2, #48]	; 0x30
 8004de6:	e7c5      	b.n	8004d74 <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 8004de8:	2001      	movs	r0, #1
}
 8004dea:	4770      	bx	lr
 8004dec:	40012c00 	.word	0x40012c00

08004df0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004df0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d11f      	bne.n	8004e38 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dfa:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e00:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e02:	490f      	ldr	r1, [pc, #60]	; (8004e40 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e04:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e08:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e0a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0c:	d009      	beq.n	8004e22 <HAL_TIM_Base_Start_IT+0x32>
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e12:	d006      	beq.n	8004e22 <HAL_TIM_Base_Start_IT+0x32>
 8004e14:	4a0b      	ldr	r2, [pc, #44]	; (8004e44 <HAL_TIM_Base_Start_IT+0x54>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_Base_Start_IT+0x32>
 8004e1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d104      	bne.n	8004e2c <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e28:	2a06      	cmp	r2, #6
 8004e2a:	d007      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8004e2c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004e2e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	4770      	bx	lr
    return HAL_ERROR;
 8004e38:	2001      	movs	r0, #1
 8004e3a:	4770      	bx	lr
  return HAL_OK;
 8004e3c:	2000      	movs	r0, #0
}
 8004e3e:	4770      	bx	lr
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40000400 	.word	0x40000400

08004e48 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004e48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d074      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0xf2>
{
 8004e50:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004e52:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004e54:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 8004e56:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8004e58:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004e60:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004e62:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e64:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8004e68:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004e6c:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004e6e:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004e70:	d065      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0xf6>
 8004e72:	d831      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x90>
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d048      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0xc2>
 8004e78:	d921      	bls.n	8004ebe <HAL_TIM_ConfigClockSource+0x76>
 8004e7a:	2b50      	cmp	r3, #80	; 0x50
 8004e7c:	d116      	bne.n	8004eac <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e7e:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e80:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e84:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e88:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8a:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8c:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e8e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e96:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004e9a:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e9c:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004e9e:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea0:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eaa:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8004eac:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004eae:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8004eb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8004eb8:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004eba:	4618      	mov	r0, r3
}
 8004ebc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d002      	beq.n	8004ec8 <HAL_TIM_ConfigClockSource+0x80>
 8004ec2:	d91e      	bls.n	8004f02 <HAL_TIM_ConfigClockSource+0xba>
 8004ec4:	2b30      	cmp	r3, #48	; 0x30
 8004ec6:	d1f1      	bne.n	8004eac <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8004ec8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eca:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004ed4:	6093      	str	r3, [r2, #8]
}
 8004ed6:	e7e9      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004ed8:	2b70      	cmp	r3, #112	; 0x70
 8004eda:	d049      	beq.n	8004f70 <HAL_TIM_ConfigClockSource+0x128>
 8004edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee0:	d1e4      	bne.n	8004eac <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8004ee6:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004ee8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eea:	432b      	orrs	r3, r5
 8004eec:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef6:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef8:	6893      	ldr	r3, [r2, #8]
 8004efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004efe:	6093      	str	r3, [r2, #8]
      break;
 8004f00:	e7d4      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004f02:	f033 0110 	bics.w	r1, r3, #16
 8004f06:	d1d1      	bne.n	8004eac <HAL_TIM_ConfigClockSource+0x64>
 8004f08:	e7de      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8004f0a:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0c:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0e:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f10:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f14:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f16:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f18:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1a:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f22:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004f26:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8004f28:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004f2a:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004f2c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f32:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004f36:	6093      	str	r3, [r2, #8]
}
 8004f38:	e7b8      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8004f3a:	2002      	movs	r0, #2
}
 8004f3c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f3e:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f40:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f42:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f46:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f48:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4a:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8004f4c:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f56:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f5a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004f5e:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004f60:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004f62:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f68:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004f6c:	6093      	str	r3, [r2, #8]
}
 8004f6e:	e79d      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f70:	68cc      	ldr	r4, [r1, #12]
 8004f72:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004f76:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f78:	432b      	orrs	r3, r5
 8004f7a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f7e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f82:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004f84:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004f86:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004f8c:	6093      	str	r3, [r2, #8]
      break;
 8004f8e:	e78d      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x64>

08004f90 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d026      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f9a:	6803      	ldr	r3, [r0, #0]
{
 8004f9c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004fa2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa4:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa6:	4d11      	ldr	r5, [pc, #68]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fac:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fae:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004fb2:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb4:	d009      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d006      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004fbc:	4a0c      	ldr	r2, [pc, #48]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d104      	bne.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fca:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fcc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fd0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004fd4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004fd6:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8004fd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8004fe0:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004fe2:	4618      	mov	r0, r3
}
 8004fe4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004fe6:	2002      	movs	r0, #2
}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40000400 	.word	0x40000400

08004ff4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d061      	beq.n	80050bc <HAL_UART_Init+0xc8>
{
 8004ff8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ffa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ffe:	4604      	mov	r4, r0
 8005000:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005004:	2b00      	cmp	r3, #0
 8005006:	d051      	beq.n	80050ac <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005008:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800500a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800500c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005010:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005012:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8005014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005018:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800501a:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800501c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800501e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005022:	4301      	orrs	r1, r0
 8005024:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005026:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005028:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 800502c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005030:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8005032:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005036:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005038:	430a      	orrs	r2, r1
 800503a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800503c:	695a      	ldr	r2, [r3, #20]
 800503e:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8005040:	491f      	ldr	r1, [pc, #124]	; (80050c0 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005042:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005046:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8005048:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800504a:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 800504c:	d033      	beq.n	80050b6 <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800504e:	f7ff fdf1 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005052:	6863      	ldr	r3, [r4, #4]
 8005054:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005058:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005062:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8005066:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005068:	4816      	ldr	r0, [pc, #88]	; (80050c4 <HAL_UART_Init+0xd0>)
 800506a:	fba0 c103 	umull	ip, r1, r0, r3
 800506e:	0949      	lsrs	r1, r1, #5
 8005070:	fb02 3311 	mls	r3, r2, r1, r3
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	3332      	adds	r3, #50	; 0x32
 8005078:	fba0 2303 	umull	r2, r3, r0, r3
 800507c:	0109      	lsls	r1, r1, #4
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8005084:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005086:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8005088:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800508a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800508e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005090:	6953      	ldr	r3, [r2, #20]
 8005092:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005096:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005098:	68d3      	ldr	r3, [r2, #12]
 800509a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800509e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a0:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050a2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80050ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80050b0:	f7fb fc3e 	bl	8000930 <HAL_UART_MspInit>
 80050b4:	e7a8      	b.n	8005008 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 80050b6:	f7ff fdcd 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 80050ba:	e7ca      	b.n	8005052 <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 80050bc:	2001      	movs	r0, #1
}
 80050be:	4770      	bx	lr
 80050c0:	40013800 	.word	0x40013800
 80050c4:	51eb851f 	.word	0x51eb851f

080050c8 <__libc_init_array>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	2600      	movs	r6, #0
 80050cc:	4d0c      	ldr	r5, [pc, #48]	; (8005100 <__libc_init_array+0x38>)
 80050ce:	4c0d      	ldr	r4, [pc, #52]	; (8005104 <__libc_init_array+0x3c>)
 80050d0:	1b64      	subs	r4, r4, r5
 80050d2:	10a4      	asrs	r4, r4, #2
 80050d4:	42a6      	cmp	r6, r4
 80050d6:	d109      	bne.n	80050ec <__libc_init_array+0x24>
 80050d8:	f000 f842 	bl	8005160 <_init>
 80050dc:	2600      	movs	r6, #0
 80050de:	4d0a      	ldr	r5, [pc, #40]	; (8005108 <__libc_init_array+0x40>)
 80050e0:	4c0a      	ldr	r4, [pc, #40]	; (800510c <__libc_init_array+0x44>)
 80050e2:	1b64      	subs	r4, r4, r5
 80050e4:	10a4      	asrs	r4, r4, #2
 80050e6:	42a6      	cmp	r6, r4
 80050e8:	d105      	bne.n	80050f6 <__libc_init_array+0x2e>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f0:	4798      	blx	r3
 80050f2:	3601      	adds	r6, #1
 80050f4:	e7ee      	b.n	80050d4 <__libc_init_array+0xc>
 80050f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fa:	4798      	blx	r3
 80050fc:	3601      	adds	r6, #1
 80050fe:	e7f2      	b.n	80050e6 <__libc_init_array+0x1e>
 8005100:	080067bc 	.word	0x080067bc
 8005104:	080067bc 	.word	0x080067bc
 8005108:	080067bc 	.word	0x080067bc
 800510c:	080067c0 	.word	0x080067c0

08005110 <memset>:
 8005110:	4603      	mov	r3, r0
 8005112:	4402      	add	r2, r0
 8005114:	4293      	cmp	r3, r2
 8005116:	d100      	bne.n	800511a <memset+0xa>
 8005118:	4770      	bx	lr
 800511a:	f803 1b01 	strb.w	r1, [r3], #1
 800511e:	e7f9      	b.n	8005114 <memset+0x4>

08005120 <stpcpy>:
 8005120:	4603      	mov	r3, r0
 8005122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005126:	4618      	mov	r0, r3
 8005128:	f803 2b01 	strb.w	r2, [r3], #1
 800512c:	2a00      	cmp	r2, #0
 800512e:	d1f8      	bne.n	8005122 <stpcpy+0x2>
 8005130:	4770      	bx	lr

08005132 <strcat>:
 8005132:	4602      	mov	r2, r0
 8005134:	b510      	push	{r4, lr}
 8005136:	7814      	ldrb	r4, [r2, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	3201      	adds	r2, #1
 800513c:	2c00      	cmp	r4, #0
 800513e:	d1fa      	bne.n	8005136 <strcat+0x4>
 8005140:	3b01      	subs	r3, #1
 8005142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800514a:	2a00      	cmp	r2, #0
 800514c:	d1f9      	bne.n	8005142 <strcat+0x10>
 800514e:	bd10      	pop	{r4, pc}

08005150 <strcpy>:
 8005150:	4603      	mov	r3, r0
 8005152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005156:	f803 2b01 	strb.w	r2, [r3], #1
 800515a:	2a00      	cmp	r2, #0
 800515c:	d1f9      	bne.n	8005152 <strcpy+0x2>
 800515e:	4770      	bx	lr

08005160 <_init>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	bf00      	nop
 8005164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005166:	bc08      	pop	{r3}
 8005168:	469e      	mov	lr, r3
 800516a:	4770      	bx	lr

0800516c <_fini>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	bf00      	nop
 8005170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005172:	bc08      	pop	{r3}
 8005174:	469e      	mov	lr, r3
 8005176:	4770      	bx	lr
