
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  080045c0  080045c0  000145c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005064  08005064  000202b4  2**0
                  CONTENTS
  4 .ARM          00000000  08005064  08005064  000202b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005064  08005064  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  0800506c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd0  200002b4  08005320  000202b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001084  08005320  00021084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de40  00000000  00000000  000202dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a29  00000000  00000000  0003e11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000166c3  00000000  00000000  00041b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  00058210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003668  00000000  00000000  00059038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b95  00000000  00000000  0005c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206ec  00000000  00000000  00075235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e7f2  00000000  00000000  00095921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00124113  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003768  00000000  00000000  00124168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002b4 	.word	0x200002b4
 8000128:	00000000 	.word	0x00000000
 800012c:	080045a8 	.word	0x080045a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002b8 	.word	0x200002b8
 8000148:	080045a8 	.word	0x080045a8

0800014c <init_audio_out>:
 */

#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	audio_spi = hspi->Instance;
 800014c:	6803      	ldr	r3, [r0, #0]
void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
 800014e:	b510      	push	{r4, lr}
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000150:	681a      	ldr	r2, [r3, #0]
	audio_spi = hspi->Instance;
 8000152:	4c06      	ldr	r4, [pc, #24]	; (800016c <init_audio_out+0x20>)
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	audio_spi = hspi->Instance;
 8000158:	6023      	str	r3, [r4, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015a:	4608      	mov	r0, r1
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 800015c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015e:	f003 fea9 	bl	8003eb4 <HAL_TIM_Base_Start_IT>
	output_volume = 0x3800;
 8000162:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000166:	4b02      	ldr	r3, [pc, #8]	; (8000170 <init_audio_out+0x24>)
 8000168:	801a      	strh	r2, [r3, #0]
}
 800016a:	bd10      	pop	{r4, pc}
 800016c:	200004a8 	.word	0x200004a8
 8000170:	200004c8 	.word	0x200004c8

08000174 <update_volume>:

void update_volume() {
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin low
 8000174:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
void update_volume() {
 8000178:	b510      	push	{r4, lr}
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin low
 800017a:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <update_volume+0x38>)
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 800017c:	4c0c      	ldr	r4, [pc, #48]	; (80001b0 <update_volume+0x3c>)
 800017e:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <update_volume+0x40>)
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin low
 8000180:	6111      	str	r1, [r2, #16]
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	8822      	ldrh	r2, [r4, #0]
 8000186:	60da      	str	r2, [r3, #12]
	output_volume = synth_sample();
 8000188:	f001 f84c 	bl	8001224 <synth_sample>
 800018c:	b280      	uxth	r0, r0
	if (output_volume > 0x0FFF) {					//max possible volume with 12-bit dac
 800018e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000192:	bf28      	it	cs
 8000194:	f643 70ff 	movwcs	r0, #16383	; 0x3fff
		output_volume = 0x0FFF;
	}
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 8000198:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <update_volume+0x38>)
 800019e:	bf38      	it	cc
 80001a0:	f440 5040 	orrcc.w	r0, r0, #12288	; 0x3000
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 80001a4:	8020      	strh	r0, [r4, #0]
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 80001a6:	611a      	str	r2, [r3, #16]
}
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800
 80001b0:	200004c8 	.word	0x200004c8
 80001b4:	200004a8 	.word	0x200004a8

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001bc:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001be:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2601      	movs	r6, #1
 80001c2:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001c4:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001c8:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001cc:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001d4:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001dc:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001de:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e4:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e6:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e8:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f003 fab7 	bl	800375c <HAL_RCC_OscConfig>
 80001ee:	b108      	cbz	r0, 80001f4 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f6:	f04f 080f 	mov.w	r8, #15
 80001fa:	f04f 0902 	mov.w	r9, #2
 80001fe:	2600      	movs	r6, #0
 8000200:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000204:	4621      	mov	r1, r4
 8000206:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000208:	e9cd 8900 	strd	r8, r9, [sp]
 800020c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000212:	f003 fca3 	bl	8003b5c <HAL_RCC_ClockConfig>
 8000216:	b108      	cbz	r0, 800021c <SystemClock_Config+0x64>
 8000218:	b672      	cpsid	i
  while (1)
 800021a:	e7fe      	b.n	800021a <SystemClock_Config+0x62>
}
 800021c:	b010      	add	sp, #64	; 0x40
 800021e:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8000222:	bf00      	nop

08000224 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000224:	2500      	movs	r5, #0
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800022a:	f001 fd05 	bl	8001c38 <HAL_Init>
  SystemClock_Config();
 800022e:	f7ff ffc3 	bl	80001b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000232:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8000236:	e9cd 5508 	strd	r5, r5, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	4c6f      	ldr	r4, [pc, #444]	; (80003f8 <main+0x1d4>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000240:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	61a3      	str	r3, [r4, #24]
 8000248:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800024a:	486c      	ldr	r0, [pc, #432]	; (80003fc <main+0x1d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	f003 0304 	and.w	r3, r3, #4
 8000250:	9302      	str	r3, [sp, #8]
 8000252:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000254:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000256:	2610      	movs	r6, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	61a3      	str	r3, [r4, #24]
 800025e:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000260:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000262:	f003 0308 	and.w	r3, r3, #8
 8000266:	9303      	str	r3, [sp, #12]
 8000268:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800026a:	f002 f80f 	bl	800228c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800026e:	2200      	movs	r2, #0
 8000270:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000272:	4862      	ldr	r0, [pc, #392]	; (80003fc <main+0x1d8>)
 8000274:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000276:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800027a:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027e:	f001 fef9 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000282:	f24f 0678 	movw	r6, #61560	; 0xf078
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000286:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000288:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028a:	485d      	ldr	r0, [pc, #372]	; (8000400 <main+0x1dc>)
 800028c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800028e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000290:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000294:	f001 feee 	bl	8002074 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000298:	f44f 7260 	mov.w	r2, #896	; 0x380
 800029c:	4b59      	ldr	r3, [pc, #356]	; (8000404 <main+0x1e0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029e:	4858      	ldr	r0, [pc, #352]	; (8000400 <main+0x1dc>)
 80002a0:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80002a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a8:	f001 fee4 	bl	8002074 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80002ac:	462a      	mov	r2, r5
 80002ae:	4629      	mov	r1, r5
 80002b0:	2017      	movs	r0, #23
 80002b2:	f001 fd09 	bl	8001cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002b6:	2017      	movs	r0, #23
 80002b8:	f001 fd3e 	bl	8001d38 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002bc:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002be:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6163      	str	r3, [r4, #20]
 80002c6:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002c8:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ca:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002ce:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002d4:	f001 fcf8 	bl	8001cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002d8:	200e      	movs	r0, #14
 80002da:	f001 fd2d 	bl	8001d38 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 31250;
 80002de:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 80002e2:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 80002e4:	4c48      	ldr	r4, [pc, #288]	; (8000408 <main+0x1e4>)
 80002e6:	4949      	ldr	r1, [pc, #292]	; (800040c <main+0x1e8>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e8:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ea:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ee:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart1.Init.BaudRate = 31250;
 80002f2:	e9c4 1200 	strd	r1, r2, [r4]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f6:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80002f8:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002fa:	f003 fedd 	bl	80040b8 <HAL_UART_Init>
 80002fe:	b108      	cbz	r0, 8000304 <main+0xe0>
 8000300:	b672      	cpsid	i
  while (1)
 8000302:	e7fe      	b.n	8000302 <main+0xde>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000304:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 8000306:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1451-1;
 800030a:	f240 52aa 	movw	r2, #1450	; 0x5aa
  htim2.Instance = TIM2;
 800030e:	4f40      	ldr	r7, [pc, #256]	; (8000410 <main+0x1ec>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000310:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8000314:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800031a:	4638      	mov	r0, r7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	e9c7 3301 	strd	r3, r3, [r7, #4]
  htim2.Instance = TIM2;
 8000320:	6039      	str	r1, [r7, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000322:	613b      	str	r3, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000324:	61bb      	str	r3, [r7, #24]
  htim2.Init.Period = 1451-1;
 8000326:	60fa      	str	r2, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000328:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800032a:	f003 fd5f 	bl	8003dec <HAL_TIM_Base_Init>
 800032e:	b108      	cbz	r0, 8000334 <main+0x110>
 8000330:	b672      	cpsid	i
  while (1)
 8000332:	e7fe      	b.n	8000332 <main+0x10e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000338:	4638      	mov	r0, r7
 800033a:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033e:	f003 fde5 	bl	8003f0c <HAL_TIM_ConfigClockSource>
 8000342:	b108      	cbz	r0, 8000348 <main+0x124>
 8000344:	b672      	cpsid	i
  while (1)
 8000346:	e7fe      	b.n	8000346 <main+0x122>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000348:	2300      	movs	r3, #0
 800034a:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800034c:	4638      	mov	r0, r7
 800034e:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000350:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000354:	f003 fe7e 	bl	8004054 <HAL_TIMEx_MasterConfigSynchronization>
 8000358:	4603      	mov	r3, r0
 800035a:	b9e0      	cbnz	r0, 8000396 <main+0x172>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800035c:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000360:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000364:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 8000366:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000368:	f44f 6600 	mov.w	r6, #2048	; 0x800
  hspi1.Instance = SPI1;
 800036c:	4d29      	ldr	r5, [pc, #164]	; (8000414 <main+0x1f0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	e9c5 c301 	strd	ip, r3, [r5, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000372:	e9c5 3304 	strd	r3, r3, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000376:	e9c5 3308 	strd	r3, r3, [r5, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037a:	62ab      	str	r3, [r5, #40]	; 0x28
  hspi1.Instance = SPI1;
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <main+0x1f4>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800037e:	61a8      	str	r0, [r5, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000380:	4628      	mov	r0, r5
  hspi1.Instance = SPI1;
 8000382:	602b      	str	r3, [r5, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000384:	60ee      	str	r6, [r5, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000386:	61e9      	str	r1, [r5, #28]
  hspi1.Init.CRCPolynomial = 10;
 8000388:	62ea      	str	r2, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800038a:	f003 fcd5 	bl	8003d38 <HAL_SPI_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	b118      	cbz	r0, 800039a <main+0x176>
 8000392:	b672      	cpsid	i
  while (1)
 8000394:	e7fe      	b.n	8000394 <main+0x170>
 8000396:	b672      	cpsid	i
 8000398:	e7fe      	b.n	8000398 <main+0x174>
  hi2c2.Init.ClockSpeed = 10000;
 800039a:	f242 7010 	movw	r0, #10000	; 0x2710
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Instance = I2C2;
 80003a2:	4e1e      	ldr	r6, [pc, #120]	; (800041c <main+0x1f8>)
 80003a4:	491e      	ldr	r1, [pc, #120]	; (8000420 <main+0x1fc>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003a6:	e9c6 0301 	strd	r0, r3, [r6, #4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003aa:	4630      	mov	r0, r6
  hi2c2.Init.OwnAddress2 = 0;
 80003ac:	e9c6 3305 	strd	r3, r3, [r6, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b0:	e9c6 3307 	strd	r3, r3, [r6, #28]
  hi2c2.Init.OwnAddress1 = 0;
 80003b4:	60f3      	str	r3, [r6, #12]
  hi2c2.Instance = I2C2;
 80003b6:	6031      	str	r1, [r6, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b8:	6132      	str	r2, [r6, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003ba:	f002 f80d 	bl	80023d8 <HAL_I2C_Init>
 80003be:	b108      	cbz	r0, 80003c4 <main+0x1a0>
 80003c0:	b672      	cpsid	i
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <main+0x19e>
  init_midi(&huart1);
 80003c4:	4620      	mov	r0, r4
 80003c6:	f000 f867 	bl	8000498 <init_midi>
  init_synth();
 80003ca:	f000 fc4f 	bl	8000c6c <init_synth>
  init_audio_out(&hspi1, &htim2);
 80003ce:	4628      	mov	r0, r5
 80003d0:	4639      	mov	r1, r7
 80003d2:	f7ff febb 	bl	800014c <init_audio_out>
  init_ui(&hi2c2);
 80003d6:	4630      	mov	r0, r6
 80003d8:	f001 fb68 	bl	8001aac <init_ui>
 80003dc:	4e11      	ldr	r6, [pc, #68]	; (8000424 <main+0x200>)
 80003de:	4d12      	ldr	r5, [pc, #72]	; (8000428 <main+0x204>)
	if (midi_buffer_read != midi_buffer_write) {
 80003e0:	7832      	ldrb	r2, [r6, #0]
 80003e2:	782b      	ldrb	r3, [r5, #0]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d0fb      	beq.n	80003e0 <main+0x1bc>
		process_midi_byte(&huart1);
 80003e8:	4620      	mov	r0, r4
 80003ea:	f000 f877 	bl	80004dc <process_midi_byte>
	if (midi_buffer_read != midi_buffer_write) {
 80003ee:	7832      	ldrb	r2, [r6, #0]
 80003f0:	782b      	ldrb	r3, [r5, #0]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d0f4      	beq.n	80003e0 <main+0x1bc>
 80003f6:	e7f7      	b.n	80003e8 <main+0x1c4>
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800
 8000400:	40010c00 	.word	0x40010c00
 8000404:	10110000 	.word	0x10110000
 8000408:	2000097c 	.word	0x2000097c
 800040c:	40013800 	.word	0x40013800
 8000410:	20000dcc 	.word	0x20000dcc
 8000414:	20000ca8 	.word	0x20000ca8
 8000418:	40013000 	.word	0x40013000
 800041c:	200004d4 	.word	0x200004d4
 8000420:	40005800 	.word	0x40005800
 8000424:	20000ee0 	.word	0x20000ee0
 8000428:	20000600 	.word	0x20000600

0800042c <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin) {
 800042c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8000430:	d005      	beq.n	800043e <HAL_GPIO_EXTI_Callback+0x12>
 8000432:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000436:	d008      	beq.n	800044a <HAL_GPIO_EXTI_Callback+0x1e>
 8000438:	2880      	cmp	r0, #128	; 0x80
 800043a:	d003      	beq.n	8000444 <HAL_GPIO_EXTI_Callback+0x18>
}
 800043c:	4770      	bx	lr
		fsm(pb_1);
 800043e:	2001      	movs	r0, #1
 8000440:	f001 bb88 	b.w	8001b54 <fsm>
		fsm(pb_0);
 8000444:	2000      	movs	r0, #0
 8000446:	f001 bb85 	b.w	8001b54 <fsm>
		fsm(pb_2);
 800044a:	2002      	movs	r0, #2
 800044c:	f001 bb82 	b.w	8001b54 <fsm>

08000450 <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000450:	2201      	movs	r2, #1
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000452:	b410      	push	{r4}
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000454:	4c05      	ldr	r4, [pc, #20]	; (800046c <HAL_UART_RxCpltCallback+0x1c>)
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000456:	4906      	ldr	r1, [pc, #24]	; (8000470 <HAL_UART_RxCpltCallback+0x20>)
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000458:	7823      	ldrb	r3, [r4, #0]
 800045a:	4413      	add	r3, r2
 800045c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000460:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000462:	7823      	ldrb	r3, [r4, #0]
}
 8000464:	bc10      	pop	{r4}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000466:	4419      	add	r1, r3
 8000468:	f003 be90 	b.w	800418c <HAL_UART_Receive_IT>
 800046c:	20000600 	.word	0x20000600
 8000470:	200009c0 	.word	0x200009c0

08000474 <sample>:
void sample() {
 8000474:	b508      	push	{r3, lr}
	TIM2->SR = 0;
 8000476:	2200      	movs	r2, #0
 8000478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800047c:	f44f 7180 	mov.w	r1, #256	; 0x100
	TIM2->SR = 0;
 8000480:	611a      	str	r2, [r3, #16]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <sample+0x1c>)
 8000484:	f001 ff06 	bl	8002294 <HAL_GPIO_TogglePin>
}
 8000488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_volume();
 800048c:	f7ff be72 	b.w	8000174 <update_volume>
 8000490:	40010800 	.word	0x40010800

08000494 <Error_Handler>:
 8000494:	b672      	cpsid	i
  while (1)
 8000496:	e7fe      	b.n	8000496 <Error_Handler+0x2>

08000498 <init_midi>:
 */

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
	data[0] = -1;
 8000498:	21ff      	movs	r1, #255	; 0xff
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <init_midi+0x34>)
 800049c:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <init_midi+0x38>)
void init_midi(UART_HandleTypeDef* huart) {
 800049e:	b510      	push	{r4, lr}
 80004a0:	4604      	mov	r4, r0
	data[0] = -1;
 80004a2:	7011      	strb	r1, [r2, #0]
	data[1] = -1;
 80004a4:	7051      	strb	r1, [r2, #1]
	for (uint8_t i = 0; i < RING_BUFFER_SIZE; i++) {
 80004a6:	4618      	mov	r0, r3
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	f004 f855 	bl	8004558 <memset>
		midi_buffer[i] = -1;
	}
	midi_buffer_read = 0;
 80004ae:	2100      	movs	r1, #0
 80004b0:	4603      	mov	r3, r0
	midi_buffer_write = 0;
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <init_midi+0x3c>)
	midi_buffer_read = 0;
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <init_midi+0x40>)
 80004b6:	7001      	strb	r1, [r0, #0]
	midi_buffer_write = 0;
 80004b8:	7011      	strb	r1, [r2, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 80004ba:	7811      	ldrb	r1, [r2, #0]
 80004bc:	4620      	mov	r0, r4
}
 80004be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	4419      	add	r1, r3
 80004c6:	f003 be61 	b.w	800418c <HAL_UART_Receive_IT>
 80004ca:	bf00      	nop
 80004cc:	200009c0 	.word	0x200009c0
 80004d0:	20000b0c 	.word	0x20000b0c
 80004d4:	20000600 	.word	0x20000600
 80004d8:	20000ee0 	.word	0x20000ee0

080004dc <process_midi_byte>:

void process_midi_byte() {
 80004dc:	b538      	push	{r3, r4, r5, lr}
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 80004de:	4c35      	ldr	r4, [pc, #212]	; (80005b4 <process_midi_byte+0xd8>)
 80004e0:	4a35      	ldr	r2, [pc, #212]	; (80005b8 <process_midi_byte+0xdc>)
 80004e2:	7823      	ldrb	r3, [r4, #0]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80004e4:	56d1      	ldrsb	r1, [r2, r3]
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 80004e6:	5cd2      	ldrb	r2, [r2, r3]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80004e8:	2900      	cmp	r1, #0
 80004ea:	db41      	blt.n	8000570 <process_midi_byte+0x94>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {													//if byte received was data byte
		switch (status & 0xF0) {
 80004ec:	4b33      	ldr	r3, [pc, #204]	; (80005bc <process_midi_byte+0xe0>)
 80004ee:	7819      	ldrb	r1, [r3, #0]
 80004f0:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80004f4:	2bc0      	cmp	r3, #192	; 0xc0
 80004f6:	d033      	beq.n	8000560 <process_midi_byte+0x84>
 80004f8:	d820      	bhi.n	800053c <process_midi_byte+0x60>
 80004fa:	2ba0      	cmp	r3, #160	; 0xa0
 80004fc:	d002      	beq.n	8000504 <process_midi_byte+0x28>
 80004fe:	d90c      	bls.n	800051a <process_midi_byte+0x3e>
 8000500:	2bb0      	cmp	r3, #176	; 0xb0
 8000502:	d147      	bne.n	8000594 <process_midi_byte+0xb8>
		case 0xD0:												//channel pressure (unimplemented)
			data[0] = midi_in;
			channel_pressure();
			break;
		case 0xE0:												//pitch bend (unimplemented)
			if (data[0] == (uint8_t)-1) {
 8000504:	4b2e      	ldr	r3, [pc, #184]	; (80005c0 <process_midi_byte+0xe4>)
 8000506:	7819      	ldrb	r1, [r3, #0]
 8000508:	29ff      	cmp	r1, #255	; 0xff
 800050a:	d02a      	beq.n	8000562 <process_midi_byte+0x86>
				data[0] = midi_in;
			}
			else {
				data[1] = midi_in;
 800050c:	705a      	strb	r2, [r3, #1]
			break;
		default:
			__NOP();
		}
	}
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800050e:	7823      	ldrb	r3, [r4, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000516:	7023      	strb	r3, [r4, #0]
}
 8000518:	bd38      	pop	{r3, r4, r5, pc}
		switch (status & 0xF0) {
 800051a:	2b80      	cmp	r3, #128	; 0x80
 800051c:	d034      	beq.n	8000588 <process_midi_byte+0xac>
 800051e:	2b90      	cmp	r3, #144	; 0x90
 8000520:	d138      	bne.n	8000594 <process_midi_byte+0xb8>
			if (data[0] == (uint8_t)-1) {
 8000522:	4d27      	ldr	r5, [pc, #156]	; (80005c0 <process_midi_byte+0xe4>)
 8000524:	7828      	ldrb	r0, [r5, #0]
 8000526:	28ff      	cmp	r0, #255	; 0xff
 8000528:	d032      	beq.n	8000590 <process_midi_byte+0xb4>
				data[1] = midi_in;
 800052a:	706a      	strb	r2, [r5, #1]
				if (data[1] == 0) {
 800052c:	2a00      	cmp	r2, #0
 800052e:	d13a      	bne.n	80005a6 <process_midi_byte+0xca>

void note_off() {
	release_voice(data[0]);
 8000530:	f000 fe3a 	bl	80011a8 <release_voice>
	data[0] = -1;
 8000534:	23ff      	movs	r3, #255	; 0xff
 8000536:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 8000538:	706b      	strb	r3, [r5, #1]
}
 800053a:	e7e8      	b.n	800050e <process_midi_byte+0x32>
		switch (status & 0xF0) {
 800053c:	2be0      	cmp	r3, #224	; 0xe0
 800053e:	d0e1      	beq.n	8000504 <process_midi_byte+0x28>
 8000540:	2bf0      	cmp	r3, #240	; 0xf0
 8000542:	d10b      	bne.n	800055c <process_midi_byte+0x80>
			if (status == 0xFF) {									//system reset
 8000544:	29ff      	cmp	r1, #255	; 0xff
 8000546:	d1e2      	bne.n	800050e <process_midi_byte+0x32>
				midi_buffer_read = 0;
 8000548:	2200      	movs	r2, #0
				data[0] = -1;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <process_midi_byte+0xe4>)
				midi_buffer_write = 0;
 800054c:	481d      	ldr	r0, [pc, #116]	; (80005c4 <process_midi_byte+0xe8>)
				midi_buffer_read = 0;
 800054e:	7022      	strb	r2, [r4, #0]
				data[0] = -1;
 8000550:	7019      	strb	r1, [r3, #0]
				midi_buffer_write = 0;
 8000552:	7002      	strb	r2, [r0, #0]
				data[1] = -1;
 8000554:	7059      	strb	r1, [r3, #1]
				clear_voices();
 8000556:	f000 fd23 	bl	8000fa0 <clear_voices>
 800055a:	e7d8      	b.n	800050e <process_midi_byte+0x32>
		switch (status & 0xF0) {
 800055c:	2bd0      	cmp	r3, #208	; 0xd0
 800055e:	d119      	bne.n	8000594 <process_midi_byte+0xb8>
			data[0] = midi_in;
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <process_midi_byte+0xe4>)
 8000562:	701a      	strb	r2, [r3, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 8000564:	7823      	ldrb	r3, [r4, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800056c:	7023      	strb	r3, [r4, #0]
}
 800056e:	bd38      	pop	{r3, r4, r5, pc}
		data[0] = -1;
 8000570:	21ff      	movs	r1, #255	; 0xff
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <process_midi_byte+0xe4>)
		status = midi_in;
 8000574:	4811      	ldr	r0, [pc, #68]	; (80005bc <process_midi_byte+0xe0>)
		data[0] = -1;
 8000576:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 8000578:	7059      	strb	r1, [r3, #1]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800057a:	7823      	ldrb	r3, [r4, #0]
		status = midi_in;
 800057c:	7002      	strb	r2, [r0, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800057e:	3301      	adds	r3, #1
 8000580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000584:	7023      	strb	r3, [r4, #0]
}
 8000586:	bd38      	pop	{r3, r4, r5, pc}
			if (data[0] == (uint8_t)-1) {
 8000588:	4d0d      	ldr	r5, [pc, #52]	; (80005c0 <process_midi_byte+0xe4>)
 800058a:	7828      	ldrb	r0, [r5, #0]
 800058c:	28ff      	cmp	r0, #255	; 0xff
 800058e:	d103      	bne.n	8000598 <process_midi_byte+0xbc>
				data[0] = midi_in;
 8000590:	702a      	strb	r2, [r5, #0]
 8000592:	e7bc      	b.n	800050e <process_midi_byte+0x32>
			__NOP();
 8000594:	bf00      	nop
 8000596:	e7ba      	b.n	800050e <process_midi_byte+0x32>
				data[1] = midi_in;
 8000598:	706a      	strb	r2, [r5, #1]
	release_voice(data[0]);
 800059a:	f000 fe05 	bl	80011a8 <release_voice>
	data[0] = -1;
 800059e:	23ff      	movs	r3, #255	; 0xff
 80005a0:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80005a2:	706b      	strb	r3, [r5, #1]
}
 80005a4:	e7b3      	b.n	800050e <process_midi_byte+0x32>

void note_on() {
	add_voice(data[0]);
 80005a6:	f000 fd0d 	bl	8000fc4 <add_voice>
	data[0] = -1;
 80005aa:	23ff      	movs	r3, #255	; 0xff
 80005ac:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80005ae:	706b      	strb	r3, [r5, #1]
}
 80005b0:	e7ad      	b.n	800050e <process_midi_byte+0x32>
 80005b2:	bf00      	nop
 80005b4:	20000ee0 	.word	0x20000ee0
 80005b8:	200009c0 	.word	0x200009c0
 80005bc:	2000107c 	.word	0x2000107c
 80005c0:	20000b0c 	.word	0x20000b0c
 80005c4:	20000600 	.word	0x20000600

080005c8 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 80005c8:	4b01      	ldr	r3, [pc, #4]	; (80005d0 <note_to_freq+0x8>)
}
 80005ca:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80005ce:	4770      	bx	lr
 80005d0:	080045d0 	.word	0x080045d0

080005d4 <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 80005d6:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 80005d8:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 80005dc:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	be37c63b 	.word	0xbe37c63b

080005e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_MspInit+0x3c>)
{
 80005ea:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ec:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f0:	f042 0201 	orr.w	r2, r2, #1
 80005f4:	619a      	str	r2, [r3, #24]
 80005f6:	699a      	ldr	r2, [r3, #24]
 80005f8:	f002 0201 	and.w	r2, r2, #1
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000606:	61da      	str	r2, [r3, #28]
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000612:	684b      	ldr	r3, [r1, #4]
 8000614:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000618:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061c:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	b002      	add	sp, #8
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	40010000 	.word	0x40010000

0800062c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800062c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C2)
 8000632:	6802      	ldr	r2, [r0, #0]
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_I2C_MspInit+0xa0>)
{
 8000636:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 8000638:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800063e:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hi2c->Instance==I2C2)
 8000642:	d002      	beq.n	800064a <HAL_I2C_MspInit+0x1e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000644:	b007      	add	sp, #28
 8000646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064a:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800064c:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 8000650:	f04f 0912 	mov.w	r9, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4f1e      	ldr	r7, [pc, #120]	; (80006d0 <HAL_I2C_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	4605      	mov	r5, r0
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	61bb      	str	r3, [r7, #24]
 8000662:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	481b      	ldr	r0, [pc, #108]	; (80006d4 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	f003 0308 	and.w	r3, r3, #8
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000670:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	f001 fcfe 	bl	8002074 <HAL_GPIO_Init>
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000678:	f04f 0c10 	mov.w	ip, #16
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800067c:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C2_CLK_ENABLE();
 800067e:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000680:	4e15      	ldr	r6, [pc, #84]	; (80006d8 <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000686:	61fb      	str	r3, [r7, #28]
 8000688:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800068a:	4914      	ldr	r1, [pc, #80]	; (80006dc <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 800068c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000690:	9301      	str	r3, [sp, #4]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000692:	4630      	mov	r0, r6
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000694:	e9c6 c401 	strd	ip, r4, [r6, #4]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000698:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800069c:	e9c6 4406 	strd	r4, r4, [r6, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006a0:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80006a2:	6031      	str	r1, [r6, #0]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006a4:	60f2      	str	r2, [r6, #12]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80006a6:	f001 fb6d 	bl	8001d84 <HAL_DMA_Init>
 80006aa:	b960      	cbnz	r0, 80006c6 <HAL_I2C_MspInit+0x9a>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2021      	movs	r0, #33	; 0x21
 80006b0:	4611      	mov	r1, r2
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80006b2:	636e      	str	r6, [r5, #52]	; 0x34
 80006b4:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80006b6:	f001 fb07 	bl	8001cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80006ba:	2021      	movs	r0, #33	; 0x21
 80006bc:	f001 fb3c 	bl	8001d38 <HAL_NVIC_EnableIRQ>
}
 80006c0:	b007      	add	sp, #28
 80006c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 80006c6:	f7ff fee5 	bl	8000494 <Error_Handler>
 80006ca:	e7ef      	b.n	80006ac <HAL_I2C_MspInit+0x80>
 80006cc:	40005800 	.word	0x40005800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	200006d4 	.word	0x200006d4
 80006dc:	40020044 	.word	0x40020044

080006e0 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	2300      	movs	r3, #0
{
 80006e2:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 80006e4:	6801      	ldr	r1, [r0, #0]
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <HAL_SPI_MspInit+0x60>)
{
 80006e8:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 80006ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80006f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI1)
 80006f4:	d001      	beq.n	80006fa <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006f6:	b006      	add	sp, #24
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006fa:	24a0      	movs	r4, #160	; 0xa0
 80006fc:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fe:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000700:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000704:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000708:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800070c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000710:	619a      	str	r2, [r3, #24]
 8000712:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000716:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800071a:	9200      	str	r2, [sp, #0]
 800071c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	f042 0204 	orr.w	r2, r2, #4
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000728:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000734:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f001 fc9d 	bl	8002074 <HAL_GPIO_Init>
}
 800073a:	b006      	add	sp, #24
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	bf00      	nop
 8000740:	40013000 	.word	0x40013000
 8000744:	40010800 	.word	0x40010800

08000748 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000748:	6803      	ldr	r3, [r0, #0]
 800074a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800074e:	d000      	beq.n	8000752 <HAL_TIM_Base_MspInit+0xa>
 8000750:	4770      	bx	lr

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000752:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000754:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000758:	69d8      	ldr	r0, [r3, #28]
{
 800075a:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800075c:	4308      	orrs	r0, r1
 800075e:	61d8      	str	r0, [r3, #28]
 8000760:	69db      	ldr	r3, [r3, #28]
{
 8000762:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000764:	400b      	ands	r3, r1
 8000766:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800076e:	f001 faab 	bl	8001cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000772:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000774:	b003      	add	sp, #12
 8000776:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800077a:	f001 badd 	b.w	8001d38 <HAL_NVIC_EnableIRQ>
 800077e:	bf00      	nop

08000780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8000784:	6802      	ldr	r2, [r0, #0]
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <HAL_UART_MspInit+0x88>)
{
 8000788:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 800078a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000790:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8000794:	d001      	beq.n	800079a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000796:	b007      	add	sp, #28
 8000798:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800079a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079e:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a0:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80007a6:	699a      	ldr	r2, [r3, #24]
 80007a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007ac:	619a      	str	r2, [r3, #24]
 80007ae:	699a      	ldr	r2, [r3, #24]
 80007b0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007b4:	9200      	str	r2, [sp, #0]
 80007b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	699a      	ldr	r2, [r3, #24]
 80007ba:	f042 0204 	orr.w	r2, r2, #4
 80007be:	619a      	str	r2, [r3, #24]
 80007c0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	a902      	add	r1, sp, #8
 80007d2:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f001 fc4b 	bl	8002074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007de:	2300      	movs	r3, #0
 80007e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	a902      	add	r1, sp, #8
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f001 fc41 	bl	8002074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f2:	4622      	mov	r2, r4
 80007f4:	4621      	mov	r1, r4
 80007f6:	2025      	movs	r0, #37	; 0x25
 80007f8:	f001 fa66 	bl	8001cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007fc:	2025      	movs	r0, #37	; 0x25
 80007fe:	f001 fa9b 	bl	8001d38 <HAL_NVIC_EnableIRQ>
}
 8000802:	b007      	add	sp, #28
 8000804:	bd30      	pop	{r4, r5, pc}
 8000806:	bf00      	nop
 8000808:	40013800 	.word	0x40013800
 800080c:	40010800 	.word	0x40010800

08000810 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler>
 8000812:	bf00      	nop

08000814 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <HardFault_Handler>
 8000816:	bf00      	nop

08000818 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler>
 800081a:	bf00      	nop

0800081c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <BusFault_Handler>
 800081e:	bf00      	nop

08000820 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler>
 8000822:	bf00      	nop

08000824 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <DebugMon_Handler>:
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <PendSV_Handler>:
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000830:	f001 ba14 	b.w	8001c5c <HAL_IncTick>

08000834 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000834:	4801      	ldr	r0, [pc, #4]	; (800083c <DMA1_Channel4_IRQHandler+0x8>)
 8000836:	f001 bb85 	b.w	8001f44 <HAL_DMA_IRQHandler>
 800083a:	bf00      	nop
 800083c:	200006d4 	.word	0x200006d4

08000840 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	f001 fd30 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000848:	f44f 7080 	mov.w	r0, #256	; 0x100
 800084c:	f001 fd2c 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000854:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000858:	f001 bd26 	b.w	80022a8 <HAL_GPIO_EXTI_IRQHandler>

0800085c <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 800085c:	f7ff be0a 	b.w	8000474 <sample>

08000860 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000860:	4801      	ldr	r0, [pc, #4]	; (8000868 <I2C2_EV_IRQHandler+0x8>)
 8000862:	f002 bac1 	b.w	8002de8 <HAL_I2C_EV_IRQHandler>
 8000866:	bf00      	nop
 8000868:	200004d4 	.word	0x200004d4

0800086c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800086c:	4801      	ldr	r0, [pc, #4]	; (8000874 <USART1_IRQHandler+0x8>)
 800086e:	f003 bd21 	b.w	80042b4 <HAL_UART_IRQHandler>
 8000872:	bf00      	nop
 8000874:	2000097c 	.word	0x2000097c

08000878 <modulate>:
		}
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
	}
}

static inline int8_t modulate(uint8_t voice_index) {
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {			//loop through all operators of voice
		/*update phase of active operator*/
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 800087a:	4eb7      	ldr	r6, [pc, #732]	; (8000b58 <modulate+0x2e0>)
 800087c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8000880:	eb06 0343 	add.w	r3, r6, r3, lsl #1
	-27, -25, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9,  -7,  -5,  -3,  -2,
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 8000884:	f8b3 c078 	ldrh.w	ip, [r3, #120]	; 0x78
 8000888:	f8b3 70e8 	ldrh.w	r7, [r3, #232]	; 0xe8
 800088c:	891d      	ldrh	r5, [r3, #8]
 800088e:	88d9      	ldrh	r1, [r3, #6]
 8000890:	f8b3 4076 	ldrh.w	r4, [r3, #118]	; 0x76
 8000894:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	; 0xe6
 8000898:	440d      	add	r5, r1
 800089a:	4464      	add	r4, ip
 800089c:	f8b3 1156 	ldrh.w	r1, [r3, #342]	; 0x156
 80008a0:	f8b3 c158 	ldrh.w	ip, [r3, #344]	; 0x158
 80008a4:	443a      	add	r2, r7
	}

	switch (algo) {
 80008a6:	4fad      	ldr	r7, [pc, #692]	; (8000b5c <modulate+0x2e4>)
 80008a8:	4461      	add	r1, ip
 80008aa:	783f      	ldrb	r7, [r7, #0]
 80008ac:	b2ad      	uxth	r5, r5
 80008ae:	b2a4      	uxth	r4, r4
 80008b0:	b292      	uxth	r2, r2
 80008b2:	b289      	uxth	r1, r1
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 80008b4:	811d      	strh	r5, [r3, #8]
 80008b6:	f8a3 4078 	strh.w	r4, [r3, #120]	; 0x78
 80008ba:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
 80008be:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
 80008c2:	00c3      	lsls	r3, r0, #3
 80008c4:	2f0b      	cmp	r7, #11
 80008c6:	f200 81c8 	bhi.w	8000c5a <modulate+0x3e2>
 80008ca:	e8df f017 	tbh	[pc, r7, lsl #1]
 80008ce:	0037      	.short	0x0037
 80008d0:	0075005f 	.word	0x0075005f
 80008d4:	00be009c 	.word	0x00be009c
 80008d8:	010600dc 	.word	0x010600dc
 80008dc:	014d0127 	.word	0x014d0127
 80008e0:	01a80180 	.word	0x01a80180
 80008e4:	000c      	.short	0x000c
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 80008e6:	4f9e      	ldr	r7, [pc, #632]	; (8000b60 <modulate+0x2e8>)
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
		return ((int16_t)op2 + op1 + op0) / 3;
		break;
	case 0x0B:
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008e8:	1a1b      	subs	r3, r3, r0
 80008ea:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80008ee:	0a09      	lsrs	r1, r1, #8
 80008f0:	0a12      	lsrs	r2, r2, #8
 80008f2:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
 80008f6:	f917 e001 	ldrsb.w	lr, [r7, r1]
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008fa:	f917 c002 	ldrsb.w	ip, [r7, r2]
 80008fe:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
 8000902:	0a24      	lsrs	r4, r4, #8
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000904:	573e      	ldrsb	r6, [r7, r4]
 8000906:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800090a:	0a2d      	lsrs	r5, r5, #8
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800090c:	fb00 f00e 	mul.w	r0, r0, lr
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000910:	fb01 f10c 	mul.w	r1, r1, ip
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000914:	577c      	ldrsb	r4, [r7, r5]
 8000916:	791b      	ldrb	r3, [r3, #4]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000918:	fb02 f206 	mul.w	r2, r2, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800091c:	fb03 f304 	mul.w	r3, r3, r4
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 8000920:	f341 11c7 	sbfx	r1, r1, #7, #8
 8000924:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000928:	4408      	add	r0, r1
 800092a:	f342 12c7 	sbfx	r2, r2, #7, #8
 800092e:	4410      	add	r0, r2
 8000930:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000934:	4418      	add	r0, r3
 8000936:	f340 0087 	sbfx	r0, r0, #2, #8
		break;
	default:
		break;
	}
	return 0;
}
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800093c:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 800093e:	4889      	ldr	r0, [pc, #548]	; (8000b64 <modulate+0x2ec>)
 8000940:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000944:	0a0e      	lsrs	r6, r1, #8
 8000946:	5786      	ldrsb	r6, [r0, r6]
 8000948:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800094c:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800094e:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000952:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	5686      	ldrsb	r6, [r0, r2]
 800095a:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800095e:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000960:	fb01 f106 	mul.w	r1, r1, r6
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000964:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000968:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800096a:	5680      	ldrsb	r0, [r0, r2]
 800096c:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000970:	0a2a      	lsrs	r2, r5, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000972:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000976:	4c7a      	ldr	r4, [pc, #488]	; (8000b60 <modulate+0x2e8>)
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000978:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	7918      	ldrb	r0, [r3, #4]
 8000980:	56a3      	ldrsb	r3, [r4, r2]
 8000982:	fb00 f003 	mul.w	r0, r0, r3
 8000986:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 800098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800098c:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 800098e:	4875      	ldr	r0, [pc, #468]	; (8000b64 <modulate+0x2ec>)
 8000990:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000994:	0a16      	lsrs	r6, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000996:	5787      	ldrsb	r7, [r0, r6]
 8000998:	0a09      	lsrs	r1, r1, #8
 800099a:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800099e:	5646      	ldrsb	r6, [r0, r1]
 80009a0:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009a4:	fb02 f207 	mul.w	r2, r2, r7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009a8:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009ac:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009ae:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80009b2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80009b6:	e7d7      	b.n	8000968 <modulate+0xf0>
 80009b8:	4f6a      	ldr	r7, [pc, #424]	; (8000b64 <modulate+0x2ec>)
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009ba:	1a1b      	subs	r3, r3, r0
 80009bc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80009c0:	0a12      	lsrs	r2, r2, #8
 80009c2:	56be      	ldrsb	r6, [r7, r2]
 80009c4:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009c8:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009ca:	fb00 f006 	mul.w	r0, r0, r6
 80009ce:	0a09      	lsrs	r1, r1, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009d0:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009d4:	567c      	ldrsb	r4, [r7, r1]
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009dc:	56b9      	ldrsb	r1, [r7, r2]
 80009de:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009e2:	fb00 f004 	mul.w	r0, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009e6:	fb02 f101 	mul.w	r1, r2, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009ea:	0a2a      	lsrs	r2, r5, #8
 80009ec:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 80009f0:	eb02 12e1 	add.w	r2, r2, r1, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 80009f4:	495a      	ldr	r1, [pc, #360]	; (8000b60 <modulate+0x2e8>)
 80009f6:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009f8:	7918      	ldrb	r0, [r3, #4]
 80009fa:	568b      	ldrsb	r3, [r1, r2]
 80009fc:	fb00 f003 	mul.w	r0, r0, r3
 8000a00:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000a06:	4f57      	ldr	r7, [pc, #348]	; (8000b64 <modulate+0x2ec>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a08:	1a1b      	subs	r3, r3, r0
 8000a0a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a0e:	0a09      	lsrs	r1, r1, #8
 8000a10:	567e      	ldrsb	r6, [r7, r1]
 8000a12:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a16:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a1a:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a1e:	f3c0 10c7 	ubfx	r0, r0, #7, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a22:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8000a26:	b2e4      	uxtb	r4, r4
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a28:	eb00 2212 	add.w	r2, r0, r2, lsr #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a2c:	573e      	ldrsb	r6, [r7, r4]
 8000a2e:	b2d2      	uxtb	r2, r2
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a30:	56bc      	ldrsb	r4, [r7, r2]
 8000a32:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a36:	fb01 f206 	mul.w	r2, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a3a:	fb00 f104 	mul.w	r1, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a3e:	11d2      	asrs	r2, r2, #7
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a40:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000a44:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8000a48:	e7d4      	b.n	80009f4 <modulate+0x17c>
 8000a4a:	4f46      	ldr	r7, [pc, #280]	; (8000b64 <modulate+0x2ec>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a4c:	1a1b      	subs	r3, r3, r0
 8000a4e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a52:	0a10      	lsrs	r0, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a54:	563e      	ldrsb	r6, [r7, r0]
 8000a56:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8000a5a:	0a09      	lsrs	r1, r1, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a5c:	5679      	ldrsb	r1, [r7, r1]
 8000a5e:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a62:	fb02 f206 	mul.w	r2, r2, r6
 8000a66:	0a24      	lsrs	r4, r4, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a68:	fb00 f001 	mul.w	r0, r0, r1
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a6c:	573c      	ldrsb	r4, [r7, r4]
 8000a6e:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a72:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a74:	fb01 f104 	mul.w	r1, r1, r4
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a78:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 8000a7c:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8000a80:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000a84:	e7b6      	b.n	80009f4 <modulate+0x17c>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a86:	1a1b      	subs	r3, r3, r0
 8000a88:	4836      	ldr	r0, [pc, #216]	; (8000b64 <modulate+0x2ec>)
 8000a8a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a8e:	0a0e      	lsrs	r6, r1, #8
 8000a90:	5786      	ldrsb	r6, [r0, r6]
 8000a92:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a96:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a98:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a9c:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	5680      	ldrsb	r0, [r0, r2]
 8000aa4:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000aa8:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000aaa:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000aae:	482c      	ldr	r0, [pc, #176]	; (8000b60 <modulate+0x2e8>)
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ab0:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	0a2d      	lsrs	r5, r5, #8
 8000ab8:	5681      	ldrsb	r1, [r0, r2]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000aba:	5742      	ldrsb	r2, [r0, r5]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000abc:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac0:	791b      	ldrb	r3, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac2:	fb00 f001 	mul.w	r0, r0, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac6:	fb03 f302 	mul.w	r3, r3, r2
		return ((int16_t)op2 + op0) >> 1;
 8000aca:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000ace:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000ad2:	4418      	add	r0, r3
 8000ad4:	f340 0047 	sbfx	r0, r0, #1, #8
}
 8000ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ada:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000adc:	4821      	ldr	r0, [pc, #132]	; (8000b64 <modulate+0x2ec>)
 8000ade:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000ae2:	0a0e      	lsrs	r6, r1, #8
 8000ae4:	5786      	ldrsb	r6, [r0, r6]
 8000ae6:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000aea:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000aec:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000af0:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	5681      	ldrsb	r1, [r0, r2]
 8000af8:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000afc:	4818      	ldr	r0, [pc, #96]	; (8000b60 <modulate+0x2e8>)
 8000afe:	fb02 f201 	mul.w	r2, r2, r1
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b02:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8000b06:	eb02 2114 	add.w	r1, r2, r4, lsr #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b0a:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8000b0e:	b2c9      	uxtb	r1, r1
 8000b10:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b12:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b14:	5682      	ldrsb	r2, [r0, r2]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b16:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8000b1a:	e7d1      	b.n	8000ac0 <modulate+0x248>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b1c:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <modulate+0x2ec>)
 8000b20:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000b24:	0a0f      	lsrs	r7, r1, #8
 8000b26:	0a26      	lsrs	r6, r4, #8
 8000b28:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
 8000b2c:	57c4      	ldrsb	r4, [r0, r7]
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b2e:	5786      	ldrsb	r6, [r0, r6]
 8000b30:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b34:	fb01 f404 	mul.w	r4, r1, r4
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b38:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b3c:	0a11      	lsrs	r1, r2, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b3e:	0a2a      	lsrs	r2, r5, #8
 8000b40:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b44:	eb01 11e4 	add.w	r1, r1, r4, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <modulate+0x2e8>)
 8000b4a:	b2c9      	uxtb	r1, r1
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b50:	5682      	ldrsb	r2, [r0, r2]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b52:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
 8000b56:	e7b3      	b.n	8000ac0 <modulate+0x248>
 8000b58:	200002d0 	.word	0x200002d0
 8000b5c:	20000494 	.word	0x20000494
 8000b60:	080047d0 	.word	0x080047d0
 8000b64:	080046d0 	.word	0x080046d0
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b68:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b6a:	483d      	ldr	r0, [pc, #244]	; (8000c60 <modulate+0x3e8>)
 8000b6c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000b70:	0a09      	lsrs	r1, r1, #8
 8000b72:	5640      	ldrsb	r0, [r0, r1]
 8000b74:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000b78:	4e3a      	ldr	r6, [pc, #232]	; (8000c64 <modulate+0x3ec>)
 8000b7a:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b7e:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000b82:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b86:	eb01 2014 	add.w	r0, r1, r4, lsr #8
 8000b8a:	b2c0      	uxtb	r0, r0
 8000b8c:	b2d4      	uxtb	r4, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b8e:	eb01 2215 	add.w	r2, r1, r5, lsr #8
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b92:	5737      	ldrsb	r7, [r6, r4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b94:	5635      	ldrsb	r5, [r6, r0]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b96:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b9a:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8000b9e:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba0:	56b4      	ldrsb	r4, [r6, r2]
 8000ba2:	791a      	ldrb	r2, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba4:	fb01 f307 	mul.w	r3, r1, r7
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba8:	fb00 f105 	mul.w	r1, r0, r5
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bac:	fb02 f204 	mul.w	r2, r2, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 8000bb0:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000bb4:	f341 11c7 	sbfx	r1, r1, #7, #8
		return ((int16_t)op2 + op1 + op0) / 3;
 8000bb8:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000bbc:	440b      	add	r3, r1
 8000bbe:	482a      	ldr	r0, [pc, #168]	; (8000c68 <modulate+0x3f0>)
 8000bc0:	4413      	add	r3, r2
 8000bc2:	fb80 2003 	smull	r2, r0, r0, r3
 8000bc6:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000bca:	b240      	sxtb	r0, r0
}
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bce:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000bd0:	4823      	ldr	r0, [pc, #140]	; (8000c60 <modulate+0x3e8>)
 8000bd2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000bd6:	0a09      	lsrs	r1, r1, #8
 8000bd8:	5640      	ldrsb	r0, [r0, r1]
 8000bda:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000bde:	4e21      	ldr	r6, [pc, #132]	; (8000c64 <modulate+0x3ec>)
 8000be0:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000be4:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000be8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bec:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8000bf0:	b2d0      	uxtb	r0, r2
 8000bf2:	b2ca      	uxtb	r2, r1
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf4:	f916 c000 	ldrsb.w	ip, [r6, r0]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf8:	56b7      	ldrsb	r7, [r6, r2]
 8000bfa:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bfe:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c02:	7919      	ldrb	r1, [r3, #4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c04:	fb00 f007 	mul.w	r0, r0, r7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c08:	fb02 f30c 	mul.w	r3, r2, ip
 8000c0c:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c0e:	5774      	ldrsb	r4, [r6, r5]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c10:	fb01 f204 	mul.w	r2, r1, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 8000c14:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000c18:	f340 11c7 	sbfx	r1, r0, #7, #8
 8000c1c:	e7cc      	b.n	8000bb8 <modulate+0x340>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c1e:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c20:	480f      	ldr	r0, [pc, #60]	; (8000c60 <modulate+0x3e8>)
 8000c22:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000c26:	0a09      	lsrs	r1, r1, #8
 8000c28:	5641      	ldrsb	r1, [r0, r1]
 8000c2a:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c2e:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c30:	fb00 f001 	mul.w	r0, r0, r1
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000c34:	490b      	ldr	r1, [pc, #44]	; (8000c64 <modulate+0x3ec>)
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c36:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 8000c3a:	0a24      	lsrs	r4, r4, #8
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	568f      	ldrsb	r7, [r1, r2]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c40:	570e      	ldrsb	r6, [r1, r4]
 8000c42:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c46:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8000c4a:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c4c:	574c      	ldrsb	r4, [r1, r5]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c4e:	fb00 f006 	mul.w	r0, r0, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c52:	7919      	ldrb	r1, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c54:	fb02 f307 	mul.w	r3, r2, r7
 8000c58:	e7da      	b.n	8000c10 <modulate+0x398>
	switch (algo) {
 8000c5a:	2000      	movs	r0, #0
}
 8000c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	080046d0 	.word	0x080046d0
 8000c64:	080047d0 	.word	0x080047d0
 8000c68:	55555556 	.word	0x55555556

08000c6c <init_synth>:
 *      Author: Tennyson Cheng
 */

#include "synth.h"

void init_synth() {
 8000c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		op_release[i] = ENV_MAX_RATE;				//default release 128
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
		op_release_inc[i] = calculate_env_inc(op_release[i]);
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c70:	4cbd      	ldr	r4, [pc, #756]	; (8000f68 <init_synth+0x2fc>)
 8000c72:	2700      	movs	r7, #0
 8000c74:	4623      	mov	r3, r4
 8000c76:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
 8000c7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c7c:	881d      	ldrh	r5, [r3, #0]
 8000c7e:	4bbb      	ldr	r3, [pc, #748]	; (8000f6c <init_synth+0x300>)
void init_synth() {
 8000c80:	b09b      	sub	sp, #108	; 0x6c
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c82:	46a3      	mov	fp, r4
 8000c84:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000c88:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000c8c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000c90:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000c94:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000c98:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000c9c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000ca0:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8000ca4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8000ca8:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8000cac:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8000cb0:	9417      	str	r4, [sp, #92]	; 0x5c
 8000cb2:	9418      	str	r4, [sp, #96]	; 0x60
 8000cb4:	6018      	str	r0, [r3, #0]
 8000cb6:	9419      	str	r4, [sp, #100]	; 0x64
 8000cb8:	6059      	str	r1, [r3, #4]
 8000cba:	46a2      	mov	sl, r4
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	46a0      	mov	r8, r4
 8000cc0:	46a6      	mov	lr, r4
 8000cc2:	46a4      	mov	ip, r4
 8000cc4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000cc6:	4caa      	ldr	r4, [pc, #680]	; (8000f70 <init_synth+0x304>)
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000cc8:	f04f 2680 	mov.w	r6, #2147516416	; 0x80008000
 8000ccc:	6027      	str	r7, [r4, #0]
 8000cce:	f04f 3710 	mov.w	r7, #269488144	; 0x10101010
 8000cd2:	4ca8      	ldr	r4, [pc, #672]	; (8000f74 <init_synth+0x308>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000cd4:	f8c3 1012 	str.w	r1, [r3, #18]
 8000cd8:	f8c4 9000 	str.w	r9, [r4]
 8000cdc:	4ca6      	ldr	r4, [pc, #664]	; (8000f78 <init_synth+0x30c>)
		algo = 0x00;								//default algorithm 0
 8000cde:	f04f 0100 	mov.w	r1, #0
 8000ce2:	f8c4 9000 	str.w	r9, [r4]
 8000ce6:	4ca5      	ldr	r4, [pc, #660]	; (8000f7c <init_synth+0x310>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ce8:	f8c3 000e 	str.w	r0, [r3, #14]
 8000cec:	f8c4 9000 	str.w	r9, [r4]
 8000cf0:	4ca3      	ldr	r4, [pc, #652]	; (8000f80 <init_synth+0x314>)
		algo = 0x00;								//default algorithm 0
 8000cf2:	48a4      	ldr	r0, [pc, #656]	; (8000f84 <init_synth+0x318>)
 8000cf4:	f8c4 9000 	str.w	r9, [r4]
 8000cf8:	4ca3      	ldr	r4, [pc, #652]	; (8000f88 <init_synth+0x31c>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000cfa:	819d      	strh	r5, [r3, #12]
 8000cfc:	f8c4 9000 	str.w	r9, [r4]
 8000d00:	4ca2      	ldr	r4, [pc, #648]	; (8000f8c <init_synth+0x320>)
 8000d02:	835d      	strh	r5, [r3, #26]
 8000d04:	6027      	str	r7, [r4, #0]
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000d06:	4ca2      	ldr	r4, [pc, #648]	; (8000f90 <init_synth+0x324>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d08:	f8c3 2016 	str.w	r2, [r3, #22]
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000d0c:	6026      	str	r6, [r4, #0]
 8000d0e:	6066      	str	r6, [r4, #4]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000d10:	4ca0      	ldr	r4, [pc, #640]	; (8000f94 <init_synth+0x328>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d12:	851d      	strh	r5, [r3, #40]	; 0x28
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000d14:	6026      	str	r6, [r4, #0]
 8000d16:	6066      	str	r6, [r4, #4]
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000d18:	4c9f      	ldr	r4, [pc, #636]	; (8000f98 <init_synth+0x32c>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d1a:	86dd      	strh	r5, [r3, #54]	; 0x36
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000d1c:	6026      	str	r6, [r4, #0]
 8000d1e:	6066      	str	r6, [r4, #4]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d20:	465e      	mov	r6, fp
 8000d22:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
 8000d26:	f8a3 5052 	strh.w	r5, [r3, #82]	; 0x52
		algo = 0x00;								//default algorithm 0
 8000d2a:	7001      	strb	r1, [r0, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d2c:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8000d30:	61d8      	str	r0, [r3, #28]
 8000d32:	6219      	str	r1, [r3, #32]
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
 8000d36:	f8a3 5060 	strh.w	r5, [r3, #96]	; 0x60
 8000d3a:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8000d3e:	f8c3 002a 	str.w	r0, [r3, #42]	; 0x2a
 8000d42:	f8c3 102e 	str.w	r1, [r3, #46]	; 0x2e
 8000d46:	f8c3 2032 	str.w	r2, [r3, #50]	; 0x32
 8000d4a:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8000d4e:	6398      	str	r0, [r3, #56]	; 0x38
 8000d50:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000d52:	641a      	str	r2, [r3, #64]	; 0x40
 8000d54:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8000d58:	f8c3 0046 	str.w	r0, [r3, #70]	; 0x46
 8000d5c:	f8c3 104a 	str.w	r1, [r3, #74]	; 0x4a
 8000d60:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
 8000d64:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d66:	465e      	mov	r6, fp
 8000d68:	6558      	str	r0, [r3, #84]	; 0x54
 8000d6a:	6599      	str	r1, [r3, #88]	; 0x58
 8000d6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000d6e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d70:	465e      	mov	r6, fp
 8000d72:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8000d76:	f8c3 0062 	str.w	r0, [r3, #98]	; 0x62
 8000d7a:	f8c3 1066 	str.w	r1, [r3, #102]	; 0x66
 8000d7e:	f8c3 206a 	str.w	r2, [r3, #106]	; 0x6a
 8000d82:	f8a3 507c 	strh.w	r5, [r3, #124]	; 0x7c
 8000d86:	f8a3 508a 	strh.w	r5, [r3, #138]	; 0x8a
 8000d8a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d8c:	465e      	mov	r6, fp
 8000d8e:	6718      	str	r0, [r3, #112]	; 0x70
 8000d90:	6759      	str	r1, [r3, #116]	; 0x74
 8000d92:	679a      	str	r2, [r3, #120]	; 0x78
 8000d94:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d96:	465e      	mov	r6, fp
 8000d98:	f8c3 007e 	str.w	r0, [r3, #126]	; 0x7e
 8000d9c:	f8c3 1082 	str.w	r1, [r3, #130]	; 0x82
 8000da0:	f8c3 2086 	str.w	r2, [r3, #134]	; 0x86
 8000da4:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000da6:	465e      	mov	r6, fp
 8000da8:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000dac:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8000db0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000db4:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000db6:	465e      	mov	r6, fp
 8000db8:	f8a3 5098 	strh.w	r5, [r3, #152]	; 0x98
 8000dbc:	f8a3 50a6 	strh.w	r5, [r3, #166]	; 0xa6
 8000dc0:	f8a3 50b4 	strh.w	r5, [r3, #180]	; 0xb4
 8000dc4:	f8a3 50c2 	strh.w	r5, [r3, #194]	; 0xc2
 8000dc8:	f8a3 50d0 	strh.w	r5, [r3, #208]	; 0xd0
 8000dcc:	f8a3 50de 	strh.w	r5, [r3, #222]	; 0xde
 8000dd0:	f8c3 009a 	str.w	r0, [r3, #154]	; 0x9a
 8000dd4:	f8c3 109e 	str.w	r1, [r3, #158]	; 0x9e
 8000dd8:	f8c3 20a2 	str.w	r2, [r3, #162]	; 0xa2
 8000ddc:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000dde:	465e      	mov	r6, fp
 8000de0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 8000de4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8000de8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000dec:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000dee:	465e      	mov	r6, fp
 8000df0:	f8c3 00b6 	str.w	r0, [r3, #182]	; 0xb6
 8000df4:	f8c3 10ba 	str.w	r1, [r3, #186]	; 0xba
 8000df8:	f8c3 20be 	str.w	r2, [r3, #190]	; 0xbe
 8000dfc:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000dfe:	465e      	mov	r6, fp
 8000e00:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
 8000e04:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8000e08:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000e0c:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e0e:	465e      	mov	r6, fp
 8000e10:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
 8000e14:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
 8000e18:	f8c3 20da 	str.w	r2, [r3, #218]	; 0xda
 8000e1c:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e1e:	465e      	mov	r6, fp
 8000e20:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000e24:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8000e28:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000e2c:	f8a3 50ec 	strh.w	r5, [r3, #236]	; 0xec
 8000e30:	f8a3 50fa 	strh.w	r5, [r3, #250]	; 0xfa
 8000e34:	f8a3 5108 	strh.w	r5, [r3, #264]	; 0x108
 8000e38:	f8a3 5116 	strh.w	r5, [r3, #278]	; 0x116
 8000e3c:	f8a3 5124 	strh.w	r5, [r3, #292]	; 0x124
 8000e40:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e42:	465e      	mov	r6, fp
 8000e44:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
 8000e48:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
 8000e4c:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
 8000e50:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e52:	465e      	mov	r6, fp
 8000e54:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
 8000e58:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 8000e5c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000e60:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e62:	465e      	mov	r6, fp
 8000e64:	f8c3 010a 	str.w	r0, [r3, #266]	; 0x10a
 8000e68:	f8c3 110e 	str.w	r1, [r3, #270]	; 0x10e
 8000e6c:	f8c3 2112 	str.w	r2, [r3, #274]	; 0x112
 8000e70:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e72:	465e      	mov	r6, fp
 8000e74:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000e78:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
 8000e7c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8000e80:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e82:	465e      	mov	r6, fp
 8000e84:	f8a3 5132 	strh.w	r5, [r3, #306]	; 0x132
 8000e88:	f8c3 0126 	str.w	r0, [r3, #294]	; 0x126
 8000e8c:	f8c3 112a 	str.w	r1, [r3, #298]	; 0x12a
 8000e90:	f8c3 212e 	str.w	r2, [r3, #302]	; 0x12e
 8000e94:	f8a3 5140 	strh.w	r5, [r3, #320]	; 0x140
 8000e98:	f8a3 514e 	strh.w	r5, [r3, #334]	; 0x14e
 8000e9c:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e9e:	465e      	mov	r6, fp
 8000ea0:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8000ea4:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
 8000ea8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8000eac:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000eae:	465e      	mov	r6, fp
 8000eb0:	f8c3 0142 	str.w	r0, [r3, #322]	; 0x142
 8000eb4:	f8c3 1146 	str.w	r1, [r3, #326]	; 0x146
 8000eb8:	f8c3 214a 	str.w	r2, [r3, #330]	; 0x14a
 8000ebc:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ebe:	465e      	mov	r6, fp
 8000ec0:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8000ec4:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
 8000ec8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8000ecc:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ece:	465e      	mov	r6, fp
 8000ed0:	f8a3 515c 	strh.w	r5, [r3, #348]	; 0x15c
 8000ed4:	f8a3 516a 	strh.w	r5, [r3, #362]	; 0x16a
 8000ed8:	f8a3 5178 	strh.w	r5, [r3, #376]	; 0x178
 8000edc:	f8a3 5186 	strh.w	r5, [r3, #390]	; 0x186
 8000ee0:	f8a3 5194 	strh.w	r5, [r3, #404]	; 0x194
 8000ee4:	f8a3 51a2 	strh.w	r5, [r3, #418]	; 0x1a2
 8000ee8:	f8c3 015e 	str.w	r0, [r3, #350]	; 0x15e
 8000eec:	f8c3 1162 	str.w	r1, [r3, #354]	; 0x162
 8000ef0:	f8c3 2166 	str.w	r2, [r3, #358]	; 0x166
 8000ef4:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ef6:	465e      	mov	r6, fp
 8000ef8:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
 8000efc:	f8c3 1170 	str.w	r1, [r3, #368]	; 0x170
 8000f00:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8000f04:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f06:	465e      	mov	r6, fp
 8000f08:	f8c3 017a 	str.w	r0, [r3, #378]	; 0x17a
 8000f0c:	f8c3 117e 	str.w	r1, [r3, #382]	; 0x17e
 8000f10:	f8c3 2182 	str.w	r2, [r3, #386]	; 0x182
 8000f14:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f16:	465e      	mov	r6, fp
 8000f18:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8000f1c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8000f20:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8000f24:	f8a3 51b0 	strh.w	r5, [r3, #432]	; 0x1b0
 8000f28:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f2a:	f8a3 51be 	strh.w	r5, [r3, #446]	; 0x1be
 8000f2e:	465e      	mov	r6, fp
		}
	}
	env_period = ENV_MAX_PERIOD;
 8000f30:	f240 5562 	movw	r5, #1378	; 0x562
 8000f34:	4c19      	ldr	r4, [pc, #100]	; (8000f9c <init_synth+0x330>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000f36:	f8c3 0196 	str.w	r0, [r3, #406]	; 0x196
 8000f3a:	f8c3 119a 	str.w	r1, [r3, #410]	; 0x19a
 8000f3e:	f8c3 219e 	str.w	r2, [r3, #414]	; 0x19e
 8000f42:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f44:	f8c3 01a4 	str.w	r0, [r3, #420]	; 0x1a4
 8000f48:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
 8000f4c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8000f50:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
	env_period = ENV_MAX_PERIOD;
 8000f54:	8025      	strh	r5, [r4, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000f56:	f8c3 01b2 	str.w	r0, [r3, #434]	; 0x1b2
 8000f5a:	f8c3 11b6 	str.w	r1, [r3, #438]	; 0x1b6
 8000f5e:	f8c3 21ba 	str.w	r2, [r3, #442]	; 0x1ba
}
 8000f62:	b01b      	add	sp, #108	; 0x6c
 8000f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f68:	080045c0 	.word	0x080045c0
 8000f6c:	200002d0 	.word	0x200002d0
 8000f70:	200004b8 	.word	0x200004b8
 8000f74:	200004ac 	.word	0x200004ac
 8000f78:	2000049c 	.word	0x2000049c
 8000f7c:	200004c4 	.word	0x200004c4
 8000f80:	20000490 	.word	0x20000490
 8000f84:	20000494 	.word	0x20000494
 8000f88:	20000498 	.word	0x20000498
 8000f8c:	200004cc 	.word	0x200004cc
 8000f90:	200004bc 	.word	0x200004bc
 8000f94:	200004b0 	.word	0x200004b0
 8000f98:	200004a0 	.word	0x200004a0
 8000f9c:	20000496 	.word	0x20000496

08000fa0 <clear_voices>:

void clear_voices() {
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		op[0][i].note_value = -1;
 8000fa0:	22ff      	movs	r2, #255	; 0xff
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <clear_voices+0x20>)
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	739a      	strb	r2, [r3, #14]
 8000fa8:	771a      	strb	r2, [r3, #28]
 8000faa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8000fb6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000fba:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}
}
 8000fbe:	4770      	bx	lr
 8000fc0:	200002d0 	.word	0x200002d0

08000fc4 <add_voice>:

void add_voice(uint8_t note_value) {
 8000fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t voice_index, released_voice = -1;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000fc8:	4c74      	ldr	r4, [pc, #464]	; (800119c <add_voice+0x1d8>)
void add_voice(uint8_t note_value) {
 8000fca:	4607      	mov	r7, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000fcc:	7823      	ldrb	r3, [r4, #0]
 8000fce:	2bff      	cmp	r3, #255	; 0xff
 8000fd0:	f000 80bc 	beq.w	800114c <add_voice+0x188>
 8000fd4:	7ba2      	ldrb	r2, [r4, #14]
 8000fd6:	2aff      	cmp	r2, #255	; 0xff
 8000fd8:	f000 80bd 	beq.w	8001156 <add_voice+0x192>
 8000fdc:	7f22      	ldrb	r2, [r4, #28]
 8000fde:	2aff      	cmp	r2, #255	; 0xff
 8000fe0:	f000 80be 	beq.w	8001160 <add_voice+0x19c>
 8000fe4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8000fe8:	2aff      	cmp	r2, #255	; 0xff
 8000fea:	f000 80be 	beq.w	800116a <add_voice+0x1a6>
 8000fee:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000ff2:	2aff      	cmp	r2, #255	; 0xff
 8000ff4:	f000 80be 	beq.w	8001174 <add_voice+0x1b0>
 8000ff8:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8000ffc:	2aff      	cmp	r2, #255	; 0xff
 8000ffe:	f000 80be 	beq.w	800117e <add_voice+0x1ba>
 8001002:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8001006:	2aff      	cmp	r2, #255	; 0xff
 8001008:	f000 80be 	beq.w	8001188 <add_voice+0x1c4>
 800100c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8001010:	2aff      	cmp	r2, #255	; 0xff
 8001012:	f000 80c0 	beq.w	8001196 <add_voice+0x1d2>
 8001016:	2108      	movs	r1, #8
 8001018:	460d      	mov	r5, r1
			break;
		}
	}
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800101a:	429f      	cmp	r7, r3
 800101c:	f000 8099 	beq.w	8001152 <add_voice+0x18e>
			voice_index = i;
			break;
		}
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001020:	7aa3      	ldrb	r3, [r4, #10]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001022:	7ba2      	ldrb	r2, [r4, #14]
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001024:	2b03      	cmp	r3, #3
 8001026:	bf14      	ite	ne
 8001028:	23ff      	movne	r3, #255	; 0xff
 800102a:	2300      	moveq	r3, #0
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800102c:	42ba      	cmp	r2, r7
 800102e:	f000 8095 	beq.w	800115c <add_voice+0x198>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001032:	7e20      	ldrb	r0, [r4, #24]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001034:	7f22      	ldrb	r2, [r4, #28]
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001036:	2803      	cmp	r0, #3
 8001038:	bf08      	it	eq
 800103a:	2301      	moveq	r3, #1
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800103c:	42ba      	cmp	r2, r7
 800103e:	f000 8092 	beq.w	8001166 <add_voice+0x1a2>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001042:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001046:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800104a:	2803      	cmp	r0, #3
 800104c:	bf08      	it	eq
 800104e:	2302      	moveq	r3, #2
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001050:	42ba      	cmp	r2, r7
 8001052:	f000 808d 	beq.w	8001170 <add_voice+0x1ac>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001056:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800105a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800105e:	2803      	cmp	r0, #3
 8001060:	bf08      	it	eq
 8001062:	2303      	moveq	r3, #3
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001064:	42ba      	cmp	r2, r7
 8001066:	f000 8088 	beq.w	800117a <add_voice+0x1b6>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800106a:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800106e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001072:	2803      	cmp	r0, #3
 8001074:	bf08      	it	eq
 8001076:	2304      	moveq	r3, #4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001078:	42ba      	cmp	r2, r7
 800107a:	f000 8083 	beq.w	8001184 <add_voice+0x1c0>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800107e:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001082:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001086:	2803      	cmp	r0, #3
 8001088:	bf08      	it	eq
 800108a:	2305      	moveq	r3, #5
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800108c:	42ba      	cmp	r2, r7
 800108e:	d07e      	beq.n	800118e <add_voice+0x1ca>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001090:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001094:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001098:	2803      	cmp	r0, #3
 800109a:	bf08      	it	eq
 800109c:	2306      	moveq	r3, #6
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800109e:	42ba      	cmp	r2, r7
 80010a0:	d077      	beq.n	8001192 <add_voice+0x1ce>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80010a2:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 80010a6:	2a03      	cmp	r2, #3
 80010a8:	d03a      	beq.n	8001120 <add_voice+0x15c>
			released_voice = i;
		}
	}
	if (voice_index == MAX_VOICES) {
 80010aa:	2d08      	cmp	r5, #8
 80010ac:	d102      	bne.n	80010b4 <add_voice+0xf0>
		if (released_voice == (uint8_t)-1) {
 80010ae:	2bff      	cmp	r3, #255	; 0xff
 80010b0:	d03a      	beq.n	8001128 <add_voice+0x164>
 80010b2:	4619      	mov	r1, r3
		}
		else {
			voice_index = released_voice;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 80010b4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80010b8:	eb04 0441 	add.w	r4, r4, r1, lsl #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
		if (op_index != 0)	{
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
		}
		else {
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 80010bc:	4626      	mov	r6, r4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80010be:	2501      	movs	r5, #1
 80010c0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80011a0 <add_voice+0x1dc>
 80010c4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80011a4 <add_voice+0x1e0>
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 80010c8:	f04f 0a00 	mov.w	sl, #0
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 80010cc:	4638      	mov	r0, r7
		op[op_index][voice_index].note_value = note_value;										//store note
 80010ce:	7027      	strb	r7, [r4, #0]
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 80010d0:	f8a4 a008 	strh.w	sl, [r4, #8]
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 80010d4:	f818 bb01 	ldrb.w	fp, [r8], #1
 80010d8:	f7ff fa76 	bl	80005c8 <note_to_freq>
 80010dc:	fb00 f30b 	mul.w	r3, r0, fp
		if (op_index != 0)	{
 80010e0:	2d01      	cmp	r5, #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 80010e2:	ea4f 1323 	mov.w	r3, r3, asr #4
 80010e6:	8063      	strh	r3, [r4, #2]
		if (op_index != 0)	{
 80010e8:	d020      	beq.n	800112c <add_voice+0x168>
		}

		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 80010ea:	f8b9 2000 	ldrh.w	r2, [r9]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 80010ee:	88f3      	ldrh	r3, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80010f0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80010f4:	fab1 f181 	clz	r1, r1
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 80010f8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80010fc:	0949      	lsrs	r1, r1, #5
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 80010fe:	fb03 f300 	mul.w	r3, r3, r0
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001102:	2d04      	cmp	r5, #4
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8001104:	ea4f 1323 	mov.w	r3, r3, asr #4
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8001108:	f884 a004 	strb.w	sl, [r4, #4]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 800110c:	80e3      	strh	r3, [r4, #6]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 800110e:	81a2      	strh	r2, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001110:	72a1      	strb	r1, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001112:	d009      	beq.n	8001128 <add_voice+0x164>
 8001114:	3501      	adds	r5, #1
 8001116:	b2ed      	uxtb	r5, r5
 8001118:	3470      	adds	r4, #112	; 0x70
 800111a:	f109 0902 	add.w	r9, r9, #2
 800111e:	e7d3      	b.n	80010c8 <add_voice+0x104>
	if (voice_index == MAX_VOICES) {
 8001120:	2d08      	cmp	r5, #8
 8001122:	d1c7      	bne.n	80010b4 <add_voice+0xf0>
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001124:	2307      	movs	r3, #7
 8001126:	e7c4      	b.n	80010b2 <add_voice+0xee>
		}
		else {
			op[op_index][voice_index].adsr_state = ATTACK;											//else, start on attack state
		}
	}
}
 8001128:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 800112c:	8870      	ldrh	r0, [r6, #2]
 800112e:	f7ff fa51 	bl	80005d4 <calculate_delta>
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001132:	f8b9 3000 	ldrh.w	r3, [r9]
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8001136:	80f0      	strh	r0, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001138:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 800113c:	fab2 f282 	clz	r2, r2
 8001140:	0952      	lsrs	r2, r2, #5
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8001142:	f884 a004 	strb.w	sl, [r4, #4]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001146:	81a3      	strh	r3, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001148:	72a2      	strb	r2, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 800114a:	e7e3      	b.n	8001114 <add_voice+0x150>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800114c:	2100      	movs	r1, #0
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 800114e:	460d      	mov	r5, r1
 8001150:	e763      	b.n	800101a <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001152:	2100      	movs	r1, #0
 8001154:	e7ae      	b.n	80010b4 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001156:	2101      	movs	r1, #1
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001158:	460d      	mov	r5, r1
 800115a:	e75e      	b.n	800101a <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800115c:	2101      	movs	r1, #1
 800115e:	e7a9      	b.n	80010b4 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001160:	2102      	movs	r1, #2
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001162:	460d      	mov	r5, r1
 8001164:	e759      	b.n	800101a <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001166:	2102      	movs	r1, #2
 8001168:	e7a4      	b.n	80010b4 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800116a:	2103      	movs	r1, #3
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 800116c:	460d      	mov	r5, r1
 800116e:	e754      	b.n	800101a <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001170:	2103      	movs	r1, #3
 8001172:	e79f      	b.n	80010b4 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001174:	2104      	movs	r1, #4
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001176:	460d      	mov	r5, r1
 8001178:	e74f      	b.n	800101a <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800117a:	2104      	movs	r1, #4
 800117c:	e79a      	b.n	80010b4 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800117e:	2105      	movs	r1, #5
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001180:	460d      	mov	r5, r1
 8001182:	e74a      	b.n	800101a <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001184:	2105      	movs	r1, #5
 8001186:	e795      	b.n	80010b4 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001188:	2106      	movs	r1, #6
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 800118a:	460d      	mov	r5, r1
 800118c:	e745      	b.n	800101a <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800118e:	2106      	movs	r1, #6
 8001190:	e790      	b.n	80010b4 <add_voice+0xf0>
 8001192:	2107      	movs	r1, #7
 8001194:	e78e      	b.n	80010b4 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001196:	2107      	movs	r1, #7
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001198:	460d      	mov	r5, r1
 800119a:	e73e      	b.n	800101a <add_voice+0x56>
 800119c:	200002d0 	.word	0x200002d0
 80011a0:	200004cc 	.word	0x200004cc
 80011a4:	200004bc 	.word	0x200004bc

080011a8 <release_voice>:

void release_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <release_voice+0x78>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4282      	cmp	r2, r0
 80011ae:	d028      	beq.n	8001202 <release_voice+0x5a>
 80011b0:	7b9a      	ldrb	r2, [r3, #14]
 80011b2:	4282      	cmp	r2, r0
 80011b4:	d027      	beq.n	8001206 <release_voice+0x5e>
 80011b6:	7f1a      	ldrb	r2, [r3, #28]
 80011b8:	4282      	cmp	r2, r0
 80011ba:	d026      	beq.n	800120a <release_voice+0x62>
 80011bc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80011c0:	4282      	cmp	r2, r0
 80011c2:	d024      	beq.n	800120e <release_voice+0x66>
 80011c4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80011c8:	4282      	cmp	r2, r0
 80011ca:	d022      	beq.n	8001212 <release_voice+0x6a>
 80011cc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80011d0:	4282      	cmp	r2, r0
 80011d2:	d020      	beq.n	8001216 <release_voice+0x6e>
 80011d4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80011d8:	4282      	cmp	r2, r0
 80011da:	d01e      	beq.n	800121a <release_voice+0x72>
 80011dc:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80011e0:	4282      	cmp	r2, r0
 80011e2:	bf14      	ite	ne
 80011e4:	2008      	movne	r0, #8
 80011e6:	2007      	moveq	r0, #7
			break;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op[op_index][voice_index].adsr_state = RELEASE;
 80011e8:	2203      	movs	r2, #3
 80011ea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80011ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80011f2:	729a      	strb	r2, [r3, #10]
 80011f4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 80011f8:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80011fc:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	}
}
 8001200:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 8001202:	2000      	movs	r0, #0
 8001204:	e7f0      	b.n	80011e8 <release_voice+0x40>
 8001206:	2001      	movs	r0, #1
 8001208:	e7ee      	b.n	80011e8 <release_voice+0x40>
 800120a:	2002      	movs	r0, #2
 800120c:	e7ec      	b.n	80011e8 <release_voice+0x40>
 800120e:	2003      	movs	r0, #3
 8001210:	e7ea      	b.n	80011e8 <release_voice+0x40>
 8001212:	2004      	movs	r0, #4
 8001214:	e7e8      	b.n	80011e8 <release_voice+0x40>
 8001216:	2005      	movs	r0, #5
 8001218:	e7e6      	b.n	80011e8 <release_voice+0x40>
 800121a:	2006      	movs	r0, #6
 800121c:	e7e4      	b.n	80011e8 <release_voice+0x40>
 800121e:	bf00      	nop
 8001220:	200002d0 	.word	0x200002d0

08001224 <synth_sample>:

int16_t synth_sample() {
 8001224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t output_volume = 0x0800;											//default output volume 2048
	if (--env_period == 0x00) {												//decrement and check envelope period
 8001228:	4bbf      	ldr	r3, [pc, #764]	; (8001528 <synth_sample+0x304>)
 800122a:	881d      	ldrh	r5, [r3, #0]
 800122c:	3d01      	subs	r5, #1
 800122e:	b2ad      	uxth	r5, r5
 8001230:	bb2d      	cbnz	r5, 800127e <synth_sample+0x5a>
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 8001232:	f240 5262 	movw	r2, #1378	; 0x562
	int16_t output_volume = 0x0800;											//default output volume 2048
 8001236:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800123a:	4cbc      	ldr	r4, [pc, #752]	; (800152c <synth_sample+0x308>)
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800123c:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8001540 <synth_sample+0x31c>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8001240:	4fbb      	ldr	r7, [pc, #748]	; (8001530 <synth_sample+0x30c>)
 8001242:	4ebc      	ldr	r6, [pc, #752]	; (8001534 <synth_sample+0x310>)
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 8001244:	801a      	strh	r2, [r3, #0]
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001246:	7823      	ldrb	r3, [r4, #0]
 8001248:	b2e8      	uxtb	r0, r5
 800124a:	2bff      	cmp	r3, #255	; 0xff
 800124c:	d00f      	beq.n	800126e <synth_sample+0x4a>
		switch (op[op_index][voice_index].adsr_state) {
 800124e:	7aa3      	ldrb	r3, [r4, #10]
 8001250:	2b04      	cmp	r3, #4
 8001252:	f200 8095 	bhi.w	8001380 <synth_sample+0x15c>
 8001256:	e8df f003 	tbb	[pc, r3]
 800125a:	6b7c      	.short	0x6b7c
 800125c:	6093      	.short	0x6093
 800125e:	03          	.byte	0x03
 800125f:	00          	.byte	0x00
static inline void delete_voice(uint8_t voice_index) { op[0][voice_index].note_value = -1; };
 8001260:	23ff      	movs	r3, #255	; 0xff
 8001262:	7023      	strb	r3, [r4, #0]
				cycle_envelope(voice_index);
				output_volume += modulate(voice_index);
 8001264:	f7ff fb08 	bl	8000878 <modulate>
 8001268:	4480      	add	r8, r0
 800126a:	fa0f f888 	sxth.w	r8, r8
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
 800126e:	3501      	adds	r5, #1
 8001270:	2d08      	cmp	r5, #8
 8001272:	f104 040e 	add.w	r4, r4, #14
 8001276:	d1e6      	bne.n	8001246 <synth_sample+0x22>
				output_volume += modulate(voice_index);
			}
		}
	}
	return output_volume;
}
 8001278:	4640      	mov	r0, r8
 800127a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800127e:	4cab      	ldr	r4, [pc, #684]	; (800152c <synth_sample+0x308>)
	if (--env_period == 0x00) {												//decrement and check envelope period
 8001280:	801d      	strh	r5, [r3, #0]
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001282:	7823      	ldrb	r3, [r4, #0]
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d173      	bne.n	8001370 <synth_sample+0x14c>
	int16_t output_volume = 0x0800;											//default output volume 2048
 8001288:	f44f 6800 	mov.w	r8, #2048	; 0x800
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800128c:	7ba3      	ldrb	r3, [r4, #14]
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d005      	beq.n	800129e <synth_sample+0x7a>
				output_volume += modulate(voice_index);
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff faf0 	bl	8000878 <modulate>
 8001298:	4480      	add	r8, r0
 800129a:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800129e:	7f23      	ldrb	r3, [r4, #28]
 80012a0:	2bff      	cmp	r3, #255	; 0xff
 80012a2:	d005      	beq.n	80012b0 <synth_sample+0x8c>
				output_volume += modulate(voice_index);
 80012a4:	2002      	movs	r0, #2
 80012a6:	f7ff fae7 	bl	8000878 <modulate>
 80012aa:	4480      	add	r8, r0
 80012ac:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012b0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80012b4:	2bff      	cmp	r3, #255	; 0xff
 80012b6:	d005      	beq.n	80012c4 <synth_sample+0xa0>
				output_volume += modulate(voice_index);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f7ff fadd 	bl	8000878 <modulate>
 80012be:	4480      	add	r8, r0
 80012c0:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80012c8:	2bff      	cmp	r3, #255	; 0xff
 80012ca:	d005      	beq.n	80012d8 <synth_sample+0xb4>
				output_volume += modulate(voice_index);
 80012cc:	2004      	movs	r0, #4
 80012ce:	f7ff fad3 	bl	8000878 <modulate>
 80012d2:	4480      	add	r8, r0
 80012d4:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80012dc:	2bff      	cmp	r3, #255	; 0xff
 80012de:	d005      	beq.n	80012ec <synth_sample+0xc8>
				output_volume += modulate(voice_index);
 80012e0:	2005      	movs	r0, #5
 80012e2:	f7ff fac9 	bl	8000878 <modulate>
 80012e6:	4480      	add	r8, r0
 80012e8:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012ec:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80012f0:	2bff      	cmp	r3, #255	; 0xff
 80012f2:	d005      	beq.n	8001300 <synth_sample+0xdc>
				output_volume += modulate(voice_index);
 80012f4:	2006      	movs	r0, #6
 80012f6:	f7ff fabf 	bl	8000878 <modulate>
 80012fa:	4480      	add	r8, r0
 80012fc:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001300:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8001304:	2bff      	cmp	r3, #255	; 0xff
 8001306:	d0b7      	beq.n	8001278 <synth_sample+0x54>
				output_volume += modulate(voice_index);
 8001308:	2007      	movs	r0, #7
 800130a:	f7ff fab5 	bl	8000878 <modulate>
 800130e:	4480      	add	r8, r0
 8001310:	fa0f f888 	sxth.w	r8, r8
}
 8001314:	4640      	mov	r0, r8
 8001316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 800131a:	4a87      	ldr	r2, [pc, #540]	; (8001538 <synth_sample+0x314>)
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	8812      	ldrh	r2, [r2, #0]
 8001320:	4293      	cmp	r3, r2
 8001322:	f080 8124 	bcs.w	800156e <synth_sample+0x34a>
				op[op_index][voice_index].env_amp = 0;
 8001326:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001328:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 800132a:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SILENT;
 800132c:	72a2      	strb	r2, [r4, #10]
 800132e:	e028      	b.n	8001382 <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8001330:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8001334:	8839      	ldrh	r1, [r7, #0]
 8001336:	7832      	ldrb	r2, [r6, #0]
 8001338:	ebac 0e01 	sub.w	lr, ip, r1
 800133c:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001340:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8001344:	db5d      	blt.n	8001402 <synth_sample+0x1de>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001346:	458c      	cmp	ip, r1
 8001348:	d35b      	bcc.n	8001402 <synth_sample+0x1de>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 800134a:	fa1f f38e 	uxth.w	r3, lr
 800134e:	81a3      	strh	r3, [r4, #12]
 8001350:	e017      	b.n	8001382 <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001352:	4a7a      	ldr	r2, [pc, #488]	; (800153c <synth_sample+0x318>)
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	8812      	ldrh	r2, [r2, #0]
 8001358:	4413      	add	r3, r2
 800135a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800135e:	f2c0 8103 	blt.w	8001568 <synth_sample+0x344>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001362:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001366:	2101      	movs	r1, #1
 8001368:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800136a:	81a2      	strh	r2, [r4, #12]
				op[op_index][voice_index].adsr_state = DECAY;
 800136c:	72a1      	strb	r1, [r4, #10]
 800136e:	e008      	b.n	8001382 <synth_sample+0x15e>
				output_volume += modulate(voice_index);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fa81 	bl	8000878 <modulate>
 8001376:	f500 6800 	add.w	r8, r0, #2048	; 0x800
 800137a:	fa0f f888 	sxth.w	r8, r8
 800137e:	e785      	b.n	800128c <synth_sample+0x68>
 8001380:	89a3      	ldrh	r3, [r4, #12]
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001382:	f899 2000 	ldrb.w	r2, [r9]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 800138c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001390:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8001392:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001394:	7123      	strb	r3, [r4, #4]
		switch (op[op_index][voice_index].adsr_state) {
 8001396:	d059      	beq.n	800144c <synth_sample+0x228>
 8001398:	2a03      	cmp	r2, #3
 800139a:	d049      	beq.n	8001430 <synth_sample+0x20c>
 800139c:	b3b2      	cbz	r2, 800140c <synth_sample+0x1e8>
 800139e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013a2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 80013ac:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013b0:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 80013b2:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013b4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		switch (op[op_index][voice_index].adsr_state) {
 80013b8:	d061      	beq.n	800147e <synth_sample+0x25a>
 80013ba:	2a03      	cmp	r2, #3
 80013bc:	f000 8089 	beq.w	80014d2 <synth_sample+0x2ae>
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	d075      	beq.n	80014b0 <synth_sample+0x28c>
 80013c4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013c8:	f899 2002 	ldrb.w	r2, [r9, #2]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 80013d2:	f894 215a 	ldrb.w	r2, [r4, #346]	; 0x15a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013d6:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 80013d8:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013da:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
		switch (op[op_index][voice_index].adsr_state) {
 80013de:	f000 80b1 	beq.w	8001544 <synth_sample+0x320>
 80013e2:	2a03      	cmp	r2, #3
 80013e4:	f000 8093 	beq.w	800150e <synth_sample+0x2ea>
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d07f      	beq.n	80014ec <synth_sample+0x2c8>
 80013ec:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013f0:	f899 2003 	ldrb.w	r2, [r9, #3]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	11db      	asrs	r3, r3, #7
 80013fc:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001400:	e730      	b.n	8001264 <synth_sample+0x40>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001402:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001404:	b29b      	uxth	r3, r3
 8001406:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001408:	72a2      	strb	r2, [r4, #10]
 800140a:	e7ba      	b.n	8001382 <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 800140c:	4a4b      	ldr	r2, [pc, #300]	; (800153c <synth_sample+0x318>)
 800140e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8001412:	8852      	ldrh	r2, [r2, #2]
 8001414:	4413      	add	r3, r2
 8001416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800141a:	f2c0 80b1 	blt.w	8001580 <synth_sample+0x35c>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800141e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001422:	2101      	movs	r1, #1
 8001424:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001426:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = DECAY;
 800142a:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
 800142e:	e7b8      	b.n	80013a2 <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001430:	4a41      	ldr	r2, [pc, #260]	; (8001538 <synth_sample+0x314>)
 8001432:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8001436:	8852      	ldrh	r2, [r2, #2]
 8001438:	4293      	cmp	r3, r2
 800143a:	f080 809c 	bcs.w	8001576 <synth_sample+0x352>
				op[op_index][voice_index].env_amp = 0;
 800143e:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001440:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001442:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SILENT;
 8001446:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 800144a:	e7aa      	b.n	80013a2 <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 800144c:	f8b4 c07c 	ldrh.w	ip, [r4, #124]	; 0x7c
 8001450:	8879      	ldrh	r1, [r7, #2]
 8001452:	7872      	ldrb	r2, [r6, #1]
 8001454:	ebac 0e01 	sub.w	lr, ip, r1
 8001458:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 800145c:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8001460:	db06      	blt.n	8001470 <synth_sample+0x24c>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001462:	458c      	cmp	ip, r1
 8001464:	d304      	bcc.n	8001470 <synth_sample+0x24c>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001466:	fa1f f38e 	uxth.w	r3, lr
 800146a:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 800146e:	e798      	b.n	80013a2 <synth_sample+0x17e>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001470:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001472:	b29b      	uxth	r3, r3
 8001474:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001478:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 800147c:	e791      	b.n	80013a2 <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 800147e:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	; 0xec
 8001482:	88b9      	ldrh	r1, [r7, #4]
 8001484:	78b2      	ldrb	r2, [r6, #2]
 8001486:	ebac 0e01 	sub.w	lr, ip, r1
 800148a:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 800148e:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8001492:	db06      	blt.n	80014a2 <synth_sample+0x27e>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001494:	458c      	cmp	ip, r1
 8001496:	d304      	bcc.n	80014a2 <synth_sample+0x27e>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001498:	fa1f f38e 	uxth.w	r3, lr
 800149c:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 80014a0:	e792      	b.n	80013c8 <synth_sample+0x1a4>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80014a2:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80014aa:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 80014ae:	e78b      	b.n	80013c8 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <synth_sample+0x318>)
 80014b2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80014b6:	8892      	ldrh	r2, [r2, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014be:	db63      	blt.n	8001588 <synth_sample+0x364>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 80014c4:	2101      	movs	r1, #1
 80014c6:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014c8:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = DECAY;
 80014cc:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
 80014d0:	e77a      	b.n	80013c8 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 80014d2:	4a19      	ldr	r2, [pc, #100]	; (8001538 <synth_sample+0x314>)
 80014d4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80014d8:	8892      	ldrh	r2, [r2, #4]
 80014da:	4293      	cmp	r3, r2
 80014dc:	d258      	bcs.n	8001590 <synth_sample+0x36c>
				op[op_index][voice_index].env_amp = 0;
 80014de:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 80014e0:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 80014e2:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SILENT;
 80014e6:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 80014ea:	e76d      	b.n	80013c8 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <synth_sample+0x318>)
 80014ee:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 80014f2:	88d2      	ldrh	r2, [r2, #6]
 80014f4:	4413      	add	r3, r2
 80014f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014fa:	db55      	blt.n	80015a8 <synth_sample+0x384>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001500:	2101      	movs	r1, #1
 8001502:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001504:	f8a4 215c 	strh.w	r2, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = DECAY;
 8001508:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
 800150c:	e770      	b.n	80013f0 <synth_sample+0x1cc>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <synth_sample+0x314>)
 8001510:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 8001514:	88d2      	ldrh	r2, [r2, #6]
 8001516:	4293      	cmp	r3, r2
 8001518:	d24a      	bcs.n	80015b0 <synth_sample+0x38c>
				op[op_index][voice_index].env_amp = 0;
 800151a:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 800151c:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 800151e:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SILENT;
 8001522:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 8001526:	e763      	b.n	80013f0 <synth_sample+0x1cc>
 8001528:	20000496 	.word	0x20000496
 800152c:	200002d0 	.word	0x200002d0
 8001530:	200004b0 	.word	0x200004b0
 8001534:	20000490 	.word	0x20000490
 8001538:	200004a0 	.word	0x200004a0
 800153c:	200004bc 	.word	0x200004bc
 8001540:	200004ac 	.word	0x200004ac
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8001544:	f8b4 c15c 	ldrh.w	ip, [r4, #348]	; 0x15c
 8001548:	88f9      	ldrh	r1, [r7, #6]
 800154a:	78f2      	ldrb	r2, [r6, #3]
 800154c:	ebac 0e01 	sub.w	lr, ip, r1
 8001550:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001554:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8001558:	db1f      	blt.n	800159a <synth_sample+0x376>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 800155a:	458c      	cmp	ip, r1
 800155c:	d31d      	bcc.n	800159a <synth_sample+0x376>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 800155e:	fa1f f38e 	uxth.w	r3, lr
 8001562:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001566:	e743      	b.n	80013f0 <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001568:	b29b      	uxth	r3, r3
 800156a:	81a3      	strh	r3, [r4, #12]
 800156c:	e709      	b.n	8001382 <synth_sample+0x15e>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	81a3      	strh	r3, [r4, #12]
 8001574:	e705      	b.n	8001382 <synth_sample+0x15e>
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	b29b      	uxth	r3, r3
 800157a:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 800157e:	e710      	b.n	80013a2 <synth_sample+0x17e>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001580:	b29b      	uxth	r3, r3
 8001582:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8001586:	e70c      	b.n	80013a2 <synth_sample+0x17e>
 8001588:	b29b      	uxth	r3, r3
 800158a:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 800158e:	e71b      	b.n	80013c8 <synth_sample+0x1a4>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	b29b      	uxth	r3, r3
 8001594:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001598:	e716      	b.n	80013c8 <synth_sample+0x1a4>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 800159a:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 800159c:	b29b      	uxth	r3, r3
 800159e:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80015a2:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 80015a6:	e723      	b.n	80013f0 <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 80015ae:	e71f      	b.n	80013f0 <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 80015b8:	e71a      	b.n	80013f0 <synth_sample+0x1cc>
 80015ba:	bf00      	nop

080015bc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop

080015c0 <display_send_command>:
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
	//turn on display
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
}

void display_send_command(uint8_t cmd) {
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	display_i2c_write(data_LSB | DISPLAY_BIT_E);	//pull enable bit HIGH
	display_i2c_write(data_LSB);					//pull enable bit LOW
}

void display_i2c_write(uint8_t byte) {
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80015c2:	26ff      	movs	r6, #255	; 0xff
 80015c4:	4d27      	ldr	r5, [pc, #156]	; (8001664 <display_send_command+0xa4>)
void display_send_command(uint8_t cmd) {
 80015c6:	b085      	sub	sp, #20
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 80015c8:	f020 070f 	bic.w	r7, r0, #15
 80015cc:	f047 0708 	orr.w	r7, r7, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80015d0:	f10d 020f 	add.w	r2, sp, #15
 80015d4:	2301      	movs	r3, #1
 80015d6:	214e      	movs	r1, #78	; 0x4e
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80015d8:	0104      	lsls	r4, r0, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80015da:	9600      	str	r6, [sp, #0]
 80015dc:	6828      	ldr	r0, [r5, #0]
 80015de:	f88d 700f 	strb.w	r7, [sp, #15]
 80015e2:	f000 ffbd 	bl	8002560 <HAL_I2C_Master_Transmit>
	display_i2c_write(cmd_MSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 80015e6:	f047 0c04 	orr.w	ip, r7, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80015ea:	f10d 020f 	add.w	r2, sp, #15
 80015ee:	2301      	movs	r3, #1
 80015f0:	214e      	movs	r1, #78	; 0x4e
 80015f2:	6828      	ldr	r0, [r5, #0]
 80015f4:	9600      	str	r6, [sp, #0]
 80015f6:	f88d c00f 	strb.w	ip, [sp, #15]
 80015fa:	f000 ffb1 	bl	8002560 <HAL_I2C_Master_Transmit>
 80015fe:	f10d 020f 	add.w	r2, sp, #15
 8001602:	2301      	movs	r3, #1
 8001604:	214e      	movs	r1, #78	; 0x4e
 8001606:	6828      	ldr	r0, [r5, #0]
 8001608:	9600      	str	r6, [sp, #0]
 800160a:	f88d 700f 	strb.w	r7, [sp, #15]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 800160e:	f044 0408 	orr.w	r4, r4, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001612:	f000 ffa5 	bl	8002560 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);									//wait 5 ms
 8001616:	2005      	movs	r0, #5
 8001618:	f000 fb32 	bl	8001c80 <HAL_Delay>
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 800161c:	b2e4      	uxtb	r4, r4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800161e:	f10d 020f 	add.w	r2, sp, #15
 8001622:	2301      	movs	r3, #1
 8001624:	214e      	movs	r1, #78	; 0x4e
 8001626:	6828      	ldr	r0, [r5, #0]
 8001628:	9600      	str	r6, [sp, #0]
 800162a:	f88d 400f 	strb.w	r4, [sp, #15]
	display_i2c_write(cmd_LSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 800162e:	f044 0704 	orr.w	r7, r4, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001632:	f000 ff95 	bl	8002560 <HAL_I2C_Master_Transmit>
 8001636:	f10d 020f 	add.w	r2, sp, #15
 800163a:	2301      	movs	r3, #1
 800163c:	214e      	movs	r1, #78	; 0x4e
 800163e:	6828      	ldr	r0, [r5, #0]
 8001640:	9600      	str	r6, [sp, #0]
 8001642:	f88d 700f 	strb.w	r7, [sp, #15]
 8001646:	f000 ff8b 	bl	8002560 <HAL_I2C_Master_Transmit>
 800164a:	2301      	movs	r3, #1
 800164c:	214e      	movs	r1, #78	; 0x4e
 800164e:	6828      	ldr	r0, [r5, #0]
 8001650:	9600      	str	r6, [sp, #0]
 8001652:	f10d 020f 	add.w	r2, sp, #15
 8001656:	f88d 400f 	strb.w	r4, [sp, #15]
 800165a:	f000 ff81 	bl	8002560 <HAL_I2C_Master_Transmit>
}
 800165e:	b005      	add	sp, #20
 8001660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001662:	bf00      	nop
 8001664:	2000052c 	.word	0x2000052c

08001668 <init_display>:
void init_display(I2C_HandleTypeDef* hi2c) {
 8001668:	4602      	mov	r2, r0
 800166a:	b508      	push	{r3, lr}
	display_i2c = hi2c;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <init_display+0x30>)
	display_send_command(init_4_bit_cmd);
 800166e:	2033      	movs	r0, #51	; 0x33
	display_i2c = hi2c;
 8001670:	601a      	str	r2, [r3, #0]
	display_send_command(init_4_bit_cmd);
 8001672:	f7ff ffa5 	bl	80015c0 <display_send_command>
	display_send_command(init_4_bit_cmd);
 8001676:	2032      	movs	r0, #50	; 0x32
 8001678:	f7ff ffa2 	bl	80015c0 <display_send_command>
	display_send_command(DISPLAY_CMD_FUNC |  DISPLAY_BIT_FUNC_DOUBLE);
 800167c:	2028      	movs	r0, #40	; 0x28
 800167e:	f7ff ff9f 	bl	80015c0 <display_send_command>
	display_send_command(DISPLAY_CMD_CLEAR);
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff ff9c 	bl	80015c0 <display_send_command>
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
 8001688:	2006      	movs	r0, #6
 800168a:	f7ff ff99 	bl	80015c0 <display_send_command>
}
 800168e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
 8001692:	200e      	movs	r0, #14
 8001694:	f7ff bf94 	b.w	80015c0 <display_send_command>
 8001698:	2000052c 	.word	0x2000052c

0800169c <display_i2c_dma_write>:
}

void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 800169c:	b410      	push	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 800169e:	4c04      	ldr	r4, [pc, #16]	; (80016b0 <display_i2c_dma_write+0x14>)
void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 80016a4:	6820      	ldr	r0, [r4, #0]
 80016a6:	214e      	movs	r1, #78	; 0x4e
}
 80016a8:	bc10      	pop	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 80016aa:	f001 b8a5 	b.w	80027f8 <HAL_I2C_Master_Transmit_DMA>
 80016ae:	bf00      	nop
 80016b0:	2000052c 	.word	0x2000052c

080016b4 <display_convert_cmd>:

void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = cmd_MSB;
 80016b4:	7813      	ldrb	r3, [r2, #0]
void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
 80016b6:	b470      	push	{r4, r5, r6}
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 80016b8:	f020 040f 	bic.w	r4, r0, #15
 80016bc:	f044 0408 	orr.w	r4, r4, #8
	*(buffer + (*pos)++) = cmd_MSB;
 80016c0:	1c5d      	adds	r5, r3, #1
 80016c2:	7015      	strb	r5, [r2, #0]
 80016c4:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB | DISPLAY_BIT_E;
 80016c6:	7813      	ldrb	r3, [r2, #0]
 80016c8:	f044 0504 	orr.w	r5, r4, #4
 80016cc:	1c5e      	adds	r6, r3, #1
 80016ce:	7016      	strb	r6, [r2, #0]
 80016d0:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB;
 80016d2:	7815      	ldrb	r5, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80016d4:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = cmd_MSB;
 80016d6:	1c68      	adds	r0, r5, #1
 80016d8:	7010      	strb	r0, [r2, #0]
 80016da:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = cmd_LSB;
 80016dc:	7810      	ldrb	r0, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = cmd_LSB;
 80016e4:	1c44      	adds	r4, r0, #1
 80016e6:	7014      	strb	r4, [r2, #0]
 80016e8:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB | DISPLAY_BIT_E;
 80016ea:	7810      	ldrb	r0, [r2, #0]
 80016ec:	f043 0404 	orr.w	r4, r3, #4
 80016f0:	1c45      	adds	r5, r0, #1
 80016f2:	7015      	strb	r5, [r2, #0]
 80016f4:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB;
 80016f6:	7810      	ldrb	r0, [r2, #0]
 80016f8:	1c44      	adds	r4, r0, #1
 80016fa:	7014      	strb	r4, [r2, #0]
 80016fc:	540b      	strb	r3, [r1, r0]
}
 80016fe:	bc70      	pop	{r4, r5, r6}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop

08001704 <display_convert_data>:

void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = data_MSB;
 8001704:	7813      	ldrb	r3, [r2, #0]
void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
 8001706:	b470      	push	{r4, r5, r6}
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 8001708:	f020 040f 	bic.w	r4, r0, #15
 800170c:	f044 0409 	orr.w	r4, r4, #9
	*(buffer + (*pos)++) = data_MSB;
 8001710:	1c5d      	adds	r5, r3, #1
 8001712:	7015      	strb	r5, [r2, #0]
 8001714:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = data_MSB | DISPLAY_BIT_E;
 8001716:	7813      	ldrb	r3, [r2, #0]
 8001718:	f044 0504 	orr.w	r5, r4, #4
 800171c:	1c5e      	adds	r6, r3, #1
 800171e:	7016      	strb	r6, [r2, #0]
 8001720:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = data_MSB;
 8001722:	7815      	ldrb	r5, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 8001724:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = data_MSB;
 8001726:	1c68      	adds	r0, r5, #1
 8001728:	7010      	strb	r0, [r2, #0]
 800172a:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = data_LSB;
 800172c:	7810      	ldrb	r0, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 800172e:	f043 0309 	orr.w	r3, r3, #9
 8001732:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = data_LSB;
 8001734:	1c44      	adds	r4, r0, #1
 8001736:	7014      	strb	r4, [r2, #0]
 8001738:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = data_LSB | DISPLAY_BIT_E;
 800173a:	7810      	ldrb	r0, [r2, #0]
 800173c:	f043 0404 	orr.w	r4, r3, #4
 8001740:	1c45      	adds	r5, r0, #1
 8001742:	7015      	strb	r5, [r2, #0]
 8001744:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = data_LSB;
 8001746:	7810      	ldrb	r0, [r2, #0]
 8001748:	1c44      	adds	r4, r0, #1
 800174a:	7014      	strb	r4, [r2, #0]
 800174c:	540b      	strb	r3, [r1, r0]
}
 800174e:	bc70      	pop	{r4, r5, r6}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <input_invalid>:
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
}

void input_invalid() {
}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop

08001758 <change_inc_dec>:

void change_inc_dec() {
	if (inc_dec == 0x01) {
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <change_inc_dec+0x10>)
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	2a01      	cmp	r2, #1
		inc_dec = 0x08;
	}
	else {
		inc_dec = 0x01;
 800175e:	bf0c      	ite	eq
 8001760:	2208      	moveq	r2, #8
 8001762:	2201      	movne	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
	}
}
 8001766:	4770      	bx	lr
 8001768:	20000528 	.word	0x20000528

0800176c <select_menu_amp>:

void select_menu_amp() {
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 800176c:	21cc      	movs	r1, #204	; 0xcc
 800176e:	4801      	ldr	r0, [pc, #4]	; (8001774 <select_menu_amp+0x8>)
 8001770:	f7ff bf94 	b.w	800169c <display_i2c_dma_write>
 8001774:	20000718 	.word	0x20000718

08001778 <select_menu_ratio>:
}

void select_menu_ratio() {
	display_i2c_dma_write(ui_menu_ratio_converted, UI_STRING_CONVERTED_SIZE);
 8001778:	21cc      	movs	r1, #204	; 0xcc
 800177a:	4801      	ldr	r0, [pc, #4]	; (8001780 <select_menu_ratio+0x8>)
 800177c:	f7ff bf8e 	b.w	800169c <display_i2c_dma_write>
 8001780:	20000bdc 	.word	0x20000bdc

08001784 <select_menu_detune>:
}
void select_menu_detune() {
	display_i2c_dma_write(ui_menu_detune_converted, UI_STRING_CONVERTED_SIZE);
 8001784:	21cc      	movs	r1, #204	; 0xcc
 8001786:	4801      	ldr	r0, [pc, #4]	; (800178c <select_menu_detune+0x8>)
 8001788:	f7ff bf88 	b.w	800169c <display_i2c_dma_write>
 800178c:	20000ee4 	.word	0x20000ee4

08001790 <select_menu_env>:
}

void select_menu_env() {
	display_i2c_dma_write(ui_menu_env_converted, UI_STRING_CONVERTED_SIZE);
 8001790:	21cc      	movs	r1, #204	; 0xcc
 8001792:	4801      	ldr	r0, [pc, #4]	; (8001798 <select_menu_env+0x8>)
 8001794:	f7ff bf82 	b.w	800169c <display_i2c_dma_write>
 8001798:	200007e4 	.word	0x200007e4

0800179c <select_menu_fdbk>:
}

void select_menu_fdbk() {
	display_i2c_dma_write(ui_menu_fdbk_converted, UI_STRING_CONVERTED_SIZE);
 800179c:	21cc      	movs	r1, #204	; 0xcc
 800179e:	4801      	ldr	r0, [pc, #4]	; (80017a4 <select_menu_fdbk+0x8>)
 80017a0:	f7ff bf7c 	b.w	800169c <display_i2c_dma_write>
 80017a4:	20000e14 	.word	0x20000e14

080017a8 <select_menu_lfo>:
}

void select_menu_lfo() {
	display_i2c_dma_write(ui_menu_lfo_converted, UI_STRING_CONVERTED_SIZE);
 80017a8:	21cc      	movs	r1, #204	; 0xcc
 80017aa:	4801      	ldr	r0, [pc, #4]	; (80017b0 <select_menu_lfo+0x8>)
 80017ac:	f7ff bf76 	b.w	800169c <display_i2c_dma_write>
 80017b0:	20000d00 	.word	0x20000d00

080017b4 <select_menu_algo>:
}

void select_menu_algo() {
	display_i2c_dma_write(ui_menu_algo_converted, UI_STRING_CONVERTED_SIZE);
 80017b4:	21cc      	movs	r1, #204	; 0xcc
 80017b6:	4801      	ldr	r0, [pc, #4]	; (80017bc <select_menu_algo+0x8>)
 80017b8:	f7ff bf70 	b.w	800169c <display_i2c_dma_write>
 80017bc:	200008b0 	.word	0x200008b0

080017c0 <select_menu_instr>:
}

void select_menu_instr() {
	display_i2c_dma_write(ui_menu_instr_converted, UI_STRING_CONVERTED_SIZE);
 80017c0:	21cc      	movs	r1, #204	; 0xcc
 80017c2:	4801      	ldr	r0, [pc, #4]	; (80017c8 <select_menu_instr+0x8>)
 80017c4:	f7ff bf6a 	b.w	800169c <display_i2c_dma_write>
 80017c8:	20000a40 	.word	0x20000a40

080017cc <enter_menu_amp>:
}

void enter_menu_amp() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80017cc:	2300      	movs	r3, #0
void enter_menu_amp() {
 80017ce:	b570      	push	{r4, r5, r6, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	4c14      	ldr	r4, [pc, #80]	; (8001824 <enter_menu_amp+0x58>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80017d4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80017d8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80017dc:	4e12      	ldr	r6, [pc, #72]	; (8001828 <enter_menu_amp+0x5c>)
 80017de:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 80017e2:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 80017e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80017e8:	a801      	add	r0, sp, #4
 80017ea:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80017ee:	f002 fec4 	bl	800457a <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 80017f2:	42ac      	cmp	r4, r5
 80017f4:	d1f6      	bne.n	80017e4 <enter_menu_amp+0x18>
	}
	uint8_t index = SECOND_LINE_START_INDEX;
 80017f6:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
		display_convert_data(
 80017f8:	4e0c      	ldr	r6, [pc, #48]	; (800182c <enter_menu_amp+0x60>)
 80017fa:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 80017fe:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001802:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001806:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800180a:	4631      	mov	r1, r6
 800180c:	f10d 0203 	add.w	r2, sp, #3
 8001810:	f7ff ff78 	bl	8001704 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001814:	42ac      	cmp	r4, r5
 8001816:	d1f6      	bne.n	8001806 <enter_menu_amp+0x3a>
			params[i], ui_set_converted, &index
		);
	}
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001818:	21cc      	movs	r1, #204	; 0xcc
 800181a:	4804      	ldr	r0, [pc, #16]	; (800182c <enter_menu_amp+0x60>)
 800181c:	f7ff ff3e 	bl	800169c <display_i2c_dma_write>
}
 8001820:	b006      	add	sp, #24
 8001822:	bd70      	pop	{r4, r5, r6, pc}
 8001824:	200004ac 	.word	0x200004ac
 8001828:	20000004 	.word	0x20000004
 800182c:	20000604 	.word	0x20000604

08001830 <enter_menu_ratio>:

void enter_menu_ratio() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001830:	2300      	movs	r3, #0
void enter_menu_ratio() {
 8001832:	b570      	push	{r4, r5, r6, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	4c14      	ldr	r4, [pc, #80]	; (8001888 <enter_menu_ratio+0x58>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001838:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800183c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001840:	4e12      	ldr	r6, [pc, #72]	; (800188c <enter_menu_ratio+0x5c>)
 8001842:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001846:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING[op_ratio[op]]);
 8001848:	f814 3b01 	ldrb.w	r3, [r4], #1
 800184c:	a801      	add	r0, sp, #4
 800184e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001852:	f002 fe92 	bl	800457a <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001856:	42ac      	cmp	r4, r5
 8001858:	d1f6      	bne.n	8001848 <enter_menu_ratio+0x18>
	}
	uint8_t index = SECOND_LINE_START_INDEX;
 800185a:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
		display_convert_data(
 800185c:	4e0c      	ldr	r6, [pc, #48]	; (8001890 <enter_menu_ratio+0x60>)
 800185e:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001862:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001866:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 800186a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800186e:	4631      	mov	r1, r6
 8001870:	f10d 0203 	add.w	r2, sp, #3
 8001874:	f7ff ff46 	bl	8001704 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001878:	42ac      	cmp	r4, r5
 800187a:	d1f6      	bne.n	800186a <enter_menu_ratio+0x3a>
			params[i], ui_set_converted, &index
		);
	}
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 800187c:	21cc      	movs	r1, #204	; 0xcc
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <enter_menu_ratio+0x60>)
 8001880:	f7ff ff0c 	bl	800169c <display_i2c_dma_write>
}
 8001884:	b006      	add	sp, #24
 8001886:	bd70      	pop	{r4, r5, r6, pc}
 8001888:	200004cc 	.word	0x200004cc
 800188c:	20000004 	.word	0x20000004
 8001890:	20000604 	.word	0x20000604

08001894 <enter_menu_detune>:

void enter_menu_detune() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001894:	2300      	movs	r3, #0
void enter_menu_detune() {
 8001896:	b570      	push	{r4, r5, r6, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	4c14      	ldr	r4, [pc, #80]	; (80018ec <enter_menu_detune+0x58>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 800189c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80018a0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80018a4:	4e12      	ldr	r6, [pc, #72]	; (80018f0 <enter_menu_detune+0x5c>)
 80018a6:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 80018aa:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING[op_detune[op]]);
 80018ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80018b0:	a801      	add	r0, sp, #4
 80018b2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80018b6:	f002 fe60 	bl	800457a <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 80018ba:	42ac      	cmp	r4, r5
 80018bc:	d1f6      	bne.n	80018ac <enter_menu_detune+0x18>
	}
	uint8_t index = SECOND_LINE_START_INDEX;
 80018be:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
		display_convert_data(
 80018c0:	4e0c      	ldr	r6, [pc, #48]	; (80018f4 <enter_menu_detune+0x60>)
 80018c2:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 80018c6:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80018ca:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 80018ce:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80018d2:	4631      	mov	r1, r6
 80018d4:	f10d 0203 	add.w	r2, sp, #3
 80018d8:	f7ff ff14 	bl	8001704 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80018dc:	42ac      	cmp	r4, r5
 80018de:	d1f6      	bne.n	80018ce <enter_menu_detune+0x3a>
			params[i], ui_set_converted, &index
		);
	}
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 80018e0:	21cc      	movs	r1, #204	; 0xcc
 80018e2:	4804      	ldr	r0, [pc, #16]	; (80018f4 <enter_menu_detune+0x60>)
 80018e4:	f7ff feda 	bl	800169c <display_i2c_dma_write>
}
 80018e8:	b006      	add	sp, #24
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	200004b8 	.word	0x200004b8
 80018f0:	20000004 	.word	0x20000004
 80018f4:	20000604 	.word	0x20000604

080018f8 <enter_menu_env>:

void enter_menu_env() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80018f8:	2300      	movs	r3, #0
void enter_menu_env() {
 80018fa:	b570      	push	{r4, r5, r6, lr}
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 80018fc:	4911      	ldr	r1, [pc, #68]	; (8001944 <enter_menu_env+0x4c>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <enter_menu_env+0x50>)
 8001900:	7809      	ldrb	r1, [r1, #0]
void enter_menu_env() {
 8001902:	b086      	sub	sp, #24
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001904:	ad02      	add	r5, sp, #8
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001906:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800190a:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 800190c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001910:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001914:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001916:	f002 fe3f 	bl	8004598 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 800191a:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < 4; i++) {
		display_convert_data(
 800191c:	4e0b      	ldr	r6, [pc, #44]	; (800194c <enter_menu_env+0x54>)
 800191e:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001920:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001924:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001928:	4631      	mov	r1, r6
 800192a:	f10d 0203 	add.w	r2, sp, #3
 800192e:	f7ff fee9 	bl	8001704 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001932:	42ac      	cmp	r4, r5
 8001934:	d1f6      	bne.n	8001924 <enter_menu_env+0x2c>
			params[i], ui_menu_env_op_converted, &index
		);
	}
	display_i2c_dma_write(ui_menu_env_op_converted, UI_STRING_CONVERTED_SIZE);
 8001936:	21cc      	movs	r1, #204	; 0xcc
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <enter_menu_env+0x54>)
 800193a:	f7ff feaf 	bl	800169c <display_i2c_dma_write>
}
 800193e:	b006      	add	sp, #24
 8001940:	bd70      	pop	{r4, r5, r6, pc}
 8001942:	bf00      	nop
 8001944:	20000601 	.word	0x20000601
 8001948:	20000004 	.word	0x20000004
 800194c:	20000530 	.word	0x20000530

08001950 <enter_menu_env_op>:

void enter_menu_env_op() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001950:	2300      	movs	r3, #0
void enter_menu_env_op() {
 8001952:	b570      	push	{r4, r5, r6, lr}
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 8001954:	491c      	ldr	r1, [pc, #112]	; (80019c8 <enter_menu_env_op+0x78>)
 8001956:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <enter_menu_env_op+0x7c>)
 8001958:	780e      	ldrb	r6, [r1, #0]
 800195a:	4d1d      	ldr	r5, [pc, #116]	; (80019d0 <enter_menu_env_op+0x80>)
 800195c:	5d92      	ldrb	r2, [r2, r6]
void enter_menu_env_op() {
 800195e:	b086      	sub	sp, #24
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 8001960:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 8001964:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001966:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800196a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800196e:	f88d 3014 	strb.w	r3, [sp, #20]
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 8001972:	f002 fdf9 	bl	8004568 <stpcpy>
	strcat(params, HEX_TO_STRING[op_decay[fsm_env_op]]);
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <enter_menu_env_op+0x84>)
 8001978:	f10d 0403 	add.w	r4, sp, #3
 800197c:	5d9b      	ldrb	r3, [r3, r6]
 800197e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8001982:	f002 fdf1 	bl	8004568 <stpcpy>
	strcat(params, HEX_TO_STRING[op_sustain[fsm_env_op]]);
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <enter_menu_env_op+0x88>)
 8001988:	5d9b      	ldrb	r3, [r3, r6]
 800198a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800198e:	f002 fdeb 	bl	8004568 <stpcpy>
	strcat(params, HEX_TO_STRING[op_release[fsm_env_op]]);
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <enter_menu_env_op+0x8c>)
 8001994:	5d9b      	ldrb	r3, [r3, r6]
	uint8_t index = SECOND_LINE_START_INDEX;
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
		display_convert_data(
 8001996:	4e12      	ldr	r6, [pc, #72]	; (80019e0 <enter_menu_env_op+0x90>)
	strcat(params, HEX_TO_STRING[op_release[fsm_env_op]]);
 8001998:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800199c:	f002 fdfc 	bl	8004598 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 80019a0:	236c      	movs	r3, #108	; 0x6c
 80019a2:	f10d 0513 	add.w	r5, sp, #19
 80019a6:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 80019aa:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80019ae:	4631      	mov	r1, r6
 80019b0:	f10d 0203 	add.w	r2, sp, #3
 80019b4:	f7ff fea6 	bl	8001704 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80019b8:	42ac      	cmp	r4, r5
 80019ba:	d1f6      	bne.n	80019aa <enter_menu_env_op+0x5a>
			params[i], ui_set_env_converted, &index
		);
	}
	display_i2c_dma_write(ui_set_env_converted, UI_STRING_CONVERTED_SIZE);
 80019bc:	21cc      	movs	r1, #204	; 0xcc
 80019be:	4808      	ldr	r0, [pc, #32]	; (80019e0 <enter_menu_env_op+0x90>)
 80019c0:	f7ff fe6c 	bl	800169c <display_i2c_dma_write>
}
 80019c4:	b006      	add	sp, #24
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	20000601 	.word	0x20000601
 80019cc:	2000049c 	.word	0x2000049c
 80019d0:	20000004 	.word	0x20000004
 80019d4:	200004c4 	.word	0x200004c4
 80019d8:	20000490 	.word	0x20000490
 80019dc:	20000498 	.word	0x20000498
 80019e0:	20000fb0 	.word	0x20000fb0

080019e4 <enter_menu_algo>:
void enter_menu_lfo() {

}

void enter_menu_algo() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80019e4:	2300      	movs	r3, #0
void enter_menu_algo() {
 80019e6:	b570      	push	{r4, r5, r6, lr}
	strcat(params, HEX_TO_STRING[algo]);
 80019e8:	4911      	ldr	r1, [pc, #68]	; (8001a30 <enter_menu_algo+0x4c>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <enter_menu_algo+0x50>)
 80019ec:	7809      	ldrb	r1, [r1, #0]
void enter_menu_algo() {
 80019ee:	b086      	sub	sp, #24
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80019f0:	ad02      	add	r5, sp, #8
	strcat(params, HEX_TO_STRING[algo]);
 80019f2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80019f6:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80019f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80019fc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001a00:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[algo]);
 8001a02:	f002 fdc9 	bl	8004598 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001a06:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < 4; i++) {
		display_convert_data(
 8001a08:	4e0b      	ldr	r6, [pc, #44]	; (8001a38 <enter_menu_algo+0x54>)
 8001a0a:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001a0c:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001a10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a14:	4631      	mov	r1, r6
 8001a16:	f10d 0203 	add.w	r2, sp, #3
 8001a1a:	f7ff fe73 	bl	8001704 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001a1e:	42ac      	cmp	r4, r5
 8001a20:	d1f6      	bne.n	8001a10 <enter_menu_algo+0x2c>
			params[i], ui_set_algo_converted, &index
		);
	}
	display_i2c_dma_write(ui_set_algo_converted, UI_STRING_CONVERTED_SIZE);
 8001a22:	21cc      	movs	r1, #204	; 0xcc
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <enter_menu_algo+0x54>)
 8001a26:	f7ff fe39 	bl	800169c <display_i2c_dma_write>
}
 8001a2a:	b006      	add	sp, #24
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000494 	.word	0x20000494
 8001a34:	20000004 	.word	0x20000004
 8001a38:	20000b10 	.word	0x20000b10

08001a3c <temp_set_instr>:
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <enter_menu_fdbk>:
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop

08001a44 <enter_menu_lfo>:
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop

08001a48 <enter_menu_instr>:
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <inc_menu_env_op>:
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <inc_set_amp>:
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <inc_set_ratio>:
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <inc_set_detune>:
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <inc_set_env>:
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <inc_set_fdbk>:
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop

08001a64 <inc_set_lfo>:
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <inc_set_algo>:
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <inc_set_instr>:
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <dec_set_amp>:
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <dec_set_ratio>:
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <dec_set_detune>:
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop

08001a7c <dec_set_env>:
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <dec_set_fdbk>:
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <dec_set_lfo>:
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop

08001a88 <dec_set_algo>:
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <dec_set_instr>:
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop

08001a90 <temp_set_amp>:
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop

08001a94 <temp_set_ratio>:
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <temp_set_detune>:
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop

08001a9c <temp_set_env>:
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop

08001aa0 <temp_set_fdbk>:
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <temp_set_lfo>:
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <temp_set_algo>:
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <init_ui>:
void init_ui(I2C_HandleTypeDef* hi2c) {
 8001aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ab0:	b082      	sub	sp, #8
	init_display(hi2c);
 8001ab2:	f7ff fdd9 	bl	8001668 <init_display>
		uint8_t index = 0;
 8001ab6:	f04f 0800 	mov.w	r8, #0
 8001aba:	4d1f      	ldr	r5, [pc, #124]	; (8001b38 <init_ui+0x8c>)
 8001abc:	4e1f      	ldr	r6, [pc, #124]	; (8001b3c <init_ui+0x90>)
 8001abe:	f105 0730 	add.w	r7, r5, #48	; 0x30
		display_convert_cmd(							//start DDRAM address at beginning of first line
 8001ac2:	2080      	movs	r0, #128	; 0x80
 8001ac4:	f855 1b04 	ldr.w	r1, [r5], #4
 8001ac8:	f10d 0207 	add.w	r2, sp, #7
 8001acc:	2400      	movs	r4, #0
		uint8_t index = 0;
 8001ace:	f88d 8007 	strb.w	r8, [sp, #7]
		display_convert_cmd(							//start DDRAM address at beginning of first line
 8001ad2:	f7ff fdef 	bl	80016b4 <display_convert_cmd>
			display_convert_data(						//convert chars to 4-bit bus data for 1602 LCD
 8001ad6:	6833      	ldr	r3, [r6, #0]
 8001ad8:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8001adc:	5d18      	ldrb	r0, [r3, r4]
 8001ade:	f10d 0207 	add.w	r2, sp, #7
 8001ae2:	3401      	adds	r4, #1
 8001ae4:	f7ff fe0e 	bl	8001704 <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 8001ae8:	2c10      	cmp	r4, #16
 8001aea:	d1f4      	bne.n	8001ad6 <init_ui+0x2a>
		display_convert_cmd(							//move DDRAM address at beginning of second line
 8001aec:	20c0      	movs	r0, #192	; 0xc0
 8001aee:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8001af2:	f10d 0207 	add.w	r2, sp, #7
 8001af6:	f7ff fddd 	bl	80016b4 <display_convert_cmd>
			display_convert_data(						//write spaces for second line
 8001afa:	2020      	movs	r0, #32
 8001afc:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8001b00:	f10d 0207 	add.w	r2, sp, #7
 8001b04:	3c01      	subs	r4, #1
 8001b06:	f7ff fdfd 	bl	8001704 <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 8001b0a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001b0e:	d1f4      	bne.n	8001afa <init_ui+0x4e>
	for (uint8_t i = 0; i < NUM_OF_UI_STRINGS; i++) {	//loop through all UI strings to convert
 8001b10:	42bd      	cmp	r5, r7
 8001b12:	f106 0604 	add.w	r6, r6, #4
 8001b16:	d1d4      	bne.n	8001ac2 <init_ui+0x16>
	fsm_op = 0;
 8001b18:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <init_ui+0x94>)
	fsm_env_op = 0;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <init_ui+0x98>)
	present_state = menu_amp;				//set state to menu_amp
 8001b1c:	4d0a      	ldr	r5, [pc, #40]	; (8001b48 <init_ui+0x9c>)
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 8001b1e:	21cc      	movs	r1, #204	; 0xcc
 8001b20:	480a      	ldr	r0, [pc, #40]	; (8001b4c <init_ui+0xa0>)
	fsm_op = 0;
 8001b22:	7014      	strb	r4, [r2, #0]
	fsm_env_op = 0;
 8001b24:	701c      	strb	r4, [r3, #0]
	present_state = menu_amp;				//set state to menu_amp
 8001b26:	702c      	strb	r4, [r5, #0]
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 8001b28:	f7ff fdb8 	bl	800169c <display_i2c_dma_write>
	inc_dec = 0x01;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <init_ui+0xa4>)
 8001b30:	701a      	strb	r2, [r3, #0]
}
 8001b32:	b002      	add	sp, #8
 8001b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b38:	2000027c 	.word	0x2000027c
 8001b3c:	2000024c 	.word	0x2000024c
 8001b40:	200004d0 	.word	0x200004d0
 8001b44:	20000601 	.word	0x20000601
 8001b48:	200006d0 	.word	0x200006d0
 8001b4c:	20000718 	.word	0x20000718
 8001b50:	20000528 	.word	0x20000528

08001b54 <fsm>:
void fsm(input key) {
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8001b56:	4e11      	ldr	r6, [pc, #68]	; (8001b9c <fsm+0x48>)
 8001b58:	4f11      	ldr	r7, [pc, #68]	; (8001ba0 <fsm+0x4c>)
 8001b5a:	7833      	ldrb	r3, [r6, #0]
 8001b5c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8001b60:	780a      	ldrb	r2, [r1, #0]
 8001b62:	4290      	cmp	r0, r2
 8001b64:	d017      	beq.n	8001b96 <fsm+0x42>
 8001b66:	2300      	movs	r3, #0
 8001b68:	460d      	mov	r5, r1
 8001b6a:	461c      	mov	r4, r3
 8001b6c:	e006      	b.n	8001b7c <fsm+0x28>
 8001b6e:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
 8001b72:	00dc      	lsls	r4, r3, #3
 8001b74:	4282      	cmp	r2, r0
 8001b76:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
 8001b7a:	d003      	beq.n	8001b84 <fsm+0x30>
		fsm_transition_table[present_state][i].key != invalid; i++);	//point i to the correct transition
 8001b7c:	3301      	adds	r3, #1
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8001b7e:	2a05      	cmp	r2, #5
		fsm_transition_table[present_state][i].key != invalid; i++);	//point i to the correct transition
 8001b80:	b2db      	uxtb	r3, r3
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8001b82:	d1f4      	bne.n	8001b6e <fsm+0x1a>
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
 8001b84:	686b      	ldr	r3, [r5, #4]
 8001b86:	4798      	blx	r3
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
 8001b88:	7833      	ldrb	r3, [r6, #0]
 8001b8a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8001b8e:	441c      	add	r4, r3
 8001b90:	7863      	ldrb	r3, [r4, #1]
 8001b92:	7033      	strb	r3, [r6, #0]
}
 8001b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8001b96:	460d      	mov	r5, r1
 8001b98:	2400      	movs	r4, #0
 8001b9a:	e7f3      	b.n	8001b84 <fsm+0x30>
 8001b9c:	200006d0 	.word	0x200006d0
 8001ba0:	20000208 	.word	0x20000208

08001ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	; (8001bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	; (8001be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bca:	f7ff fcf7 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f002 fc9f 	bl	8004510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd2:	f7fe fb27 	bl	8000224 <main>
  bx lr
 8001bd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8001be0:	0800506c 	.word	0x0800506c
  ldr r2, =_sbss
 8001be4:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8001be8:	20001084 	.word	0x20001084

08001bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>
	...

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf6:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_InitTick+0x3c>)
{
 8001bf8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfa:	7811      	ldrb	r1, [r2, #0]
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_InitTick+0x40>)
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fbb2 f0f3 	udiv	r0, r2, r3
 8001c08:	f000 f8a4 	bl	8001d54 <HAL_SYSTICK_Config>
 8001c0c:	b908      	cbnz	r0, 8001c12 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	2d0f      	cmp	r5, #15
 8001c10:	d901      	bls.n	8001c16 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001c14:	bd38      	pop	{r3, r4, r5, pc}
 8001c16:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f852 	bl	8001cc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_InitTick+0x44>)
 8001c26:	4620      	mov	r0, r4
 8001c28:	601d      	str	r5, [r3, #0]
}
 8001c2a:	bd38      	pop	{r3, r4, r5, pc}
 8001c2c:	200002ac 	.word	0x200002ac
 8001c30:	20000000 	.word	0x20000000
 8001c34:	200002b0 	.word	0x200002b0

08001c38 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x20>)
{
 8001c3a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c40:	f043 0310 	orr.w	r3, r3, #16
 8001c44:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c46:	f000 f82d 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff ffd0 	bl	8001bf0 <HAL_InitTick>
  HAL_MspInit();
 8001c50:	f7fe fcca 	bl	80005e8 <HAL_MspInit>
}
 8001c54:	2000      	movs	r0, #0
 8001c56:	bd08      	pop	{r3, pc}
 8001c58:	40022000 	.word	0x40022000

08001c5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c5c:	4a03      	ldr	r2, [pc, #12]	; (8001c6c <HAL_IncTick+0x10>)
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_IncTick+0x14>)
 8001c60:	6811      	ldr	r1, [r2, #0]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	440b      	add	r3, r1
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20001080 	.word	0x20001080
 8001c70:	200002ac 	.word	0x200002ac

08001c74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c74:	4b01      	ldr	r3, [pc, #4]	; (8001c7c <HAL_GetTick+0x8>)
 8001c76:	6818      	ldr	r0, [r3, #0]
}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20001080 	.word	0x20001080

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b538      	push	{r3, r4, r5, lr}
 8001c82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff fff6 	bl	8001c74 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c88:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001c8a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001c8c:	d002      	beq.n	8001c94 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <HAL_Delay+0x20>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c94:	f7ff ffee 	bl	8001c74 <HAL_GetTick>
 8001c98:	1b40      	subs	r0, r0, r5
 8001c9a:	42a0      	cmp	r0, r4
 8001c9c:	d3fa      	bcc.n	8001c94 <HAL_Delay+0x14>
  {
  }
}
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ca0:	200002ac 	.word	0x200002ac

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca4:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4a06      	ldr	r2, [pc, #24]	; (8001cc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001caa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb4:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001cb6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001cbe:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b430      	push	{r4, r5}
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd2:	f1c3 0507 	rsb	r5, r3, #7
 8001cd6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd8:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	bf28      	it	cs
 8001cde:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce0:	2c06      	cmp	r4, #6
 8001ce2:	d919      	bls.n	8001d18 <HAL_NVIC_SetPriority+0x50>
 8001ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	409c      	lsls	r4, r3
 8001cec:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 34ff 	mov.w	r4, #4294967295
 8001cf4:	40ac      	lsls	r4, r5
 8001cf6:	ea21 0104 	bic.w	r1, r1, r4
 8001cfa:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfe:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001d02:	db0c      	blt.n	8001d1e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	0109      	lsls	r1, r1, #4
 8001d06:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001d0a:	b2c9      	uxtb	r1, r1
 8001d0c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001d10:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d14:	bc30      	pop	{r4, r5}
 8001d16:	4770      	bx	lr
 8001d18:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	e7e8      	b.n	8001cf0 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_NVIC_SetPriority+0x6c>)
 8001d20:	f000 000f 	and.w	r0, r0, #15
 8001d24:	0109      	lsls	r1, r1, #4
 8001d26:	b2c9      	uxtb	r1, r1
 8001d28:	4403      	add	r3, r0
 8001d2a:	7619      	strb	r1, [r3, #24]
 8001d2c:	bc30      	pop	{r4, r5}
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00
 8001d34:	e000ecfc 	.word	0xe000ecfc

08001d38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	db07      	blt.n	8001d4c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f000 011f 	and.w	r1, r0, #31
 8001d42:	4a03      	ldr	r2, [pc, #12]	; (8001d50 <HAL_NVIC_EnableIRQ+0x18>)
 8001d44:	408b      	lsls	r3, r1
 8001d46:	0940      	lsrs	r0, r0, #5
 8001d48:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	3801      	subs	r0, #1
 8001d56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d5a:	d20d      	bcs.n	8001d78 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5c:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	4c06      	ldr	r4, [pc, #24]	; (8001d80 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d68:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6e:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8001d70:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d72:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d74:	6019      	str	r1, [r3, #0]
 8001d76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d78:	2001      	movs	r0, #1
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e010 	.word	0xe000e010
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d84:	b340      	cbz	r0, 8001dd8 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d86:	4603      	mov	r3, r0
{
 8001d88:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d8a:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d8e:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d92:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8001d94:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d96:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d98:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9a:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d9c:	490f      	ldr	r1, [pc, #60]	; (8001ddc <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9e:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001da0:	4f0f      	ldr	r7, [pc, #60]	; (8001de0 <HAL_DMA_Init+0x5c>)
 8001da2:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da4:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da6:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001da8:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dac:	4332      	orrs	r2, r6
 8001dae:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db0:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db2:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 8001db4:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001db6:	0909      	lsrs	r1, r1, #4
 8001db8:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dba:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dbe:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dc0:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dc4:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dc6:	4907      	ldr	r1, [pc, #28]	; (8001de4 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 8001dc8:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 8001dca:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8001dcc:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8001dce:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 8001dd0:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd2:	639c      	str	r4, [r3, #56]	; 0x38
}
 8001dd4:	bcf0      	pop	{r4, r5, r6, r7}
 8001dd6:	4770      	bx	lr
    return HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
}
 8001dda:	4770      	bx	lr
 8001ddc:	bffdfff8 	.word	0xbffdfff8
 8001de0:	cccccccd 	.word	0xcccccccd
 8001de4:	40020000 	.word	0x40020000

08001de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de8:	b4f0      	push	{r4, r5, r6, r7}
 8001dea:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dec:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001df0:	2801      	cmp	r0, #1
 8001df2:	d038      	beq.n	8001e66 <HAL_DMA_Start_IT+0x7e>
 8001df4:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001df6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001dfa:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dfe:	42a8      	cmp	r0, r5
 8001e00:	d005      	beq.n	8001e0e <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e02:	2300      	movs	r3, #0
 8001e04:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e08:	2002      	movs	r0, #2
  }    
  return status;
}
 8001e0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e0c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e0e:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e10:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 8001e12:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e14:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e18:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e1a:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001e1c:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e1e:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 8001e20:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e24:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001e26:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e28:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e2a:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001e2c:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8001e2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e30:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e32:	bf0b      	itete	eq
 8001e34:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001e36:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001e38:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001e3a:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001e3c:	b153      	cbz	r3, 8001e54 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	f043 030e 	orr.w	r3, r3, #14
 8001e44:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e46:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e48:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	602b      	str	r3, [r5, #0]
}
 8001e50:	bcf0      	pop	{r4, r5, r6, r7}
 8001e52:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e54:	682b      	ldr	r3, [r5, #0]
 8001e56:	f023 0304 	bic.w	r3, r3, #4
 8001e5a:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	f043 030a 	orr.w	r3, r3, #10
 8001e62:	602b      	str	r3, [r5, #0]
 8001e64:	e7ef      	b.n	8001e46 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8001e66:	2002      	movs	r0, #2
}
 8001e68:	bcf0      	pop	{r4, r5, r6, r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8001e70:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e72:	2a02      	cmp	r2, #2
 8001e74:	d006      	beq.n	8001e84 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e76:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8001e78:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7a:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001e7c:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8001e80:	2001      	movs	r0, #1
}
 8001e82:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e84:	2101      	movs	r1, #1
{
 8001e86:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8001e88:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e8c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e8e:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e90:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e92:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e94:	f024 040e 	bic.w	r4, r4, #14
 8001e98:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e9a:	6814      	ldr	r4, [r2, #0]
  return status; 
 8001e9c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001e9e:	f024 0401 	bic.w	r4, r4, #1
 8001ea2:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ea6:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001ea8:	841d      	strh	r5, [r3, #32]
}
 8001eaa:	bc70      	pop	{r4, r5, r6}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eb0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8001eb4:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eb6:	2a02      	cmp	r2, #2
 8001eb8:	d003      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eba:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8001ebc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ec0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec2:	6802      	ldr	r2, [r0, #0]
{  
 8001ec4:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec6:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ec8:	481b      	ldr	r0, [pc, #108]	; (8001f38 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eca:	f021 010e 	bic.w	r1, r1, #14
 8001ece:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ed0:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ed2:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8001ed4:	f021 0101 	bic.w	r1, r1, #1
 8001ed8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001eda:	d021      	beq.n	8001f20 <HAL_DMA_Abort_IT+0x70>
 8001edc:	4917      	ldr	r1, [pc, #92]	; (8001f3c <HAL_DMA_Abort_IT+0x8c>)
 8001ede:	428a      	cmp	r2, r1
 8001ee0:	d01a      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x68>
 8001ee2:	3114      	adds	r1, #20
 8001ee4:	428a      	cmp	r2, r1
 8001ee6:	d01d      	beq.n	8001f24 <HAL_DMA_Abort_IT+0x74>
 8001ee8:	3114      	adds	r1, #20
 8001eea:	428a      	cmp	r2, r1
 8001eec:	d01d      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x7a>
 8001eee:	3114      	adds	r1, #20
 8001ef0:	428a      	cmp	r2, r1
 8001ef2:	d01d      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x80>
 8001ef4:	3114      	adds	r1, #20
 8001ef6:	428a      	cmp	r2, r1
 8001ef8:	bf0c      	ite	eq
 8001efa:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001efe:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8001f02:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f06:	4c0e      	ldr	r4, [pc, #56]	; (8001f40 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8001f08:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f0a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001f0c:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8001f0e:	b129      	cbz	r1, 8001f1c <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8001f10:	4618      	mov	r0, r3
 8001f12:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8001f14:	2000      	movs	r0, #0
}
 8001f16:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f18:	2210      	movs	r2, #16
 8001f1a:	e7f2      	b.n	8001f02 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	4608      	mov	r0, r1
}
 8001f1e:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f20:	2201      	movs	r2, #1
 8001f22:	e7ee      	b.n	8001f02 <HAL_DMA_Abort_IT+0x52>
 8001f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f28:	e7eb      	b.n	8001f02 <HAL_DMA_Abort_IT+0x52>
 8001f2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f2e:	e7e8      	b.n	8001f02 <HAL_DMA_Abort_IT+0x52>
 8001f30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f34:	e7e5      	b.n	8001f02 <HAL_DMA_Abort_IT+0x52>
 8001f36:	bf00      	nop
 8001f38:	40020008 	.word	0x40020008
 8001f3c:	4002001c 	.word	0x4002001c
 8001f40:	40020000 	.word	0x40020000

08001f44 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f44:	2204      	movs	r2, #4
{
 8001f46:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f48:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f4c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001f4e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f50:	408a      	lsls	r2, r1
 8001f52:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001f54:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f56:	d01f      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x54>
 8001f58:	076a      	lsls	r2, r5, #29
 8001f5a:	d51d      	bpl.n	8001f98 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	0691      	lsls	r1, r2, #26
 8001f60:	d403      	bmi.n	8001f6a <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	f022 0204 	bic.w	r2, r2, #4
 8001f68:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f6a:	4a3e      	ldr	r2, [pc, #248]	; (8002064 <HAL_DMA_IRQHandler+0x120>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d05a      	beq.n	8002026 <HAL_DMA_IRQHandler+0xe2>
 8001f70:	3214      	adds	r2, #20
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d05f      	beq.n	8002036 <HAL_DMA_IRQHandler+0xf2>
 8001f76:	3214      	adds	r2, #20
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d066      	beq.n	800204a <HAL_DMA_IRQHandler+0x106>
 8001f7c:	3214      	adds	r2, #20
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d069      	beq.n	8002056 <HAL_DMA_IRQHandler+0x112>
 8001f82:	3214      	adds	r2, #20
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d05b      	beq.n	8002040 <HAL_DMA_IRQHandler+0xfc>
 8001f88:	3214      	adds	r2, #20
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	bf0c      	ite	eq
 8001f8e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001f92:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001f96:	e047      	b.n	8002028 <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f98:	2202      	movs	r2, #2
 8001f9a:	408a      	lsls	r2, r1
 8001f9c:	4222      	tst	r2, r4
 8001f9e:	d022      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
 8001fa0:	07aa      	lsls	r2, r5, #30
 8001fa2:	d520      	bpl.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	0691      	lsls	r1, r2, #26
 8001fa8:	d406      	bmi.n	8001fb8 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8001faa:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f022 020a 	bic.w	r2, r2, #10
 8001fb2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001fb4:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <HAL_DMA_IRQHandler+0x120>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d029      	beq.n	8002012 <HAL_DMA_IRQHandler+0xce>
 8001fbe:	3214      	adds	r2, #20
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d040      	beq.n	8002046 <HAL_DMA_IRQHandler+0x102>
 8001fc4:	3214      	adds	r2, #20
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d042      	beq.n	8002050 <HAL_DMA_IRQHandler+0x10c>
 8001fca:	3214      	adds	r2, #20
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d034      	beq.n	800203a <HAL_DMA_IRQHandler+0xf6>
 8001fd0:	3214      	adds	r2, #20
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d042      	beq.n	800205c <HAL_DMA_IRQHandler+0x118>
 8001fd6:	3214      	adds	r2, #20
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	bf0c      	ite	eq
 8001fdc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001fe0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001fe4:	e016      	b.n	8002014 <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	408a      	lsls	r2, r1
 8001fea:	4222      	tst	r2, r4
 8001fec:	d019      	beq.n	8002022 <HAL_DMA_IRQHandler+0xde>
 8001fee:	072a      	lsls	r2, r5, #28
 8001ff0:	d517      	bpl.n	8002022 <HAL_DMA_IRQHandler+0xde>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ff2:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 8001ff4:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff8:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ffa:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ffe:	f022 020e 	bic.w	r2, r2, #14
 8002002:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8002004:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002006:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002008:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800200a:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800200c:	b14b      	cbz	r3, 8002022 <HAL_DMA_IRQHandler+0xde>
}
 800200e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002010:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002012:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8002014:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002016:	4c14      	ldr	r4, [pc, #80]	; (8002068 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8002018:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800201a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 800201c:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002020:	b93a      	cbnz	r2, 8002032 <HAL_DMA_IRQHandler+0xee>
}
 8002022:	bc70      	pop	{r4, r5, r6}
 8002024:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002026:	2304      	movs	r3, #4
 8002028:	490f      	ldr	r1, [pc, #60]	; (8002068 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 800202a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800202c:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800202e:	2a00      	cmp	r2, #0
 8002030:	d0f7      	beq.n	8002022 <HAL_DMA_IRQHandler+0xde>
}
 8002032:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002034:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002036:	2340      	movs	r3, #64	; 0x40
 8002038:	e7f6      	b.n	8002028 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800203a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203e:	e7e9      	b.n	8002014 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002040:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002044:	e7f0      	b.n	8002028 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002046:	2320      	movs	r3, #32
 8002048:	e7e4      	b.n	8002014 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204e:	e7eb      	b.n	8002028 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002054:	e7de      	b.n	8002014 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800205a:	e7e5      	b.n	8002028 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	e7d8      	b.n	8002014 <HAL_DMA_IRQHandler+0xd0>
 8002062:	bf00      	nop
 8002064:	40020008 	.word	0x40020008
 8002068:	40020000 	.word	0x40020000

0800206c <HAL_DMA_GetState>:
}
 800206c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002078:	680c      	ldr	r4, [r1, #0]
{
 800207a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207c:	2c00      	cmp	r4, #0
 800207e:	f000 809e 	beq.w	80021be <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 8002082:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002084:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800227c <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 8002088:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208a:	4f77      	ldr	r7, [pc, #476]	; (8002268 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 800208c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8002280 <HAL_GPIO_Init+0x20c>
 8002090:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8002284 <HAL_GPIO_Init+0x210>
 8002094:	9000      	str	r0, [sp, #0]
 8002096:	e004      	b.n	80020a2 <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8002098:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209a:	fa34 f203 	lsrs.w	r2, r4, r3
 800209e:	f000 808e 	beq.w	80021be <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 80020a2:	2201      	movs	r2, #1
 80020a4:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80020a6:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 80020ae:	d1f3      	bne.n	8002098 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80020b0:	684c      	ldr	r4, [r1, #4]
 80020b2:	2c12      	cmp	r4, #18
 80020b4:	f200 8086 	bhi.w	80021c4 <HAL_GPIO_Init+0x150>
 80020b8:	2c12      	cmp	r4, #18
 80020ba:	d80c      	bhi.n	80020d6 <HAL_GPIO_Init+0x62>
 80020bc:	e8df f004 	tbb	[pc, r4]
 80020c0:	0abcbf8a 	.word	0x0abcbf8a
 80020c4:	0b0b0b0b 	.word	0x0b0b0b0b
 80020c8:	0b0b0b0b 	.word	0x0b0b0b0b
 80020cc:	0b0b0b0b 	.word	0x0b0b0b0b
 80020d0:	b90b      	.short	0xb90b
 80020d2:	b6          	.byte	0xb6
 80020d3:	00          	.byte	0x00
 80020d4:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020d6:	2dff      	cmp	r5, #255	; 0xff
 80020d8:	f200 8083 	bhi.w	80021e2 <HAL_GPIO_Init+0x16e>
 80020dc:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020e0:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020e4:	240f      	movs	r4, #15
 80020e6:	f8d9 2000 	ldr.w	r2, [r9]
 80020ea:	fa04 fb0a 	lsl.w	fp, r4, sl
 80020ee:	ea22 020b 	bic.w	r2, r2, fp
 80020f2:	fa06 fa0a 	lsl.w	sl, r6, sl
 80020f6:	ea42 020a 	orr.w	r2, r2, sl
 80020fa:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020fe:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002102:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8002106:	f000 808f 	beq.w	8002228 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800210a:	f8dc a018 	ldr.w	sl, [ip, #24]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	f04a 0a01 	orr.w	sl, sl, #1
 8002116:	f8cc a018 	str.w	sl, [ip, #24]
 800211a:	f8dc a018 	ldr.w	sl, [ip, #24]
 800211e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002122:	f00a 0a01 	and.w	sl, sl, #1
 8002126:	f8cd a00c 	str.w	sl, [sp, #12]
 800212a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800212e:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002132:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002136:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800213a:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800213e:	fa04 f40a 	lsl.w	r4, r4, sl
 8002142:	ea2b 0004 	bic.w	r0, fp, r4
 8002146:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002148:	9c00      	ldr	r4, [sp, #0]
 800214a:	4848      	ldr	r0, [pc, #288]	; (800226c <HAL_GPIO_Init+0x1f8>)
 800214c:	4284      	cmp	r4, r0
 800214e:	d013      	beq.n	8002178 <HAL_GPIO_Init+0x104>
 8002150:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002154:	4284      	cmp	r4, r0
 8002156:	d07d      	beq.n	8002254 <HAL_GPIO_Init+0x1e0>
 8002158:	4845      	ldr	r0, [pc, #276]	; (8002270 <HAL_GPIO_Init+0x1fc>)
 800215a:	4284      	cmp	r4, r0
 800215c:	d071      	beq.n	8002242 <HAL_GPIO_Init+0x1ce>
 800215e:	4845      	ldr	r0, [pc, #276]	; (8002274 <HAL_GPIO_Init+0x200>)
 8002160:	4284      	cmp	r4, r0
 8002162:	bf0c      	ite	eq
 8002164:	f04f 0b03 	moveq.w	fp, #3
 8002168:	f04f 0b04 	movne.w	fp, #4
 800216c:	9801      	ldr	r0, [sp, #4]
 800216e:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002172:	ea40 000a 	orr.w	r0, r0, sl
 8002176:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8002178:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217a:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 800217e:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	bf14      	ite	ne
 8002184:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002186:	43aa      	biceq	r2, r5
 8002188:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800218a:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800218c:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002190:	bf14      	ite	ne
 8002192:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002194:	43aa      	biceq	r2, r5
 8002196:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002198:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219a:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800219e:	bf14      	ite	ne
 80021a0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021a2:	43aa      	biceq	r2, r5
 80021a4:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a6:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80021aa:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ac:	d039      	beq.n	8002222 <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ae:	4315      	orrs	r5, r2
 80021b0:	60fd      	str	r5, [r7, #12]
 80021b2:	680c      	ldr	r4, [r1, #0]
	position++;
 80021b4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	fa34 f203 	lsrs.w	r2, r4, r3
 80021ba:	f47f af72 	bne.w	80020a2 <HAL_GPIO_Init+0x2e>
  }
}
 80021be:	b005      	add	sp, #20
 80021c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80021c4:	4544      	cmp	r4, r8
 80021c6:	d005      	beq.n	80021d4 <HAL_GPIO_Init+0x160>
 80021c8:	d913      	bls.n	80021f2 <HAL_GPIO_Init+0x17e>
 80021ca:	4574      	cmp	r4, lr
 80021cc:	d002      	beq.n	80021d4 <HAL_GPIO_Init+0x160>
 80021ce:	482a      	ldr	r0, [pc, #168]	; (8002278 <HAL_GPIO_Init+0x204>)
 80021d0:	4284      	cmp	r4, r0
 80021d2:	d180      	bne.n	80020d6 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021d4:	688c      	ldr	r4, [r1, #8]
 80021d6:	b9e4      	cbnz	r4, 8002212 <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d8:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021da:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021de:	f67f af7d 	bls.w	80020dc <HAL_GPIO_Init+0x68>
 80021e2:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80021e8:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021ec:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f0:	e778      	b.n	80020e4 <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 80021f2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002288 <HAL_GPIO_Init+0x214>
 80021f6:	454c      	cmp	r4, r9
 80021f8:	d0ec      	beq.n	80021d4 <HAL_GPIO_Init+0x160>
 80021fa:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80021fe:	454c      	cmp	r4, r9
 8002200:	d0e8      	beq.n	80021d4 <HAL_GPIO_Init+0x160>
 8002202:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002206:	454c      	cmp	r4, r9
 8002208:	f47f af65 	bne.w	80020d6 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800220c:	688c      	ldr	r4, [r1, #8]
 800220e:	2c00      	cmp	r4, #0
 8002210:	d0e2      	beq.n	80021d8 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 8002212:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002214:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002216:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 800221a:	bf0c      	ite	eq
 800221c:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 800221e:	6142      	strne	r2, [r0, #20]
 8002220:	e759      	b.n	80020d6 <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002222:	ea22 0505 	bic.w	r5, r2, r5
 8002226:	60fd      	str	r5, [r7, #12]
 8002228:	680c      	ldr	r4, [r1, #0]
 800222a:	e735      	b.n	8002098 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800222c:	68ce      	ldr	r6, [r1, #12]
 800222e:	360c      	adds	r6, #12
          break;
 8002230:	e751      	b.n	80020d6 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002232:	68ce      	ldr	r6, [r1, #12]
 8002234:	3604      	adds	r6, #4
          break;
 8002236:	e74e      	b.n	80020d6 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002238:	68ce      	ldr	r6, [r1, #12]
 800223a:	3608      	adds	r6, #8
          break;
 800223c:	e74b      	b.n	80020d6 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800223e:	68ce      	ldr	r6, [r1, #12]
          break;
 8002240:	e749      	b.n	80020d6 <HAL_GPIO_Init+0x62>
 8002242:	f04f 0b02 	mov.w	fp, #2
 8002246:	9801      	ldr	r0, [sp, #4]
 8002248:	fa0b fa0a 	lsl.w	sl, fp, sl
 800224c:	ea40 000a 	orr.w	r0, r0, sl
 8002250:	9001      	str	r0, [sp, #4]
 8002252:	e791      	b.n	8002178 <HAL_GPIO_Init+0x104>
 8002254:	f04f 0b01 	mov.w	fp, #1
 8002258:	9801      	ldr	r0, [sp, #4]
 800225a:	fa0b fa0a 	lsl.w	sl, fp, sl
 800225e:	ea40 000a 	orr.w	r0, r0, sl
 8002262:	9001      	str	r0, [sp, #4]
 8002264:	e788      	b.n	8002178 <HAL_GPIO_Init+0x104>
 8002266:	bf00      	nop
 8002268:	40010400 	.word	0x40010400
 800226c:	40010800 	.word	0x40010800
 8002270:	40011000 	.word	0x40011000
 8002274:	40011400 	.word	0x40011400
 8002278:	10320000 	.word	0x10320000
 800227c:	40021000 	.word	0x40021000
 8002280:	10220000 	.word	0x10220000
 8002284:	10310000 	.word	0x10310000
 8002288:	10120000 	.word	0x10120000

0800228c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800228c:	b902      	cbnz	r2, 8002290 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800228e:	0409      	lsls	r1, r1, #16
 8002290:	6101      	str	r1, [r0, #16]
  }
}
 8002292:	4770      	bx	lr

08002294 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002294:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002296:	ea01 0203 	and.w	r2, r1, r3
 800229a:	ea21 0103 	bic.w	r1, r1, r3
 800229e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80022a2:	6101      	str	r1, [r0, #16]
}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop

080022a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80022aa:	6951      	ldr	r1, [r2, #20]
 80022ac:	4201      	tst	r1, r0
 80022ae:	d100      	bne.n	80022b2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80022b0:	4770      	bx	lr
{
 80022b2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022b4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022b6:	f7fe f8b9 	bl	800042c <HAL_GPIO_EXTI_Callback>
  }
}
 80022ba:	bd08      	pop	{r3, pc}
 80022bc:	40010400 	.word	0x40010400

080022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	4605      	mov	r5, r0
 80022c4:	460e      	mov	r6, r1
 80022c6:	4617      	mov	r7, r2
 80022c8:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022ca:	682c      	ldr	r4, [r5, #0]
 80022cc:	d003      	beq.n	80022d6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 80022ce:	e009      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022d0:	6963      	ldr	r3, [r4, #20]
 80022d2:	055b      	lsls	r3, r3, #21
 80022d4:	d424      	bmi.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022d6:	6963      	ldr	r3, [r4, #20]
 80022d8:	43db      	mvns	r3, r3
 80022da:	f013 0308 	ands.w	r3, r3, #8
 80022de:	d1f7      	bne.n	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80022e0:	4618      	mov	r0, r3
}
 80022e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022e4:	6963      	ldr	r3, [r4, #20]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	f013 0308 	ands.w	r3, r3, #8
 80022ec:	d0f8      	beq.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ee:	6963      	ldr	r3, [r4, #20]
 80022f0:	0559      	lsls	r1, r3, #21
 80022f2:	d415      	bmi.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f4:	f7ff fcbe 	bl	8001c74 <HAL_GetTick>
 80022f8:	1bc0      	subs	r0, r0, r7
 80022fa:	4286      	cmp	r6, r0
 80022fc:	d301      	bcc.n	8002302 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 80022fe:	2e00      	cmp	r6, #0
 8002300:	d1e2      	bne.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002304:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002306:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002312:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002316:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 800231a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800231c:	642b      	str	r3, [r5, #64]	; 0x40
}
 800231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002320:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002322:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002326:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002330:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002332:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002334:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002338:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800233c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800233e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002342:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002346:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002348:	642b      	str	r3, [r5, #64]	; 0x40
}
 800234a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800234c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	4605      	mov	r5, r0
 8002350:	460e      	mov	r6, r1
 8002352:	4617      	mov	r7, r2
 8002354:	1c72      	adds	r2, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002356:	682c      	ldr	r4, [r5, #0]
 8002358:	d003      	beq.n	8002362 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 800235a:	e009      	b.n	8002370 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800235c:	6963      	ldr	r3, [r4, #20]
 800235e:	055b      	lsls	r3, r3, #21
 8002360:	d424      	bmi.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002362:	6963      	ldr	r3, [r4, #20]
 8002364:	43db      	mvns	r3, r3
 8002366:	f013 0302 	ands.w	r3, r3, #2
 800236a:	d1f7      	bne.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 800236c:	4618      	mov	r0, r3
}
 800236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002370:	6963      	ldr	r3, [r4, #20]
 8002372:	43db      	mvns	r3, r3
 8002374:	f013 0302 	ands.w	r3, r3, #2
 8002378:	d0f8      	beq.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800237a:	6963      	ldr	r3, [r4, #20]
 800237c:	0559      	lsls	r1, r3, #21
 800237e:	d415      	bmi.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002380:	f7ff fc78 	bl	8001c74 <HAL_GetTick>
 8002384:	1bc0      	subs	r0, r0, r7
 8002386:	4286      	cmp	r6, r0
 8002388:	d301      	bcc.n	800238e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 800238a:	2e00      	cmp	r6, #0
 800238c:	d1e2      	bne.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800238e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002390:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002392:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002394:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002398:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800239c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800239e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a2:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 80023a6:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a8:	642b      	str	r3, [r5, #64]	; 0x40
}
 80023aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ac:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ae:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80023b2:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ba:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023bc:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023be:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023c0:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80023ca:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ce:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 80023d2:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023d4:	642b      	str	r3, [r5, #64]	; 0x40
}
 80023d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023d8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80023d8:	2800      	cmp	r0, #0
 80023da:	f000 80b5 	beq.w	8002548 <HAL_I2C_Init+0x170>
{
 80023de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023e4:	4604      	mov	r4, r0
 80023e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8094 	beq.w	8002518 <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f0:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80023f2:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800240e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002410:	f001 fc72 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002414:	6865      	ldr	r5, [r4, #4]
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_I2C_Init+0x174>)
 8002418:	429d      	cmp	r5, r3
 800241a:	d84c      	bhi.n	80024b6 <HAL_I2C_Init+0xde>
 800241c:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_I2C_Init+0x178>)
 800241e:	4298      	cmp	r0, r3
 8002420:	d978      	bls.n	8002514 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002422:	1e42      	subs	r2, r0, #1
 8002424:	006d      	lsls	r5, r5, #1
 8002426:	fbb2 f2f5 	udiv	r2, r2, r5
 800242a:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 800242e:	4949      	ldr	r1, [pc, #292]	; (8002554 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002430:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002432:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002436:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002438:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800243e:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 8002442:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002444:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002446:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002448:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800244c:	3001      	adds	r0, #1
 800244e:	4308      	orrs	r0, r1
 8002450:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002452:	69d9      	ldr	r1, [r3, #28]
 8002454:	4232      	tst	r2, r6
 8002456:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800245a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800245e:	d160      	bne.n	8002522 <HAL_I2C_Init+0x14a>
 8002460:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002462:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002464:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002466:	430a      	orrs	r2, r1
 8002468:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8002470:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002474:	4302      	orrs	r2, r0
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800247a:	6899      	ldr	r1, [r3, #8]
 800247c:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8002480:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002484:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002488:	4302      	orrs	r2, r0
 800248a:	430a      	orrs	r2, r1
 800248c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800248e:	68d9      	ldr	r1, [r3, #12]
 8002490:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8002494:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002498:	4302      	orrs	r2, r0
 800249a:	430a      	orrs	r2, r1
 800249c:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 800249e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80024a0:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ae:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 80024b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_I2C_Init+0x180>)
 80024b8:	4298      	cmp	r0, r3
 80024ba:	d92b      	bls.n	8002514 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024bc:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80024c0:	4e24      	ldr	r6, [pc, #144]	; (8002554 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024c2:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80024c4:	fba6 2600 	umull	r2, r6, r6, r0
 80024c8:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ca:	fb01 f102 	mul.w	r1, r1, r2
 80024ce:	4f23      	ldr	r7, [pc, #140]	; (800255c <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d0:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024d2:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80024da:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 80024de:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024e0:	6a1a      	ldr	r2, [r3, #32]
 80024e2:	0989      	lsrs	r1, r1, #6
 80024e4:	3101      	adds	r1, #1
 80024e6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80024ea:	4311      	orrs	r1, r2
 80024ec:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024ee:	69d9      	ldr	r1, [r3, #28]
 80024f0:	68a6      	ldr	r6, [r4, #8]
 80024f2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80024f6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80024fa:	b9ae      	cbnz	r6, 8002528 <HAL_I2C_Init+0x150>
 80024fc:	3801      	subs	r0, #1
 80024fe:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8002502:	fbb0 f2f2 	udiv	r2, r0, r2
 8002506:	3201      	adds	r2, #1
 8002508:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800250c:	b1d2      	cbz	r2, 8002544 <HAL_I2C_Init+0x16c>
 800250e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002512:	e7a6      	b.n	8002462 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8002514:	2001      	movs	r0, #1
}
 8002516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002518:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800251c:	f7fe f886 	bl	800062c <HAL_I2C_MspInit>
 8002520:	e766      	b.n	80023f0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002522:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002526:	e79c      	b.n	8002462 <HAL_I2C_Init+0x8a>
 8002528:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800252c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8002530:	1e42      	subs	r2, r0, #1
 8002532:	fbb2 f2f5 	udiv	r2, r2, r5
 8002536:	3201      	adds	r2, #1
 8002538:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800253c:	b112      	cbz	r2, 8002544 <HAL_I2C_Init+0x16c>
 800253e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002542:	e78e      	b.n	8002462 <HAL_I2C_Init+0x8a>
 8002544:	2201      	movs	r2, #1
 8002546:	e78c      	b.n	8002462 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
}
 800254a:	4770      	bx	lr
 800254c:	000186a0 	.word	0x000186a0
 8002550:	001e847f 	.word	0x001e847f
 8002554:	431bde83 	.word	0x431bde83
 8002558:	003d08ff 	.word	0x003d08ff
 800255c:	10624dd3 	.word	0x10624dd3

08002560 <HAL_I2C_Master_Transmit>:
{
 8002560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002564:	4604      	mov	r4, r0
 8002566:	b082      	sub	sp, #8
 8002568:	469a      	mov	sl, r3
 800256a:	4688      	mov	r8, r1
 800256c:	4691      	mov	r9, r2
 800256e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff fb80 	bl	8001c74 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002574:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002578:	2b20      	cmp	r3, #32
 800257a:	d005      	beq.n	8002588 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 800257c:	f04f 0802 	mov.w	r8, #2
}
 8002580:	4640      	mov	r0, r8
 8002582:	b002      	add	sp, #8
 8002584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002588:	4607      	mov	r7, r0
 800258a:	e005      	b.n	8002598 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7ff fb72 	bl	8001c74 <HAL_GetTick>
 8002590:	1bc0      	subs	r0, r0, r7
 8002592:	2819      	cmp	r0, #25
 8002594:	f200 80f3 	bhi.w	800277e <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	699d      	ldr	r5, [r3, #24]
 800259c:	43ed      	mvns	r5, r5
 800259e:	f015 0502 	ands.w	r5, r5, #2
 80025a2:	d0f3      	beq.n	800258c <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 80025a4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80025a8:	2a01      	cmp	r2, #1
 80025aa:	d0e7      	beq.n	800257c <HAL_I2C_Master_Transmit+0x1c>
 80025ac:	2201      	movs	r2, #1
 80025ae:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	07d2      	lsls	r2, r2, #31
 80025b6:	d570      	bpl.n	800269a <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025b8:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ba:	2521      	movs	r5, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025bc:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c4:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025c6:	4a8b      	ldr	r2, [pc, #556]	; (80027f4 <HAL_I2C_Master_Transmit+0x294>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025c8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025cc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025d0:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80025d2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d8:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80025dc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e0:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 80025e2:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e4:	d007      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x96>
 80025e6:	2a01      	cmp	r2, #1
 80025e8:	d005      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x96>
 80025ea:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80025ee:	d002      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80025f2:	2a12      	cmp	r2, #18
 80025f4:	d103      	bne.n	80025fe <HAL_I2C_Master_Transmit+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	1c75      	adds	r5, r6, #1
 8002600:	d13d      	bne.n	800267e <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	07d0      	lsls	r0, r2, #31
 8002606:	d5fc      	bpl.n	8002602 <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002608:	6922      	ldr	r2, [r4, #16]
 800260a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800260e:	d149      	bne.n	80026a4 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002610:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8002614:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002616:	463a      	mov	r2, r7
 8002618:	4631      	mov	r1, r6
 800261a:	4620      	mov	r0, r4
 800261c:	f7ff fe96 	bl	800234c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8002620:	4680      	mov	r8, r0
 8002622:	bb30      	cbnz	r0, 8002672 <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	9001      	str	r0, [sp, #4]
 8002628:	6959      	ldr	r1, [r3, #20]
    while (hi2c->XferSize > 0U)
 800262a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262c:	9101      	str	r1, [sp, #4]
 800262e:	6999      	ldr	r1, [r3, #24]
 8002630:	9101      	str	r1, [sp, #4]
 8002632:	9901      	ldr	r1, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002634:	2a00      	cmp	r2, #0
 8002636:	d076      	beq.n	8002726 <HAL_I2C_Master_Transmit+0x1c6>
 8002638:	1c75      	adds	r5, r6, #1
 800263a:	f040 8081 	bne.w	8002740 <HAL_I2C_Master_Transmit+0x1e0>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	0610      	lsls	r0, r2, #24
 8002642:	d442      	bmi.n	80026ca <HAL_I2C_Master_Transmit+0x16a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	0551      	lsls	r1, r2, #21
 8002648:	d5f9      	bpl.n	800263e <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800264a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800264c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8002650:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002652:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002654:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002656:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800265e:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800266c:	2b04      	cmp	r3, #4
 800266e:	f000 80ab 	beq.w	80027c8 <HAL_I2C_Master_Transmit+0x268>
      return HAL_ERROR;
 8002672:	f04f 0801 	mov.w	r8, #1
}
 8002676:	4640      	mov	r0, r8
 8002678:	b002      	add	sp, #8
 800267a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	07d1      	lsls	r1, r2, #31
 8002682:	d4c1      	bmi.n	8002608 <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002684:	f7ff faf6 	bl	8001c74 <HAL_GetTick>
 8002688:	1bc0      	subs	r0, r0, r7
 800268a:	4286      	cmp	r6, r0
 800268c:	f0c0 8084 	bcc.w	8002798 <HAL_I2C_Master_Transmit+0x238>
 8002690:	2e00      	cmp	r6, #0
 8002692:	f000 8081 	beq.w	8002798 <HAL_I2C_Master_Transmit+0x238>
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	e7b1      	b.n	80025fe <HAL_I2C_Master_Transmit+0x9e>
      __HAL_I2C_ENABLE(hi2c);
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e789      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x58>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026a4:	ea4f 12e8 	mov.w	r2, r8, asr #7
 80026a8:	f002 0206 	and.w	r2, r2, #6
 80026ac:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80026b0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026b2:	4631      	mov	r1, r6
 80026b4:	463a      	mov	r2, r7
 80026b6:	4620      	mov	r0, r4
 80026b8:	f7ff fe02 	bl	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d1d8      	bne.n	8002672 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	fa5f f188 	uxtb.w	r1, r8
 80026c6:	6119      	str	r1, [r3, #16]
 80026c8:	e7a5      	b.n	8002616 <HAL_I2C_Master_Transmit+0xb6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80026cc:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d0:	4605      	mov	r5, r0
 80026d2:	f815 2b01 	ldrb.w	r2, [r5], #1
      hi2c->XferSize--;
 80026d6:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026da:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80026dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026de:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 80026e0:	3a01      	subs	r2, #1
 80026e2:	b292      	uxth	r2, r2
 80026e4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e6:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 80026e8:	6265      	str	r5, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ea:	0755      	lsls	r5, r2, #29
      hi2c->XferSize--;
 80026ec:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ee:	d50c      	bpl.n	800270a <HAL_I2C_Master_Transmit+0x1aa>
 80026f0:	b159      	cbz	r1, 800270a <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f2:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 80026f4:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f8:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80026fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80026fc:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80026fe:	3a01      	subs	r2, #1
 8002700:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8002702:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002706:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002708:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800270a:	1c75      	adds	r5, r6, #1
 800270c:	d128      	bne.n	8002760 <HAL_I2C_Master_Transmit+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	0750      	lsls	r0, r2, #29
 8002712:	d405      	bmi.n	8002720 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	0551      	lsls	r1, r2, #21
 8002718:	d497      	bmi.n	800264a <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	0750      	lsls	r0, r2, #29
 800271e:	d5f9      	bpl.n	8002714 <HAL_I2C_Master_Transmit+0x1b4>
    while (hi2c->XferSize > 0U)
 8002720:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002722:	2a00      	cmp	r2, #0
 8002724:	d188      	bne.n	8002638 <HAL_I2C_Master_Transmit+0xd8>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002726:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002728:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002730:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002732:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002736:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800273a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 800273e:	e71f      	b.n	8002580 <HAL_I2C_Master_Transmit+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	0612      	lsls	r2, r2, #24
 8002744:	d4c1      	bmi.n	80026ca <HAL_I2C_Master_Transmit+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	0552      	lsls	r2, r2, #21
 800274a:	f53f af7e 	bmi.w	800264a <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7ff fa91 	bl	8001c74 <HAL_GetTick>
 8002752:	1bc0      	subs	r0, r0, r7
 8002754:	4286      	cmp	r6, r0
 8002756:	d33f      	bcc.n	80027d8 <HAL_I2C_Master_Transmit+0x278>
 8002758:	2e00      	cmp	r6, #0
 800275a:	d03d      	beq.n	80027d8 <HAL_I2C_Master_Transmit+0x278>
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	e76b      	b.n	8002638 <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	0752      	lsls	r2, r2, #29
 8002764:	d4dc      	bmi.n	8002720 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	0552      	lsls	r2, r2, #21
 800276a:	f53f af6e 	bmi.w	800264a <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7ff fa81 	bl	8001c74 <HAL_GetTick>
 8002772:	1bc0      	subs	r0, r0, r7
 8002774:	4286      	cmp	r6, r0
 8002776:	d32f      	bcc.n	80027d8 <HAL_I2C_Master_Transmit+0x278>
 8002778:	b376      	cbz	r6, 80027d8 <HAL_I2C_Master_Transmit+0x278>
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	e7c5      	b.n	800270a <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->State             = HAL_I2C_STATE_READY;
 800277e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002780:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002782:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002786:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800278a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800278c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002790:	f043 0320 	orr.w	r3, r3, #32
 8002794:	6423      	str	r3, [r4, #64]	; 0x40
 8002796:	e6f1      	b.n	800257c <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002798:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800279a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800279c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800279e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027a2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a8:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027aa:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80027ae:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027b2:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b4:	680b      	ldr	r3, [r1, #0]
 80027b6:	05de      	lsls	r6, r3, #23
 80027b8:	f57f af5b 	bpl.w	8002672 <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027bc:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 80027c0:	f04f 0801 	mov.w	r8, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c4:	6423      	str	r3, [r4, #64]	; 0x40
 80027c6:	e6db      	b.n	8002580 <HAL_I2C_Master_Transmit+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c8:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 80027ca:	f04f 0801 	mov.w	r8, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e6d3      	b.n	8002580 <HAL_I2C_Master_Transmit+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027d8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80027da:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027dc:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027e2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80027e8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027ec:	f043 0320 	orr.w	r3, r3, #32
 80027f0:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80027f2:	e73a      	b.n	800266a <HAL_I2C_Master_Transmit+0x10a>
 80027f4:	ffff0000 	.word	0xffff0000

080027f8 <HAL_I2C_Master_Transmit_DMA>:
{
 80027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80027fa:	2400      	movs	r4, #0
{
 80027fc:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80027fe:	9401      	str	r4, [sp, #4]
{
 8002800:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8002806:	2820      	cmp	r0, #32
 8002808:	d126      	bne.n	8002858 <HAL_I2C_Master_Transmit_DMA+0x60>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800280a:	484f      	ldr	r0, [pc, #316]	; (8002948 <HAL_I2C_Master_Transmit_DMA+0x150>)
 800280c:	4616      	mov	r6, r2
 800280e:	6800      	ldr	r0, [r0, #0]
 8002810:	4a4e      	ldr	r2, [pc, #312]	; (800294c <HAL_I2C_Master_Transmit_DMA+0x154>)
 8002812:	08c0      	lsrs	r0, r0, #3
 8002814:	fba2 2000 	umull	r2, r0, r2, r0
 8002818:	0a00      	lsrs	r0, r0, #8
 800281a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800281e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002822:	9001      	str	r0, [sp, #4]
 8002824:	e003      	b.n	800282e <HAL_I2C_Master_Transmit_DMA+0x36>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002826:	682c      	ldr	r4, [r5, #0]
 8002828:	69a0      	ldr	r0, [r4, #24]
 800282a:	0780      	lsls	r0, r0, #30
 800282c:	d517      	bpl.n	800285e <HAL_I2C_Master_Transmit_DMA+0x66>
      count--;
 800282e:	9c01      	ldr	r4, [sp, #4]
 8002830:	3c01      	subs	r4, #1
 8002832:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8002834:	9801      	ldr	r0, [sp, #4]
 8002836:	2800      	cmp	r0, #0
 8002838:	d1f5      	bne.n	8002826 <HAL_I2C_Master_Transmit_DMA+0x2e>
        hi2c->State               = HAL_I2C_STATE_READY;
 800283a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283c:	6328      	str	r0, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800283e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->State               = HAL_I2C_STATE_READY;
 8002842:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002846:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        return HAL_ERROR;
 800284a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800284c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800284e:	f043 0320 	orr.w	r3, r3, #32
 8002852:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002854:	b003      	add	sp, #12
 8002856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002858:	2002      	movs	r0, #2
}
 800285a:	b003      	add	sp, #12
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800285e:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 8002862:	2a01      	cmp	r2, #1
 8002864:	d0f8      	beq.n	8002858 <HAL_I2C_Master_Transmit_DMA+0x60>
 8002866:	2201      	movs	r2, #1
 8002868:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	07d2      	lsls	r2, r2, #31
 8002870:	d403      	bmi.n	800287a <HAL_I2C_Master_Transmit_DMA+0x82>
      __HAL_I2C_ENABLE(hi2c);
 8002872:	6822      	ldr	r2, [r4, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800287a:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800287e:	2010      	movs	r0, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002888:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800288a:	f885 c03d 	strb.w	ip, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800288e:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002892:	642f      	str	r7, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002894:	856b      	strh	r3, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002896:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002898:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <HAL_I2C_Master_Transmit_DMA+0x158>)
    hi2c->XferSize    = hi2c->XferCount;
 800289a:	b29b      	uxth	r3, r3
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800289c:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 800289e:	626e      	str	r6, [r5, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80028a0:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 80028a2:	6469      	str	r1, [r5, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 80028a4:	b333      	cbz	r3, 80028f4 <HAL_I2C_Master_Transmit_DMA+0xfc>
      if (hi2c->hdmatx != NULL)
 80028a6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d040      	beq.n	800292e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80028ac:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8002954 <HAL_I2C_Master_Transmit_DMA+0x15c>
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80028b0:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8002958 <HAL_I2C_Master_Transmit_DMA+0x160>
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80028b4:	4631      	mov	r1, r6
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80028b6:	62c7      	str	r7, [r0, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80028b8:	6347      	str	r7, [r0, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80028ba:	f104 0210 	add.w	r2, r4, #16
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80028be:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80028c2:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80028c6:	f7ff fa8f 	bl	8001de8 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80028ca:	bb18      	cbnz	r0, 8002914 <HAL_I2C_Master_Transmit_DMA+0x11c>
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028cc:	682b      	ldr	r3, [r5, #0]
        __HAL_UNLOCK(hi2c);
 80028ce:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80028d8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028e8:	601a      	str	r2, [r3, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e7af      	b.n	8002854 <HAL_I2C_Master_Transmit_DMA+0x5c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f4:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80028f6:	4618      	mov	r0, r3
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028fc:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002904:	6022      	str	r2, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8002906:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800290a:	6863      	ldr	r3, [r4, #4]
 800290c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002910:	6063      	str	r3, [r4, #4]
 8002912:	e79f      	b.n	8002854 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002914:	2320      	movs	r3, #32
 8002916:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800291a:	f885 703e 	strb.w	r7, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800291e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002920:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002922:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hi2c);
 8002926:	f885 703c 	strb.w	r7, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800292a:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800292c:	e792      	b.n	8002854 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800292e:	2320      	movs	r3, #32
 8002930:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002934:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002938:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800293a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800293e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        return HAL_ERROR;
 8002942:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002944:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002946:	e785      	b.n	8002854 <HAL_I2C_Master_Transmit_DMA+0x5c>
 8002948:	20000000 	.word	0x20000000
 800294c:	14f8b589 	.word	0x14f8b589
 8002950:	ffff0000 	.word	0xffff0000
 8002954:	08002a75 	.word	0x08002a75
 8002958:	08002a39 	.word	0x08002a39

0800295c <HAL_I2C_MasterTxCpltCallback>:
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <HAL_I2C_MasterRxCpltCallback>:
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop

08002964 <HAL_I2C_SlaveTxCpltCallback>:
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <HAL_I2C_SlaveRxCpltCallback>:
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop

0800296c <HAL_I2C_AddrCallback>:
}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop

08002970 <HAL_I2C_ListenCpltCallback>:
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop

08002974 <HAL_I2C_MemTxCpltCallback>:
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop

08002978 <I2C_MemoryTransmit_TXE_BTF>:
{
 8002978:	b538      	push	{r3, r4, r5, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800297a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 800297e:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002980:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8002982:	b959      	cbnz	r1, 800299c <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002984:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002986:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002988:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800298a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800298c:	d032      	beq.n	80029f4 <I2C_MemoryTransmit_TXE_BTF+0x7c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800298e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002992:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8002994:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002996:	3201      	adds	r2, #1
 8002998:	6502      	str	r2, [r0, #80]	; 0x50
}
 800299a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 800299c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800299e:	2901      	cmp	r1, #1
 80029a0:	d020      	beq.n	80029e4 <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 80029a2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80029a4:	2902      	cmp	r1, #2
 80029a6:	d1f8      	bne.n	800299a <I2C_MemoryTransmit_TXE_BTF+0x22>
 80029a8:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80029aa:	2a22      	cmp	r2, #34	; 0x22
 80029ac:	d02c      	beq.n	8002a08 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029ae:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80029b0:	b289      	uxth	r1, r1
 80029b2:	bb29      	cbnz	r1, 8002a00 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029b4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80029b6:	b289      	uxth	r1, r1
 80029b8:	2900      	cmp	r1, #0
 80029ba:	d1ee      	bne.n	800299a <I2C_MemoryTransmit_TXE_BTF+0x22>
 80029bc:	2a21      	cmp	r2, #33	; 0x21
 80029be:	d1ec      	bne.n	800299a <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	2520      	movs	r5, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c2:	6802      	ldr	r2, [r0, #0]
 80029c4:	6854      	ldr	r4, [r2, #4]
 80029c6:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 80029ca:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	6814      	ldr	r4, [r2, #0]
 80029ce:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80029d2:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80029d4:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029da:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80029de:	f7ff ffc9 	bl	8002974 <HAL_I2C_MemTxCpltCallback>
}
 80029e2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029e4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80029e6:	6801      	ldr	r1, [r0, #0]
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 80029ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80029ee:	3201      	adds	r2, #1
 80029f0:	6502      	str	r2, [r0, #80]	; 0x50
}
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80029f8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80029fa:	3202      	adds	r2, #2
 80029fc:	6502      	str	r2, [r0, #80]	; 0x50
}
 80029fe:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a00:	2a21      	cmp	r2, #33	; 0x21
 8002a02:	d00a      	beq.n	8002a1a <I2C_MemoryTransmit_TXE_BTF+0xa2>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a08:	6801      	ldr	r1, [r0, #0]
 8002a0a:	680a      	ldr	r2, [r1, #0]
 8002a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a10:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 8002a12:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002a14:	3201      	adds	r2, #1
 8002a16:	6502      	str	r2, [r0, #80]	; 0x50
}
 8002a18:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a1a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002a1c:	6802      	ldr	r2, [r0, #0]
 8002a1e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002a22:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8002a24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002a26:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002a28:	3a01      	subs	r2, #1
 8002a2a:	b292      	uxth	r2, r2
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a2e:	bd38      	pop	{r3, r4, r5, pc}

08002a30 <HAL_I2C_MemRxCpltCallback>:
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop

08002a34 <HAL_I2C_ErrorCallback>:
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop

08002a38 <I2C_DMAError>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a38:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002a3a:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8002a3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a3e:	b10b      	cbz	r3, 8002a44 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8002a44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a46:	b10b      	cbz	r3, 8002a4c <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002a48:	2200      	movs	r2, #0
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->XferCount       = 0U;
 8002a4c:	2200      	movs	r2, #0
  hi2c->State           = HAL_I2C_STATE_READY;
 8002a4e:	2420      	movs	r4, #32
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a50:	6801      	ldr	r1, [r0, #0]
 8002a52:	680b      	ldr	r3, [r1, #0]
 8002a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a58:	600b      	str	r3, [r1, #0]
  hi2c->XferCount       = 0U;
 8002a5a:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8002a5c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8002a60:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8002a64:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a66:	f043 0310 	orr.w	r3, r3, #16
 8002a6a:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 8002a6c:	f7ff ffe2 	bl	8002a34 <HAL_I2C_ErrorCallback>
}
 8002a70:	bd10      	pop	{r4, pc}
 8002a72:	bf00      	nop

08002a74 <I2C_DMAXferCplt>:
{
 8002a74:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a76:	6a44      	ldr	r4, [r0, #36]	; 0x24
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a78:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a7a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a7e:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a84:	6859      	ldr	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8002a86:	6b65      	ldr	r5, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a88:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a8c:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a8e:	b2c0      	uxtb	r0, r0
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a90:	6059      	str	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8002a92:	b10d      	cbz	r5, 8002a98 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002a94:	2100      	movs	r1, #0
 8002a96:	62a9      	str	r1, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8002a98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002a9a:	b109      	cbz	r1, 8002aa0 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	628d      	str	r5, [r1, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002aa0:	f002 0121 	and.w	r1, r2, #33	; 0x21
 8002aa4:	2921      	cmp	r1, #33	; 0x21
 8002aa6:	d039      	beq.n	8002b1c <I2C_DMAXferCplt+0xa8>
 8002aa8:	f002 0122 	and.w	r1, r2, #34	; 0x22
 8002aac:	2922      	cmp	r1, #34	; 0x22
 8002aae:	d033      	beq.n	8002b18 <I2C_DMAXferCplt+0xa4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002ab0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002ab4:	b37a      	cbz	r2, 8002b16 <I2C_DMAXferCplt+0xa2>
    if (hi2c->XferCount == (uint16_t)1)
 8002ab6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	2a01      	cmp	r2, #1
 8002abc:	d03d      	beq.n	8002b3a <I2C_DMAXferCplt+0xc6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002abe:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ac0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ac4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ac8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002aca:	d006      	beq.n	8002ada <I2C_DMAXferCplt+0x66>
 8002acc:	2e08      	cmp	r6, #8
 8002ace:	d004      	beq.n	8002ada <I2C_DMAXferCplt+0x66>
 8002ad0:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8002ad4:	d001      	beq.n	8002ada <I2C_DMAXferCplt+0x66>
 8002ad6:	2e20      	cmp	r6, #32
 8002ad8:	d103      	bne.n	8002ae2 <I2C_DMAXferCplt+0x6e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae0:	601a      	str	r2, [r3, #0]
    hi2c->XferCount = 0U;
 8002ae2:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aea:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af2:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8002af4:	8561      	strh	r1, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002af6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002af8:	bb23      	cbnz	r3, 8002b44 <I2C_DMAXferCplt+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002afa:	2220      	movs	r2, #32
 8002afc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b00:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002b04:	2a40      	cmp	r2, #64	; 0x40
 8002b06:	d035      	beq.n	8002b74 <I2C_DMAXferCplt+0x100>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b08:	2212      	movs	r2, #18
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b0e:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b10:	6322      	str	r2, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b12:	f7ff ff25 	bl	8002960 <HAL_I2C_MasterRxCpltCallback>
}
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002b18:	2820      	cmp	r0, #32
 8002b1a:	d1c9      	bne.n	8002ab0 <I2C_DMAXferCplt+0x3c>
    hi2c->XferCount = 0U;
 8002b1c:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b1e:	6859      	ldr	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b20:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b22:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002b26:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 8002b28:	8560      	strh	r0, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b2a:	d00f      	beq.n	8002b4c <I2C_DMAXferCplt+0xd8>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b2c:	2a2a      	cmp	r2, #42	; 0x2a
 8002b2e:	d017      	beq.n	8002b60 <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b36:	605a      	str	r2, [r3, #4]
}
 8002b38:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e7bc      	b.n	8002abe <I2C_DMAXferCplt+0x4a>
      HAL_I2C_ErrorCallback(hi2c);
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7ff ff75 	bl	8002a34 <HAL_I2C_ErrorCallback>
}
 8002b4a:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b4c:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b4e:	2221      	movs	r2, #33	; 0x21
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b50:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b52:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b58:	f7ff ff04 	bl	8002964 <HAL_I2C_SlaveTxCpltCallback>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	e7e7      	b.n	8002b30 <I2C_DMAXferCplt+0xbc>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b60:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b62:	2222      	movs	r2, #34	; 0x22
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b64:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b66:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b6c:	f7ff fefc 	bl	8002968 <HAL_I2C_SlaveRxCpltCallback>
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	e7dd      	b.n	8002b30 <I2C_DMAXferCplt+0xbc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002b78:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002b7c:	f7ff ff58 	bl	8002a30 <HAL_I2C_MemRxCpltCallback>
}
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
 8002b82:	bf00      	nop

08002b84 <HAL_I2C_AbortCpltCallback>:
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop

08002b88 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8002b88:	2200      	movs	r2, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b8a:	4b3a      	ldr	r3, [pc, #232]	; (8002c74 <I2C_DMAAbort+0xec>)
{
 8002b8c:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4939      	ldr	r1, [pc, #228]	; (8002c78 <I2C_DMAAbort+0xf0>)
 8002b92:	08db      	lsrs	r3, r3, #3
 8002b94:	fba1 1303 	umull	r1, r3, r1, r3
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b98:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002b9a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002b9c:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b9e:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ba0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ba4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ba8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bb0:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bb2:	e005      	b.n	8002bc0 <I2C_DMAAbort+0x38>
    count--;
 8002bb4:	9b01      	ldr	r3, [sp, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002bba:	6813      	ldr	r3, [r2, #0]
 8002bbc:	059b      	lsls	r3, r3, #22
 8002bbe:	d506      	bpl.n	8002bce <I2C_DMAAbort+0x46>
    if (count == 0U)
 8002bc0:	9b01      	ldr	r3, [sp, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f6      	bne.n	8002bb4 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002bc8:	f043 0320 	orr.w	r3, r3, #32
 8002bcc:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8002bce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002bd0:	b34c      	cbz	r4, 8002c26 <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002bd2:	2500      	movs	r5, #0
  if (hi2c->hdmarx != NULL)
 8002bd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002bd6:	62a5      	str	r5, [r4, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8002bd8:	b1f3      	cbz	r3, 8002c18 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bda:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002bdc:	629d      	str	r5, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bde:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8002be2:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8002be4:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002be6:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002be8:	2400      	movs	r4, #0
 8002bea:	635c      	str	r4, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bf4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002bf8:	2b60      	cmp	r3, #96	; 0x60
 8002bfa:	d02a      	beq.n	8002c52 <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bfc:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8002c00:	2928      	cmp	r1, #40	; 0x28
 8002c02:	d019      	beq.n	8002c38 <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c06:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002c10:	f7ff ff10 	bl	8002a34 <HAL_I2C_ErrorCallback>
}
 8002c14:	b002      	add	sp, #8
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c18:	6815      	ldr	r5, [r2, #0]
 8002c1a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8002c1e:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8002c20:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c22:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8002c24:	e7e2      	b.n	8002bec <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8002c26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002c28:	b1f3      	cbz	r3, 8002c68 <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2a:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002c2c:	629c      	str	r4, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8002c32:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8002c34:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8002c36:	e7d7      	b.n	8002be8 <I2C_DMAAbort+0x60>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c38:	2400      	movs	r4, #0
      __HAL_I2C_ENABLE(hi2c);
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	6813      	ldr	r3, [r2, #0]
 8002c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c48:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c4a:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c4c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8002c50:	e7de      	b.n	8002c10 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c52:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c54:	2220      	movs	r2, #32
 8002c56:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c5a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002c5e:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c60:	f7ff ff90 	bl	8002b84 <HAL_I2C_AbortCpltCallback>
}
 8002c64:	b002      	add	sp, #8
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c68:	6814      	ldr	r4, [r2, #0]
 8002c6a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8002c6e:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8002c70:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8002c72:	e7bb      	b.n	8002bec <I2C_DMAAbort+0x64>
 8002c74:	20000000 	.word	0x20000000
 8002c78:	14f8b589 	.word	0x14f8b589

08002c7c <I2C_ITError>:
{
 8002c7c:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c7e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002c82:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 8002c86:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c88:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c8a:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c8c:	d039      	beq.n	8002d02 <I2C_ITError+0x86>
 8002c8e:	b2d9      	uxtb	r1, r3
 8002c90:	2940      	cmp	r1, #64	; 0x40
 8002c92:	d036      	beq.n	8002d02 <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c94:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8002c98:	2928      	cmp	r1, #40	; 0x28
 8002c9a:	d03d      	beq.n	8002d18 <I2C_ITError+0x9c>
 8002c9c:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	0508      	lsls	r0, r1, #20
 8002ca2:	d407      	bmi.n	8002cb4 <I2C_ITError+0x38>
 8002ca4:	2a60      	cmp	r2, #96	; 0x60
 8002ca6:	d005      	beq.n	8002cb4 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002caa:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002cac:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002cbe:	d134      	bne.n	8002d2a <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002cc0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002cc4:	2960      	cmp	r1, #96	; 0x60
 8002cc6:	d075      	beq.n	8002db4 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	0650      	lsls	r0, r2, #25
 8002ccc:	d505      	bpl.n	8002cda <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cd2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff feaa 	bl	8002a34 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8002ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ce2:	0719      	lsls	r1, r3, #28
 8002ce4:	d004      	beq.n	8002cf0 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	6853      	ldr	r3, [r2, #4]
 8002cea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cee:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8002cf0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002cf4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8002cf6:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002cf8:	0752      	lsls	r2, r2, #29
 8002cfa:	d501      	bpl.n	8002d00 <I2C_ITError+0x84>
 8002cfc:	2b28      	cmp	r3, #40	; 0x28
 8002cfe:	d02f      	beq.n	8002d60 <I2C_ITError+0xe4>
}
 8002d00:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d02:	2a22      	cmp	r2, #34	; 0x22
 8002d04:	d1c6      	bne.n	8002c94 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0e:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	0512      	lsls	r2, r2, #20
 8002d14:	d5c8      	bpl.n	8002ca8 <I2C_ITError+0x2c>
 8002d16:	e7cd      	b.n	8002cb4 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d1e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002d28:	d0ca      	beq.n	8002cc0 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d2a:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d32:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d34:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d01e      	beq.n	8002d7a <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <I2C_ITError+0x164>)
 8002d3e:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d40:	f7ff f8b6 	bl	8001eb0 <HAL_DMA_Abort_IT>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d0cb      	beq.n	8002ce0 <I2C_ITError+0x64>
        hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8002d4a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d5c:	4798      	blx	r3
 8002d5e:	e7bf      	b.n	8002ce0 <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d60:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d62:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d64:	491f      	ldr	r1, [pc, #124]	; (8002de4 <I2C_ITError+0x168>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d66:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d68:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d6c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d70:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d74:	f7ff fdfc 	bl	8002970 <HAL_I2C_ListenCpltCallback>
}
 8002d78:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <I2C_ITError+0x164>)
 8002d7e:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d80:	f7ff f896 	bl	8001eb0 <HAL_DMA_Abort_IT>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d0ab      	beq.n	8002ce0 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	695a      	ldr	r2, [r3, #20]
 8002d8c:	0651      	lsls	r1, r2, #25
 8002d8e:	d506      	bpl.n	8002d9e <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d94:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002d96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	3201      	adds	r2, #1
 8002d9c:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8002da0:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002da2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002dae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002db0:	4798      	blx	r3
 8002db2:	e795      	b.n	8002ce0 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	2120      	movs	r1, #32
 8002db6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dba:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	0652      	lsls	r2, r2, #25
 8002dc0:	d506      	bpl.n	8002dd0 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dc6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002dc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	3201      	adds	r2, #1
 8002dce:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002dd0:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dd2:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dda:	f7ff fed3 	bl	8002b84 <HAL_I2C_AbortCpltCallback>
 8002dde:	e77f      	b.n	8002ce0 <I2C_ITError+0x64>
 8002de0:	08002b89 	.word	0x08002b89
 8002de4:	ffff0000 	.word	0xffff0000

08002de8 <HAL_I2C_EV_IRQHandler>:
{
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002dec:	6803      	ldr	r3, [r0, #0]
{
 8002dee:	b08f      	sub	sp, #60	; 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002df0:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002df4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002df8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002dfc:	2910      	cmp	r1, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002dfe:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e00:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e02:	d022      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x62>
 8002e04:	2d40      	cmp	r5, #64	; 0x40
 8002e06:	d020      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e08:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	f000 8095 	beq.w	8002f3a <HAL_I2C_EV_IRQHandler+0x152>
  uint32_t sr2itflags               = 0U;
 8002e10:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e12:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e14:	078f      	lsls	r7, r1, #30
 8002e16:	f3c1 0640 	ubfx	r6, r1, #1, #1
 8002e1a:	d559      	bpl.n	8002ed0 <HAL_I2C_EV_IRQHandler+0xe8>
 8002e1c:	0586      	lsls	r6, r0, #22
 8002e1e:	d559      	bpl.n	8002ed4 <HAL_I2C_EV_IRQHandler+0xec>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e22:	b102      	cbz	r2, 8002e26 <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e24:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e26:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002e2a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002e2e:	2a28      	cmp	r2, #40	; 0x28
 8002e30:	f000 821d 	beq.w	800326e <HAL_I2C_EV_IRQHandler+0x486>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e34:	2200      	movs	r2, #0
 8002e36:	920c      	str	r2, [sp, #48]	; 0x30
 8002e38:	6959      	ldr	r1, [r3, #20]
 8002e3a:	910c      	str	r1, [sp, #48]	; 0x30
 8002e3c:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 8002e3e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e42:	930c      	str	r3, [sp, #48]	; 0x30
 8002e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 8002e46:	b00f      	add	sp, #60	; 0x3c
 8002e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e4a:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e4c:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e4e:	f011 0f01 	tst.w	r1, #1
 8002e52:	d11a      	bne.n	8002e8a <HAL_I2C_EV_IRQHandler+0xa2>
 8002e54:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8002e58:	d0f5      	beq.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 8002e5a:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8002e5e:	d0f2      	beq.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e60:	070e      	lsls	r6, r1, #28
 8002e62:	d56d      	bpl.n	8002f40 <HAL_I2C_EV_IRQHandler+0x158>
 8002e64:	0586      	lsls	r6, r0, #22
 8002e66:	f140 8083 	bpl.w	8002f70 <HAL_I2C_EV_IRQHandler+0x188>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002e6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e6e:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002e70:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e72:	2900      	cmp	r1, #0
 8002e74:	f000 81e2 	beq.w	800323c <HAL_I2C_EV_IRQHandler+0x454>
 8002e78:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	f000 81de 	beq.w	800323c <HAL_I2C_EV_IRQHandler+0x454>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	e7dd      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e8a:	0586      	lsls	r6, r0, #22
 8002e8c:	d56e      	bpl.n	8002f6c <HAL_I2C_EV_IRQHandler+0x184>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002e8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e90:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8002e94:	f000 81e8 	beq.w	8003268 <HAL_I2C_EV_IRQHandler+0x480>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002e98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e9a:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002e9e:	bf04      	itt	eq
 8002ea0:	2208      	moveq	r2, #8
 8002ea2:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ea4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002ea8:	2a40      	cmp	r2, #64	; 0x40
 8002eaa:	f000 81d6 	beq.w	800325a <HAL_I2C_EV_IRQHandler+0x472>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eae:	6922      	ldr	r2, [r4, #16]
 8002eb0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002eb4:	f000 81b1 	beq.w	800321a <HAL_I2C_EV_IRQHandler+0x432>
      if (hi2c->EventCount == 0U)
 8002eb8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002eba:	2a00      	cmp	r2, #0
 8002ebc:	f040 81eb 	bne.w	8003296 <HAL_I2C_EV_IRQHandler+0x4ae>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002ec0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ec2:	11d2      	asrs	r2, r2, #7
 8002ec4:	f002 0206 	and.w	r2, r2, #6
 8002ec8:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002ecc:	611a      	str	r2, [r3, #16]
 8002ece:	e7ba      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ed0:	06cf      	lsls	r7, r1, #27
 8002ed2:	d47b      	bmi.n	8002fcc <HAL_I2C_EV_IRQHandler+0x1e4>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ed4:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8002ed8:	2a21      	cmp	r2, #33	; 0x21
 8002eda:	f000 80f4 	beq.w	80030c6 <HAL_I2C_EV_IRQHandler+0x2de>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ede:	064e      	lsls	r6, r1, #25
 8002ee0:	f140 8131 	bpl.w	8003146 <HAL_I2C_EV_IRQHandler+0x35e>
 8002ee4:	0545      	lsls	r5, r0, #21
 8002ee6:	f140 812e 	bpl.w	8003146 <HAL_I2C_EV_IRQHandler+0x35e>
 8002eea:	0749      	lsls	r1, r1, #29
 8002eec:	f100 812e 	bmi.w	800314c <HAL_I2C_EV_IRQHandler+0x364>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ef0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002ef4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ef6:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	2a00      	cmp	r2, #0
 8002efc:	d0a3      	beq.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f02:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002f04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002f06:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002f10:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f12:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8002f14:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d195      	bne.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 8002f1a:	292a      	cmp	r1, #42	; 0x2a
 8002f1c:	d193      	bne.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f1e:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f20:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f22:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f24:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f26:	6853      	ldr	r3, [r2, #4]
 8002f28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f2c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f2e:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f30:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f34:	f7ff fd18 	bl	8002968 <HAL_I2C_SlaveRxCpltCallback>
 8002f38:	e785      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f3a:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f3c:	6959      	ldr	r1, [r3, #20]
 8002f3e:	e769      	b.n	8002e14 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f40:	078e      	lsls	r6, r1, #30
 8002f42:	d515      	bpl.n	8002f70 <HAL_I2C_EV_IRQHandler+0x188>
 8002f44:	0586      	lsls	r6, r0, #22
 8002f46:	d513      	bpl.n	8002f70 <HAL_I2C_EV_IRQHandler+0x188>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002f48:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002f4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002f4e:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f50:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002f54:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f56:	2922      	cmp	r1, #34	; 0x22
 8002f58:	f000 81b2 	beq.w	80032c0 <HAL_I2C_EV_IRQHandler+0x4d8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	920a      	str	r2, [sp, #40]	; 0x28
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	920a      	str	r2, [sp, #40]	; 0x28
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	930a      	str	r3, [sp, #40]	; 0x28
 8002f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f6a:	e76c      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f6c:	070e      	lsls	r6, r1, #28
 8002f6e:	d5e7      	bpl.n	8002f40 <HAL_I2C_EV_IRQHandler+0x158>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f70:	077f      	lsls	r7, r7, #29
 8002f72:	f140 80f4 	bpl.w	800315e <HAL_I2C_EV_IRQHandler+0x376>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f76:	685e      	ldr	r6, [r3, #4]
 8002f78:	0536      	lsls	r6, r6, #20
 8002f7a:	f53f af64 	bmi.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f7e:	060f      	lsls	r7, r1, #24
 8002f80:	f140 8114 	bpl.w	80031ac <HAL_I2C_EV_IRQHandler+0x3c4>
 8002f84:	0546      	lsls	r6, r0, #21
 8002f86:	f140 8111 	bpl.w	80031ac <HAL_I2C_EV_IRQHandler+0x3c4>
 8002f8a:	074f      	lsls	r7, r1, #29
 8002f8c:	f100 8111 	bmi.w	80031b2 <HAL_I2C_EV_IRQHandler+0x3ca>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f90:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f94:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f96:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f9a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f9c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f9e:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	f040 823a 	bne.w	800341a <HAL_I2C_EV_IRQHandler+0x632>
 8002fa6:	2a21      	cmp	r2, #33	; 0x21
 8002fa8:	f000 8341 	beq.w	800362e <HAL_I2C_EV_IRQHandler+0x846>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002fac:	2940      	cmp	r1, #64	; 0x40
 8002fae:	f47f af4a 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002fb2:	2a22      	cmp	r2, #34	; 0x22
 8002fb4:	f47f af47 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount == 0U)
 8002fb8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	2a00      	cmp	r2, #0
 8002fbe:	f040 82c1 	bne.w	8003544 <HAL_I2C_EV_IRQHandler+0x75c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e73c      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fcc:	0585      	lsls	r5, r0, #22
 8002fce:	d581      	bpl.n	8002ed4 <HAL_I2C_EV_IRQHandler+0xec>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd0:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fd4:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd6:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fdc:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002fde:	960d      	str	r6, [sp, #52]	; 0x34
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	920d      	str	r2, [sp, #52]	; 0x34
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff4:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	0511      	lsls	r1, r2, #20
 8002ffa:	d521      	bpl.n	8003040 <HAL_I2C_EV_IRQHandler+0x258>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ffc:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8003000:	2a22      	cmp	r2, #34	; 0x22
 8003002:	f000 817a 	beq.w	80032fa <HAL_I2C_EV_IRQHandler+0x512>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003006:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003008:	6802      	ldr	r2, [r0, #0]
 800300a:	6852      	ldr	r2, [r2, #4]
 800300c:	b292      	uxth	r2, r2
 800300e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003010:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003012:	b292      	uxth	r2, r2
 8003014:	b11a      	cbz	r2, 800301e <HAL_I2C_EV_IRQHandler+0x236>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003016:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003018:	f042 0204 	orr.w	r2, r2, #4
 800301c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003024:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003026:	f7ff f821 	bl	800206c <HAL_DMA_GetState>
 800302a:	2801      	cmp	r0, #1
 800302c:	d008      	beq.n	8003040 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800302e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003030:	4ba2      	ldr	r3, [pc, #648]	; (80032bc <HAL_I2C_EV_IRQHandler+0x4d4>)
 8003032:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003034:	f7fe ff3c 	bl	8001eb0 <HAL_DMA_Abort_IT>
 8003038:	b110      	cbz	r0, 8003040 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800303a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800303c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800303e:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8003040:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	b313      	cbz	r3, 800308c <HAL_I2C_EV_IRQHandler+0x2a4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	0752      	lsls	r2, r2, #29
 800304c:	d50a      	bpl.n	8003064 <HAL_I2C_EV_IRQHandler+0x27c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003052:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003054:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003056:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003058:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800305a:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 800305c:	b292      	uxth	r2, r2
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003062:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	0657      	lsls	r7, r2, #25
 8003068:	d509      	bpl.n	800307e <HAL_I2C_EV_IRQHandler+0x296>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800306e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003070:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003072:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003074:	3b01      	subs	r3, #1
 8003076:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003078:	3201      	adds	r2, #1
      hi2c->XferCount--;
 800307a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800307c:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 800307e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	b11b      	cbz	r3, 800308c <HAL_I2C_EV_IRQHandler+0x2a4>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003084:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800308c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 80dd 	bne.w	800324e <HAL_I2C_EV_IRQHandler+0x466>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003094:	2d2a      	cmp	r5, #42	; 0x2a
 8003096:	f000 8151 	beq.w	800333c <HAL_I2C_EV_IRQHandler+0x554>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800309a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800309e:	2b28      	cmp	r3, #40	; 0x28
 80030a0:	f000 8154 	beq.w	800334c <HAL_I2C_EV_IRQHandler+0x564>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80030a6:	2b22      	cmp	r3, #34	; 0x22
 80030a8:	d002      	beq.n	80030b0 <HAL_I2C_EV_IRQHandler+0x2c8>
 80030aa:	2d22      	cmp	r5, #34	; 0x22
 80030ac:	f47f aecb 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 80030b0:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80030b4:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030b6:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80030b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030c0:	f7ff fc52 	bl	8002968 <HAL_I2C_SlaveRxCpltCallback>
 80030c4:	e6bf      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030c6:	060e      	lsls	r6, r1, #24
 80030c8:	d528      	bpl.n	800311c <HAL_I2C_EV_IRQHandler+0x334>
 80030ca:	0545      	lsls	r5, r0, #21
 80030cc:	d526      	bpl.n	800311c <HAL_I2C_EV_IRQHandler+0x334>
 80030ce:	0749      	lsls	r1, r1, #29
 80030d0:	d427      	bmi.n	8003122 <HAL_I2C_EV_IRQHandler+0x33a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80030d6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d8:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 80030da:	b289      	uxth	r1, r1
 80030dc:	2900      	cmp	r1, #0
 80030de:	f43f aeb2 	beq.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80030e4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80030e8:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80030ea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80030ec:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80030ee:	3901      	subs	r1, #1
 80030f0:	b289      	uxth	r1, r1
 80030f2:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030f4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80030f6:	b289      	uxth	r1, r1
 80030f8:	2900      	cmp	r1, #0
 80030fa:	f47f aea4 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 80030fe:	2829      	cmp	r0, #41	; 0x29
 8003100:	f47f aea1 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003104:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003106:	6859      	ldr	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003108:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800310a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800310e:	6059      	str	r1, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003110:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003112:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003116:	f7ff fc25 	bl	8002964 <HAL_I2C_SlaveTxCpltCallback>
 800311a:	e694      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800311c:	074a      	lsls	r2, r1, #29
 800311e:	f57f ae92 	bpl.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 8003122:	0587      	lsls	r7, r0, #22
 8003124:	f57f ae8f 	bpl.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8003128:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800312a:	b292      	uxth	r2, r2
 800312c:	2a00      	cmp	r2, #0
 800312e:	f43f ae8a 	beq.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003132:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003134:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003138:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 800313a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800313c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800313e:	3b01      	subs	r3, #1
 8003140:	b29b      	uxth	r3, r3
 8003142:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003144:	e67f      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003146:	074a      	lsls	r2, r1, #29
 8003148:	f57f ae7d 	bpl.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 800314c:	0587      	lsls	r7, r0, #22
 800314e:	f57f ae7a 	bpl.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8003152:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003154:	b292      	uxth	r2, r2
 8003156:	2a00      	cmp	r2, #0
 8003158:	f43f ae75 	beq.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 800315c:	e01b      	b.n	8003196 <HAL_I2C_EV_IRQHandler+0x3ae>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	0512      	lsls	r2, r2, #20
 8003162:	f53f ae70 	bmi.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003166:	064f      	lsls	r7, r1, #25
 8003168:	d432      	bmi.n	80031d0 <HAL_I2C_EV_IRQHandler+0x3e8>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800316a:	0749      	lsls	r1, r1, #29
 800316c:	f57f ae6b 	bpl.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 8003170:	0582      	lsls	r2, r0, #22
 8003172:	f57f ae68 	bpl.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003176:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8003178:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800317a:	b292      	uxth	r2, r2
 800317c:	2a04      	cmp	r2, #4
 800317e:	f000 8119 	beq.w	80033b4 <HAL_I2C_EV_IRQHandler+0x5cc>
  else if (hi2c->XferCount == 3U)
 8003182:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003184:	b292      	uxth	r2, r2
 8003186:	2a03      	cmp	r2, #3
 8003188:	f000 8159 	beq.w	800343e <HAL_I2C_EV_IRQHandler+0x656>
  else if (hi2c->XferCount == 2U)
 800318c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800318e:	b292      	uxth	r2, r2
 8003190:	2a02      	cmp	r2, #2
 8003192:	f000 8185 	beq.w	80034a0 <HAL_I2C_EV_IRQHandler+0x6b8>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800319a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800319c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800319e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80031a4:	3201      	adds	r2, #1
    hi2c->XferCount--;
 80031a6:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80031a8:	6262      	str	r2, [r4, #36]	; 0x24
      }
 80031aa:	e64c      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ac:	074e      	lsls	r6, r1, #29
 80031ae:	f57f ae4a 	bpl.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 80031b2:	0581      	lsls	r1, r0, #22
 80031b4:	f57f ae47 	bpl.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031b8:	2a21      	cmp	r2, #33	; 0x21
 80031ba:	f000 8103 	beq.w	80033c4 <HAL_I2C_EV_IRQHandler+0x5dc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80031be:	2d40      	cmp	r5, #64	; 0x40
 80031c0:	f47f ae41 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031c4:	4620      	mov	r0, r4
}
 80031c6:	b00f      	add	sp, #60	; 0x3c
 80031c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031cc:	f7ff bbd4 	b.w	8002978 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d0:	0546      	lsls	r6, r0, #21
 80031d2:	d5ca      	bpl.n	800316a <HAL_I2C_EV_IRQHandler+0x382>
 80031d4:	074d      	lsls	r5, r1, #29
 80031d6:	f3c1 0280 	ubfx	r2, r1, #2, #1
 80031da:	d4c9      	bmi.n	8003170 <HAL_I2C_EV_IRQHandler+0x388>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031dc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80031e0:	2922      	cmp	r1, #34	; 0x22
 80031e2:	f47f ae30 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    tmp = hi2c->XferCount;
 80031e6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80031e8:	b289      	uxth	r1, r1
    if (tmp > 3U)
 80031ea:	2903      	cmp	r1, #3
 80031ec:	f240 81b0 	bls.w	8003550 <HAL_I2C_EV_IRQHandler+0x768>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031f4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80031f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80031f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003200:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003202:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8003208:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 800320a:	f47f ae1c 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800320e:	6822      	ldr	r2, [r4, #0]
 8003210:	6853      	ldr	r3, [r2, #4]
 8003212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003216:	6053      	str	r3, [r2, #4]
 8003218:	e615      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800321a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800321e:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003220:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003222:	bf16      	itet	ne
 8003224:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003228:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800322c:	b2d2      	uxtbne	r2, r2
 800322e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003230:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003232:	b11a      	cbz	r2, 800323c <HAL_I2C_EV_IRQHandler+0x454>
 8003234:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003236:	2a00      	cmp	r2, #0
 8003238:	f47f ae22 	bne.w	8002e80 <HAL_I2C_EV_IRQHandler+0x98>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800323c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800323e:	2a00      	cmp	r2, #0
 8003240:	f43f ae01 	beq.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 8003244:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003246:	2a00      	cmp	r2, #0
 8003248:	f47f ae1a 	bne.w	8002e80 <HAL_I2C_EV_IRQHandler+0x98>
 800324c:	e5fb      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    I2C_ITError(hi2c);
 800324e:	4620      	mov	r0, r4
}
 8003250:	b00f      	add	sp, #60	; 0x3c
 8003252:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003256:	f7ff bd11 	b.w	8002c7c <I2C_ITError>
    if (hi2c->EventCount == 0U)
 800325a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800325c:	bb3a      	cbnz	r2, 80032ae <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800325e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003264:	611a      	str	r2, [r3, #16]
 8003266:	e5ee      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003268:	2201      	movs	r2, #1
 800326a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800326c:	e61a      	b.n	8002ea4 <HAL_I2C_EV_IRQHandler+0xbc>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800326e:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003270:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003278:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800327a:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 800327c:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003280:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003282:	bf54      	ite	pl
 8003284:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003286:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003288:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 800328c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003290:	f7ff fb6c 	bl	800296c <HAL_I2C_AddrCallback>
 8003294:	e5d7      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8003296:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003298:	2a01      	cmp	r2, #1
 800329a:	f47f add4 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800329e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80032a0:	11d2      	asrs	r2, r2, #7
 80032a2:	f002 0206 	and.w	r2, r2, #6
 80032a6:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80032aa:	611a      	str	r2, [r3, #16]
 80032ac:	e5cb      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80032ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	611a      	str	r2, [r3, #16]
 80032b8:	e5c5      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 80032ba:	bf00      	nop
 80032bc:	08002b89 	.word	0x08002b89
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80032c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80032c2:	b911      	cbnz	r1, 80032ca <HAL_I2C_EV_IRQHandler+0x4e2>
 80032c4:	2a40      	cmp	r2, #64	; 0x40
 80032c6:	f000 80a1 	beq.w	800340c <HAL_I2C_EV_IRQHandler+0x624>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80032ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80032cc:	b922      	cbnz	r2, 80032d8 <HAL_I2C_EV_IRQHandler+0x4f0>
 80032ce:	6921      	ldr	r1, [r4, #16]
 80032d0:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 80032d4:	f000 80a5 	beq.w	8003422 <HAL_I2C_EV_IRQHandler+0x63a>
      if (hi2c->XferCount == 0U)
 80032d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80032da:	b292      	uxth	r2, r2
 80032dc:	2a00      	cmp	r2, #0
 80032de:	d142      	bne.n	8003366 <HAL_I2C_EV_IRQHandler+0x57e>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e0:	9202      	str	r2, [sp, #8]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	9202      	str	r2, [sp, #8]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	9202      	str	r2, [sp, #8]
 80032ea:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	6523      	str	r3, [r4, #80]	; 0x50
 80032f8:	e5a5      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80032fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80032fc:	6802      	ldr	r2, [r0, #0]
 80032fe:	6852      	ldr	r2, [r2, #4]
 8003300:	b292      	uxth	r2, r2
 8003302:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003304:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003306:	b292      	uxth	r2, r2
 8003308:	b11a      	cbz	r2, 8003312 <HAL_I2C_EV_IRQHandler+0x52a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800330a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800330c:	f042 0204 	orr.w	r2, r2, #4
 8003310:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003318:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800331a:	f7fe fea7 	bl	800206c <HAL_DMA_GetState>
 800331e:	2801      	cmp	r0, #1
 8003320:	f43f ae8e 	beq.w	8003040 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003324:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003326:	4ba6      	ldr	r3, [pc, #664]	; (80035c0 <HAL_I2C_EV_IRQHandler+0x7d8>)
 8003328:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800332a:	f7fe fdc1 	bl	8001eb0 <HAL_DMA_Abort_IT>
 800332e:	2800      	cmp	r0, #0
 8003330:	f43f ae86 	beq.w	8003040 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003334:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003336:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003338:	4798      	blx	r3
 800333a:	e681      	b.n	8003040 <HAL_I2C_EV_IRQHandler+0x258>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800333c:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 800333e:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003340:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003342:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003346:	f7ff fb0f 	bl	8002968 <HAL_I2C_SlaveRxCpltCallback>
 800334a:	e6a6      	b.n	800309a <HAL_I2C_EV_IRQHandler+0x2b2>
      hi2c->PreviousState = I2C_STATE_NONE;
 800334c:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800334e:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003350:	499c      	ldr	r1, [pc, #624]	; (80035c4 <HAL_I2C_EV_IRQHandler+0x7dc>)
      HAL_I2C_ListenCpltCallback(hi2c);
 8003352:	4620      	mov	r0, r4
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003354:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003356:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003358:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003360:	f7ff fb06 	bl	8002970 <HAL_I2C_ListenCpltCallback>
 8003364:	e56f      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->XferCount == 1U)
 8003366:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003368:	b292      	uxth	r2, r2
 800336a:	2a01      	cmp	r2, #1
 800336c:	d076      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0x674>
      else if (hi2c->XferCount == 2U)
 800336e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003370:	b292      	uxth	r2, r2
 8003372:	2a02      	cmp	r2, #2
 8003374:	f000 812e 	beq.w	80035d4 <HAL_I2C_EV_IRQHandler+0x7ec>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800337e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	0511      	lsls	r1, r2, #20
 8003384:	d50e      	bpl.n	80033a4 <HAL_I2C_EV_IRQHandler+0x5bc>
 8003386:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800338a:	d007      	beq.n	800339c <HAL_I2C_EV_IRQHandler+0x5b4>
 800338c:	3801      	subs	r0, #1
 800338e:	281f      	cmp	r0, #31
 8003390:	d808      	bhi.n	80033a4 <HAL_I2C_EV_IRQHandler+0x5bc>
 8003392:	4a8d      	ldr	r2, [pc, #564]	; (80035c8 <HAL_I2C_EV_IRQHandler+0x7e0>)
 8003394:	fa22 f000 	lsr.w	r0, r2, r0
 8003398:	07c2      	lsls	r2, r0, #31
 800339a:	d503      	bpl.n	80033a4 <HAL_I2C_EV_IRQHandler+0x5bc>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a2:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a4:	2200      	movs	r2, #0
 80033a6:	9209      	str	r2, [sp, #36]	; 0x24
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	9209      	str	r2, [sp, #36]	; 0x24
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	9309      	str	r3, [sp, #36]	; 0x24
 80033b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033b2:	e79f      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033b4:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033bc:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80033c2:	e6eb      	b.n	800319c <HAL_I2C_EV_IRQHandler+0x3b4>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033c6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80033ca:	2a21      	cmp	r2, #33	; 0x21
 80033cc:	f47f ad3b 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount != 0U)
 80033d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80033d2:	b292      	uxth	r2, r2
 80033d4:	2a00      	cmp	r2, #0
 80033d6:	f47f aeac 	bne.w	8003132 <HAL_I2C_EV_IRQHandler+0x34a>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033da:	2908      	cmp	r1, #8
 80033dc:	f000 809a 	beq.w	8003514 <HAL_I2C_EV_IRQHandler+0x72c>
 80033e0:	2920      	cmp	r1, #32
 80033e2:	f000 8097 	beq.w	8003514 <HAL_I2C_EV_IRQHandler+0x72c>
 80033e6:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80033ea:	f000 8093 	beq.w	8003514 <HAL_I2C_EV_IRQHandler+0x72c>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033ee:	2611      	movs	r6, #17
        hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	2520      	movs	r5, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f2:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80033fa:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033fc:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003402:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003406:	f7ff faa9 	bl	800295c <HAL_I2C_MasterTxCpltCallback>
 800340a:	e51c      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340c:	9100      	str	r1, [sp, #0]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	9200      	str	r2, [sp, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	9b00      	ldr	r3, [sp, #0]
 8003418:	e515      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800341a:	2a21      	cmp	r2, #33	; 0x21
 800341c:	f43f adcc 	beq.w	8002fb8 <HAL_I2C_EV_IRQHandler+0x1d0>
 8003420:	e5c4      	b.n	8002fac <HAL_I2C_EV_IRQHandler+0x1c4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	9201      	str	r2, [sp, #4]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	9201      	str	r2, [sp, #4]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	9201      	str	r2, [sp, #4]
 800342c:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003434:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003436:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003438:	3301      	adds	r3, #1
 800343a:	6523      	str	r3, [r4, #80]	; 0x50
 800343c:	e503      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800343e:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003440:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003446:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003448:	f43f aea5 	beq.w	8003196 <HAL_I2C_EV_IRQHandler+0x3ae>
 800344c:	2902      	cmp	r1, #2
 800344e:	f43f aea2 	beq.w	8003196 <HAL_I2C_EV_IRQHandler+0x3ae>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e69c      	b.n	8003196 <HAL_I2C_EV_IRQHandler+0x3ae>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800345c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003460:	f000 8104 	beq.w	800366c <HAL_I2C_EV_IRQHandler+0x884>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003464:	2808      	cmp	r0, #8
 8003466:	f000 80d2 	beq.w	800360e <HAL_I2C_EV_IRQHandler+0x826>
 800346a:	2820      	cmp	r0, #32
 800346c:	f000 80cf 	beq.w	800360e <HAL_I2C_EV_IRQHandler+0x826>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003470:	2d12      	cmp	r5, #18
 8003472:	f000 8145 	beq.w	8003700 <HAL_I2C_EV_IRQHandler+0x918>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003476:	2810      	cmp	r0, #16
 8003478:	f200 8144 	bhi.w	8003704 <HAL_I2C_EV_IRQHandler+0x91c>
 800347c:	4a53      	ldr	r2, [pc, #332]	; (80035cc <HAL_I2C_EV_IRQHandler+0x7e4>)
 800347e:	fa22 f000 	lsr.w	r0, r2, r0
 8003482:	07c7      	lsls	r7, r0, #31
 8003484:	f140 813e 	bpl.w	8003704 <HAL_I2C_EV_IRQHandler+0x91c>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800348e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003490:	2200      	movs	r2, #0
 8003492:	9205      	str	r2, [sp, #20]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	9205      	str	r2, [sp, #20]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	9305      	str	r3, [sp, #20]
 800349c:	9b05      	ldr	r3, [sp, #20]
 800349e:	e729      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80034a0:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a2:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80034a4:	f000 80de 	beq.w	8003664 <HAL_I2C_EV_IRQHandler+0x87c>
 80034a8:	2910      	cmp	r1, #16
 80034aa:	f000 80db 	beq.w	8003664 <HAL_I2C_EV_IRQHandler+0x87c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80034ae:	2904      	cmp	r1, #4
 80034b0:	f000 8117 	beq.w	80036e2 <HAL_I2C_EV_IRQHandler+0x8fa>
 80034b4:	2902      	cmp	r1, #2
 80034b6:	f000 8114 	beq.w	80036e2 <HAL_I2C_EV_IRQHandler+0x8fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034be:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	2020      	movs	r0, #32
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034c6:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80034c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount--;
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80034d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	6912      	ldr	r2, [r2, #16]
    hi2c->pBuffPtr++;
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034da:	705a      	strb	r2, [r3, #1]
    hi2c->XferCount--;
 80034dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034de:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034e6:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 80034e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->pBuffPtr++;
 80034ee:	3201      	adds	r2, #1
 80034f0:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034f2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034f8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	f000 80c9 	beq.w	8003694 <HAL_I2C_EV_IRQHandler+0x8ac>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003502:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003504:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003506:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800350a:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800350c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800350e:	f7ff fa27 	bl	8002960 <HAL_I2C_MasterRxCpltCallback>
 8003512:	e498      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003514:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003516:	2020      	movs	r0, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800351e:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003526:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003528:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800352a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800352e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003532:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003534:	2b40      	cmp	r3, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003536:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800353a:	f47f af64 	bne.w	8003406 <HAL_I2C_EV_IRQHandler+0x61e>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800353e:	f7ff fa19 	bl	8002974 <HAL_I2C_MemTxCpltCallback>
 8003542:	e480      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003544:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003548:	2a40      	cmp	r2, #64	; 0x40
 800354a:	f47f adf2 	bne.w	8003132 <HAL_I2C_EV_IRQHandler+0x34a>
 800354e:	e639      	b.n	80031c4 <HAL_I2C_EV_IRQHandler+0x3dc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003550:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003552:	2802      	cmp	r0, #2
 8003554:	f43f ac77 	beq.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 8003558:	2901      	cmp	r1, #1
 800355a:	f63f ac74 	bhi.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800355e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003562:	481b      	ldr	r0, [pc, #108]	; (80035d0 <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 8003564:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003566:	6802      	ldr	r2, [r0, #0]
 8003568:	fbb2 f2f1 	udiv	r2, r2, r1
 800356c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003570:	920b      	str	r2, [sp, #44]	; 0x2c
 8003572:	e004      	b.n	800357e <HAL_I2C_EV_IRQHandler+0x796>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 800357a:	f000 80c8 	beq.w	800370e <HAL_I2C_EV_IRQHandler+0x926>
    count--;
 800357e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003580:	3a01      	subs	r2, #1
 8003582:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8003584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003586:	2900      	cmp	r1, #0
 8003588:	d1f4      	bne.n	8003574 <HAL_I2C_EV_IRQHandler+0x78c>
        hi2c->State = HAL_I2C_STATE_READY;
 800358a:	2520      	movs	r5, #32
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358e:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	432a      	orrs	r2, r5
 8003592:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003594:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_ErrorCallback(hi2c);
 8003596:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003598:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800359c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	7033      	strb	r3, [r6, #0]
        hi2c->XferCount--;
 80035a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80035a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80035aa:	3201      	adds	r2, #1
        hi2c->XferCount--;
 80035ac:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80035ae:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 80035b0:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80035b8:	f7ff fa3c 	bl	8002a34 <HAL_I2C_ErrorCallback>
 80035bc:	e443      	b.n	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 80035be:	bf00      	nop
 80035c0:	08002b89 	.word	0x08002b89
 80035c4:	ffff0000 	.word	0xffff0000
 80035c8:	80008081 	.word	0x80008081
 80035cc:	00010014 	.word	0x00010014
 80035d0:	20000000 	.word	0x20000000
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035d4:	2810      	cmp	r0, #16
 80035d6:	d966      	bls.n	80036a6 <HAL_I2C_EV_IRQHandler+0x8be>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d8:	2100      	movs	r1, #0
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035e0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	9107      	str	r1, [sp, #28]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	9207      	str	r2, [sp, #28]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	9207      	str	r2, [sp, #28]
 80035ec:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f4:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	0516      	lsls	r6, r2, #20
 80035fa:	f57f ae7b 	bpl.w	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
 80035fe:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003602:	d164      	bne.n	80036ce <HAL_I2C_EV_IRQHandler+0x8e6>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	e672      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360e:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003618:	9106      	str	r1, [sp, #24]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	9206      	str	r2, [sp, #24]
 800361e:	699a      	ldr	r2, [r3, #24]
 8003620:	9206      	str	r2, [sp, #24]
 8003622:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e662      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800362e:	2d08      	cmp	r5, #8
 8003630:	f43f af70 	beq.w	8003514 <HAL_I2C_EV_IRQHandler+0x72c>
 8003634:	2d20      	cmp	r5, #32
 8003636:	f43f af6d 	beq.w	8003514 <HAL_I2C_EV_IRQHandler+0x72c>
 800363a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 800363e:	f43f af69 	beq.w	8003514 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003642:	2611      	movs	r6, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003644:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003646:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003648:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800364a:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800364c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003650:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003652:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003654:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003658:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800365c:	f7ff f97e 	bl	800295c <HAL_I2C_MasterTxCpltCallback>
 8003660:	f7ff bbf1 	b.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e729      	b.n	80034c0 <HAL_I2C_EV_IRQHandler+0x6d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003672:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800367a:	d036      	beq.n	80036ea <HAL_I2C_EV_IRQHandler+0x902>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367c:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003684:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	9103      	str	r1, [sp, #12]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	9203      	str	r2, [sp, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	9303      	str	r3, [sp, #12]
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	e62f      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	2300      	movs	r3, #0
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003696:	4620      	mov	r0, r4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800369c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800369e:	f7ff f9c7 	bl	8002a30 <HAL_I2C_MemRxCpltCallback>
 80036a2:	f7ff bbd0 	b.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036a6:	4a2b      	ldr	r2, [pc, #172]	; (8003754 <HAL_I2C_EV_IRQHandler+0x96c>)
 80036a8:	40c2      	lsrs	r2, r0
 80036aa:	43d2      	mvns	r2, r2
 80036ac:	f012 0201 	ands.w	r2, r2, #1
 80036b0:	d192      	bne.n	80035d8 <HAL_I2C_EV_IRQHandler+0x7f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80036b8:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	9208      	str	r2, [sp, #32]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	9208      	str	r2, [sp, #32]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	9208      	str	r2, [sp, #32]
 80036c4:	9a08      	ldr	r2, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	0515      	lsls	r5, r2, #20
 80036ca:	f57f ae13 	bpl.w	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
 80036ce:	3801      	subs	r0, #1
 80036d0:	281f      	cmp	r0, #31
 80036d2:	f63f ae0f 	bhi.w	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
 80036d6:	4a20      	ldr	r2, [pc, #128]	; (8003758 <HAL_I2C_EV_IRQHandler+0x970>)
 80036d8:	40c2      	lsrs	r2, r0
 80036da:	07d0      	lsls	r0, r2, #31
 80036dc:	f57f ae0a 	bpl.w	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
 80036e0:	e790      	b.n	8003604 <HAL_I2C_EV_IRQHandler+0x81c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e6ea      	b.n	80034c0 <HAL_I2C_EV_IRQHandler+0x6d8>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ea:	9204      	str	r2, [sp, #16]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	9204      	str	r2, [sp, #16]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	9204      	str	r2, [sp, #16]
 80036f4:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e5f9      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x50c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003700:	2801      	cmp	r0, #1
 8003702:	d184      	bne.n	800360e <HAL_I2C_EV_IRQHandler+0x826>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e6c0      	b.n	8003490 <HAL_I2C_EV_IRQHandler+0x6a8>
        hi2c->State = HAL_I2C_STATE_READY;
 800370e:	2020      	movs	r0, #32
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003710:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003712:	6a65      	ldr	r5, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003714:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003718:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003720:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	702b      	strb	r3, [r5, #0]
        hi2c->XferCount--;
 8003726:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003728:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800372a:	3b01      	subs	r3, #1
 800372c:	b29b      	uxth	r3, r3
 800372e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003730:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003734:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8003738:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800373a:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 800373c:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800373e:	f47f aee1 	bne.w	8003504 <HAL_I2C_EV_IRQHandler+0x71c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003742:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003746:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8003748:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800374a:	f7ff f971 	bl	8002a30 <HAL_I2C_MemRxCpltCallback>
 800374e:	f7ff bb7a 	b.w	8002e46 <HAL_I2C_EV_IRQHandler+0x5e>
 8003752:	bf00      	nop
 8003754:	00010014 	.word	0x00010014
 8003758:	80008081 	.word	0x80008081

0800375c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800375c:	2800      	cmp	r0, #0
 800375e:	f000 81c3 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x38c>
{
 8003762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003766:	6803      	ldr	r3, [r0, #0]
 8003768:	4604      	mov	r4, r0
 800376a:	07dd      	lsls	r5, r3, #31
{
 800376c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	d535      	bpl.n	80037dc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003770:	49a6      	ldr	r1, [pc, #664]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 8003772:	684a      	ldr	r2, [r1, #4]
 8003774:	f002 020c 	and.w	r2, r2, #12
 8003778:	2a04      	cmp	r2, #4
 800377a:	f000 80ef 	beq.w	800395c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800377e:	684a      	ldr	r2, [r1, #4]
 8003780:	f002 020c 	and.w	r2, r2, #12
 8003784:	2a08      	cmp	r2, #8
 8003786:	f000 80e5 	beq.w	8003954 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378a:	6863      	ldr	r3, [r4, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d010      	beq.n	80037b4 <HAL_RCC_OscConfig+0x58>
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 810d 	beq.w	80039b2 <HAL_RCC_OscConfig+0x256>
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379c:	f000 818f 	beq.w	8003abe <HAL_RCC_OscConfig+0x362>
 80037a0:	4b9a      	ldr	r3, [pc, #616]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e004      	b.n	80037be <HAL_RCC_OscConfig+0x62>
 80037b4:	4a95      	ldr	r2, [pc, #596]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fe fa59 	bl	8001c74 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4e92      	ldr	r6, [pc, #584]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80037c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	e005      	b.n	80037d4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c8:	f7fe fa54 	bl	8001c74 <HAL_GetTick>
 80037cc:	1b40      	subs	r0, r0, r5
 80037ce:	2864      	cmp	r0, #100	; 0x64
 80037d0:	f200 80eb 	bhi.w	80039aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d4:	6833      	ldr	r3, [r6, #0]
 80037d6:	039a      	lsls	r2, r3, #14
 80037d8:	d5f6      	bpl.n	80037c8 <HAL_RCC_OscConfig+0x6c>
 80037da:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037dc:	079f      	lsls	r7, r3, #30
 80037de:	d528      	bpl.n	8003832 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e0:	4a8a      	ldr	r2, [pc, #552]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 80037e2:	6851      	ldr	r1, [r2, #4]
 80037e4:	f011 0f0c 	tst.w	r1, #12
 80037e8:	f000 808e 	beq.w	8003908 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ec:	6851      	ldr	r1, [r2, #4]
 80037ee:	f001 010c 	and.w	r1, r1, #12
 80037f2:	2908      	cmp	r1, #8
 80037f4:	f000 8084 	beq.w	8003900 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8125 	beq.w	8003a4a <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003800:	2201      	movs	r2, #1
 8003802:	4b83      	ldr	r3, [pc, #524]	; (8003a10 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003804:	4e81      	ldr	r6, [pc, #516]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 8003806:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003808:	f7fe fa34 	bl	8001c74 <HAL_GetTick>
 800380c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380e:	e005      	b.n	800381c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003810:	f7fe fa30 	bl	8001c74 <HAL_GetTick>
 8003814:	1b40      	subs	r0, r0, r5
 8003816:	2802      	cmp	r0, #2
 8003818:	f200 80c7 	bhi.w	80039aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381c:	6833      	ldr	r3, [r6, #0]
 800381e:	0798      	lsls	r0, r3, #30
 8003820:	d5f6      	bpl.n	8003810 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003822:	6833      	ldr	r3, [r6, #0]
 8003824:	6962      	ldr	r2, [r4, #20]
 8003826:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800382a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800382e:	6033      	str	r3, [r6, #0]
 8003830:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	071a      	lsls	r2, r3, #28
 8003834:	d41f      	bmi.n	8003876 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003836:	075d      	lsls	r5, r3, #29
 8003838:	d541      	bpl.n	80038be <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b74      	ldr	r3, [pc, #464]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	00d0      	lsls	r0, r2, #3
 8003840:	d57d      	bpl.n	800393e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8003842:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x2b8>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	05d1      	lsls	r1, r2, #23
 800384a:	f140 809d 	bpl.w	8003988 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384e:	68e3      	ldr	r3, [r4, #12]
 8003850:	2b01      	cmp	r3, #1
 8003852:	f000 810b 	beq.w	8003a6c <HAL_RCC_OscConfig+0x310>
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80c5 	beq.w	80039e6 <HAL_RCC_OscConfig+0x28a>
 800385c:	2b05      	cmp	r3, #5
 800385e:	4b6b      	ldr	r3, [pc, #428]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	f000 8139 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x37c>
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	621a      	str	r2, [r3, #32]
 800386c:	6a1a      	ldr	r2, [r3, #32]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	621a      	str	r2, [r3, #32]
 8003874:	e0ff      	b.n	8003a76 <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003876:	69a3      	ldr	r3, [r4, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d050      	beq.n	800391e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 800387c:	2201      	movs	r2, #1
 800387e:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003880:	4e62      	ldr	r6, [pc, #392]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8003882:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003884:	f7fe f9f6 	bl	8001c74 <HAL_GetTick>
 8003888:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388a:	e005      	b.n	8003898 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388c:	f7fe f9f2 	bl	8001c74 <HAL_GetTick>
 8003890:	1b40      	subs	r0, r0, r5
 8003892:	2802      	cmp	r0, #2
 8003894:	f200 8089 	bhi.w	80039aa <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003898:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800389a:	079b      	lsls	r3, r3, #30
 800389c:	d5f6      	bpl.n	800388c <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800389e:	4b5f      	ldr	r3, [pc, #380]	; (8003a1c <HAL_RCC_OscConfig+0x2c0>)
 80038a0:	4a5f      	ldr	r2, [pc, #380]	; (8003a20 <HAL_RCC_OscConfig+0x2c4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	0a5b      	lsrs	r3, r3, #9
 80038aa:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80038ac:	bf00      	nop
  }
  while (Delay --);
 80038ae:	9b01      	ldr	r3, [sp, #4]
 80038b0:	1e5a      	subs	r2, r3, #1
 80038b2:	9201      	str	r2, [sp, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f9      	bne.n	80038ac <HAL_RCC_OscConfig+0x150>
 80038b8:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ba:	075d      	lsls	r5, r3, #29
 80038bc:	d4bd      	bmi.n	800383a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038be:	69e0      	ldr	r0, [r4, #28]
 80038c0:	b1d0      	cbz	r0, 80038f8 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c2:	4d52      	ldr	r5, [pc, #328]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 80038c4:	686a      	ldr	r2, [r5, #4]
 80038c6:	f002 020c 	and.w	r2, r2, #12
 80038ca:	2a08      	cmp	r2, #8
 80038cc:	f000 80e6 	beq.w	8003a9c <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	4a53      	ldr	r2, [pc, #332]	; (8003a24 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d8:	f000 8108 	beq.w	8003aec <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 80038dc:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80038de:	f7fe f9c9 	bl	8001c74 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80038e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e6:	e004      	b.n	80038f2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fe f9c4 	bl	8001c74 <HAL_GetTick>
 80038ec:	1b40      	subs	r0, r0, r5
 80038ee:	2802      	cmp	r0, #2
 80038f0:	d85b      	bhi.n	80039aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	019b      	lsls	r3, r3, #6
 80038f6:	d4f7      	bmi.n	80038e8 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 80038f8:	2000      	movs	r0, #0
}
 80038fa:	b002      	add	sp, #8
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003900:	6852      	ldr	r2, [r2, #4]
 8003902:	03d6      	lsls	r6, r2, #15
 8003904:	f53f af78 	bmi.w	80037f8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003908:	4a40      	ldr	r2, [pc, #256]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	0795      	lsls	r5, r2, #30
 800390e:	d52f      	bpl.n	8003970 <HAL_RCC_OscConfig+0x214>
 8003910:	6922      	ldr	r2, [r4, #16]
 8003912:	2a01      	cmp	r2, #1
 8003914:	d02c      	beq.n	8003970 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8003916:	2001      	movs	r0, #1
}
 8003918:	b002      	add	sp, #8
 800391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800391e:	4a3e      	ldr	r2, [pc, #248]	; (8003a18 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	4e3a      	ldr	r6, [pc, #232]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 8003922:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003924:	f7fe f9a6 	bl	8001c74 <HAL_GetTick>
 8003928:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392a:	e004      	b.n	8003936 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392c:	f7fe f9a2 	bl	8001c74 <HAL_GetTick>
 8003930:	1b40      	subs	r0, r0, r5
 8003932:	2802      	cmp	r0, #2
 8003934:	d839      	bhi.n	80039aa <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003936:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003938:	079f      	lsls	r7, r3, #30
 800393a:	d4f7      	bmi.n	800392c <HAL_RCC_OscConfig+0x1d0>
 800393c:	e7bc      	b.n	80038b8 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8003940:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003946:	61da      	str	r2, [r3, #28]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003952:	e777      	b.n	8003844 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003954:	684a      	ldr	r2, [r1, #4]
 8003956:	03d0      	lsls	r0, r2, #15
 8003958:	f57f af17 	bpl.w	800378a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	4a2b      	ldr	r2, [pc, #172]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	0391      	lsls	r1, r2, #14
 8003962:	f57f af3b 	bpl.w	80037dc <HAL_RCC_OscConfig+0x80>
 8003966:	6862      	ldr	r2, [r4, #4]
 8003968:	2a00      	cmp	r2, #0
 800396a:	f47f af37 	bne.w	80037dc <HAL_RCC_OscConfig+0x80>
 800396e:	e7d2      	b.n	8003916 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4926      	ldr	r1, [pc, #152]	; (8003a0c <HAL_RCC_OscConfig+0x2b0>)
 8003972:	6960      	ldr	r0, [r4, #20]
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800397a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800397e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003980:	071a      	lsls	r2, r3, #28
 8003982:	f57f af58 	bpl.w	8003836 <HAL_RCC_OscConfig+0xda>
 8003986:	e776      	b.n	8003876 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003988:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800398c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003990:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003992:	f7fe f96f 	bl	8001c74 <HAL_GetTick>
 8003996:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	05da      	lsls	r2, r3, #23
 800399c:	f53f af57 	bmi.w	800384e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a0:	f7fe f968 	bl	8001c74 <HAL_GetTick>
 80039a4:	1b80      	subs	r0, r0, r6
 80039a6:	2864      	cmp	r0, #100	; 0x64
 80039a8:	d9f6      	bls.n	8003998 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 80039aa:	2003      	movs	r0, #3
}
 80039ac:	b002      	add	sp, #8
 80039ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039b6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80039ba:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039bc:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039cc:	f7fe f952 	bl	8001c74 <HAL_GetTick>
 80039d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	e004      	b.n	80039de <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fe f94e 	bl	8001c74 <HAL_GetTick>
 80039d8:	1b40      	subs	r0, r0, r5
 80039da:	2864      	cmp	r0, #100	; 0x64
 80039dc:	d8e5      	bhi.n	80039aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	6833      	ldr	r3, [r6, #0]
 80039e0:	039b      	lsls	r3, r3, #14
 80039e2:	d4f7      	bmi.n	80039d4 <HAL_RCC_OscConfig+0x278>
 80039e4:	e6f9      	b.n	80037da <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80039ee:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f0:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	621a      	str	r2, [r3, #32]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fe:	f022 0204 	bic.w	r2, r2, #4
 8003a02:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8003a04:	f7fe f936 	bl	8001c74 <HAL_GetTick>
 8003a08:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0a:	e012      	b.n	8003a32 <HAL_RCC_OscConfig+0x2d6>
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	42420000 	.word	0x42420000
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42420480 	.word	0x42420480
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	10624dd3 	.word	0x10624dd3
 8003a24:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a28:	f7fe f924 	bl	8001c74 <HAL_GetTick>
 8003a2c:	1b80      	subs	r0, r0, r6
 8003a2e:	4540      	cmp	r0, r8
 8003a30:	d8bb      	bhi.n	80039aa <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	0798      	lsls	r0, r3, #30
 8003a36:	d4f7      	bmi.n	8003a28 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8003a38:	2d00      	cmp	r5, #0
 8003a3a:	f43f af40 	beq.w	80038be <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3e:	4a44      	ldr	r2, [pc, #272]	; (8003b50 <HAL_RCC_OscConfig+0x3f4>)
 8003a40:	69d3      	ldr	r3, [r2, #28]
 8003a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a46:	61d3      	str	r3, [r2, #28]
 8003a48:	e739      	b.n	80038be <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003a4a:	4a42      	ldr	r2, [pc, #264]	; (8003b54 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4c:	4e40      	ldr	r6, [pc, #256]	; (8003b50 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8003a4e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a50:	f7fe f910 	bl	8001c74 <HAL_GetTick>
 8003a54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a56:	e004      	b.n	8003a62 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a58:	f7fe f90c 	bl	8001c74 <HAL_GetTick>
 8003a5c:	1b40      	subs	r0, r0, r5
 8003a5e:	2802      	cmp	r0, #2
 8003a60:	d8a3      	bhi.n	80039aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	6833      	ldr	r3, [r6, #0]
 8003a64:	0799      	lsls	r1, r3, #30
 8003a66:	d4f7      	bmi.n	8003a58 <HAL_RCC_OscConfig+0x2fc>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	e6e2      	b.n	8003832 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6c:	4a38      	ldr	r2, [pc, #224]	; (8003b50 <HAL_RCC_OscConfig+0x3f4>)
 8003a6e:	6a13      	ldr	r3, [r2, #32]
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003a76:	f7fe f8fd 	bl	8001c74 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a7e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	4f33      	ldr	r7, [pc, #204]	; (8003b50 <HAL_RCC_OscConfig+0x3f4>)
 8003a82:	e004      	b.n	8003a8e <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a84:	f7fe f8f6 	bl	8001c74 <HAL_GetTick>
 8003a88:	1b80      	subs	r0, r0, r6
 8003a8a:	4540      	cmp	r0, r8
 8003a8c:	d88d      	bhi.n	80039aa <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	079b      	lsls	r3, r3, #30
 8003a92:	d5f7      	bpl.n	8003a84 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8003a94:	2d00      	cmp	r5, #0
 8003a96:	f43f af12 	beq.w	80038be <HAL_RCC_OscConfig+0x162>
 8003a9a:	e7d0      	b.n	8003a3e <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a9c:	2801      	cmp	r0, #1
 8003a9e:	f43f af2c 	beq.w	80038fa <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8003aa2:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa4:	6a22      	ldr	r2, [r4, #32]
 8003aa6:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003aaa:	4291      	cmp	r1, r2
 8003aac:	f47f af33 	bne.w	8003916 <HAL_RCC_OscConfig+0x1ba>
 8003ab0:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ab2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003ab6:	1a18      	subs	r0, r3, r0
 8003ab8:	bf18      	it	ne
 8003aba:	2001      	movne	r0, #1
 8003abc:	e71d      	b.n	80038fa <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003abe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ac2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e672      	b.n	80037be <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad8:	f042 0204 	orr.w	r2, r2, #4
 8003adc:	621a      	str	r2, [r3, #32]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	621a      	str	r2, [r3, #32]
 8003ae6:	e7c6      	b.n	8003a76 <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8003ae8:	2001      	movs	r0, #1
}
 8003aea:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8003aec:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8003aee:	f7fe f8c1 	bl	8001c74 <HAL_GetTick>
 8003af2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af4:	e005      	b.n	8003b02 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fe f8bd 	bl	8001c74 <HAL_GetTick>
 8003afa:	1b80      	subs	r0, r0, r6
 8003afc:	2802      	cmp	r0, #2
 8003afe:	f63f af54 	bhi.w	80039aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	0199      	lsls	r1, r3, #6
 8003b06:	d4f6      	bmi.n	8003af6 <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b08:	6a23      	ldr	r3, [r4, #32]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b10:	686a      	ldr	r2, [r5, #4]
 8003b12:	68a1      	ldr	r1, [r4, #8]
 8003b14:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b1c:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b1e:	4d0c      	ldr	r5, [pc, #48]	; (8003b50 <HAL_RCC_OscConfig+0x3f4>)
 8003b20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b22:	686a      	ldr	r2, [r5, #4]
 8003b24:	430b      	orrs	r3, r1
 8003b26:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003b2a:	490b      	ldr	r1, [pc, #44]	; (8003b58 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b30:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8003b32:	f7fe f89f 	bl	8001c74 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b36:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003b38:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b3a:	e005      	b.n	8003b48 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fe f89a 	bl	8001c74 <HAL_GetTick>
 8003b40:	1b40      	subs	r0, r0, r5
 8003b42:	2802      	cmp	r0, #2
 8003b44:	f63f af31 	bhi.w	80039aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	019a      	lsls	r2, r3, #6
 8003b4c:	d5f6      	bpl.n	8003b3c <HAL_RCC_OscConfig+0x3e0>
 8003b4e:	e6d3      	b.n	80038f8 <HAL_RCC_OscConfig+0x19c>
 8003b50:	40021000 	.word	0x40021000
 8003b54:	42420000 	.word	0x42420000
 8003b58:	42420060 	.word	0x42420060

08003b5c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	f000 80af 	beq.w	8003cc0 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b62:	4a5d      	ldr	r2, [pc, #372]	; (8003cd8 <HAL_RCC_ClockConfig+0x17c>)
{
 8003b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	6813      	ldr	r3, [r2, #0]
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	428b      	cmp	r3, r1
 8003b72:	460d      	mov	r5, r1
{
 8003b74:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b76:	d20d      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b78:	6813      	ldr	r3, [r2, #0]
 8003b7a:	f023 0307 	bic.w	r3, r3, #7
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	6813      	ldr	r3, [r2, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d003      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8003b8c:	2001      	movs	r0, #1
}
 8003b8e:	b006      	add	sp, #24
 8003b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	0798      	lsls	r0, r3, #30
 8003b98:	d514      	bpl.n	8003bc4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9a:	0759      	lsls	r1, r3, #29
 8003b9c:	d504      	bpl.n	8003ba8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b9e:	494f      	ldr	r1, [pc, #316]	; (8003cdc <HAL_RCC_ClockConfig+0x180>)
 8003ba0:	684a      	ldr	r2, [r1, #4]
 8003ba2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003ba6:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	071a      	lsls	r2, r3, #28
 8003baa:	d504      	bpl.n	8003bb6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bac:	494b      	ldr	r1, [pc, #300]	; (8003cdc <HAL_RCC_ClockConfig+0x180>)
 8003bae:	684a      	ldr	r2, [r1, #4]
 8003bb0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003bb4:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb6:	4949      	ldr	r1, [pc, #292]	; (8003cdc <HAL_RCC_ClockConfig+0x180>)
 8003bb8:	68a0      	ldr	r0, [r4, #8]
 8003bba:	684a      	ldr	r2, [r1, #4]
 8003bbc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003bc0:	4302      	orrs	r2, r0
 8003bc2:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc4:	07db      	lsls	r3, r3, #31
 8003bc6:	d520      	bpl.n	8003c0a <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b44      	ldr	r3, [pc, #272]	; (8003cdc <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bcc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd0:	d078      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd2:	2a02      	cmp	r2, #2
 8003bd4:	d071      	beq.n	8003cba <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd6:	0798      	lsls	r0, r3, #30
 8003bd8:	d5d8      	bpl.n	8003b8c <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bda:	4e40      	ldr	r6, [pc, #256]	; (8003cdc <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bdc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be0:	6873      	ldr	r3, [r6, #4]
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	4313      	orrs	r3, r2
 8003be8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003bea:	f7fe f843 	bl	8001c74 <HAL_GetTick>
 8003bee:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf0:	e004      	b.n	8003bfc <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf2:	f7fe f83f 	bl	8001c74 <HAL_GetTick>
 8003bf6:	1bc0      	subs	r0, r0, r7
 8003bf8:	4540      	cmp	r0, r8
 8003bfa:	d866      	bhi.n	8003cca <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfc:	6873      	ldr	r3, [r6, #4]
 8003bfe:	6862      	ldr	r2, [r4, #4]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c08:	d1f3      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c0a:	4a33      	ldr	r2, [pc, #204]	; (8003cd8 <HAL_RCC_ClockConfig+0x17c>)
 8003c0c:	6813      	ldr	r3, [r2, #0]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	42ab      	cmp	r3, r5
 8003c14:	d909      	bls.n	8003c2a <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	f023 0307 	bic.w	r3, r3, #7
 8003c1c:	432b      	orrs	r3, r5
 8003c1e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	42ab      	cmp	r3, r5
 8003c28:	d1b0      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	0759      	lsls	r1, r3, #29
 8003c2e:	d506      	bpl.n	8003c3e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c30:	492a      	ldr	r1, [pc, #168]	; (8003cdc <HAL_RCC_ClockConfig+0x180>)
 8003c32:	68e0      	ldr	r0, [r4, #12]
 8003c34:	684a      	ldr	r2, [r1, #4]
 8003c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c3a:	4302      	orrs	r2, r0
 8003c3c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3e:	071a      	lsls	r2, r3, #28
 8003c40:	d507      	bpl.n	8003c52 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c42:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <HAL_RCC_ClockConfig+0x180>)
 8003c44:	6921      	ldr	r1, [r4, #16]
 8003c46:	6853      	ldr	r3, [r2, #4]
 8003c48:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003c4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c50:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c52:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c56:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <HAL_RCC_ClockConfig+0x184>)
 8003c58:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c5a:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c60:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8003c64:	491d      	ldr	r1, [pc, #116]	; (8003cdc <HAL_RCC_ClockConfig+0x180>)
 8003c66:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c68:	f002 030c 	and.w	r3, r2, #12
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d011      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c72:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <HAL_RCC_ClockConfig+0x180>)
 8003c74:	481c      	ldr	r0, [pc, #112]	; (8003ce8 <HAL_RCC_ClockConfig+0x18c>)
 8003c76:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003c78:	491c      	ldr	r1, [pc, #112]	; (8003cec <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c7a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003c7e:	5c80      	ldrb	r0, [r0, r2]
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <HAL_RCC_ClockConfig+0x194>)
 8003c82:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8003c84:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c86:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003c88:	f7fd ffb2 	bl	8001bf0 <HAL_InitTick>
  return HAL_OK;
 8003c8c:	2000      	movs	r0, #0
}
 8003c8e:	b006      	add	sp, #24
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c94:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003c98:	4423      	add	r3, r4
 8003c9a:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c9e:	03d3      	lsls	r3, r2, #15
 8003ca0:	d515      	bpl.n	8003cce <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ca2:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ca6:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003caa:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cae:	4422      	add	r2, r4
 8003cb0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cb8:	e7db      	b.n	8003c72 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	019e      	lsls	r6, r3, #6
 8003cbc:	d48d      	bmi.n	8003bda <HAL_RCC_ClockConfig+0x7e>
 8003cbe:	e765      	b.n	8003b8c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8003cc0:	2001      	movs	r0, #1
}
 8003cc2:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc4:	039f      	lsls	r7, r3, #14
 8003cc6:	d488      	bmi.n	8003bda <HAL_RCC_ClockConfig+0x7e>
 8003cc8:	e760      	b.n	8003b8c <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8003cca:	2003      	movs	r0, #3
 8003ccc:	e75f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_ClockConfig+0x198>)
 8003cd0:	fb03 f300 	mul.w	r3, r3, r0
 8003cd4:	e7cd      	b.n	8003c72 <HAL_RCC_ClockConfig+0x116>
 8003cd6:	bf00      	nop
 8003cd8:	40022000 	.word	0x40022000
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	08005050 	.word	0x08005050
 8003ce4:	007a1200 	.word	0x007a1200
 8003ce8:	080048d0 	.word	0x080048d0
 8003cec:	200002b0 	.word	0x200002b0
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	003d0900 	.word	0x003d0900

08003cf8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003cfa:	4905      	ldr	r1, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8003cfe:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d00:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	6810      	ldr	r0, [r2, #0]
}
 8003d08:	40d8      	lsrs	r0, r3
 8003d0a:	4770      	bx	lr
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	080048e0 	.word	0x080048e0
 8003d14:	20000000 	.word	0x20000000

08003d18 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003d1a:	4905      	ldr	r1, [pc, #20]	; (8003d30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8003d1e:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d20:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003d24:	5ccb      	ldrb	r3, [r1, r3]
 8003d26:	6810      	ldr	r0, [r2, #0]
}
 8003d28:	40d8      	lsrs	r0, r3
 8003d2a:	4770      	bx	lr
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	080048e0 	.word	0x080048e0
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d055      	beq.n	8003de8 <HAL_SPI_Init+0xb0>
{
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d40:	4604      	mov	r4, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d041      	beq.n	8003dca <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d46:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d48:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d4c:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d4e:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d52:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d54:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d03c      	beq.n	8003dd6 <HAL_SPI_Init+0x9e>
 8003d5c:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d5e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d62:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8003d64:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d66:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d68:	68e1      	ldr	r1, [r4, #12]
 8003d6a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003d6e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003d72:	4303      	orrs	r3, r0
 8003d74:	6920      	ldr	r0, [r4, #16]
 8003d76:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8003d7a:	4038      	ands	r0, r7
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6961      	ldr	r1, [r4, #20]
 8003d80:	4303      	orrs	r3, r0
 8003d82:	69a0      	ldr	r0, [r4, #24]
 8003d84:	4031      	ands	r1, r6
 8003d86:	430b      	orrs	r3, r1
 8003d88:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d90:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d94:	6a27      	ldr	r7, [r4, #32]
 8003d96:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8003da0:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003da2:	433b      	orrs	r3, r7
 8003da4:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8003da6:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003da8:	0c00      	lsrs	r0, r0, #16
 8003daa:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8003dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db2:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003db4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003db6:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003db8:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 8003dba:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dc2:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dc4:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8003dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dca:	6842      	ldr	r2, [r0, #4]
 8003dcc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003dd0:	d0bc      	beq.n	8003d4c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd2:	61c3      	str	r3, [r0, #28]
 8003dd4:	e7ba      	b.n	8003d4c <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8003dd6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f7fc fc80 	bl	80006e0 <HAL_SPI_MspInit>
 8003de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003de2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003de6:	e7ba      	b.n	8003d5e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8003de8:	2001      	movs	r0, #1
}
 8003dea:	4770      	bx	lr

08003dec <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d05d      	beq.n	8003eac <HAL_TIM_Base_Init+0xc0>
{
 8003df0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003df6:	4604      	mov	r4, r0
 8003df8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d03c      	beq.n	8003e7a <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e02:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	492a      	ldr	r1, [pc, #168]	; (8003eb0 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003e06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e0a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003e0c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e0e:	d039      	beq.n	8003e84 <HAL_TIM_Base_Init+0x98>
 8003e10:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003e14:	d028      	beq.n	8003e68 <HAL_TIM_Base_Init+0x7c>
 8003e16:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003e1a:	428a      	cmp	r2, r1
 8003e1c:	d024      	beq.n	8003e68 <HAL_TIM_Base_Init+0x7c>
 8003e1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003e22:	428a      	cmp	r2, r1
 8003e24:	d020      	beq.n	8003e68 <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e26:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e28:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2a:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e30:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003e32:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e36:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e44:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e64:	2000      	movs	r0, #0
}
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003e68:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e6e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e70:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e76:	430b      	orrs	r3, r1
 8003e78:	e7d5      	b.n	8003e26 <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 8003e7a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003e7e:	f7fc fc63 	bl	8000748 <HAL_TIM_Base_MspInit>
 8003e82:	e7bd      	b.n	8003e00 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003e84:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e8a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e92:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e94:	69a1      	ldr	r1, [r4, #24]
 8003e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e9a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003e9c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e9e:	68e3      	ldr	r3, [r4, #12]
 8003ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ea2:	6863      	ldr	r3, [r4, #4]
 8003ea4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea6:	6963      	ldr	r3, [r4, #20]
 8003ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eaa:	e7c5      	b.n	8003e38 <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 8003eac:	2001      	movs	r0, #1
}
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00

08003eb4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d11f      	bne.n	8003efc <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ebe:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec4:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec6:	490f      	ldr	r1, [pc, #60]	; (8003f04 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ece:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIM_Base_Start_IT+0x32>
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d006      	beq.n	8003ee6 <HAL_TIM_Base_Start_IT+0x32>
 8003ed8:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <HAL_TIM_Base_Start_IT+0x54>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_Base_Start_IT+0x32>
 8003ede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d104      	bne.n	8003ef0 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	2a06      	cmp	r2, #6
 8003eee:	d007      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8003ef0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003ef2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	4770      	bx	lr
    return HAL_ERROR;
 8003efc:	2001      	movs	r0, #1
 8003efe:	4770      	bx	lr
  return HAL_OK;
 8003f00:	2000      	movs	r0, #0
}
 8003f02:	4770      	bx	lr
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40000400 	.word	0x40000400

08003f0c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003f0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d074      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0xf2>
{
 8003f14:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003f16:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003f18:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 8003f1a:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8003f1c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f26:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f28:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8003f2c:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8003f30:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003f32:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f34:	d065      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0xf6>
 8003f36:	d831      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x90>
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d048      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0xc2>
 8003f3c:	d921      	bls.n	8003f82 <HAL_TIM_ConfigClockSource+0x76>
 8003f3e:	2b50      	cmp	r3, #80	; 0x50
 8003f40:	d116      	bne.n	8003f70 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f42:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f44:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f48:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f50:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f52:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f5a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003f5e:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f60:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003f62:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f64:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f6a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6e:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8003f70:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f72:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8003f74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8003f7c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003f7e:	4618      	mov	r0, r3
}
 8003f80:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d002      	beq.n	8003f8c <HAL_TIM_ConfigClockSource+0x80>
 8003f86:	d91e      	bls.n	8003fc6 <HAL_TIM_ConfigClockSource+0xba>
 8003f88:	2b30      	cmp	r3, #48	; 0x30
 8003f8a:	d1f1      	bne.n	8003f70 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8003f8c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f8e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f92:	430b      	orrs	r3, r1
 8003f94:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003f98:	6093      	str	r3, [r2, #8]
}
 8003f9a:	e7e9      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003f9c:	2b70      	cmp	r3, #112	; 0x70
 8003f9e:	d049      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0x128>
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa4:	d1e4      	bne.n	8003f70 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003faa:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003fac:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fae:	432b      	orrs	r3, r5
 8003fb0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fba:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fbc:	6893      	ldr	r3, [r2, #8]
 8003fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc2:	6093      	str	r3, [r2, #8]
      break;
 8003fc4:	e7d4      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003fc6:	f033 0110 	bics.w	r1, r3, #16
 8003fca:	d1d1      	bne.n	8003f70 <HAL_TIM_ConfigClockSource+0x64>
 8003fcc:	e7de      	b.n	8003f8c <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8003fce:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd0:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd2:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd4:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd8:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fdc:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fde:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fe6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003fea:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003fec:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003fee:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003ff0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ff6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003ffa:	6093      	str	r3, [r2, #8]
}
 8003ffc:	e7b8      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8003ffe:	2002      	movs	r0, #2
}
 8004000:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004002:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004004:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004006:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800400a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400c:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400e:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8004010:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004012:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800401a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800401e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004022:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004024:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004026:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800402c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004030:	6093      	str	r3, [r2, #8]
}
 8004032:	e79d      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004034:	68cc      	ldr	r4, [r1, #12]
 8004036:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800403a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800403c:	432b      	orrs	r3, r5
 800403e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004042:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004046:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004048:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800404a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800404c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004050:	6093      	str	r3, [r2, #8]
      break;
 8004052:	e78d      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x64>

08004054 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d026      	beq.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800405e:	6803      	ldr	r3, [r0, #0]
{
 8004060:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004062:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004066:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004068:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406a:	4d11      	ldr	r5, [pc, #68]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800406c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004070:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004072:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004074:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004076:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004078:	d009      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407e:	d006      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004080:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800408a:	4293      	cmp	r3, r2
 800408c:	d104      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800408e:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004090:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004094:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004096:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004098:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800409a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800409c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 80040a4:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80040a6:	4618      	mov	r0, r3
}
 80040a8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80040aa:	2002      	movs	r0, #2
}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	40000400 	.word	0x40000400

080040b8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d061      	beq.n	8004180 <HAL_UART_Init+0xc8>
{
 80040bc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040c2:	4604      	mov	r4, r0
 80040c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d051      	beq.n	8004170 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040cc:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040ce:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80040d4:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d6:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 80040d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040dc:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040de:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040e0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80040e6:	4301      	orrs	r1, r0
 80040e8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80040ea:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040ec:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 80040f0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040f4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80040f6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040fa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80040fc:	430a      	orrs	r2, r1
 80040fe:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8004104:	491f      	ldr	r1, [pc, #124]	; (8004184 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004106:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800410a:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 800410c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800410e:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004110:	d033      	beq.n	800417a <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004112:	f7ff fdf1 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004116:	6863      	ldr	r3, [r4, #4]
 8004118:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800411c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	fbb0 f3f3 	udiv	r3, r0, r3
 8004126:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 800412a:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412c:	4816      	ldr	r0, [pc, #88]	; (8004188 <HAL_UART_Init+0xd0>)
 800412e:	fba0 c103 	umull	ip, r1, r0, r3
 8004132:	0949      	lsrs	r1, r1, #5
 8004134:	fb02 3311 	mls	r3, r2, r1, r3
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	3332      	adds	r3, #50	; 0x32
 800413c:	fba0 2303 	umull	r2, r3, r0, r3
 8004140:	0109      	lsls	r1, r1, #4
 8004142:	6822      	ldr	r2, [r4, #0]
 8004144:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8004148:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414a:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800414c:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004152:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004154:	6953      	ldr	r3, [r2, #20]
 8004156:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800415a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800415c:	68d3      	ldr	r3, [r2, #12]
 800415e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004162:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004166:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800416a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 800416e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004170:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004174:	f7fc fb04 	bl	8000780 <HAL_UART_MspInit>
 8004178:	e7a8      	b.n	80040cc <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800417a:	f7ff fdcd 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 800417e:	e7ca      	b.n	8004116 <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 8004180:	2001      	movs	r0, #1
}
 8004182:	4770      	bx	lr
 8004184:	40013800 	.word	0x40013800
 8004188:	51eb851f 	.word	0x51eb851f

0800418c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800418c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004190:	2b20      	cmp	r3, #32
 8004192:	d123      	bne.n	80041dc <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8004194:	b301      	cbz	r1, 80041d8 <HAL_UART_Receive_IT+0x4c>
 8004196:	b1fa      	cbz	r2, 80041d8 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8004198:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d01d      	beq.n	80041dc <HAL_UART_Receive_IT+0x50>
{
 80041a0:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a2:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a4:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041a6:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a8:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 80041aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 80041ae:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041b2:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041b6:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 80041b8:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041ba:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 80041be:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041c0:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041c2:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80041c4:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041cc:	68e3      	ldr	r3, [r4, #12]
 80041ce:	f043 0320 	orr.w	r3, r3, #32
 80041d2:	60e3      	str	r3, [r4, #12]
}
 80041d4:	bc30      	pop	{r4, r5}
 80041d6:	4770      	bx	lr
      return HAL_ERROR;
 80041d8:	2001      	movs	r0, #1
 80041da:	4770      	bx	lr
    return HAL_BUSY;
 80041dc:	2002      	movs	r0, #2
}
 80041de:	4770      	bx	lr

080041e0 <HAL_UART_TxCpltCallback>:
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop

080041e4 <HAL_UART_ErrorCallback>:
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop

080041e8 <UART_DMAAbortOnError>:
{
 80041e8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80041ea:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80041ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041f0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80041f2:	f7ff fff7 	bl	80041e4 <HAL_UART_ErrorCallback>
}
 80041f6:	bd08      	pop	{r3, pc}

080041f8 <HAL_UARTEx_RxEventCallback>:
}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop

080041fc <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041fc:	6883      	ldr	r3, [r0, #8]
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004202:	d03b      	beq.n	800427c <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004204:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004206:	2b00      	cmp	r3, #0
 8004208:	d02f      	beq.n	800426a <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800420a:	6803      	ldr	r3, [r0, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004212:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004214:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004216:	3301      	adds	r3, #1
 8004218:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800421a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800421c:	3b01      	subs	r3, #1
 800421e:	b29b      	uxth	r3, r3
 8004220:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004222:	bb4b      	cbnz	r3, 8004278 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004224:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8004226:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004228:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800422a:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800422c:	68d1      	ldr	r1, [r2, #12]
 800422e:	f021 0120 	bic.w	r1, r1, #32
 8004232:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004234:	68d1      	ldr	r1, [r2, #12]
 8004236:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800423a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800423c:	6951      	ldr	r1, [r2, #20]
 800423e:	f021 0101 	bic.w	r1, r1, #1
 8004242:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004244:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004248:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800424a:	2901      	cmp	r1, #1
 800424c:	d121      	bne.n	8004292 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	68d1      	ldr	r1, [r2, #12]
 8004252:	f021 0110 	bic.w	r1, r1, #16
 8004256:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004258:	6811      	ldr	r1, [r2, #0]
 800425a:	06c9      	lsls	r1, r1, #27
 800425c:	d423      	bmi.n	80042a6 <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800425e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004260:	f7ff ffca 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
}
 8004264:	2000      	movs	r0, #0
 8004266:	b002      	add	sp, #8
 8004268:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800426a:	6903      	ldr	r3, [r0, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1cc      	bne.n	800420a <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004270:	6803      	ldr	r3, [r0, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	7013      	strb	r3, [r2, #0]
 8004276:	e7cd      	b.n	8004214 <UART_Receive_IT.part.0+0x18>
}
 8004278:	2000      	movs	r0, #0
 800427a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800427c:	6903      	ldr	r3, [r0, #16]
 800427e:	b96b      	cbnz	r3, 800429c <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004280:	6802      	ldr	r2, [r0, #0]
 8004282:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004284:	6852      	ldr	r2, [r2, #4]
 8004286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800428a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800428e:	6283      	str	r3, [r0, #40]	; 0x28
 8004290:	e7c3      	b.n	800421a <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8004292:	f7fc f8dd 	bl	8000450 <HAL_UART_RxCpltCallback>
}
 8004296:	2000      	movs	r0, #0
 8004298:	b002      	add	sp, #8
 800429a:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800429c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800429e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	7013      	strb	r3, [r2, #0]
 80042a4:	e7b6      	b.n	8004214 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	6813      	ldr	r3, [r2, #0]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	6853      	ldr	r3, [r2, #4]
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	9b01      	ldr	r3, [sp, #4]
 80042b2:	e7d4      	b.n	800425e <UART_Receive_IT.part.0+0x62>

080042b4 <HAL_UART_IRQHandler>:
{
 80042b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042b6:	6803      	ldr	r3, [r0, #0]
{
 80042b8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042ba:	681a      	ldr	r2, [r3, #0]
{
 80042bc:	b082      	sub	sp, #8
  if (errorflags == RESET)
 80042be:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042c0:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042c2:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80042c4:	d14e      	bne.n	8004364 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042c6:	0696      	lsls	r6, r2, #26
 80042c8:	d502      	bpl.n	80042d0 <HAL_UART_IRQHandler+0x1c>
 80042ca:	068d      	lsls	r5, r1, #26
 80042cc:	f100 8090 	bmi.w	80043f0 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80042d2:	2801      	cmp	r0, #1
 80042d4:	d00b      	beq.n	80042ee <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042d6:	0616      	lsls	r6, r2, #24
 80042d8:	d502      	bpl.n	80042e0 <HAL_UART_IRQHandler+0x2c>
 80042da:	060d      	lsls	r5, r1, #24
 80042dc:	f100 8092 	bmi.w	8004404 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042e0:	0650      	lsls	r0, r2, #25
 80042e2:	d502      	bpl.n	80042ea <HAL_UART_IRQHandler+0x36>
 80042e4:	064a      	lsls	r2, r1, #25
 80042e6:	f100 80ab 	bmi.w	8004440 <HAL_UART_IRQHandler+0x18c>
}
 80042ea:	b002      	add	sp, #8
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 80042ee:	06d5      	lsls	r5, r2, #27
 80042f0:	d5f1      	bpl.n	80042d6 <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80042f2:	06c8      	lsls	r0, r1, #27
 80042f4:	d5ef      	bpl.n	80042d6 <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042f6:	2100      	movs	r1, #0
 80042f8:	9101      	str	r1, [sp, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	9201      	str	r2, [sp, #4]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	9201      	str	r2, [sp, #4]
 8004302:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800430a:	f000 80d2 	beq.w	80044b2 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800430e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004310:	6802      	ldr	r2, [r0, #0]
 8004312:	6852      	ldr	r2, [r2, #4]
 8004314:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8004316:	2a00      	cmp	r2, #0
 8004318:	d0e7      	beq.n	80042ea <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800431a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800431c:	4295      	cmp	r5, r2
 800431e:	d9e4      	bls.n	80042ea <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004320:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 8004322:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004324:	2e20      	cmp	r6, #32
 8004326:	d016      	beq.n	8004356 <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 8004328:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004330:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004340:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004342:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004346:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	f022 0210 	bic.w	r2, r2, #16
 800434e:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004350:	f7fd fd8c 	bl	8001e6c <HAL_DMA_Abort>
 8004354:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004356:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004358:	4620      	mov	r0, r4
 800435a:	1a69      	subs	r1, r5, r1
 800435c:	b289      	uxth	r1, r1
 800435e:	f7ff ff4b 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
 8004362:	e7c2      	b.n	80042ea <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004364:	f005 0501 	and.w	r5, r5, #1
 8004368:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800436c:	4328      	orrs	r0, r5
 800436e:	d0af      	beq.n	80042d0 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004370:	07d0      	lsls	r0, r2, #31
 8004372:	d505      	bpl.n	8004380 <HAL_UART_IRQHandler+0xcc>
 8004374:	05ce      	lsls	r6, r1, #23
 8004376:	d503      	bpl.n	8004380 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004378:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800437a:	f040 0001 	orr.w	r0, r0, #1
 800437e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004380:	0750      	lsls	r0, r2, #29
 8004382:	d52c      	bpl.n	80043de <HAL_UART_IRQHandler+0x12a>
 8004384:	b12d      	cbz	r5, 8004392 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004386:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004388:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800438a:	f040 0002 	orr.w	r0, r0, #2
 800438e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004390:	d429      	bmi.n	80043e6 <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004392:	0716      	lsls	r6, r2, #28
 8004394:	d507      	bpl.n	80043a6 <HAL_UART_IRQHandler+0xf2>
 8004396:	f001 0020 	and.w	r0, r1, #32
 800439a:	4328      	orrs	r0, r5
 800439c:	d003      	beq.n	80043a6 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800439e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80043a0:	f040 0008 	orr.w	r0, r0, #8
 80043a4:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d09e      	beq.n	80042ea <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ac:	0690      	lsls	r0, r2, #26
 80043ae:	d509      	bpl.n	80043c4 <HAL_UART_IRQHandler+0x110>
 80043b0:	068a      	lsls	r2, r1, #26
 80043b2:	d507      	bpl.n	80043c4 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043b4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80043b8:	2a22      	cmp	r2, #34	; 0x22
 80043ba:	d103      	bne.n	80043c4 <HAL_UART_IRQHandler+0x110>
 80043bc:	4620      	mov	r0, r4
 80043be:	f7ff ff1d 	bl	80041fc <UART_Receive_IT.part.0>
 80043c2:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043c4:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043c6:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043c8:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043cc:	f005 0508 	and.w	r5, r5, #8
 80043d0:	4315      	orrs	r5, r2
 80043d2:	d140      	bne.n	8004456 <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 80043d4:	4620      	mov	r0, r4
 80043d6:	f7ff ff05 	bl	80041e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	6425      	str	r5, [r4, #64]	; 0x40
 80043dc:	e785      	b.n	80042ea <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043de:	0790      	lsls	r0, r2, #30
 80043e0:	d5d7      	bpl.n	8004392 <HAL_UART_IRQHandler+0xde>
 80043e2:	2d00      	cmp	r5, #0
 80043e4:	d0d5      	beq.n	8004392 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80043e8:	f040 0004 	orr.w	r0, r0, #4
 80043ec:	6420      	str	r0, [r4, #64]	; 0x40
 80043ee:	e7d0      	b.n	8004392 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043f0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80043f4:	2b22      	cmp	r3, #34	; 0x22
 80043f6:	f47f af78 	bne.w	80042ea <HAL_UART_IRQHandler+0x36>
}
 80043fa:	b002      	add	sp, #8
 80043fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004400:	f7ff befc 	b.w	80041fc <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004404:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004408:	2a21      	cmp	r2, #33	; 0x21
 800440a:	f47f af6e 	bne.w	80042ea <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440e:	68a2      	ldr	r2, [r4, #8]
 8004410:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004414:	d06e      	beq.n	80044f4 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004416:	6a22      	ldr	r2, [r4, #32]
 8004418:	1c51      	adds	r1, r2, #1
 800441a:	6221      	str	r1, [r4, #32]
 800441c:	7812      	ldrb	r2, [r2, #0]
 800441e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004420:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004422:	3a01      	subs	r2, #1
 8004424:	b292      	uxth	r2, r2
 8004426:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004428:	2a00      	cmp	r2, #0
 800442a:	f47f af5e 	bne.w	80042ea <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004434:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	e754      	b.n	80042ea <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8004440:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004442:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004444:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800444c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004450:	f7ff fec6 	bl	80041e0 <HAL_UART_TxCpltCallback>
    return;
 8004454:	e749      	b.n	80042ea <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800445c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004466:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004468:	2a01      	cmp	r2, #1
 800446a:	d103      	bne.n	8004474 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	f022 0210 	bic.w	r2, r2, #16
 8004472:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004474:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004476:	2120      	movs	r1, #32
 8004478:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447c:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	0656      	lsls	r6, r2, #25
 8004482:	d512      	bpl.n	80044aa <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004484:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004486:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800448e:	b160      	cbz	r0, 80044aa <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004490:	4b1e      	ldr	r3, [pc, #120]	; (800450c <HAL_UART_IRQHandler+0x258>)
 8004492:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004494:	f7fd fd0c 	bl	8001eb0 <HAL_DMA_Abort_IT>
 8004498:	2800      	cmp	r0, #0
 800449a:	f43f af26 	beq.w	80042ea <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800449e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80044a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80044a2:	b002      	add	sp, #8
 80044a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044a8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff fe9a 	bl	80041e4 <HAL_UART_ErrorCallback>
 80044b0:	e71b      	b.n	80042ea <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b2:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 80044b4:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b6:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80044b8:	b289      	uxth	r1, r1
 80044ba:	2900      	cmp	r1, #0
 80044bc:	f43f af15 	beq.w	80042ea <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044c0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80044c2:	1a08      	subs	r0, r1, r0
 80044c4:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 80044c6:	2900      	cmp	r1, #0
 80044c8:	f43f af0f 	beq.w	80042ea <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 80044cc:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ce:	68d8      	ldr	r0, [r3, #12]
 80044d0:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 80044d4:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d6:	6958      	ldr	r0, [r3, #20]
 80044d8:	f020 0001 	bic.w	r0, r0, #1
 80044dc:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80044de:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e2:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e4:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044e6:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e8:	f022 0210 	bic.w	r2, r2, #16
 80044ec:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044ee:	f7ff fe83 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
 80044f2:	e6fa      	b.n	80042ea <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f4:	6922      	ldr	r2, [r4, #16]
 80044f6:	2a00      	cmp	r2, #0
 80044f8:	d18d      	bne.n	8004416 <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044fa:	6a22      	ldr	r2, [r4, #32]
 80044fc:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004500:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004504:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004506:	6222      	str	r2, [r4, #32]
 8004508:	e78a      	b.n	8004420 <HAL_UART_IRQHandler+0x16c>
 800450a:	bf00      	nop
 800450c:	080041e9 	.word	0x080041e9

08004510 <__libc_init_array>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	2600      	movs	r6, #0
 8004514:	4d0c      	ldr	r5, [pc, #48]	; (8004548 <__libc_init_array+0x38>)
 8004516:	4c0d      	ldr	r4, [pc, #52]	; (800454c <__libc_init_array+0x3c>)
 8004518:	1b64      	subs	r4, r4, r5
 800451a:	10a4      	asrs	r4, r4, #2
 800451c:	42a6      	cmp	r6, r4
 800451e:	d109      	bne.n	8004534 <__libc_init_array+0x24>
 8004520:	f000 f842 	bl	80045a8 <_init>
 8004524:	2600      	movs	r6, #0
 8004526:	4d0a      	ldr	r5, [pc, #40]	; (8004550 <__libc_init_array+0x40>)
 8004528:	4c0a      	ldr	r4, [pc, #40]	; (8004554 <__libc_init_array+0x44>)
 800452a:	1b64      	subs	r4, r4, r5
 800452c:	10a4      	asrs	r4, r4, #2
 800452e:	42a6      	cmp	r6, r4
 8004530:	d105      	bne.n	800453e <__libc_init_array+0x2e>
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	f855 3b04 	ldr.w	r3, [r5], #4
 8004538:	4798      	blx	r3
 800453a:	3601      	adds	r6, #1
 800453c:	e7ee      	b.n	800451c <__libc_init_array+0xc>
 800453e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004542:	4798      	blx	r3
 8004544:	3601      	adds	r6, #1
 8004546:	e7f2      	b.n	800452e <__libc_init_array+0x1e>
 8004548:	08005064 	.word	0x08005064
 800454c:	08005064 	.word	0x08005064
 8004550:	08005064 	.word	0x08005064
 8004554:	08005068 	.word	0x08005068

08004558 <memset>:
 8004558:	4603      	mov	r3, r0
 800455a:	4402      	add	r2, r0
 800455c:	4293      	cmp	r3, r2
 800455e:	d100      	bne.n	8004562 <memset+0xa>
 8004560:	4770      	bx	lr
 8004562:	f803 1b01 	strb.w	r1, [r3], #1
 8004566:	e7f9      	b.n	800455c <memset+0x4>

08004568 <stpcpy>:
 8004568:	4603      	mov	r3, r0
 800456a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800456e:	4618      	mov	r0, r3
 8004570:	f803 2b01 	strb.w	r2, [r3], #1
 8004574:	2a00      	cmp	r2, #0
 8004576:	d1f8      	bne.n	800456a <stpcpy+0x2>
 8004578:	4770      	bx	lr

0800457a <strcat>:
 800457a:	4602      	mov	r2, r0
 800457c:	b510      	push	{r4, lr}
 800457e:	7814      	ldrb	r4, [r2, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	3201      	adds	r2, #1
 8004584:	2c00      	cmp	r4, #0
 8004586:	d1fa      	bne.n	800457e <strcat+0x4>
 8004588:	3b01      	subs	r3, #1
 800458a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800458e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004592:	2a00      	cmp	r2, #0
 8004594:	d1f9      	bne.n	800458a <strcat+0x10>
 8004596:	bd10      	pop	{r4, pc}

08004598 <strcpy>:
 8004598:	4603      	mov	r3, r0
 800459a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800459e:	f803 2b01 	strb.w	r2, [r3], #1
 80045a2:	2a00      	cmp	r2, #0
 80045a4:	d1f9      	bne.n	800459a <strcpy+0x2>
 80045a6:	4770      	bx	lr

080045a8 <_init>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	bf00      	nop
 80045ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ae:	bc08      	pop	{r3}
 80045b0:	469e      	mov	lr, r3
 80045b2:	4770      	bx	lr

080045b4 <_fini>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	bf00      	nop
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr
