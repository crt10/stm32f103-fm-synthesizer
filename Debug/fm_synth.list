
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800262c  0800262c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800262c  0800262c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800262c  0800262c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000018  0800264c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800264c  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014914  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dad  00000000  00000000  00034955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000120b9  00000000  00000000  00037702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  000497c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022a0  00000000  00000000  0004a330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001778e  00000000  00000000  0004c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017520  00000000  00000000  00063d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008826f  00000000  00000000  0007b27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001034ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002908  00000000  00000000  00103540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080022e0 	.word	0x080022e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080022e0 	.word	0x080022e0

0800014c <init_audio_out>:
#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	DMA1_Channel3->CPAR = (uint32_t)&SPI1->DR;
	DMA1_Channel3->CMAR = (uint32_t)&output_volume;
	DMA1_Channel3->CCR = DMA_CCR_PSIZE_0 | DMA_CCR_MSIZE_0 | DMA_CCR_DIR | DMA_CCR_TCIE;
 800014c:	f240 5012 	movw	r0, #1298	; 0x512
void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
 8000150:	b538      	push	{r3, r4, r5, lr}
	DMA1_Channel3->CPAR = (uint32_t)&SPI1->DR;
 8000152:	4b09      	ldr	r3, [pc, #36]	; (8000178 <init_audio_out+0x2c>)
	DMA1_Channel3->CMAR = (uint32_t)&output_volume;
 8000154:	4c09      	ldr	r4, [pc, #36]	; (800017c <init_audio_out+0x30>)
	DMA1_Channel3->CPAR = (uint32_t)&SPI1->DR;
 8000156:	4d0a      	ldr	r5, [pc, #40]	; (8000180 <init_audio_out+0x34>)
	SPI1->CR1 |= SPI_CR1_SPE;
 8000158:	4a0a      	ldr	r2, [pc, #40]	; (8000184 <init_audio_out+0x38>)
	DMA1_Channel3->CPAR = (uint32_t)&SPI1->DR;
 800015a:	609d      	str	r5, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)&output_volume;
 800015c:	60dc      	str	r4, [r3, #12]
	DMA1_Channel3->CCR = DMA_CCR_PSIZE_0 | DMA_CCR_MSIZE_0 | DMA_CCR_DIR | DMA_CCR_TCIE;
 800015e:	6018      	str	r0, [r3, #0]
	SPI1->CR1 |= SPI_CR1_SPE;
 8000160:	6813      	ldr	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 8000162:	4608      	mov	r0, r1
	SPI1->CR1 |= SPI_CR1_SPE;
 8000164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000168:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 800016a:	f001 fd67 	bl	8001c3c <HAL_TIM_Base_Start_IT>
	output_volume = 0x3800;
 800016e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000172:	8023      	strh	r3, [r4, #0]
}
 8000174:	bd38      	pop	{r3, r4, r5, pc}
 8000176:	bf00      	nop
 8000178:	40020030 	.word	0x40020030
 800017c:	2000023c 	.word	0x2000023c
 8000180:	4001300c 	.word	0x4001300c
 8000184:	40013000 	.word	0x40013000

08000188 <update_volume>:
	DMA1_Channel3->CNDTR = (uint32_t)1;						//write 1 to DMA size
	DMA1_Channel3->CCR |= DMA_CCR_EN;						//enable DMA channel 3
	SPI1->CR2 |= SPI_CR2_TXDMAEN;							//enable SPI DMA transfer
}

void update_volume() {
 8000188:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//pull CS pin low
 800018a:	2200      	movs	r2, #0
 800018c:	2110      	movs	r1, #16
 800018e:	480e      	ldr	r0, [pc, #56]	; (80001c8 <update_volume+0x40>)
 8000190:	f001 f99a 	bl	80014c8 <HAL_GPIO_WritePin>
	DMA1_Channel3->CNDTR = (uint32_t)1;						//write 1 to DMA size
 8000194:	2201      	movs	r2, #1
 8000196:	4b0d      	ldr	r3, [pc, #52]	; (80001cc <update_volume+0x44>)
	SPI1->CR2 |= SPI_CR2_TXDMAEN;							//enable SPI DMA transfer
 8000198:	490d      	ldr	r1, [pc, #52]	; (80001d0 <update_volume+0x48>)
	DMA1_Channel3->CNDTR = (uint32_t)1;						//write 1 to DMA size
 800019a:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CCR |= DMA_CCR_EN;						//enable DMA channel 3
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	f042 0201 	orr.w	r2, r2, #1
 80001a2:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= SPI_CR2_TXDMAEN;							//enable SPI DMA transfer
 80001a4:	684b      	ldr	r3, [r1, #4]
 80001a6:	f043 0302 	orr.w	r3, r3, #2
 80001aa:	604b      	str	r3, [r1, #4]
	dma_volume_out();
	output_volume = synth_sample();
 80001ac:	f000 fd4e 	bl	8000c4c <synth_sample>
 80001b0:	b280      	uxth	r0, r0
	if (output_volume > 0x0FFF) {				//max possible volume with 12-bit dac
 80001b2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80001b6:	bf28      	it	cs
 80001b8:	f643 70ff 	movwcs	r0, #16383	; 0x3fff
		output_volume = 0x0FFF;
	}
	output_volume |= 0b0011000000000000;		//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <update_volume+0x4c>)
 80001be:	bf38      	it	cc
 80001c0:	f440 5040 	orrcc.w	r0, r0, #12288	; 0x3000
 80001c4:	8018      	strh	r0, [r3, #0]
	//HAL_SPI_Transmit(hspi, (uint8_t*)&output_volume, 1, 0xFF);
}
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	40010800 	.word	0x40010800
 80001cc:	40020030 	.word	0x40020030
 80001d0:	40013000 	.word	0x40013000
 80001d4:	2000023c 	.word	0x2000023c

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001dc:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001de:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e0:	2601      	movs	r6, #1
 80001e2:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e4:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001e8:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ec:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001f4:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fc:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fe:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000200:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000204:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000208:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f001 f96b 	bl	80014e4 <HAL_RCC_OscConfig>
 800020e:	b108      	cbz	r0, 8000214 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000210:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000212:	e7fe      	b.n	8000212 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000214:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000216:	f04f 080f 	mov.w	r8, #15
 800021a:	f04f 0902 	mov.w	r9, #2
 800021e:	2600      	movs	r6, #0
 8000220:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000224:	4621      	mov	r1, r4
 8000226:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	e9cd 8900 	strd	r8, r9, [sp]
 800022c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000230:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000232:	f001 fb57 	bl	80018e4 <HAL_RCC_ClockConfig>
 8000236:	b108      	cbz	r0, 800023c <SystemClock_Config+0x64>
 8000238:	b672      	cpsid	i
  while (1)
 800023a:	e7fe      	b.n	800023a <SystemClock_Config+0x62>
}
 800023c:	b010      	add	sp, #64	; 0x40
 800023e:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8000242:	bf00      	nop

08000244 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000244:	2400      	movs	r4, #0
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b088      	sub	sp, #32
  HAL_Init();
 800024a:	f000 feff 	bl	800104c <HAL_Init>
  SystemClock_Config();
 800024e:	f7ff ffc3 	bl	80001d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000256:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	4d4e      	ldr	r5, [pc, #312]	; (8000394 <main+0x150>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800025c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000260:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	61ab      	str	r3, [r5, #24]
 8000268:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800026a:	484b      	ldr	r0, [pc, #300]	; (8000398 <main+0x154>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026c:	f003 0304 	and.w	r3, r3, #4
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000274:	f001 f928 	bl	80014c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000278:	4622      	mov	r2, r4
 800027a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027e:	4846      	ldr	r0, [pc, #280]	; (8000398 <main+0x154>)
 8000280:	f001 f922 	bl	80014c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000284:	f44f 7688 	mov.w	r6, #272	; 0x110
 8000288:	2200      	movs	r2, #0
 800028a:	2302      	movs	r3, #2
 800028c:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028e:	4842      	ldr	r0, [pc, #264]	; (8000398 <main+0x154>)
 8000290:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000292:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000296:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029a:	f001 f809 	bl	80012b0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800029e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002a0:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	616b      	str	r3, [r5, #20]
 80002a8:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002aa:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ac:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002b0:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002b6:	f000 feff 	bl	80010b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002ba:	200d      	movs	r0, #13
 80002bc:	f000 ff34 	bl	8001128 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 31250;
 80002c0:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 80002c4:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 80002c6:	4835      	ldr	r0, [pc, #212]	; (800039c <main+0x158>)
 80002c8:	4935      	ldr	r1, [pc, #212]	; (80003a0 <main+0x15c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ce:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart1.Init.BaudRate = 31250;
 80002d2:	e9c0 1200 	strd	r1, r2, [r0]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002d6:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80002d8:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002da:	f001 fdb1 	bl	8001e40 <HAL_UART_Init>
 80002de:	b108      	cbz	r0, 80002e4 <main+0xa0>
 80002e0:	b672      	cpsid	i
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <main+0x9e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e4:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 80002e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1333-1;
 80002ea:	f240 5234 	movw	r2, #1332	; 0x534
  htim2.Instance = TIM2;
 80002ee:	4c2d      	ldr	r4, [pc, #180]	; (80003a4 <main+0x160>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f0:	e9cd 0004 	strd	r0, r0, [sp, #16]
 80002f4:	e9cd 0006 	strd	r0, r0, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f8:	9002      	str	r0, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002fa:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim2.Instance = TIM2;
 8000300:	6021      	str	r1, [r4, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000302:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000304:	61a3      	str	r3, [r4, #24]
  htim2.Init.Period = 1333-1;
 8000306:	60e2      	str	r2, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000308:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800030a:	f001 fc33 	bl	8001b74 <HAL_TIM_Base_Init>
 800030e:	b108      	cbz	r0, 8000314 <main+0xd0>
 8000310:	b672      	cpsid	i
  while (1)
 8000312:	e7fe      	b.n	8000312 <main+0xce>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000318:	4620      	mov	r0, r4
 800031a:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800031c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800031e:	f001 fcb9 	bl	8001c94 <HAL_TIM_ConfigClockSource>
 8000322:	b108      	cbz	r0, 8000328 <main+0xe4>
 8000324:	b672      	cpsid	i
  while (1)
 8000326:	e7fe      	b.n	8000326 <main+0xe2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000328:	2300      	movs	r3, #0
 800032a:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800032c:	4620      	mov	r0, r4
 800032e:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000330:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000334:	f001 fd52 	bl	8001ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000338:	4603      	mov	r3, r0
 800033a:	b9d0      	cbnz	r0, 8000372 <main+0x12e>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033c:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000340:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000344:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000348:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 800034a:	220a      	movs	r2, #10
  hspi1.Instance = SPI1;
 800034c:	4816      	ldr	r0, [pc, #88]	; (80003a8 <main+0x164>)
 800034e:	4e17      	ldr	r6, [pc, #92]	; (80003ac <main+0x168>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000350:	e9c0 7301 	strd	r7, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000354:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000358:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800035c:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000360:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Instance = SPI1;
 8000362:	6006      	str	r6, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000364:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CRCPolynomial = 10;
 8000366:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000368:	f001 fbaa 	bl	8001ac0 <HAL_SPI_Init>
 800036c:	b118      	cbz	r0, 8000376 <main+0x132>
 800036e:	b672      	cpsid	i
  while (1)
 8000370:	e7fe      	b.n	8000370 <main+0x12c>
 8000372:	b672      	cpsid	i
 8000374:	e7fe      	b.n	8000374 <main+0x130>
  init_midi(midi_uart);
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <main+0x16c>)
 8000378:	6818      	ldr	r0, [r3, #0]
 800037a:	f000 f853 	bl	8000424 <init_midi>
  init_synth();
 800037e:	f000 f9b5 	bl	80006ec <init_synth>
  init_audio_out(audio_spi, audio_tim);
 8000382:	4a0c      	ldr	r2, [pc, #48]	; (80003b4 <main+0x170>)
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <main+0x174>)
 8000386:	6811      	ldr	r1, [r2, #0]
 8000388:	6818      	ldr	r0, [r3, #0]
 800038a:	f7ff fedf 	bl	800014c <init_audio_out>
	__NOP();
 800038e:	bf00      	nop
  while (1)
 8000390:	e7fd      	b.n	800038e <main+0x14a>
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40010800 	.word	0x40010800
 800039c:	20000244 	.word	0x20000244
 80003a0:	40013800 	.word	0x40013800
 80003a4:	200002e4 	.word	0x200002e4
 80003a8:	2000028c 	.word	0x2000028c
 80003ac:	40013000 	.word	0x40013000
 80003b0:	20000008 	.word	0x20000008
 80003b4:	20000004 	.word	0x20000004
 80003b8:	20000000 	.word	0x20000000

080003bc <HAL_UART_RxCpltCallback>:
	process_midi_byte(huart);
 80003bc:	f000 b840 	b.w	8000440 <process_midi_byte>

080003c0 <sample>:
void sample() {
 80003c0:	b508      	push	{r3, lr}
	TIM2->SR = 0;
 80003c2:	2200      	movs	r2, #0
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80003c8:	f44f 7180 	mov.w	r1, #256	; 0x100
	TIM2->SR = 0;
 80003cc:	611a      	str	r2, [r3, #16]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80003ce:	4803      	ldr	r0, [pc, #12]	; (80003dc <sample+0x1c>)
 80003d0:	f001 f87e 	bl	80014d0 <HAL_GPIO_TogglePin>
}
 80003d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_volume();
 80003d8:	f7ff bed6 	b.w	8000188 <update_volume>
 80003dc:	40010800 	.word	0x40010800

080003e0 <volume_out_post>:
	DMA1->IFCR = DMA_IFCR_CTCIF3;						//clear DMA transfer complete flag
 80003e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <volume_out_post+0x34>)
void volume_out_post() {
 80003e6:	b410      	push	{r4}
	while (SPI1->SR & SPI_SR_BSY);						//wait until SPI transfer is complete
 80003e8:	4c0b      	ldr	r4, [pc, #44]	; (8000418 <volume_out_post+0x38>)
	DMA1->IFCR = DMA_IFCR_CTCIF3;						//clear DMA transfer complete flag
 80003ea:	605a      	str	r2, [r3, #4]
	while (SPI1->SR & SPI_SR_BSY);						//wait until SPI transfer is complete
 80003ec:	68a3      	ldr	r3, [r4, #8]
 80003ee:	061b      	lsls	r3, r3, #24
 80003f0:	d4fc      	bmi.n	80003ec <volume_out_post+0xc>
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;					//disable DMA channel 3
 80003f2:	480a      	ldr	r0, [pc, #40]	; (800041c <volume_out_post+0x3c>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	//pull CS high
 80003f4:	2201      	movs	r2, #1
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;					//disable DMA channel 3
 80003f6:	6803      	ldr	r3, [r0, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	//pull CS high
 80003f8:	2110      	movs	r1, #16
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;					//disable DMA channel 3
 80003fa:	f023 0301 	bic.w	r3, r3, #1
 80003fe:	6003      	str	r3, [r0, #0]
	SPI1->CR2 &= ~SPI_CR2_TXDMAEN;						//disable SPI DMA transfer
 8000400:	6863      	ldr	r3, [r4, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	//pull CS high
 8000402:	f5a0 4078 	sub.w	r0, r0, #63488	; 0xf800
	SPI1->CR2 &= ~SPI_CR2_TXDMAEN;						//disable SPI DMA transfer
 8000406:	f023 0302 	bic.w	r3, r3, #2
 800040a:	6063      	str	r3, [r4, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	//pull CS high
 800040c:	3830      	subs	r0, #48	; 0x30
}
 800040e:	bc10      	pop	{r4}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	//pull CS high
 8000410:	f001 b85a 	b.w	80014c8 <HAL_GPIO_WritePin>
 8000414:	40020000 	.word	0x40020000
 8000418:	40013000 	.word	0x40013000
 800041c:	40020030 	.word	0x40020030

08000420 <Error_Handler>:
 8000420:	b672      	cpsid	i
  while (1)
 8000422:	e7fe      	b.n	8000422 <Error_Handler+0x2>

08000424 <init_midi>:
 *      Author: Tennyson Cheng
 */

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
 8000424:	b410      	push	{r4}
	data[0] = -1;
 8000426:	24ff      	movs	r4, #255	; 0xff
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <init_midi+0x14>)
	data[1] = -1;
	HAL_UART_Receive_IT(huart, &midi_in, 1);
 800042a:	2201      	movs	r2, #1
	data[0] = -1;
 800042c:	701c      	strb	r4, [r3, #0]
	data[1] = -1;
 800042e:	705c      	strb	r4, [r3, #1]
	HAL_UART_Receive_IT(huart, &midi_in, 1);
 8000430:	4902      	ldr	r1, [pc, #8]	; (800043c <init_midi+0x18>)
}
 8000432:	bc10      	pop	{r4}
	HAL_UART_Receive_IT(huart, &midi_in, 1);
 8000434:	f001 bd6e 	b.w	8001f14 <HAL_UART_Receive_IT>
 8000438:	20000288 	.word	0x20000288
 800043c:	2000032c 	.word	0x2000032c

08000440 <process_midi_byte>:

void process_midi_byte(UART_HandleTypeDef* huart) {
 8000440:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(huart, &midi_in, 1);	//re-enable interrupt for next byte
 8000442:	4c24      	ldr	r4, [pc, #144]	; (80004d4 <process_midi_byte+0x94>)
 8000444:	2201      	movs	r2, #1
 8000446:	4621      	mov	r1, r4
 8000448:	f001 fd64 	bl	8001f14 <HAL_UART_Receive_IT>
	if ((midi_in & 0x80) == 0x80) {				//if byte received was status byte
 800044c:	f994 3000 	ldrsb.w	r3, [r4]
 8000450:	7822      	ldrb	r2, [r4, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	db26      	blt.n	80004a4 <process_midi_byte+0x64>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {										//if byte received was data byte
		switch (status) {
 8000456:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <process_midi_byte+0x98>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2bc0      	cmp	r3, #192	; 0xc0
 800045c:	d01f      	beq.n	800049e <process_midi_byte+0x5e>
 800045e:	d818      	bhi.n	8000492 <process_midi_byte+0x52>
 8000460:	2ba0      	cmp	r3, #160	; 0xa0
 8000462:	d002      	beq.n	800046a <process_midi_byte+0x2a>
 8000464:	d907      	bls.n	8000476 <process_midi_byte+0x36>
 8000466:	2bb0      	cmp	r3, #176	; 0xb0
 8000468:	d129      	bne.n	80004be <process_midi_byte+0x7e>
		case 0xD0:									//channel pressure (unimplemented)
			data[0] = midi_in;
			channel_pressure();
			break;
		case 0xE0:									//pitch bend
			if (data[0] == (uint8_t)-1) {
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <process_midi_byte+0x9c>)
 800046c:	7819      	ldrb	r1, [r3, #0]
 800046e:	29ff      	cmp	r1, #255	; 0xff
 8000470:	d023      	beq.n	80004ba <process_midi_byte+0x7a>
				data[0] = midi_in;
			}
			else {
				data[1] = midi_in;
 8000472:	705a      	strb	r2, [r3, #1]
			break;
		default:
			__NOP();
		}
	}
}
 8000474:	bd10      	pop	{r4, pc}
		switch (status) {
 8000476:	2b80      	cmp	r3, #128	; 0x80
 8000478:	d01b      	beq.n	80004b2 <process_midi_byte+0x72>
 800047a:	2b90      	cmp	r3, #144	; 0x90
 800047c:	d11f      	bne.n	80004be <process_midi_byte+0x7e>
			if (data[0] == (uint8_t)-1) {
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <process_midi_byte+0x9c>)
 8000480:	7818      	ldrb	r0, [r3, #0]
 8000482:	28ff      	cmp	r0, #255	; 0xff
 8000484:	d019      	beq.n	80004ba <process_midi_byte+0x7a>
				data[1] = midi_in;
 8000486:	705a      	strb	r2, [r3, #1]
				if (data[1] == 0) {					//some midi devices send velocity 0 to turn off notes
 8000488:	bb02      	cbnz	r2, 80004cc <process_midi_byte+0x8c>
}
 800048a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void note_off() {
	delete_voice(data[0]);
 800048e:	f000 bb71 	b.w	8000b74 <delete_voice>
		switch (status) {
 8000492:	2be0      	cmp	r3, #224	; 0xe0
 8000494:	d0e9      	beq.n	800046a <process_midi_byte+0x2a>
 8000496:	2bf0      	cmp	r3, #240	; 0xf0
 8000498:	d0ec      	beq.n	8000474 <process_midi_byte+0x34>
 800049a:	2bd0      	cmp	r3, #208	; 0xd0
 800049c:	d10f      	bne.n	80004be <process_midi_byte+0x7e>
			data[0] = midi_in;
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <process_midi_byte+0x9c>)
 80004a0:	701a      	strb	r2, [r3, #0]
}
 80004a2:	bd10      	pop	{r4, pc}
		data[0] = -1;
 80004a4:	21ff      	movs	r1, #255	; 0xff
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <process_midi_byte+0x9c>)
		status = midi_in;
 80004a8:	480b      	ldr	r0, [pc, #44]	; (80004d8 <process_midi_byte+0x98>)
		data[0] = -1;
 80004aa:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 80004ac:	7059      	strb	r1, [r3, #1]
		status = midi_in;
 80004ae:	7002      	strb	r2, [r0, #0]
}
 80004b0:	bd10      	pop	{r4, pc}
			if (data[0] == (uint8_t)-1) {
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <process_midi_byte+0x9c>)
 80004b4:	7818      	ldrb	r0, [r3, #0]
 80004b6:	28ff      	cmp	r0, #255	; 0xff
 80004b8:	d103      	bne.n	80004c2 <process_midi_byte+0x82>
				data[0] = midi_in;
 80004ba:	701a      	strb	r2, [r3, #0]
}
 80004bc:	bd10      	pop	{r4, pc}
			__NOP();
 80004be:	bf00      	nop
}
 80004c0:	bd10      	pop	{r4, pc}
				data[1] = midi_in;
 80004c2:	705a      	strb	r2, [r3, #1]
}
 80004c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delete_voice(data[0]);
 80004c8:	f000 bb54 	b.w	8000b74 <delete_voice>
}
 80004cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void note_on() {
	add_voice(data[0]);
 80004d0:	f000 bac2 	b.w	8000a58 <add_voice>
 80004d4:	2000032c 	.word	0x2000032c
 80004d8:	20000374 	.word	0x20000374
 80004dc:	20000288 	.word	0x20000288

080004e0 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <note_to_freq+0x8>)
}
 80004e2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80004e6:	4770      	bx	lr
 80004e8:	08002300 	.word	0x08002300

080004ec <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 80004ee:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 80004f0:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 80004f4:	f3c0 208f 	ubfx	r0, r0, #10, #16
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	057619f1 	.word	0x057619f1

08000500 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_MspInit+0x3c>)
{
 8000502:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000504:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000506:	490e      	ldr	r1, [pc, #56]	; (8000540 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000508:	f042 0201 	orr.w	r2, r2, #1
 800050c:	619a      	str	r2, [r3, #24]
 800050e:	699a      	ldr	r2, [r3, #24]
 8000510:	f002 0201 	and.w	r2, r2, #1
 8000514:	9200      	str	r2, [sp, #0]
 8000516:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	69da      	ldr	r2, [r3, #28]
 800051a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800051e:	61da      	str	r2, [r3, #28]
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052a:	684b      	ldr	r3, [r1, #4]
 800052c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000530:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000534:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	b002      	add	sp, #8
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000
 8000540:	40010000 	.word	0x40010000

08000544 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8000548:	6802      	ldr	r2, [r0, #0]
 800054a:	4b24      	ldr	r3, [pc, #144]	; (80005dc <HAL_SPI_MspInit+0x98>)
{
 800054c:	b087      	sub	sp, #28
  if(hspi->Instance==SPI1)
 800054e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000554:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI1)
 8000558:	d001      	beq.n	800055e <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800055a:	b007      	add	sp, #28
 800055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800055e:	26a0      	movs	r6, #160	; 0xa0
 8000560:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000562:	f04f 0c03 	mov.w	ip, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000566:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800056a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800056e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000572:	619a      	str	r2, [r3, #24]
 8000574:	699a      	ldr	r2, [r3, #24]
 8000576:	4605      	mov	r5, r0
 8000578:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	4817      	ldr	r0, [pc, #92]	; (80005e0 <HAL_SPI_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	f042 0204 	orr.w	r2, r2, #4
 8000588:	619a      	str	r2, [r3, #24]
 800058a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800058c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	f003 0304 	and.w	r3, r3, #4
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000598:	f8cd c014 	str.w	ip, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f000 fe88 	bl	80012b0 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a0:	2010      	movs	r0, #16
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005a2:	2780      	movs	r7, #128	; 0x80
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80005b0:	4e0c      	ldr	r6, [pc, #48]	; (80005e4 <HAL_SPI_MspInit+0xa0>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b2:	e9c6 0401 	strd	r0, r4, [r6, #4]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <HAL_SPI_MspInit+0xa4>)
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005b8:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80005bc:	6030      	str	r0, [r6, #0]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80005be:	4630      	mov	r0, r6
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80005c0:	61b4      	str	r4, [r6, #24]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005c2:	60f7      	str	r7, [r6, #12]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005c4:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80005c6:	f000 fdd5 	bl	8001174 <HAL_DMA_Init>
 80005ca:	b918      	cbnz	r0, 80005d4 <HAL_SPI_MspInit+0x90>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80005cc:	64ae      	str	r6, [r5, #72]	; 0x48
 80005ce:	6275      	str	r5, [r6, #36]	; 0x24
}
 80005d0:	b007      	add	sp, #28
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80005d4:	f7ff ff24 	bl	8000420 <Error_Handler>
 80005d8:	e7f8      	b.n	80005cc <HAL_SPI_MspInit+0x88>
 80005da:	bf00      	nop
 80005dc:	40013000 	.word	0x40013000
 80005e0:	40010800 	.word	0x40010800
 80005e4:	20000330 	.word	0x20000330
 80005e8:	40020030 	.word	0x40020030

080005ec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80005ec:	6803      	ldr	r3, [r0, #0]
 80005ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f2:	d000      	beq.n	80005f6 <HAL_TIM_Base_MspInit+0xa>
 80005f4:	4770      	bx	lr

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80005f6:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005f8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80005fc:	69d8      	ldr	r0, [r3, #28]
{
 80005fe:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000600:	4308      	orrs	r0, r1
 8000602:	61d8      	str	r0, [r3, #28]
 8000604:	69db      	ldr	r3, [r3, #28]
{
 8000606:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000608:	400b      	ands	r3, r1
 800060a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000610:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000612:	f000 fd51 	bl	80010b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000616:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000618:	b003      	add	sp, #12
 800061a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800061e:	f000 bd83 	b.w	8001128 <HAL_NVIC_EnableIRQ>
 8000622:	bf00      	nop

08000624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000624:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8000628:	6802      	ldr	r2, [r0, #0]
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <HAL_UART_MspInit+0x88>)
{
 800062c:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 800062e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000634:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8000638:	d001      	beq.n	800063e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800063a:	b007      	add	sp, #28
 800063c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800063e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000642:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8000646:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800064a:	699a      	ldr	r2, [r3, #24]
 800064c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000650:	619a      	str	r2, [r3, #24]
 8000652:	699a      	ldr	r2, [r3, #24]
 8000654:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000658:	9200      	str	r2, [sp, #0]
 800065a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	699a      	ldr	r2, [r3, #24]
 800065e:	f042 0204 	orr.w	r2, r2, #4
 8000662:	619a      	str	r2, [r3, #24]
 8000664:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000666:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	a902      	add	r1, sp, #8
 8000676:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f000 fe17 	bl	80012b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000682:	2300      	movs	r3, #0
 8000684:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	a902      	add	r1, sp, #8
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800068c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f000 fe0d 	bl	80012b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000696:	4622      	mov	r2, r4
 8000698:	4621      	mov	r1, r4
 800069a:	2025      	movs	r0, #37	; 0x25
 800069c:	f000 fd0c 	bl	80010b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006a0:	2025      	movs	r0, #37	; 0x25
 80006a2:	f000 fd41 	bl	8001128 <HAL_NVIC_EnableIRQ>
}
 80006a6:	b007      	add	sp, #28
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40010800 	.word	0x40010800

080006b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <NMI_Handler>
 80006b6:	bf00      	nop

080006b8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <HardFault_Handler>
 80006ba:	bf00      	nop

080006bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <MemManage_Handler>
 80006be:	bf00      	nop

080006c0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <BusFault_Handler>
 80006c2:	bf00      	nop

080006c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler>
 80006c6:	bf00      	nop

080006c8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <DebugMon_Handler>:
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <PendSV_Handler>:
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 bccc 	b.w	8001070 <HAL_IncTick>

080006d8 <DMA1_Channel3_IRQHandler>:
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	volume_out_post();
 80006d8:	f7ff be82 	b.w	80003e0 <volume_out_post>

080006dc <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 80006dc:	f7ff be70 	b.w	80003c0 <sample>

080006e0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006e0:	4801      	ldr	r0, [pc, #4]	; (80006e8 <USART1_IRQHandler+0x8>)
 80006e2:	f001 bcab 	b.w	800203c <HAL_UART_IRQHandler>
 80006e6:	bf00      	nop
 80006e8:	20000244 	.word	0x20000244

080006ec <init_synth>:
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
		algo = 0x00;								//default algorithm 0
		op_amp[i] = 0xFF;							//default amplitude 255
		op_ratio[i] = 0x01;							//default multiplier 1
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 80006ec:	4ad5      	ldr	r2, [pc, #852]	; (8000a44 <init_synth+0x358>)
void init_synth() {
 80006ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 80006f2:	4613      	mov	r3, r2
 80006f4:	4693      	mov	fp, r2
 80006f6:	cb03      	ldmia	r3!, {r0, r1}
 80006f8:	4692      	mov	sl, r2
 80006fa:	4691      	mov	r9, r2
 80006fc:	4690      	mov	r8, r2
 80006fe:	4696      	mov	lr, r2
 8000700:	4694      	mov	ip, r2
 8000702:	4bd1      	ldr	r3, [pc, #836]	; (8000a48 <init_synth+0x35c>)
void init_synth() {
 8000704:	b0a3      	sub	sp, #140	; 0x8c
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 8000706:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800070a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800070e:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8000712:	e9cd 2207 	strd	r2, r2, [sp, #28]
 8000716:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 800071a:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 800071e:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
 8000722:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
 8000726:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
 800072a:	9213      	str	r2, [sp, #76]	; 0x4c
 800072c:	6018      	str	r0, [r3, #0]
 800072e:	6059      	str	r1, [r3, #4]
 8000730:	9214      	str	r2, [sp, #80]	; 0x50
 8000732:	e8bb 0003 	ldmia.w	fp!, {r0, r1}
 8000736:	9215      	str	r2, [sp, #84]	; 0x54
 8000738:	6098      	str	r0, [r3, #8]
 800073a:	60d9      	str	r1, [r3, #12]
 800073c:	e8ba 0003 	ldmia.w	sl!, {r0, r1}
 8000740:	6118      	str	r0, [r3, #16]
 8000742:	6159      	str	r1, [r3, #20]
 8000744:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8000748:	6198      	str	r0, [r3, #24]
 800074a:	61d9      	str	r1, [r3, #28]
 800074c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8000750:	6218      	str	r0, [r3, #32]
 8000752:	6259      	str	r1, [r3, #36]	; 0x24
 8000754:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8000758:	6298      	str	r0, [r3, #40]	; 0x28
 800075a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800075c:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000760:	6318      	str	r0, [r3, #48]	; 0x30
		algo = 0x00;								//default algorithm 0
 8000762:	f04f 0000 	mov.w	r0, #0
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 8000766:	6359      	str	r1, [r3, #52]	; 0x34
		algo = 0x00;								//default algorithm 0
 8000768:	49b8      	ldr	r1, [pc, #736]	; (8000a4c <init_synth+0x360>)
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 800076a:	4617      	mov	r7, r2
		algo = 0x00;								//default algorithm 0
 800076c:	7008      	strb	r0, [r1, #0]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	49b7      	ldr	r1, [pc, #732]	; (8000a50 <init_synth+0x364>)
			op[i][o] = (OPERATOR) {-1, -1, -1, -1};
 8000774:	4616      	mov	r6, r2
 8000776:	6008      	str	r0, [r1, #0]
 8000778:	4615      	mov	r5, r2
 800077a:	4614      	mov	r4, r2
 800077c:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
 8000780:	49b4      	ldr	r1, [pc, #720]	; (8000a54 <init_synth+0x368>)
 8000782:	9216      	str	r2, [sp, #88]	; 0x58
 8000784:	9217      	str	r2, [sp, #92]	; 0x5c
 8000786:	9218      	str	r2, [sp, #96]	; 0x60
 8000788:	9219      	str	r2, [sp, #100]	; 0x64
 800078a:	921a      	str	r2, [sp, #104]	; 0x68
 800078c:	921b      	str	r2, [sp, #108]	; 0x6c
 800078e:	921c      	str	r2, [sp, #112]	; 0x70
 8000790:	921d      	str	r2, [sp, #116]	; 0x74
 8000792:	6008      	str	r0, [r1, #0]
 8000794:	cf03      	ldmia	r7!, {r0, r1}
 8000796:	6398      	str	r0, [r3, #56]	; 0x38
 8000798:	63d9      	str	r1, [r3, #60]	; 0x3c
 800079a:	921e      	str	r2, [sp, #120]	; 0x78
 800079c:	ce03      	ldmia	r6!, {r0, r1}
 800079e:	6418      	str	r0, [r3, #64]	; 0x40
 80007a0:	6459      	str	r1, [r3, #68]	; 0x44
 80007a2:	cd03      	ldmia	r5!, {r0, r1}
 80007a4:	6498      	str	r0, [r3, #72]	; 0x48
 80007a6:	64d9      	str	r1, [r3, #76]	; 0x4c
 80007a8:	cc03      	ldmia	r4!, {r0, r1}
 80007aa:	4614      	mov	r4, r2
 80007ac:	6518      	str	r0, [r3, #80]	; 0x50
 80007ae:	6559      	str	r1, [r3, #84]	; 0x54
 80007b0:	cc03      	ldmia	r4!, {r0, r1}
 80007b2:	4614      	mov	r4, r2
 80007b4:	6598      	str	r0, [r3, #88]	; 0x58
 80007b6:	65d9      	str	r1, [r3, #92]	; 0x5c
 80007b8:	cc03      	ldmia	r4!, {r0, r1}
 80007ba:	4614      	mov	r4, r2
 80007bc:	6618      	str	r0, [r3, #96]	; 0x60
 80007be:	6659      	str	r1, [r3, #100]	; 0x64
 80007c0:	4615      	mov	r5, r2
 80007c2:	cc03      	ldmia	r4!, {r0, r1}
 80007c4:	4616      	mov	r6, r2
 80007c6:	4614      	mov	r4, r2
 80007c8:	4617      	mov	r7, r2
 80007ca:	4694      	mov	ip, r2
 80007cc:	921f      	str	r2, [sp, #124]	; 0x7c
 80007ce:	9220      	str	r2, [sp, #128]	; 0x80
 80007d0:	9221      	str	r2, [sp, #132]	; 0x84
 80007d2:	6698      	str	r0, [r3, #104]	; 0x68
 80007d4:	66d9      	str	r1, [r3, #108]	; 0x6c
 80007d6:	cc03      	ldmia	r4!, {r0, r1}
 80007d8:	6718      	str	r0, [r3, #112]	; 0x70
 80007da:	6759      	str	r1, [r3, #116]	; 0x74
 80007dc:	cd03      	ldmia	r5!, {r0, r1}
 80007de:	6798      	str	r0, [r3, #120]	; 0x78
 80007e0:	67d9      	str	r1, [r3, #124]	; 0x7c
 80007e2:	ce03      	ldmia	r6!, {r0, r1}
 80007e4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 80007e8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 80007ec:	cf03      	ldmia	r7!, {r0, r1}
 80007ee:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 80007f2:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 80007f6:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80007fa:	4694      	mov	ip, r2
 80007fc:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
 8000800:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 8000804:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000808:	4694      	mov	ip, r2
 800080a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
 800080e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8000812:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000816:	4694      	mov	ip, r2
 8000818:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
 800081c:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8000820:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000824:	4694      	mov	ip, r2
 8000826:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 800082a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 800082e:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000832:	4694      	mov	ip, r2
 8000834:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
 8000838:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800083c:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000840:	4694      	mov	ip, r2
 8000842:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
 8000846:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 800084a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800084e:	4694      	mov	ip, r2
 8000850:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 8000854:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 8000858:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800085c:	4694      	mov	ip, r2
 800085e:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
 8000862:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8000866:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800086a:	4694      	mov	ip, r2
 800086c:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
 8000870:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 8000874:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000878:	4694      	mov	ip, r2
 800087a:	4614      	mov	r4, r2
 800087c:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
 8000880:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
 8000884:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000888:	4694      	mov	ip, r2
 800088a:	4692      	mov	sl, r2
 800088c:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000890:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8000894:	4615      	mov	r5, r2
 8000896:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800089a:	4616      	mov	r6, r2
 800089c:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
 80008a0:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
 80008a4:	4617      	mov	r7, r2
 80008a6:	4693      	mov	fp, r2
 80008a8:	4691      	mov	r9, r2
 80008aa:	4690      	mov	r8, r2
 80008ac:	4696      	mov	lr, r2
 80008ae:	4694      	mov	ip, r2
 80008b0:	ca03      	ldmia	r2!, {r0, r1}
 80008b2:	4622      	mov	r2, r4
 80008b4:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
 80008b8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
 80008bc:	ca03      	ldmia	r2!, {r0, r1}
 80008be:	4622      	mov	r2, r4
 80008c0:	f8c3 00f8 	str.w	r0, [r3, #248]	; 0xf8
 80008c4:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 80008c8:	ca03      	ldmia	r2!, {r0, r1}
 80008ca:	4622      	mov	r2, r4
 80008cc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 80008d0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 80008d4:	ca03      	ldmia	r2!, {r0, r1}
 80008d6:	4622      	mov	r2, r4
 80008d8:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
 80008dc:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
 80008e0:	ca03      	ldmia	r2!, {r0, r1}
 80008e2:	4622      	mov	r2, r4
 80008e4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
 80008e8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
 80008ec:	ca03      	ldmia	r2!, {r0, r1}
 80008ee:	4622      	mov	r2, r4
 80008f0:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 80008f4:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
 80008f8:	ca03      	ldmia	r2!, {r0, r1}
 80008fa:	4622      	mov	r2, r4
 80008fc:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
 8000900:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
 8000904:	ca03      	ldmia	r2!, {r0, r1}
 8000906:	4622      	mov	r2, r4
 8000908:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
 800090c:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
 8000910:	ca03      	ldmia	r2!, {r0, r1}
 8000912:	4622      	mov	r2, r4
 8000914:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
 8000918:	f8c3 1134 	str.w	r1, [r3, #308]	; 0x134
 800091c:	ca03      	ldmia	r2!, {r0, r1}
 800091e:	4622      	mov	r2, r4
 8000920:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
 8000924:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
 8000928:	ca03      	ldmia	r2!, {r0, r1}
 800092a:	4622      	mov	r2, r4
 800092c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 8000930:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
 8000934:	ca03      	ldmia	r2!, {r0, r1}
 8000936:	4622      	mov	r2, r4
 8000938:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
 800093c:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
 8000940:	ca03      	ldmia	r2!, {r0, r1}
 8000942:	4622      	mov	r2, r4
 8000944:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8000948:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
 800094c:	ca03      	ldmia	r2!, {r0, r1}
 800094e:	4622      	mov	r2, r4
 8000950:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
 8000954:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
 8000958:	ca03      	ldmia	r2!, {r0, r1}
 800095a:	4622      	mov	r2, r4
 800095c:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
 8000960:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
 8000964:	ca03      	ldmia	r2!, {r0, r1}
 8000966:	4622      	mov	r2, r4
 8000968:	f8c3 0168 	str.w	r0, [r3, #360]	; 0x168
 800096c:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
 8000970:	ca03      	ldmia	r2!, {r0, r1}
 8000972:	4622      	mov	r2, r4
 8000974:	f8c3 0170 	str.w	r0, [r3, #368]	; 0x170
 8000978:	f8c3 1174 	str.w	r1, [r3, #372]	; 0x174
 800097c:	ca03      	ldmia	r2!, {r0, r1}
 800097e:	f8c3 0178 	str.w	r0, [r3, #376]	; 0x178
 8000982:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
 8000986:	cc03      	ldmia	r4!, {r0, r1}
 8000988:	4654      	mov	r4, sl
 800098a:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
 800098e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 8000992:	cd03      	ldmia	r5!, {r0, r1}
 8000994:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8000998:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 800099c:	ce03      	ldmia	r6!, {r0, r1}
 800099e:	f8c3 0190 	str.w	r0, [r3, #400]	; 0x190
 80009a2:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
 80009a6:	cf03      	ldmia	r7!, {r0, r1}
 80009a8:	f8c3 0198 	str.w	r0, [r3, #408]	; 0x198
 80009ac:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 80009b0:	cc03      	ldmia	r4!, {r0, r1}
 80009b2:	4654      	mov	r4, sl
 80009b4:	f8c3 01a0 	str.w	r0, [r3, #416]	; 0x1a0
 80009b8:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4
 80009bc:	cc03      	ldmia	r4!, {r0, r1}
 80009be:	4654      	mov	r4, sl
 80009c0:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
 80009c4:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
 80009c8:	cc03      	ldmia	r4!, {r0, r1}
 80009ca:	4654      	mov	r4, sl
 80009cc:	4652      	mov	r2, sl
 80009ce:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0
 80009d2:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
 80009d6:	cc03      	ldmia	r4!, {r0, r1}
 80009d8:	4654      	mov	r4, sl
 80009da:	f8c3 01b8 	str.w	r0, [r3, #440]	; 0x1b8
 80009de:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
 80009e2:	cc03      	ldmia	r4!, {r0, r1}
 80009e4:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
 80009e8:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
 80009ec:	ca03      	ldmia	r2!, {r0, r1}
 80009ee:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
 80009f2:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
 80009f6:	e8ba 0003 	ldmia.w	sl!, {r0, r1}
 80009fa:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
 80009fe:	f8c3 11d4 	str.w	r1, [r3, #468]	; 0x1d4
 8000a02:	e8bb 0003 	ldmia.w	fp!, {r0, r1}
 8000a06:	f8c3 01d8 	str.w	r0, [r3, #472]	; 0x1d8
 8000a0a:	f8c3 11dc 	str.w	r1, [r3, #476]	; 0x1dc
 8000a0e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8000a12:	f8c3 01e0 	str.w	r0, [r3, #480]	; 0x1e0
 8000a16:	f8c3 11e4 	str.w	r1, [r3, #484]	; 0x1e4
 8000a1a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8000a1e:	f8c3 01e8 	str.w	r0, [r3, #488]	; 0x1e8
 8000a22:	f8c3 11ec 	str.w	r1, [r3, #492]	; 0x1ec
 8000a26:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8000a2a:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
 8000a2e:	f8c3 11f4 	str.w	r1, [r3, #500]	; 0x1f4
 8000a32:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8000a36:	f8c3 01f8 	str.w	r0, [r3, #504]	; 0x1f8
 8000a3a:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
		}
	}
}
 8000a3e:	b023      	add	sp, #140	; 0x8c
 8000a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a44:	080022f8 	.word	0x080022f8
 8000a48:	20000034 	.word	0x20000034
 8000a4c:	20000234 	.word	0x20000234
 8000a50:	20000238 	.word	0x20000238
 8000a54:	20000240 	.word	0x20000240

08000a58 <add_voice>:

void add_voice(uint8_t note_value) {
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
//		if (op[0][voice_index].note_value == note_value) {
//			return;
//		}
//	}
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000a5c:	4c43      	ldr	r4, [pc, #268]	; (8000b6c <add_voice+0x114>)
void add_voice(uint8_t note_value) {
 8000a5e:	4681      	mov	r9, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000a60:	7823      	ldrb	r3, [r4, #0]
 8000a62:	2bff      	cmp	r3, #255	; 0xff
 8000a64:	d066      	beq.n	8000b34 <add_voice+0xdc>
 8000a66:	7a23      	ldrb	r3, [r4, #8]
 8000a68:	2bff      	cmp	r3, #255	; 0xff
 8000a6a:	d065      	beq.n	8000b38 <add_voice+0xe0>
 8000a6c:	7c23      	ldrb	r3, [r4, #16]
 8000a6e:	2bff      	cmp	r3, #255	; 0xff
 8000a70:	d066      	beq.n	8000b40 <add_voice+0xe8>
 8000a72:	7e23      	ldrb	r3, [r4, #24]
 8000a74:	2bff      	cmp	r3, #255	; 0xff
 8000a76:	d065      	beq.n	8000b44 <add_voice+0xec>
 8000a78:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000a7c:	2bff      	cmp	r3, #255	; 0xff
 8000a7e:	d063      	beq.n	8000b48 <add_voice+0xf0>
 8000a80:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8000a84:	2bff      	cmp	r3, #255	; 0xff
 8000a86:	d061      	beq.n	8000b4c <add_voice+0xf4>
 8000a88:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000a8c:	2bff      	cmp	r3, #255	; 0xff
 8000a8e:	d05f      	beq.n	8000b50 <add_voice+0xf8>
 8000a90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000a94:	2bff      	cmp	r3, #255	; 0xff
 8000a96:	d05d      	beq.n	8000b54 <add_voice+0xfc>
 8000a98:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8000a9c:	2bff      	cmp	r3, #255	; 0xff
 8000a9e:	d05b      	beq.n	8000b58 <add_voice+0x100>
 8000aa0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8000aa4:	2bff      	cmp	r3, #255	; 0xff
 8000aa6:	d059      	beq.n	8000b5c <add_voice+0x104>
 8000aa8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000aac:	2bff      	cmp	r3, #255	; 0xff
 8000aae:	d057      	beq.n	8000b60 <add_voice+0x108>
 8000ab0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8000ab4:	2bff      	cmp	r3, #255	; 0xff
 8000ab6:	d055      	beq.n	8000b64 <add_voice+0x10c>
 8000ab8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8000abc:	2bff      	cmp	r3, #255	; 0xff
 8000abe:	d03d      	beq.n	8000b3c <add_voice+0xe4>
 8000ac0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8000ac4:	2bff      	cmp	r3, #255	; 0xff
 8000ac6:	d04f      	beq.n	8000b68 <add_voice+0x110>
 8000ac8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8000acc:	2bff      	cmp	r3, #255	; 0xff
 8000ace:	d007      	beq.n	8000ae0 <add_voice+0x88>
 8000ad0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8000ad4:	2bff      	cmp	r3, #255	; 0xff
 8000ad6:	bf08      	it	eq
 8000ad8:	230f      	moveq	r3, #15
 8000ada:	d002      	beq.n	8000ae2 <add_voice+0x8a>
		else {
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);						//calculate and store delta
		}
		op[op_index][voice_index].phase = 0;											//reset the phase (wave table index)
	}
}
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000ae0:	230e      	movs	r3, #14
 8000ae2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);						//calculate and store delta
 8000ae6:	4627      	mov	r7, r4
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000ae8:	2501      	movs	r5, #1
		op[op_index][voice_index].phase = 0;											//reset the phase (wave table index)
 8000aea:	f04f 0800 	mov.w	r8, #0
 8000aee:	f8df a080 	ldr.w	sl, [pc, #128]	; 8000b70 <add_voice+0x118>
		op[op_index][voice_index].freq = op_ratio[op_index] * note_to_freq(note_value);	//store frequency
 8000af2:	4648      	mov	r0, r9
		op[op_index][voice_index].note_value = note_value;								//store note
 8000af4:	f884 9000 	strb.w	r9, [r4]
		op[op_index][voice_index].freq = op_ratio[op_index] * note_to_freq(note_value);	//store frequency
 8000af8:	f81a 6b01 	ldrb.w	r6, [sl], #1
 8000afc:	f7ff fcf0 	bl	80004e0 <note_to_freq>
 8000b00:	fb06 f600 	mul.w	r6, r6, r0
		if (op_index != 0)	{
 8000b04:	2d01      	cmp	r5, #1
		op[op_index][voice_index].freq = op_ratio[op_index] * note_to_freq(note_value);	//store frequency
 8000b06:	8066      	strh	r6, [r4, #2]
		if (op_index != 0)	{
 8000b08:	d00d      	beq.n	8000b26 <add_voice+0xce>
			op[op_index][voice_index].delta = op_ratio[op_index] * op[0][voice_index].delta;//multiply delta based off of ratio of carrier
 8000b0a:	88ba      	ldrh	r2, [r7, #4]
 8000b0c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000b10:	2d04      	cmp	r5, #4
			op[op_index][voice_index].delta = op_ratio[op_index] * op[0][voice_index].delta;//multiply delta based off of ratio of carrier
 8000b12:	fb03 f302 	mul.w	r3, r3, r2
		op[op_index][voice_index].phase = 0;											//reset the phase (wave table index)
 8000b16:	f8a4 8006 	strh.w	r8, [r4, #6]
			op[op_index][voice_index].delta = op_ratio[op_index] * op[0][voice_index].delta;//multiply delta based off of ratio of carrier
 8000b1a:	80a3      	strh	r3, [r4, #4]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000b1c:	d0de      	beq.n	8000adc <add_voice+0x84>
 8000b1e:	3501      	adds	r5, #1
 8000b20:	b2ed      	uxtb	r5, r5
 8000b22:	3480      	adds	r4, #128	; 0x80
 8000b24:	e7e5      	b.n	8000af2 <add_voice+0x9a>
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);						//calculate and store delta
 8000b26:	8878      	ldrh	r0, [r7, #2]
 8000b28:	f7ff fce0 	bl	80004ec <calculate_delta>
 8000b2c:	80b8      	strh	r0, [r7, #4]
		op[op_index][voice_index].phase = 0;											//reset the phase (wave table index)
 8000b2e:	f8a4 8006 	strh.w	r8, [r4, #6]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000b32:	e7f4      	b.n	8000b1e <add_voice+0xc6>
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	e7d4      	b.n	8000ae2 <add_voice+0x8a>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e7d2      	b.n	8000ae2 <add_voice+0x8a>
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	e7d0      	b.n	8000ae2 <add_voice+0x8a>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e7ce      	b.n	8000ae2 <add_voice+0x8a>
 8000b44:	2303      	movs	r3, #3
 8000b46:	e7cc      	b.n	8000ae2 <add_voice+0x8a>
 8000b48:	2304      	movs	r3, #4
 8000b4a:	e7ca      	b.n	8000ae2 <add_voice+0x8a>
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	e7c8      	b.n	8000ae2 <add_voice+0x8a>
 8000b50:	2306      	movs	r3, #6
 8000b52:	e7c6      	b.n	8000ae2 <add_voice+0x8a>
 8000b54:	2307      	movs	r3, #7
 8000b56:	e7c4      	b.n	8000ae2 <add_voice+0x8a>
 8000b58:	2308      	movs	r3, #8
 8000b5a:	e7c2      	b.n	8000ae2 <add_voice+0x8a>
 8000b5c:	2309      	movs	r3, #9
 8000b5e:	e7c0      	b.n	8000ae2 <add_voice+0x8a>
 8000b60:	230a      	movs	r3, #10
 8000b62:	e7be      	b.n	8000ae2 <add_voice+0x8a>
 8000b64:	230b      	movs	r3, #11
 8000b66:	e7bc      	b.n	8000ae2 <add_voice+0x8a>
 8000b68:	230d      	movs	r3, #13
 8000b6a:	e7ba      	b.n	8000ae2 <add_voice+0x8a>
 8000b6c:	20000034 	.word	0x20000034
 8000b70:	20000240 	.word	0x20000240

08000b74 <delete_voice>:

void delete_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 8000b74:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <delete_voice+0xd4>)
 8000b76:	781a      	ldrb	r2, [r3, #0]
 8000b78:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b7a:	bf04      	itt	eq
 8000b7c:	22ff      	moveq	r2, #255	; 0xff
 8000b7e:	701a      	strbeq	r2, [r3, #0]
		if (op[0][voice_index].note_value == note_value) {
 8000b80:	7a1a      	ldrb	r2, [r3, #8]
 8000b82:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b84:	bf04      	itt	eq
 8000b86:	22ff      	moveq	r2, #255	; 0xff
 8000b88:	721a      	strbeq	r2, [r3, #8]
		if (op[0][voice_index].note_value == note_value) {
 8000b8a:	7c1a      	ldrb	r2, [r3, #16]
 8000b8c:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b8e:	bf04      	itt	eq
 8000b90:	22ff      	moveq	r2, #255	; 0xff
 8000b92:	741a      	strbeq	r2, [r3, #16]
		if (op[0][voice_index].note_value == note_value) {
 8000b94:	7e1a      	ldrb	r2, [r3, #24]
 8000b96:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000b98:	bf04      	itt	eq
 8000b9a:	22ff      	moveq	r2, #255	; 0xff
 8000b9c:	761a      	strbeq	r2, [r3, #24]
		if (op[0][voice_index].note_value == note_value) {
 8000b9e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000ba2:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000ba4:	bf04      	itt	eq
 8000ba6:	22ff      	moveq	r2, #255	; 0xff
 8000ba8:	f883 2020 	strbeq.w	r2, [r3, #32]
		if (op[0][voice_index].note_value == note_value) {
 8000bac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000bb0:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000bb2:	bf04      	itt	eq
 8000bb4:	22ff      	moveq	r2, #255	; 0xff
 8000bb6:	f883 2028 	strbeq.w	r2, [r3, #40]	; 0x28
		if (op[0][voice_index].note_value == note_value) {
 8000bba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8000bbe:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000bc0:	bf04      	itt	eq
 8000bc2:	22ff      	moveq	r2, #255	; 0xff
 8000bc4:	f883 2030 	strbeq.w	r2, [r3, #48]	; 0x30
		if (op[0][voice_index].note_value == note_value) {
 8000bc8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000bcc:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000bce:	bf04      	itt	eq
 8000bd0:	22ff      	moveq	r2, #255	; 0xff
 8000bd2:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (op[0][voice_index].note_value == note_value) {
 8000bd6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000bda:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000bdc:	bf04      	itt	eq
 8000bde:	22ff      	moveq	r2, #255	; 0xff
 8000be0:	f883 2040 	strbeq.w	r2, [r3, #64]	; 0x40
		if (op[0][voice_index].note_value == note_value) {
 8000be4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000be8:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000bea:	bf04      	itt	eq
 8000bec:	22ff      	moveq	r2, #255	; 0xff
 8000bee:	f883 2048 	strbeq.w	r2, [r3, #72]	; 0x48
		if (op[0][voice_index].note_value == note_value) {
 8000bf2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000bf6:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000bf8:	bf04      	itt	eq
 8000bfa:	22ff      	moveq	r2, #255	; 0xff
 8000bfc:	f883 2050 	strbeq.w	r2, [r3, #80]	; 0x50
		if (op[0][voice_index].note_value == note_value) {
 8000c00:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000c04:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000c06:	bf04      	itt	eq
 8000c08:	22ff      	moveq	r2, #255	; 0xff
 8000c0a:	f883 2058 	strbeq.w	r2, [r3, #88]	; 0x58
		if (op[0][voice_index].note_value == note_value) {
 8000c0e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8000c12:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000c14:	bf04      	itt	eq
 8000c16:	22ff      	moveq	r2, #255	; 0xff
 8000c18:	f883 2060 	strbeq.w	r2, [r3, #96]	; 0x60
		if (op[0][voice_index].note_value == note_value) {
 8000c1c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8000c20:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000c22:	bf04      	itt	eq
 8000c24:	22ff      	moveq	r2, #255	; 0xff
 8000c26:	f883 2068 	strbeq.w	r2, [r3, #104]	; 0x68
		if (op[0][voice_index].note_value == note_value) {
 8000c2a:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8000c2e:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000c30:	bf04      	itt	eq
 8000c32:	22ff      	moveq	r2, #255	; 0xff
 8000c34:	f883 2070 	strbeq.w	r2, [r3, #112]	; 0x70
		if (op[0][voice_index].note_value == note_value) {
 8000c38:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8000c3c:	4282      	cmp	r2, r0
			op[0][voice_index].note_value = -1;
 8000c3e:	bf04      	itt	eq
 8000c40:	22ff      	moveq	r2, #255	; 0xff
 8000c42:	f883 2078 	strbeq.w	r2, [r3, #120]	; 0x78
		}
	}
//	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
//		op[op_index][voice_index].note_value = -1;
//	}
}
 8000c46:	4770      	bx	lr
 8000c48:	20000034 	.word	0x20000034

08000c4c <synth_sample>:

int16_t synth_sample() {
	int16_t output_volume = 0x0800;
 8000c4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
int16_t synth_sample() {
 8000c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
		return ((int16_t)op2 + op1 + op0) / 3;
		break;
	case 0x0B:
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000c54:	4ad1      	ldr	r2, [pc, #836]	; (8000f9c <synth_sample+0x350>)
	switch (algo) {
 8000c56:	49d2      	ldr	r1, [pc, #840]	; (8000fa0 <synth_sample+0x354>)
 8000c58:	4bd2      	ldr	r3, [pc, #840]	; (8000fa4 <synth_sample+0x358>)
 8000c5a:	780e      	ldrb	r6, [r1, #0]
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000c5c:	f892 a003 	ldrb.w	sl, [r2, #3]
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000c60:	7851      	ldrb	r1, [r2, #1]
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000c62:	f892 9002 	ldrb.w	r9, [r2, #2]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	b083      	sub	sp, #12
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000c6a:	f8df 8340 	ldr.w	r8, [pc, #832]	; 8000fac <synth_sample+0x360>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c6e:	f8df e340 	ldr.w	lr, [pc, #832]	; 8000fb0 <synth_sample+0x364>
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000c72:	9100      	str	r1, [sp, #0]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000c74:	9201      	str	r2, [sp, #4]
 8000c76:	f103 0580 	add.w	r5, r3, #128	; 0x80
	for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {	//loop through all voices
		if (op[0][voice_index].note_value != (uint8_t)-1) {							//if the voice is active
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	2aff      	cmp	r2, #255	; 0xff
 8000c7e:	d04f      	beq.n	8000d20 <synth_sample+0xd4>
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 8000c80:	88df      	ldrh	r7, [r3, #6]
 8000c82:	f8b3 4086 	ldrh.w	r4, [r3, #134]	; 0x86
 8000c86:	f8b3 b084 	ldrh.w	fp, [r3, #132]	; 0x84
 8000c8a:	8899      	ldrh	r1, [r3, #4]
 8000c8c:	f8b3 c106 	ldrh.w	ip, [r3, #262]	; 0x106
 8000c90:	4439      	add	r1, r7
 8000c92:	445c      	add	r4, fp
 8000c94:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8000c98:	f8b3 b186 	ldrh.w	fp, [r3, #390]	; 0x186
 8000c9c:	f8b3 7184 	ldrh.w	r7, [r3, #388]	; 0x184
 8000ca0:	4462      	add	r2, ip
 8000ca2:	445f      	add	r7, fp
 8000ca4:	b289      	uxth	r1, r1
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	b292      	uxth	r2, r2
 8000caa:	b2bf      	uxth	r7, r7
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 8000cac:	80d9      	strh	r1, [r3, #6]
 8000cae:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8000cb2:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
 8000cb6:	f8a3 7186 	strh.w	r7, [r3, #390]	; 0x186
	switch (algo) {
 8000cba:	2e0b      	cmp	r6, #11
 8000cbc:	f200 816c 	bhi.w	8000f98 <synth_sample+0x34c>
 8000cc0:	e8df f016 	tbh	[pc, r6, lsl #1]
 8000cc4:	0156013c 	.word	0x0156013c
 8000cc8:	00ff0123 	.word	0x00ff0123
 8000ccc:	00c900de 	.word	0x00c900de
 8000cd0:	008200a4 	.word	0x008200a4
 8000cd4:	0059006c 	.word	0x0059006c
 8000cd8:	000c0034 	.word	0x000c0034
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000cdc:	0a12      	lsrs	r2, r2, #8
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000cde:	f918 2002 	ldrsb.w	r2, [r8, r2]
 8000ce2:	0a3f      	lsrs	r7, r7, #8
 8000ce4:	0a24      	lsrs	r4, r4, #8
 8000ce6:	fb09 fc02 	mul.w	ip, r9, r2
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000cea:	f918 7007 	ldrsb.w	r7, [r8, r7]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000cee:	9a00      	ldr	r2, [sp, #0]
 8000cf0:	f918 4004 	ldrsb.w	r4, [r8, r4]
 8000cf4:	0a09      	lsrs	r1, r1, #8
 8000cf6:	fb02 f404 	mul.w	r4, r2, r4
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000cfa:	fb0a f707 	mul.w	r7, sl, r7
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000cfe:	9a01      	ldr	r2, [sp, #4]
 8000d00:	f918 1001 	ldrsb.w	r1, [r8, r1]
 8000d04:	fb02 f101 	mul.w	r1, r2, r1
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000d08:	ea4f 222c 	mov.w	r2, ip, asr #8
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 8000d0c:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8000d10:	eb02 2224 	add.w	r2, r2, r4, asr #8
 8000d14:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8000d18:	f3c2 028f 	ubfx	r2, r2, #2, #16
			output_volume += modulate(voice_index);
 8000d1c:	4410      	add	r0, r2
 8000d1e:	b200      	sxth	r0, r0
	for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {	//loop through all voices
 8000d20:	3308      	adds	r3, #8
 8000d22:	429d      	cmp	r5, r3
 8000d24:	d1a9      	bne.n	8000c7a <synth_sample+0x2e>
		}
	}
	return output_volume;
}
 8000d26:	b003      	add	sp, #12
 8000d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d2c:	0a3f      	lsrs	r7, r7, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d2e:	f91e 7007 	ldrsb.w	r7, [lr, r7]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d32:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d34:	fb0a f707 	mul.w	r7, sl, r7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d38:	eb02 2727 	add.w	r7, r2, r7, asr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d3c:	0a24      	lsrs	r4, r4, #8
 8000d3e:	b2ff      	uxtb	r7, r7
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000d40:	f918 2004 	ldrsb.w	r2, [r8, r4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d44:	f918 4007 	ldrsb.w	r4, [r8, r7]
 8000d48:	0a09      	lsrs	r1, r1, #8
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000d4a:	9f00      	ldr	r7, [sp, #0]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000d4c:	f918 1001 	ldrsb.w	r1, [r8, r1]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000d50:	fb07 f202 	mul.w	r2, r7, r2
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000d54:	9f01      	ldr	r7, [sp, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d56:	fb09 f404 	mul.w	r4, r9, r4
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000d5a:	fb07 f101 	mul.w	r1, r7, r1
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000d5e:	1212      	asrs	r2, r2, #8
		return ((int16_t)op2 + op1 + op0) / 3;
 8000d60:	eb02 2224 	add.w	r2, r2, r4, asr #8
 8000d64:	eb02 2121 	add.w	r1, r2, r1, asr #8
 8000d68:	4a8f      	ldr	r2, [pc, #572]	; (8000fa8 <synth_sample+0x35c>)
 8000d6a:	fb82 4201 	smull	r4, r2, r2, r1
 8000d6e:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8000d72:	b292      	uxth	r2, r2
 8000d74:	e7d2      	b.n	8000d1c <synth_sample+0xd0>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d76:	0a3f      	lsrs	r7, r7, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d78:	f91e 7007 	ldrsb.w	r7, [lr, r7]
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d7c:	0a09      	lsrs	r1, r1, #8
 8000d7e:	fb0a f707 	mul.w	r7, sl, r7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d82:	f3c7 2707 	ubfx	r7, r7, #8, #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000d86:	eb07 2414 	add.w	r4, r7, r4, lsr #8
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d8a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8000d8e:	b2e4      	uxtb	r4, r4
 8000d90:	b2ff      	uxtb	r7, r7
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000d92:	f918 2004 	ldrsb.w	r2, [r8, r4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000d96:	f918 4007 	ldrsb.w	r4, [r8, r7]
 8000d9a:	e7d6      	b.n	8000d4a <synth_sample+0xfe>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d9c:	0a3f      	lsrs	r7, r7, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000d9e:	f91e 7007 	ldrsb.w	r7, [lr, r7]
 8000da2:	fb0a f707 	mul.w	r7, sl, r7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000da6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8000daa:	eb07 2c12 	add.w	ip, r7, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000dae:	eb07 2414 	add.w	r4, r7, r4, lsr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000db2:	b2e4      	uxtb	r4, r4
 8000db4:	fa5f fc8c 	uxtb.w	ip, ip
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op_amp[0] >> 8;
 8000db8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000dbc:	f918 2004 	ldrsb.w	r2, [r8, r4]
 8000dc0:	b2c9      	uxtb	r1, r1
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000dc2:	f918 400c 	ldrsb.w	r4, [r8, ip]
 8000dc6:	e7c0      	b.n	8000d4a <synth_sample+0xfe>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000dc8:	0a3f      	lsrs	r7, r7, #8
 8000dca:	0a24      	lsrs	r4, r4, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000dcc:	f91e c007 	ldrsb.w	ip, [lr, r7]
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000dd0:	f91e 4004 	ldrsb.w	r4, [lr, r4]
 8000dd4:	9f00      	ldr	r7, [sp, #0]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000dd6:	0a09      	lsrs	r1, r1, #8
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000dd8:	fb07 f404 	mul.w	r4, r7, r4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000ddc:	fb0a f70c 	mul.w	r7, sl, ip
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000de0:	eb01 2424 	add.w	r4, r1, r4, asr #8
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000de4:	0a12      	lsrs	r2, r2, #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000de6:	b2e4      	uxtb	r4, r4
 8000de8:	eb02 2127 	add.w	r1, r2, r7, asr #8
 8000dec:	b2c9      	uxtb	r1, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000dee:	f918 2004 	ldrsb.w	r2, [r8, r4]
 8000df2:	9c01      	ldr	r4, [sp, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000df4:	f918 1001 	ldrsb.w	r1, [r8, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000df8:	fb04 f202 	mul.w	r2, r4, r2
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000dfc:	fb09 f101 	mul.w	r1, r9, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000e00:	1212      	asrs	r2, r2, #8
		return ((int16_t)op2 + op0) >> 1;
 8000e02:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8000e06:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8000e0a:	e787      	b.n	8000d1c <synth_sample+0xd0>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000e0c:	0a3f      	lsrs	r7, r7, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000e0e:	f91e 7007 	ldrsb.w	r7, [lr, r7]
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e12:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000e14:	fb0a f707 	mul.w	r7, sl, r7
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e18:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	f91e 2002 	ldrsb.w	r2, [lr, r2]
 8000e22:	fb09 f202 	mul.w	r2, r9, r2
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000e26:	f3c2 2207 	ubfx	r2, r2, #8, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op_amp[0] >> 8;
 8000e2a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000e2e:	b2c9      	uxtb	r1, r1
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000e30:	eb02 2414 	add.w	r4, r2, r4, lsr #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op_amp[0] >> 8;
 8000e34:	f918 2001 	ldrsb.w	r2, [r8, r1]
 8000e38:	b2e4      	uxtb	r4, r4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000e3a:	f918 1004 	ldrsb.w	r1, [r8, r4]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op_amp[0] >> 8;
 8000e3e:	9c01      	ldr	r4, [sp, #4]
 8000e40:	fb04 f202 	mul.w	r2, r4, r2
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000e44:	9c00      	ldr	r4, [sp, #0]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op_amp[0] >> 8;
 8000e46:	1212      	asrs	r2, r2, #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000e48:	fb04 f101 	mul.w	r1, r4, r1
		return ((int16_t)op1 + op0) >> 1;
 8000e4c:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8000e50:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8000e54:	e762      	b.n	8000d1c <synth_sample+0xd0>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000e56:	0a3f      	lsrs	r7, r7, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000e58:	f91e 7007 	ldrsb.w	r7, [lr, r7]
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e5c:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000e5e:	fb0a f707 	mul.w	r7, sl, r7
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e62:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	f91e 2002 	ldrsb.w	r2, [lr, r2]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000e6c:	0a24      	lsrs	r4, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000e6e:	fb09 f202 	mul.w	r2, r9, r2
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000e72:	0a09      	lsrs	r1, r1, #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000e74:	eb04 2422 	add.w	r4, r4, r2, asr #8
 8000e78:	b2e4      	uxtb	r4, r4
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op_amp[0] >> 8;
 8000e7a:	f918 2001 	ldrsb.w	r2, [r8, r1]
 8000e7e:	e7dc      	b.n	8000e3a <synth_sample+0x1ee>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000e80:	0a12      	lsrs	r2, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000e82:	f91e 2002 	ldrsb.w	r2, [lr, r2]
 8000e86:	0a3f      	lsrs	r7, r7, #8
 8000e88:	fb09 f202 	mul.w	r2, r9, r2
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000e8c:	f91e 7007 	ldrsb.w	r7, [lr, r7]
 8000e90:	0a24      	lsrs	r4, r4, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000e92:	ea4f 2c22 	mov.w	ip, r2, asr #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000e96:	fb0a f707 	mul.w	r7, sl, r7
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op_amp[1] >> 8;
 8000e9a:	9a00      	ldr	r2, [sp, #0]
 8000e9c:	f91e 4004 	ldrsb.w	r4, [lr, r4]
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op_amp[0] >> 8;
 8000ea4:	eb0c 2227 	add.w	r2, ip, r7, asr #8
 8000ea8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8000eac:	eb02 2224 	add.w	r2, r2, r4, asr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000eb0:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000eb2:	f918 2002 	ldrsb.w	r2, [r8, r2]
 8000eb6:	9901      	ldr	r1, [sp, #4]
 8000eb8:	fb01 f202 	mul.w	r2, r1, r2
 8000ebc:	f3c2 220f 	ubfx	r2, r2, #8, #16
		return op0;
 8000ec0:	e72c      	b.n	8000d1c <synth_sample+0xd0>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000ec2:	0a3f      	lsrs	r7, r7, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000ec4:	f91e 7007 	ldrsb.w	r7, [lr, r7]
 8000ec8:	fb0a f707 	mul.w	r7, sl, r7
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000ecc:	f3c7 2707 	ubfx	r7, r7, #8, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000ed0:	eb07 2414 	add.w	r4, r7, r4, lsr #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000ed4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8000ed8:	b2e4      	uxtb	r4, r4
 8000eda:	b2ff      	uxtb	r7, r7
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000edc:	f91e 2004 	ldrsb.w	r2, [lr, r4]
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000ee0:	f91e 4007 	ldrsb.w	r4, [lr, r7]
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000ee4:	9f00      	ldr	r7, [sp, #0]
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000ee6:	fb09 f404 	mul.w	r4, r9, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op_amp[1] >> 8;
 8000eea:	fb07 f202 	mul.w	r2, r7, r2
 8000eee:	1212      	asrs	r2, r2, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op_amp[0] >> 8;
 8000ef0:	eb02 2224 	add.w	r2, r2, r4, asr #8
 8000ef4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000ef8:	b2c9      	uxtb	r1, r1
 8000efa:	f918 2001 	ldrsb.w	r2, [r8, r1]
 8000efe:	9901      	ldr	r1, [sp, #4]
 8000f00:	fb01 f202 	mul.w	r2, r1, r2
 8000f04:	f3c2 220f 	ubfx	r2, r2, #8, #16
		return op0;
 8000f08:	e708      	b.n	8000d1c <synth_sample+0xd0>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000f0a:	0a12      	lsrs	r2, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000f0c:	f91e 2002 	ldrsb.w	r2, [lr, r2]
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000f10:	0a24      	lsrs	r4, r4, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000f12:	fb09 f202 	mul.w	r2, r9, r2
 8000f16:	0a3f      	lsrs	r7, r7, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000f18:	eb04 2422 	add.w	r4, r4, r2, asr #8
 8000f1c:	b2e4      	uxtb	r4, r4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000f1e:	f91e 2007 	ldrsb.w	r2, [lr, r7]
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000f22:	f91e 4004 	ldrsb.w	r4, [lr, r4]
 8000f26:	9f00      	ldr	r7, [sp, #0]
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000f28:	fb0a f202 	mul.w	r2, sl, r2
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000f2c:	fb07 f404 	mul.w	r4, r7, r4
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op_amp[0] >> 8;
 8000f30:	0a09      	lsrs	r1, r1, #8
 8000f32:	eb01 2222 	add.w	r2, r1, r2, asr #8
 8000f36:	eb02 2224 	add.w	r2, r2, r4, asr #8
 8000f3a:	e7b9      	b.n	8000eb0 <synth_sample+0x264>
 8000f3c:	0a3f      	lsrs	r7, r7, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000f3e:	f91e 7007 	ldrsb.w	r7, [lr, r7]
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000f42:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000f44:	fb0a f707 	mul.w	r7, sl, r7
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000f48:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	f91e 2002 	ldrsb.w	r2, [lr, r2]
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000f52:	0a24      	lsrs	r4, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op_amp[2] >> 8;
 8000f54:	fb09 f202 	mul.w	r2, r9, r2
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op_amp[1] >> 8;
 8000f58:	eb04 2222 	add.w	r2, r4, r2, asr #8
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	f91e 2002 	ldrsb.w	r2, [lr, r2]
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op_amp[1] >> 8;
 8000f62:	9c00      	ldr	r4, [sp, #0]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000f64:	0a09      	lsrs	r1, r1, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op_amp[1] >> 8;
 8000f66:	fb04 f202 	mul.w	r2, r4, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op_amp[0] >> 8;
 8000f6a:	eb01 2222 	add.w	r2, r1, r2, asr #8
 8000f6e:	e79f      	b.n	8000eb0 <synth_sample+0x264>
 8000f70:	0a12      	lsrs	r2, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000f72:	f91e c002 	ldrsb.w	ip, [lr, r2]
 8000f76:	0a3f      	lsrs	r7, r7, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000f78:	f91e 2007 	ldrsb.w	r2, [lr, r7]
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000f7c:	fb09 fc0c 	mul.w	ip, r9, ip
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op_amp[3] >> 8;
 8000f80:	fb0a f202 	mul.w	r2, sl, r2
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op_amp[2] >> 8;
 8000f84:	ea4f 2c2c 	mov.w	ip, ip, asr #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op_amp[1] >> 8;
 8000f88:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8000f8c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8000f90:	b2e4      	uxtb	r4, r4
 8000f92:	f91e 2004 	ldrsb.w	r2, [lr, r4]
 8000f96:	e7e4      	b.n	8000f62 <synth_sample+0x316>
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	e6bf      	b.n	8000d1c <synth_sample+0xd0>
 8000f9c:	20000238 	.word	0x20000238
 8000fa0:	20000234 	.word	0x20000234
 8000fa4:	20000034 	.word	0x20000034
 8000fa8:	55555556 	.word	0x55555556
 8000fac:	08002500 	.word	0x08002500
 8000fb0:	08002400 	.word	0x08002400

08000fb4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	; (8000ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fde:	f7ff ffe9 	bl	8000fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f001 f959 	bl	8002298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe6:	f7ff f92d 	bl	8000244 <main>
  bx lr
 8000fea:	4770      	bx	lr
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ff4:	08002634 	.word	0x08002634
  ldr r2, =_sbss
 8000ff8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ffc:	2000037c 	.word	0x2000037c

08001000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_2_IRQHandler>
	...

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_InitTick+0x3c>)
{
 800100c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100e:	7811      	ldrb	r1, [r2, #0]
 8001010:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <HAL_InitTick+0x40>)
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	fbb2 f0f3 	udiv	r0, r2, r3
 800101c:	f000 f892 	bl	8001144 <HAL_SYSTICK_Config>
 8001020:	b908      	cbnz	r0, 8001026 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	2d0f      	cmp	r5, #15
 8001024:	d901      	bls.n	800102a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001028:	bd38      	pop	{r3, r4, r5, pc}
 800102a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	4602      	mov	r2, r0
 800102e:	4629      	mov	r1, r5
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f840 	bl	80010b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_InitTick+0x44>)
 800103a:	4620      	mov	r0, r4
 800103c:	601d      	str	r5, [r3, #0]
}
 800103e:	bd38      	pop	{r3, r4, r5, pc}
 8001040:	20000010 	.word	0x20000010
 8001044:	2000000c 	.word	0x2000000c
 8001048:	20000014 	.word	0x20000014

0800104c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x20>)
{
 800104e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	f043 0310 	orr.w	r3, r3, #16
 8001058:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	f000 f81b 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff ffd0 	bl	8001004 <HAL_InitTick>
  HAL_MspInit();
 8001064:	f7ff fa4c 	bl	8000500 <HAL_MspInit>
}
 8001068:	2000      	movs	r0, #0
 800106a:	bd08      	pop	{r3, pc}
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001070:	4a03      	ldr	r2, [pc, #12]	; (8001080 <HAL_IncTick+0x10>)
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <HAL_IncTick+0x14>)
 8001074:	6811      	ldr	r1, [r2, #0]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	440b      	add	r3, r1
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000378 	.word	0x20000378
 8001084:	20000010 	.word	0x20000010

08001088 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001088:	4b01      	ldr	r3, [pc, #4]	; (8001090 <HAL_GetTick+0x8>)
 800108a:	6818      	ldr	r0, [r3, #0]
}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000378 	.word	0x20000378

08001094 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001094:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800109a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800109e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80010a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80010ae:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b430      	push	{r4, r5}
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c2:	f1c3 0507 	rsb	r5, r3, #7
 80010c6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c8:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	bf28      	it	cs
 80010ce:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d0:	2c06      	cmp	r4, #6
 80010d2:	d919      	bls.n	8001108 <HAL_NVIC_SetPriority+0x50>
 80010d4:	f04f 34ff 	mov.w	r4, #4294967295
 80010d8:	3b03      	subs	r3, #3
 80010da:	409c      	lsls	r4, r3
 80010dc:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 34ff 	mov.w	r4, #4294967295
 80010e4:	40ac      	lsls	r4, r5
 80010e6:	ea21 0104 	bic.w	r1, r1, r4
 80010ea:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80010ec:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ee:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80010f2:	db0c      	blt.n	800110e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	0109      	lsls	r1, r1, #4
 80010f6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80010fa:	b2c9      	uxtb	r1, r1
 80010fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001100:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001104:	bc30      	pop	{r4, r5}
 8001106:	4770      	bx	lr
 8001108:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	4613      	mov	r3, r2
 800110c:	e7e8      	b.n	80010e0 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_NVIC_SetPriority+0x6c>)
 8001110:	f000 000f 	and.w	r0, r0, #15
 8001114:	0109      	lsls	r1, r1, #4
 8001116:	b2c9      	uxtb	r1, r1
 8001118:	4403      	add	r3, r0
 800111a:	7619      	strb	r1, [r3, #24]
 800111c:	bc30      	pop	{r4, r5}
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00
 8001124:	e000ecfc 	.word	0xe000ecfc

08001128 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001128:	2800      	cmp	r0, #0
 800112a:	db07      	blt.n	800113c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112c:	2301      	movs	r3, #1
 800112e:	f000 011f 	and.w	r1, r0, #31
 8001132:	4a03      	ldr	r2, [pc, #12]	; (8001140 <HAL_NVIC_EnableIRQ+0x18>)
 8001134:	408b      	lsls	r3, r1
 8001136:	0940      	lsrs	r0, r0, #5
 8001138:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	3801      	subs	r0, #1
 8001146:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800114a:	d20d      	bcs.n	8001168 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114c:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	4c06      	ldr	r4, [pc, #24]	; (8001170 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001158:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115e:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8001160:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001162:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001164:	6019      	str	r1, [r3, #0]
 8001166:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001168:	2001      	movs	r0, #1
 800116a:	4770      	bx	lr
 800116c:	e000e010 	.word	0xe000e010
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001174:	b340      	cbz	r0, 80011c8 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001176:	4603      	mov	r3, r0
{
 8001178:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800117a:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800117e:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001182:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8001184:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001186:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001188:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118a:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800118c:	490f      	ldr	r1, [pc, #60]	; (80011cc <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118e:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001190:	4f0f      	ldr	r7, [pc, #60]	; (80011d0 <HAL_DMA_Init+0x5c>)
 8001192:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001194:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001196:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001198:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119c:	4332      	orrs	r2, r6
 800119e:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a0:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a2:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 80011a4:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011a6:	0909      	lsrs	r1, r1, #4
 80011a8:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011aa:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ae:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011b0:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011b4:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011b6:	4907      	ldr	r1, [pc, #28]	; (80011d4 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 80011b8:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 80011ba:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 80011bc:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 80011be:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 80011c0:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c2:	639c      	str	r4, [r3, #56]	; 0x38
}
 80011c4:	bcf0      	pop	{r4, r5, r6, r7}
 80011c6:	4770      	bx	lr
    return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
}
 80011ca:	4770      	bx	lr
 80011cc:	bffdfff8 	.word	0xbffdfff8
 80011d0:	cccccccd 	.word	0xcccccccd
 80011d4:	40020000 	.word	0x40020000

080011d8 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80011dc:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011de:	2a02      	cmp	r2, #2
 80011e0:	d006      	beq.n	80011f0 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	2104      	movs	r1, #4
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e4:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e6:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80011e8:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 80011ec:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 80011ee:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011f0:	2101      	movs	r1, #1
{
 80011f2:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 80011f4:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f8:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011fa:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011fc:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011fe:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001200:	f024 040e 	bic.w	r4, r4, #14
 8001204:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001206:	6814      	ldr	r4, [r2, #0]
  return status; 
 8001208:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800120a:	f024 0401 	bic.w	r4, r4, #1
 800120e:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001212:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001214:	841d      	strh	r5, [r3, #32]
}
 8001216:	bc70      	pop	{r4, r5, r6}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop

0800121c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800121c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8001220:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001222:	2a02      	cmp	r2, #2
 8001224:	d003      	beq.n	800122e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001226:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8001228:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122a:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800122c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122e:	6802      	ldr	r2, [r0, #0]
{  
 8001230:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001232:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001234:	481b      	ldr	r0, [pc, #108]	; (80012a4 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001236:	f021 010e 	bic.w	r1, r1, #14
 800123a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800123c:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800123e:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8001240:	f021 0101 	bic.w	r1, r1, #1
 8001244:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001246:	d021      	beq.n	800128c <HAL_DMA_Abort_IT+0x70>
 8001248:	4917      	ldr	r1, [pc, #92]	; (80012a8 <HAL_DMA_Abort_IT+0x8c>)
 800124a:	428a      	cmp	r2, r1
 800124c:	d01a      	beq.n	8001284 <HAL_DMA_Abort_IT+0x68>
 800124e:	3114      	adds	r1, #20
 8001250:	428a      	cmp	r2, r1
 8001252:	d01d      	beq.n	8001290 <HAL_DMA_Abort_IT+0x74>
 8001254:	3114      	adds	r1, #20
 8001256:	428a      	cmp	r2, r1
 8001258:	d01d      	beq.n	8001296 <HAL_DMA_Abort_IT+0x7a>
 800125a:	3114      	adds	r1, #20
 800125c:	428a      	cmp	r2, r1
 800125e:	d01d      	beq.n	800129c <HAL_DMA_Abort_IT+0x80>
 8001260:	3114      	adds	r1, #20
 8001262:	428a      	cmp	r2, r1
 8001264:	bf0c      	ite	eq
 8001266:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800126a:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 800126e:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001272:	4c0e      	ldr	r4, [pc, #56]	; (80012ac <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8001274:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001276:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001278:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 800127a:	b129      	cbz	r1, 8001288 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 800127c:	4618      	mov	r0, r3
 800127e:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8001280:	2000      	movs	r0, #0
}
 8001282:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001284:	2210      	movs	r2, #16
 8001286:	e7f2      	b.n	800126e <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8001288:	4608      	mov	r0, r1
}
 800128a:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800128c:	2201      	movs	r2, #1
 800128e:	e7ee      	b.n	800126e <HAL_DMA_Abort_IT+0x52>
 8001290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001294:	e7eb      	b.n	800126e <HAL_DMA_Abort_IT+0x52>
 8001296:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800129a:	e7e8      	b.n	800126e <HAL_DMA_Abort_IT+0x52>
 800129c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012a0:	e7e5      	b.n	800126e <HAL_DMA_Abort_IT+0x52>
 80012a2:	bf00      	nop
 80012a4:	40020008 	.word	0x40020008
 80012a8:	4002001c 	.word	0x4002001c
 80012ac:	40020000 	.word	0x40020000

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b4:	680c      	ldr	r4, [r1, #0]
{
 80012b6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b8:	2c00      	cmp	r4, #0
 80012ba:	f000 809e 	beq.w	80013fa <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 80012be:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c0:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 80014b8 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 80012c4:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c6:	4f77      	ldr	r7, [pc, #476]	; (80014a4 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 80012c8:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80014bc <HAL_GPIO_Init+0x20c>
 80012cc:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 80014c0 <HAL_GPIO_Init+0x210>
 80012d0:	9000      	str	r0, [sp, #0]
 80012d2:	e004      	b.n	80012de <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 80012d4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d6:	fa34 f203 	lsrs.w	r2, r4, r3
 80012da:	f000 808e 	beq.w	80013fa <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 80012de:	2201      	movs	r2, #1
 80012e0:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80012e2:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 80012ea:	d1f3      	bne.n	80012d4 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80012ec:	684c      	ldr	r4, [r1, #4]
 80012ee:	2c12      	cmp	r4, #18
 80012f0:	f200 8086 	bhi.w	8001400 <HAL_GPIO_Init+0x150>
 80012f4:	2c12      	cmp	r4, #18
 80012f6:	d80c      	bhi.n	8001312 <HAL_GPIO_Init+0x62>
 80012f8:	e8df f004 	tbb	[pc, r4]
 80012fc:	0abcbf8a 	.word	0x0abcbf8a
 8001300:	0b0b0b0b 	.word	0x0b0b0b0b
 8001304:	0b0b0b0b 	.word	0x0b0b0b0b
 8001308:	0b0b0b0b 	.word	0x0b0b0b0b
 800130c:	b90b      	.short	0xb90b
 800130e:	b6          	.byte	0xb6
 800130f:	00          	.byte	0x00
 8001310:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001312:	2dff      	cmp	r5, #255	; 0xff
 8001314:	f200 8083 	bhi.w	800141e <HAL_GPIO_Init+0x16e>
 8001318:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800131c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001320:	240f      	movs	r4, #15
 8001322:	f8d9 2000 	ldr.w	r2, [r9]
 8001326:	fa04 fb0a 	lsl.w	fp, r4, sl
 800132a:	ea22 020b 	bic.w	r2, r2, fp
 800132e:	fa06 fa0a 	lsl.w	sl, r6, sl
 8001332:	ea42 020a 	orr.w	r2, r2, sl
 8001336:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800133e:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8001342:	f000 808f 	beq.w	8001464 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001346:	f8dc a018 	ldr.w	sl, [ip, #24]
 800134a:	f023 0203 	bic.w	r2, r3, #3
 800134e:	f04a 0a01 	orr.w	sl, sl, #1
 8001352:	f8cc a018 	str.w	sl, [ip, #24]
 8001356:	f8dc a018 	ldr.w	sl, [ip, #24]
 800135a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800135e:	f00a 0a01 	and.w	sl, sl, #1
 8001362:	f8cd a00c 	str.w	sl, [sp, #12]
 8001366:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800136a:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800136e:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001372:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001376:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137a:	fa04 f40a 	lsl.w	r4, r4, sl
 800137e:	ea2b 0004 	bic.w	r0, fp, r4
 8001382:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001384:	9c00      	ldr	r4, [sp, #0]
 8001386:	4848      	ldr	r0, [pc, #288]	; (80014a8 <HAL_GPIO_Init+0x1f8>)
 8001388:	4284      	cmp	r4, r0
 800138a:	d013      	beq.n	80013b4 <HAL_GPIO_Init+0x104>
 800138c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001390:	4284      	cmp	r4, r0
 8001392:	d07d      	beq.n	8001490 <HAL_GPIO_Init+0x1e0>
 8001394:	4845      	ldr	r0, [pc, #276]	; (80014ac <HAL_GPIO_Init+0x1fc>)
 8001396:	4284      	cmp	r4, r0
 8001398:	d071      	beq.n	800147e <HAL_GPIO_Init+0x1ce>
 800139a:	4845      	ldr	r0, [pc, #276]	; (80014b0 <HAL_GPIO_Init+0x200>)
 800139c:	4284      	cmp	r4, r0
 800139e:	bf0c      	ite	eq
 80013a0:	f04f 0b03 	moveq.w	fp, #3
 80013a4:	f04f 0b04 	movne.w	fp, #4
 80013a8:	9801      	ldr	r0, [sp, #4]
 80013aa:	fa0b fa0a 	lsl.w	sl, fp, sl
 80013ae:	ea40 000a 	orr.w	r0, r0, sl
 80013b2:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80013b4:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b6:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 80013ba:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	bf14      	ite	ne
 80013c0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013c2:	43aa      	biceq	r2, r5
 80013c4:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80013c6:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c8:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80013cc:	bf14      	ite	ne
 80013ce:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013d0:	43aa      	biceq	r2, r5
 80013d2:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d4:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d6:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80013da:	bf14      	ite	ne
 80013dc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013de:	43aa      	biceq	r2, r5
 80013e0:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e2:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e6:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e8:	d039      	beq.n	800145e <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 80013ea:	4315      	orrs	r5, r2
 80013ec:	60fd      	str	r5, [r7, #12]
 80013ee:	680c      	ldr	r4, [r1, #0]
	position++;
 80013f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	fa34 f203 	lsrs.w	r2, r4, r3
 80013f6:	f47f af72 	bne.w	80012de <HAL_GPIO_Init+0x2e>
  }
}
 80013fa:	b005      	add	sp, #20
 80013fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001400:	4544      	cmp	r4, r8
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x160>
 8001404:	d913      	bls.n	800142e <HAL_GPIO_Init+0x17e>
 8001406:	4574      	cmp	r4, lr
 8001408:	d002      	beq.n	8001410 <HAL_GPIO_Init+0x160>
 800140a:	482a      	ldr	r0, [pc, #168]	; (80014b4 <HAL_GPIO_Init+0x204>)
 800140c:	4284      	cmp	r4, r0
 800140e:	d180      	bne.n	8001312 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001410:	688c      	ldr	r4, [r1, #8]
 8001412:	b9e4      	cbnz	r4, 800144e <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001414:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001416:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800141a:	f67f af7d 	bls.w	8001318 <HAL_GPIO_Init+0x68>
 800141e:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001420:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001424:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001428:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800142c:	e778      	b.n	8001320 <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 800142e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80014c4 <HAL_GPIO_Init+0x214>
 8001432:	454c      	cmp	r4, r9
 8001434:	d0ec      	beq.n	8001410 <HAL_GPIO_Init+0x160>
 8001436:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800143a:	454c      	cmp	r4, r9
 800143c:	d0e8      	beq.n	8001410 <HAL_GPIO_Init+0x160>
 800143e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001442:	454c      	cmp	r4, r9
 8001444:	f47f af65 	bne.w	8001312 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001448:	688c      	ldr	r4, [r1, #8]
 800144a:	2c00      	cmp	r4, #0
 800144c:	d0e2      	beq.n	8001414 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 800144e:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001450:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001452:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8001456:	bf0c      	ite	eq
 8001458:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 800145a:	6142      	strne	r2, [r0, #20]
 800145c:	e759      	b.n	8001312 <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800145e:	ea22 0505 	bic.w	r5, r2, r5
 8001462:	60fd      	str	r5, [r7, #12]
 8001464:	680c      	ldr	r4, [r1, #0]
 8001466:	e735      	b.n	80012d4 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001468:	68ce      	ldr	r6, [r1, #12]
 800146a:	360c      	adds	r6, #12
          break;
 800146c:	e751      	b.n	8001312 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800146e:	68ce      	ldr	r6, [r1, #12]
 8001470:	3604      	adds	r6, #4
          break;
 8001472:	e74e      	b.n	8001312 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001474:	68ce      	ldr	r6, [r1, #12]
 8001476:	3608      	adds	r6, #8
          break;
 8001478:	e74b      	b.n	8001312 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800147a:	68ce      	ldr	r6, [r1, #12]
          break;
 800147c:	e749      	b.n	8001312 <HAL_GPIO_Init+0x62>
 800147e:	f04f 0b02 	mov.w	fp, #2
 8001482:	9801      	ldr	r0, [sp, #4]
 8001484:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001488:	ea40 000a 	orr.w	r0, r0, sl
 800148c:	9001      	str	r0, [sp, #4]
 800148e:	e791      	b.n	80013b4 <HAL_GPIO_Init+0x104>
 8001490:	f04f 0b01 	mov.w	fp, #1
 8001494:	9801      	ldr	r0, [sp, #4]
 8001496:	fa0b fa0a 	lsl.w	sl, fp, sl
 800149a:	ea40 000a 	orr.w	r0, r0, sl
 800149e:	9001      	str	r0, [sp, #4]
 80014a0:	e788      	b.n	80013b4 <HAL_GPIO_Init+0x104>
 80014a2:	bf00      	nop
 80014a4:	40010400 	.word	0x40010400
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40011400 	.word	0x40011400
 80014b4:	10320000 	.word	0x10320000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	10220000 	.word	0x10220000
 80014c0:	10310000 	.word	0x10310000
 80014c4:	10120000 	.word	0x10120000

080014c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c8:	b902      	cbnz	r2, 80014cc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ca:	0409      	lsls	r1, r1, #16
 80014cc:	6101      	str	r1, [r0, #16]
  }
}
 80014ce:	4770      	bx	lr

080014d0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014d0:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014d2:	ea01 0203 	and.w	r2, r1, r3
 80014d6:	ea21 0103 	bic.w	r1, r1, r3
 80014da:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80014de:	6101      	str	r1, [r0, #16]
}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e4:	2800      	cmp	r0, #0
 80014e6:	f000 81c3 	beq.w	8001870 <HAL_RCC_OscConfig+0x38c>
{
 80014ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ee:	6803      	ldr	r3, [r0, #0]
 80014f0:	4604      	mov	r4, r0
 80014f2:	07dd      	lsls	r5, r3, #31
{
 80014f4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	d535      	bpl.n	8001564 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f8:	49a6      	ldr	r1, [pc, #664]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 80014fa:	684a      	ldr	r2, [r1, #4]
 80014fc:	f002 020c 	and.w	r2, r2, #12
 8001500:	2a04      	cmp	r2, #4
 8001502:	f000 80ef 	beq.w	80016e4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001506:	684a      	ldr	r2, [r1, #4]
 8001508:	f002 020c 	and.w	r2, r2, #12
 800150c:	2a08      	cmp	r2, #8
 800150e:	f000 80e5 	beq.w	80016dc <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001512:	6863      	ldr	r3, [r4, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d010      	beq.n	800153c <HAL_RCC_OscConfig+0x58>
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 810d 	beq.w	800173a <HAL_RCC_OscConfig+0x256>
 8001520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001524:	f000 818f 	beq.w	8001846 <HAL_RCC_OscConfig+0x362>
 8001528:	4b9a      	ldr	r3, [pc, #616]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e004      	b.n	8001546 <HAL_RCC_OscConfig+0x62>
 800153c:	4a95      	ldr	r2, [pc, #596]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 800153e:	6813      	ldr	r3, [r2, #0]
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fd9f 	bl	8001088 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4e92      	ldr	r6, [pc, #584]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800154c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	e005      	b.n	800155c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fd9a 	bl	8001088 <HAL_GetTick>
 8001554:	1b40      	subs	r0, r0, r5
 8001556:	2864      	cmp	r0, #100	; 0x64
 8001558:	f200 80eb 	bhi.w	8001732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155c:	6833      	ldr	r3, [r6, #0]
 800155e:	039a      	lsls	r2, r3, #14
 8001560:	d5f6      	bpl.n	8001550 <HAL_RCC_OscConfig+0x6c>
 8001562:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001564:	079f      	lsls	r7, r3, #30
 8001566:	d528      	bpl.n	80015ba <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001568:	4a8a      	ldr	r2, [pc, #552]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 800156a:	6851      	ldr	r1, [r2, #4]
 800156c:	f011 0f0c 	tst.w	r1, #12
 8001570:	f000 808e 	beq.w	8001690 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001574:	6851      	ldr	r1, [r2, #4]
 8001576:	f001 010c 	and.w	r1, r1, #12
 800157a:	2908      	cmp	r1, #8
 800157c:	f000 8084 	beq.w	8001688 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001580:	6923      	ldr	r3, [r4, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8125 	beq.w	80017d2 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001588:	2201      	movs	r2, #1
 800158a:	4b83      	ldr	r3, [pc, #524]	; (8001798 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	4e81      	ldr	r6, [pc, #516]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 800158e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001590:	f7ff fd7a 	bl	8001088 <HAL_GetTick>
 8001594:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	e005      	b.n	80015a4 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fd76 	bl	8001088 <HAL_GetTick>
 800159c:	1b40      	subs	r0, r0, r5
 800159e:	2802      	cmp	r0, #2
 80015a0:	f200 80c7 	bhi.w	8001732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	6833      	ldr	r3, [r6, #0]
 80015a6:	0798      	lsls	r0, r3, #30
 80015a8:	d5f6      	bpl.n	8001598 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	6833      	ldr	r3, [r6, #0]
 80015ac:	6962      	ldr	r2, [r4, #20]
 80015ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015b6:	6033      	str	r3, [r6, #0]
 80015b8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ba:	071a      	lsls	r2, r3, #28
 80015bc:	d41f      	bmi.n	80015fe <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015be:	075d      	lsls	r5, r3, #29
 80015c0:	d541      	bpl.n	8001646 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c2:	4b74      	ldr	r3, [pc, #464]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	00d0      	lsls	r0, r2, #3
 80015c8:	d57d      	bpl.n	80016c6 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	4b73      	ldr	r3, [pc, #460]	; (800179c <HAL_RCC_OscConfig+0x2b8>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	05d1      	lsls	r1, r2, #23
 80015d2:	f140 809d 	bpl.w	8001710 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d6:	68e3      	ldr	r3, [r4, #12]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	f000 810b 	beq.w	80017f4 <HAL_RCC_OscConfig+0x310>
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80c5 	beq.w	800176e <HAL_RCC_OscConfig+0x28a>
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	4b6b      	ldr	r3, [pc, #428]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 80015e8:	6a1a      	ldr	r2, [r3, #32]
 80015ea:	f000 8139 	beq.w	8001860 <HAL_RCC_OscConfig+0x37c>
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	621a      	str	r2, [r3, #32]
 80015f4:	6a1a      	ldr	r2, [r3, #32]
 80015f6:	f022 0204 	bic.w	r2, r2, #4
 80015fa:	621a      	str	r2, [r3, #32]
 80015fc:	e0ff      	b.n	80017fe <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fe:	69a3      	ldr	r3, [r4, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d050      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8001604:	2201      	movs	r2, #1
 8001606:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001608:	4e62      	ldr	r6, [pc, #392]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 800160a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800160c:	f7ff fd3c 	bl	8001088 <HAL_GetTick>
 8001610:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	e005      	b.n	8001620 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fd38 	bl	8001088 <HAL_GetTick>
 8001618:	1b40      	subs	r0, r0, r5
 800161a:	2802      	cmp	r0, #2
 800161c:	f200 8089 	bhi.w	8001732 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001620:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001622:	079b      	lsls	r3, r3, #30
 8001624:	d5f6      	bpl.n	8001614 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <HAL_RCC_OscConfig+0x2c0>)
 8001628:	4a5f      	ldr	r2, [pc, #380]	; (80017a8 <HAL_RCC_OscConfig+0x2c4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	0a5b      	lsrs	r3, r3, #9
 8001632:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001634:	bf00      	nop
  }
  while (Delay --);
 8001636:	9b01      	ldr	r3, [sp, #4]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	9201      	str	r2, [sp, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <HAL_RCC_OscConfig+0x150>
 8001640:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001642:	075d      	lsls	r5, r3, #29
 8001644:	d4bd      	bmi.n	80015c2 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001646:	69e0      	ldr	r0, [r4, #28]
 8001648:	b1d0      	cbz	r0, 8001680 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164a:	4d52      	ldr	r5, [pc, #328]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 800164c:	686a      	ldr	r2, [r5, #4]
 800164e:	f002 020c 	and.w	r2, r2, #12
 8001652:	2a08      	cmp	r2, #8
 8001654:	f000 80e6 	beq.w	8001824 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001658:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800165a:	f04f 0100 	mov.w	r1, #0
 800165e:	4a53      	ldr	r2, [pc, #332]	; (80017ac <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001660:	f000 8108 	beq.w	8001874 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8001664:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001666:	f7ff fd0f 	bl	8001088 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800166c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166e:	e004      	b.n	800167a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fd0a 	bl	8001088 <HAL_GetTick>
 8001674:	1b40      	subs	r0, r0, r5
 8001676:	2802      	cmp	r0, #2
 8001678:	d85b      	bhi.n	8001732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	019b      	lsls	r3, r3, #6
 800167e:	d4f7      	bmi.n	8001670 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8001680:	2000      	movs	r0, #0
}
 8001682:	b002      	add	sp, #8
 8001684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001688:	6852      	ldr	r2, [r2, #4]
 800168a:	03d6      	lsls	r6, r2, #15
 800168c:	f53f af78 	bmi.w	8001580 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001690:	4a40      	ldr	r2, [pc, #256]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	0795      	lsls	r5, r2, #30
 8001696:	d52f      	bpl.n	80016f8 <HAL_RCC_OscConfig+0x214>
 8001698:	6922      	ldr	r2, [r4, #16]
 800169a:	2a01      	cmp	r2, #1
 800169c:	d02c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800169e:	2001      	movs	r0, #1
}
 80016a0:	b002      	add	sp, #8
 80016a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80016a6:	4a3e      	ldr	r2, [pc, #248]	; (80017a0 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	4e3a      	ldr	r6, [pc, #232]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 80016aa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80016ac:	f7ff fcec 	bl	8001088 <HAL_GetTick>
 80016b0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b2:	e004      	b.n	80016be <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fce8 	bl	8001088 <HAL_GetTick>
 80016b8:	1b40      	subs	r0, r0, r5
 80016ba:	2802      	cmp	r0, #2
 80016bc:	d839      	bhi.n	8001732 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80016c0:	079f      	lsls	r7, r3, #30
 80016c2:	d4f7      	bmi.n	80016b4 <HAL_RCC_OscConfig+0x1d0>
 80016c4:	e7bc      	b.n	8001640 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80016c8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016ce:	61da      	str	r2, [r3, #28]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80016da:	e777      	b.n	80015cc <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016dc:	684a      	ldr	r2, [r1, #4]
 80016de:	03d0      	lsls	r0, r2, #15
 80016e0:	f57f af17 	bpl.w	8001512 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	0391      	lsls	r1, r2, #14
 80016ea:	f57f af3b 	bpl.w	8001564 <HAL_RCC_OscConfig+0x80>
 80016ee:	6862      	ldr	r2, [r4, #4]
 80016f0:	2a00      	cmp	r2, #0
 80016f2:	f47f af37 	bne.w	8001564 <HAL_RCC_OscConfig+0x80>
 80016f6:	e7d2      	b.n	800169e <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4926      	ldr	r1, [pc, #152]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 80016fa:	6960      	ldr	r0, [r4, #20]
 80016fc:	680a      	ldr	r2, [r1, #0]
 80016fe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001702:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001706:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	071a      	lsls	r2, r3, #28
 800170a:	f57f af58 	bpl.w	80015be <HAL_RCC_OscConfig+0xda>
 800170e:	e776      	b.n	80015fe <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001710:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001718:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800171a:	f7ff fcb5 	bl	8001088 <HAL_GetTick>
 800171e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	05da      	lsls	r2, r3, #23
 8001724:	f53f af57 	bmi.w	80015d6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001728:	f7ff fcae 	bl	8001088 <HAL_GetTick>
 800172c:	1b80      	subs	r0, r0, r6
 800172e:	2864      	cmp	r0, #100	; 0x64
 8001730:	d9f6      	bls.n	8001720 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 8001732:	2003      	movs	r0, #3
}
 8001734:	b002      	add	sp, #8
 8001736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800173e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001742:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001744:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001746:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001752:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001754:	f7ff fc98 	bl	8001088 <HAL_GetTick>
 8001758:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	e004      	b.n	8001766 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fc94 	bl	8001088 <HAL_GetTick>
 8001760:	1b40      	subs	r0, r0, r5
 8001762:	2864      	cmp	r0, #100	; 0x64
 8001764:	d8e5      	bhi.n	8001732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	6833      	ldr	r3, [r6, #0]
 8001768:	039b      	lsls	r3, r3, #14
 800176a:	d4f7      	bmi.n	800175c <HAL_RCC_OscConfig+0x278>
 800176c:	e6f9      	b.n	8001562 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001772:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001776:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001778:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	621a      	str	r2, [r3, #32]
 8001780:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 800178c:	f7ff fc7c 	bl	8001088 <HAL_GetTick>
 8001790:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	e012      	b.n	80017ba <HAL_RCC_OscConfig+0x2d6>
 8001794:	40021000 	.word	0x40021000
 8001798:	42420000 	.word	0x42420000
 800179c:	40007000 	.word	0x40007000
 80017a0:	42420480 	.word	0x42420480
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	10624dd3 	.word	0x10624dd3
 80017ac:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7ff fc6a 	bl	8001088 <HAL_GetTick>
 80017b4:	1b80      	subs	r0, r0, r6
 80017b6:	4540      	cmp	r0, r8
 80017b8:	d8bb      	bhi.n	8001732 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	0798      	lsls	r0, r3, #30
 80017be:	d4f7      	bmi.n	80017b0 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 80017c0:	2d00      	cmp	r5, #0
 80017c2:	f43f af40 	beq.w	8001646 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4a44      	ldr	r2, [pc, #272]	; (80018d8 <HAL_RCC_OscConfig+0x3f4>)
 80017c8:	69d3      	ldr	r3, [r2, #28]
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ce:	61d3      	str	r3, [r2, #28]
 80017d0:	e739      	b.n	8001646 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4a42      	ldr	r2, [pc, #264]	; (80018dc <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d4:	4e40      	ldr	r6, [pc, #256]	; (80018d8 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 80017d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017d8:	f7ff fc56 	bl	8001088 <HAL_GetTick>
 80017dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e004      	b.n	80017ea <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc52 	bl	8001088 <HAL_GetTick>
 80017e4:	1b40      	subs	r0, r0, r5
 80017e6:	2802      	cmp	r0, #2
 80017e8:	d8a3      	bhi.n	8001732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	6833      	ldr	r3, [r6, #0]
 80017ec:	0799      	lsls	r1, r3, #30
 80017ee:	d4f7      	bmi.n	80017e0 <HAL_RCC_OscConfig+0x2fc>
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	e6e2      	b.n	80015ba <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f4:	4a38      	ldr	r2, [pc, #224]	; (80018d8 <HAL_RCC_OscConfig+0x3f4>)
 80017f6:	6a13      	ldr	r3, [r2, #32]
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80017fe:	f7ff fc43 	bl	8001088 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001806:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001808:	4f33      	ldr	r7, [pc, #204]	; (80018d8 <HAL_RCC_OscConfig+0x3f4>)
 800180a:	e004      	b.n	8001816 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff fc3c 	bl	8001088 <HAL_GetTick>
 8001810:	1b80      	subs	r0, r0, r6
 8001812:	4540      	cmp	r0, r8
 8001814:	d88d      	bhi.n	8001732 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	079b      	lsls	r3, r3, #30
 800181a:	d5f7      	bpl.n	800180c <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 800181c:	2d00      	cmp	r5, #0
 800181e:	f43f af12 	beq.w	8001646 <HAL_RCC_OscConfig+0x162>
 8001822:	e7d0      	b.n	80017c6 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	2801      	cmp	r0, #1
 8001826:	f43f af2c 	beq.w	8001682 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 800182a:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182c:	6a22      	ldr	r2, [r4, #32]
 800182e:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001832:	4291      	cmp	r1, r2
 8001834:	f47f af33 	bne.w	800169e <HAL_RCC_OscConfig+0x1ba>
 8001838:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800183a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800183e:	1a18      	subs	r0, r3, r0
 8001840:	bf18      	it	ne
 8001842:	2001      	movne	r0, #1
 8001844:	e71d      	b.n	8001682 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001846:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800184a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e672      	b.n	8001546 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001860:	f042 0204 	orr.w	r2, r2, #4
 8001864:	621a      	str	r2, [r3, #32]
 8001866:	6a1a      	ldr	r2, [r3, #32]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	621a      	str	r2, [r3, #32]
 800186e:	e7c6      	b.n	80017fe <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
}
 8001872:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8001874:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001876:	f7ff fc07 	bl	8001088 <HAL_GetTick>
 800187a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187c:	e005      	b.n	800188a <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff fc03 	bl	8001088 <HAL_GetTick>
 8001882:	1b80      	subs	r0, r0, r6
 8001884:	2802      	cmp	r0, #2
 8001886:	f63f af54 	bhi.w	8001732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	682b      	ldr	r3, [r5, #0]
 800188c:	0199      	lsls	r1, r3, #6
 800188e:	d4f6      	bmi.n	800187e <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001890:	6a23      	ldr	r3, [r4, #32]
 8001892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001896:	d105      	bne.n	80018a4 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001898:	686a      	ldr	r2, [r5, #4]
 800189a:	68a1      	ldr	r1, [r4, #8]
 800189c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80018a0:	430a      	orrs	r2, r1
 80018a2:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018a4:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a6:	4d0c      	ldr	r5, [pc, #48]	; (80018d8 <HAL_RCC_OscConfig+0x3f4>)
 80018a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018aa:	686a      	ldr	r2, [r5, #4]
 80018ac:	430b      	orrs	r3, r1
 80018ae:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80018b2:	490b      	ldr	r1, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b4:	4313      	orrs	r3, r2
 80018b6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018b8:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 80018ba:	f7ff fbe5 	bl	8001088 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018be:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80018c0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c2:	e005      	b.n	80018d0 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fbe0 	bl	8001088 <HAL_GetTick>
 80018c8:	1b40      	subs	r0, r0, r5
 80018ca:	2802      	cmp	r0, #2
 80018cc:	f63f af31 	bhi.w	8001732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	019a      	lsls	r2, r3, #6
 80018d4:	d5f6      	bpl.n	80018c4 <HAL_RCC_OscConfig+0x3e0>
 80018d6:	e6d3      	b.n	8001680 <HAL_RCC_OscConfig+0x19c>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	42420000 	.word	0x42420000
 80018e0:	42420060 	.word	0x42420060

080018e4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80018e4:	2800      	cmp	r0, #0
 80018e6:	f000 80af 	beq.w	8001a48 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ea:	4a5d      	ldr	r2, [pc, #372]	; (8001a60 <HAL_RCC_ClockConfig+0x17c>)
{
 80018ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	6813      	ldr	r3, [r2, #0]
 80018f2:	4604      	mov	r4, r0
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	428b      	cmp	r3, r1
 80018fa:	460d      	mov	r5, r1
{
 80018fc:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018fe:	d20d      	bcs.n	800191c <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	f023 0307 	bic.w	r3, r3, #7
 8001906:	430b      	orrs	r3, r1
 8001908:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	6813      	ldr	r3, [r2, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	428b      	cmp	r3, r1
 8001912:	d003      	beq.n	800191c <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8001914:	2001      	movs	r0, #1
}
 8001916:	b006      	add	sp, #24
 8001918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	0798      	lsls	r0, r3, #30
 8001920:	d514      	bpl.n	800194c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001922:	0759      	lsls	r1, r3, #29
 8001924:	d504      	bpl.n	8001930 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001926:	494f      	ldr	r1, [pc, #316]	; (8001a64 <HAL_RCC_ClockConfig+0x180>)
 8001928:	684a      	ldr	r2, [r1, #4]
 800192a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800192e:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	071a      	lsls	r2, r3, #28
 8001932:	d504      	bpl.n	800193e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001934:	494b      	ldr	r1, [pc, #300]	; (8001a64 <HAL_RCC_ClockConfig+0x180>)
 8001936:	684a      	ldr	r2, [r1, #4]
 8001938:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800193c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193e:	4949      	ldr	r1, [pc, #292]	; (8001a64 <HAL_RCC_ClockConfig+0x180>)
 8001940:	68a0      	ldr	r0, [r4, #8]
 8001942:	684a      	ldr	r2, [r1, #4]
 8001944:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001948:	4302      	orrs	r2, r0
 800194a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194c:	07db      	lsls	r3, r3, #31
 800194e:	d520      	bpl.n	8001992 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001950:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001954:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001958:	d078      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195a:	2a02      	cmp	r2, #2
 800195c:	d071      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	0798      	lsls	r0, r3, #30
 8001960:	d5d8      	bpl.n	8001914 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001962:	4e40      	ldr	r6, [pc, #256]	; (8001a64 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001968:	6873      	ldr	r3, [r6, #4]
 800196a:	f023 0303 	bic.w	r3, r3, #3
 800196e:	4313      	orrs	r3, r2
 8001970:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001972:	f7ff fb89 	bl	8001088 <HAL_GetTick>
 8001976:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001978:	e004      	b.n	8001984 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197a:	f7ff fb85 	bl	8001088 <HAL_GetTick>
 800197e:	1bc0      	subs	r0, r0, r7
 8001980:	4540      	cmp	r0, r8
 8001982:	d866      	bhi.n	8001a52 <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001984:	6873      	ldr	r3, [r6, #4]
 8001986:	6862      	ldr	r2, [r4, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001990:	d1f3      	bne.n	800197a <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001992:	4a33      	ldr	r2, [pc, #204]	; (8001a60 <HAL_RCC_ClockConfig+0x17c>)
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	42ab      	cmp	r3, r5
 800199c:	d909      	bls.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	6813      	ldr	r3, [r2, #0]
 80019a0:	f023 0307 	bic.w	r3, r3, #7
 80019a4:	432b      	orrs	r3, r5
 80019a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a8:	6813      	ldr	r3, [r2, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	42ab      	cmp	r3, r5
 80019b0:	d1b0      	bne.n	8001914 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	0759      	lsls	r1, r3, #29
 80019b6:	d506      	bpl.n	80019c6 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	492a      	ldr	r1, [pc, #168]	; (8001a64 <HAL_RCC_ClockConfig+0x180>)
 80019ba:	68e0      	ldr	r0, [r4, #12]
 80019bc:	684a      	ldr	r2, [r1, #4]
 80019be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019c2:	4302      	orrs	r2, r0
 80019c4:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c6:	071a      	lsls	r2, r3, #28
 80019c8:	d507      	bpl.n	80019da <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ca:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_RCC_ClockConfig+0x180>)
 80019cc:	6921      	ldr	r1, [r4, #16]
 80019ce:	6853      	ldr	r3, [r2, #4]
 80019d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019d8:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019da:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_RCC_ClockConfig+0x184>)
 80019e0:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019e2:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80019ec:	491d      	ldr	r1, [pc, #116]	; (8001a64 <HAL_RCC_ClockConfig+0x180>)
 80019ee:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019f0:	f002 030c 	and.w	r3, r2, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d011      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fa:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <HAL_RCC_ClockConfig+0x180>)
 80019fc:	481c      	ldr	r0, [pc, #112]	; (8001a70 <HAL_RCC_ClockConfig+0x18c>)
 80019fe:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8001a00:	491c      	ldr	r1, [pc, #112]	; (8001a74 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a02:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001a06:	5c80      	ldrb	r0, [r0, r2]
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <HAL_RCC_ClockConfig+0x194>)
 8001a0a:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8001a0c:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a0e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001a10:	f7ff faf8 	bl	8001004 <HAL_InitTick>
  return HAL_OK;
 8001a14:	2000      	movs	r0, #0
}
 8001a16:	b006      	add	sp, #24
 8001a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a1c:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001a20:	4423      	add	r3, r4
 8001a22:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a26:	03d3      	lsls	r3, r2, #15
 8001a28:	d515      	bpl.n	8001a56 <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a2a:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a2e:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a32:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a36:	4422      	add	r2, r4
 8001a38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a40:	e7db      	b.n	80019fa <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	019e      	lsls	r6, r3, #6
 8001a44:	d48d      	bmi.n	8001962 <HAL_RCC_ClockConfig+0x7e>
 8001a46:	e765      	b.n	8001914 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001a48:	2001      	movs	r0, #1
}
 8001a4a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4c:	039f      	lsls	r7, r3, #14
 8001a4e:	d488      	bmi.n	8001962 <HAL_RCC_ClockConfig+0x7e>
 8001a50:	e760      	b.n	8001914 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
 8001a54:	e75f      	b.n	8001916 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_ClockConfig+0x198>)
 8001a58:	fb03 f300 	mul.w	r3, r3, r0
 8001a5c:	e7cd      	b.n	80019fa <HAL_RCC_ClockConfig+0x116>
 8001a5e:	bf00      	nop
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	08002618 	.word	0x08002618
 8001a6c:	007a1200 	.word	0x007a1200
 8001a70:	08002600 	.word	0x08002600
 8001a74:	20000014 	.word	0x20000014
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	003d0900 	.word	0x003d0900

08001a80 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a82:	4905      	ldr	r1, [pc, #20]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a84:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a88:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	6810      	ldr	r0, [r2, #0]
}
 8001a90:	40d8      	lsrs	r0, r3
 8001a92:	4770      	bx	lr
 8001a94:	40021000 	.word	0x40021000
 8001a98:	08002610 	.word	0x08002610
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001aa2:	4905      	ldr	r1, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001aac:	5ccb      	ldrb	r3, [r1, r3]
 8001aae:	6810      	ldr	r0, [r2, #0]
}
 8001ab0:	40d8      	lsrs	r0, r3
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	08002610 	.word	0x08002610
 8001abc:	2000000c 	.word	0x2000000c

08001ac0 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d055      	beq.n	8001b70 <HAL_SPI_Init+0xb0>
{
 8001ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ac6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ac8:	4604      	mov	r4, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d041      	beq.n	8001b52 <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ace:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ad0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad4:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ad6:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ada:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001adc:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8001ae0:	2900      	cmp	r1, #0
 8001ae2:	d03c      	beq.n	8001b5e <HAL_SPI_Init+0x9e>
 8001ae4:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ae6:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001aea:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001aec:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001aee:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001af0:	68e1      	ldr	r1, [r4, #12]
 8001af2:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001af6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001afa:	4303      	orrs	r3, r0
 8001afc:	6920      	ldr	r0, [r4, #16]
 8001afe:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8001b02:	4038      	ands	r0, r7
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6961      	ldr	r1, [r4, #20]
 8001b08:	4303      	orrs	r3, r0
 8001b0a:	69a0      	ldr	r0, [r4, #24]
 8001b0c:	4031      	ands	r1, r6
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8001b14:	430b      	orrs	r3, r1
 8001b16:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b18:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b1c:	6a27      	ldr	r7, [r4, #32]
 8001b1e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001b22:	430b      	orrs	r3, r1
 8001b24:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8001b28:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b2a:	433b      	orrs	r3, r7
 8001b2c:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8001b2e:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b30:	0c00      	lsrs	r0, r0, #16
 8001b32:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8001b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3a:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b3c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b3e:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b40:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 8001b42:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b48:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b4a:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b4c:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8001b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b52:	6842      	ldr	r2, [r0, #4]
 8001b54:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001b58:	d0bc      	beq.n	8001ad4 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b5a:	61c3      	str	r3, [r0, #28]
 8001b5c:	e7ba      	b.n	8001ad4 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8001b5e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7fe fcee 	bl	8000544 <HAL_SPI_MspInit>
 8001b68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b6e:	e7ba      	b.n	8001ae6 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
}
 8001b72:	4770      	bx	lr

08001b74 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d05d      	beq.n	8001c34 <HAL_TIM_Base_Init+0xc0>
{
 8001b78:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b7e:	4604      	mov	r4, r0
 8001b80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d03c      	beq.n	8001c02 <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b8c:	492a      	ldr	r1, [pc, #168]	; (8001c38 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b92:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8001b94:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b96:	d039      	beq.n	8001c0c <HAL_TIM_Base_Init+0x98>
 8001b98:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001b9c:	d028      	beq.n	8001bf0 <HAL_TIM_Base_Init+0x7c>
 8001b9e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8001ba2:	428a      	cmp	r2, r1
 8001ba4:	d024      	beq.n	8001bf0 <HAL_TIM_Base_Init+0x7c>
 8001ba6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001baa:	428a      	cmp	r2, r1
 8001bac:	d020      	beq.n	8001bf0 <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bae:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb0:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bb2:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001bba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bbc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001bbe:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001bcc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001bd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001bd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001be0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001be4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001be8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001bec:	2000      	movs	r0, #0
}
 8001bee:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8001bf0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001bf6:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bf8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	e7d5      	b.n	8001bae <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 8001c02:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c06:	f7fe fcf1 	bl	80005ec <HAL_TIM_Base_MspInit>
 8001c0a:	e7bd      	b.n	8001b88 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8001c0c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c12:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c14:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c1a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c1c:	69a1      	ldr	r1, [r4, #24]
 8001c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c22:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001c24:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c26:	68e3      	ldr	r3, [r4, #12]
 8001c28:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001c2a:	6863      	ldr	r3, [r4, #4]
 8001c2c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001c2e:	6963      	ldr	r3, [r4, #20]
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	e7c5      	b.n	8001bc0 <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 8001c34:	2001      	movs	r0, #1
}
 8001c36:	4770      	bx	lr
 8001c38:	40012c00 	.word	0x40012c00

08001c3c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001c3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d11f      	bne.n	8001c84 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c46:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c4c:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c4e:	490f      	ldr	r1, [pc, #60]	; (8001c8c <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c50:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c54:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c56:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c58:	d009      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x32>
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5e:	d006      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x32>
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_TIM_Base_Start_IT+0x54>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x32>
 8001c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d104      	bne.n	8001c78 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c74:	2a06      	cmp	r2, #6
 8001c76:	d007      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8001c78:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001c7a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	4770      	bx	lr
    return HAL_ERROR;
 8001c84:	2001      	movs	r0, #1
 8001c86:	4770      	bx	lr
  return HAL_OK;
 8001c88:	2000      	movs	r0, #0
}
 8001c8a:	4770      	bx	lr
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40000400 	.word	0x40000400

08001c94 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001c94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d074      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0xf2>
{
 8001c9c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9e:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8001ca0:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 8001ca2:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8001ca4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001cac:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001cae:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cb0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8001cb4:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8001cb8:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8001cba:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001cbc:	d065      	beq.n	8001d8a <HAL_TIM_ConfigClockSource+0xf6>
 8001cbe:	d831      	bhi.n	8001d24 <HAL_TIM_ConfigClockSource+0x90>
 8001cc0:	2b40      	cmp	r3, #64	; 0x40
 8001cc2:	d048      	beq.n	8001d56 <HAL_TIM_ConfigClockSource+0xc2>
 8001cc4:	d921      	bls.n	8001d0a <HAL_TIM_ConfigClockSource+0x76>
 8001cc6:	2b50      	cmp	r3, #80	; 0x50
 8001cc8:	d116      	bne.n	8001cf8 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cca:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ccc:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cce:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cd0:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cd4:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cd6:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cd8:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cda:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ce2:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001ce6:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ce8:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8001cea:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cec:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cf2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cf6:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8001cf8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cfa:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001cfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001d00:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8001d04:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001d06:	4618      	mov	r0, r3
}
 8001d08:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	d002      	beq.n	8001d14 <HAL_TIM_ConfigClockSource+0x80>
 8001d0e:	d91e      	bls.n	8001d4e <HAL_TIM_ConfigClockSource+0xba>
 8001d10:	2b30      	cmp	r3, #48	; 0x30
 8001d12:	d1f1      	bne.n	8001cf8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8001d14:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d16:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8001d20:	6093      	str	r3, [r2, #8]
}
 8001d22:	e7e9      	b.n	8001cf8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8001d24:	2b70      	cmp	r3, #112	; 0x70
 8001d26:	d049      	beq.n	8001dbc <HAL_TIM_ConfigClockSource+0x128>
 8001d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2c:	d1e4      	bne.n	8001cf8 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d2e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8001d32:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001d34:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d36:	432b      	orrs	r3, r5
 8001d38:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d3c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d40:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d42:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d44:	6893      	ldr	r3, [r2, #8]
 8001d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4a:	6093      	str	r3, [r2, #8]
      break;
 8001d4c:	e7d4      	b.n	8001cf8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8001d4e:	f033 0110 	bics.w	r1, r3, #16
 8001d52:	d1d1      	bne.n	8001cf8 <HAL_TIM_ConfigClockSource+0x64>
 8001d54:	e7de      	b.n	8001d14 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8001d56:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d58:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d5a:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d5c:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d60:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d62:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d64:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d66:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d6e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001d72:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001d74:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8001d76:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8001d78:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d7e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8001d82:	6093      	str	r3, [r2, #8]
}
 8001d84:	e7b8      	b.n	8001cf8 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8001d86:	2002      	movs	r0, #2
}
 8001d88:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d8a:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d8c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d8e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d92:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d94:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d96:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8001d98:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d9a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001da2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001da6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001daa:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8001dac:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8001dae:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001db4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001db8:	6093      	str	r3, [r2, #8]
}
 8001dba:	e79d      	b.n	8001cf8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dbc:	68cc      	ldr	r4, [r1, #12]
 8001dbe:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001dc2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dc4:	432b      	orrs	r3, r5
 8001dc6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dca:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dce:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001dd0:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001dd2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001dd8:	6093      	str	r3, [r2, #8]
      break;
 8001dda:	e78d      	b.n	8001cf8 <HAL_TIM_ConfigClockSource+0x64>

08001ddc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ddc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d026      	beq.n	8001e32 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de4:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001de6:	6803      	ldr	r3, [r0, #0]
{
 8001de8:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8001dea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001dee:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001df0:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df2:	4d11      	ldr	r5, [pc, #68]	; (8001e38 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8001df4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001df8:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dfa:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8001dfc:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8001dfe:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e00:	d009      	beq.n	8001e16 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e06:	d006      	beq.n	8001e16 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8001e08:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8001e0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d104      	bne.n	8001e20 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e16:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e18:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e1c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e1e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001e20:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e22:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001e24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001e28:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8001e2c:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8001e2e:	4618      	mov	r0, r3
}
 8001e30:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001e32:	2002      	movs	r0, #2
}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	40000400 	.word	0x40000400

08001e40 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d061      	beq.n	8001f08 <HAL_UART_Init+0xc8>
{
 8001e44:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d051      	beq.n	8001ef8 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e54:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e56:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e58:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001e5c:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e5e:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8001e60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e64:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e66:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e68:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e6a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001e6e:	4301      	orrs	r1, r0
 8001e70:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001e72:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e74:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001e78:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e7c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001e7e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e82:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8001e8c:	491f      	ldr	r1, [pc, #124]	; (8001f0c <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e92:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8001e94:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e96:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8001e98:	d033      	beq.n	8001f02 <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e9a:	f7ff fdf1 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e9e:	6863      	ldr	r3, [r4, #4]
 8001ea0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ea4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eae:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb0:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8001eb2:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eb4:	4816      	ldr	r0, [pc, #88]	; (8001f10 <HAL_UART_Init+0xd0>)
 8001eb6:	fba0 c103 	umull	ip, r1, r0, r3
 8001eba:	0949      	lsrs	r1, r1, #5
 8001ebc:	fb02 3311 	mls	r3, r2, r1, r3
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	3332      	adds	r3, #50	; 0x32
 8001ec4:	fba0 2303 	umull	r2, r3, r0, r3
 8001ec8:	0109      	lsls	r1, r1, #4
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8001ed0:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed2:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8001ed4:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001eda:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001edc:	6953      	ldr	r3, [r2, #20]
 8001ede:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001ee2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001ee4:	68d3      	ldr	r3, [r2, #12]
 8001ee6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eea:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eec:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001eee:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ef2:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ef8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001efc:	f7fe fb92 	bl	8000624 <HAL_UART_MspInit>
 8001f00:	e7a8      	b.n	8001e54 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f02:	f7ff fdcd 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 8001f06:	e7ca      	b.n	8001e9e <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
}
 8001f0a:	4770      	bx	lr
 8001f0c:	40013800 	.word	0x40013800
 8001f10:	51eb851f 	.word	0x51eb851f

08001f14 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f14:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d123      	bne.n	8001f64 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8001f1c:	b301      	cbz	r1, 8001f60 <HAL_UART_Receive_IT+0x4c>
 8001f1e:	b1fa      	cbz	r2, 8001f60 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8001f20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d01d      	beq.n	8001f64 <HAL_UART_Receive_IT+0x50>
{
 8001f28:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f2a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f2c:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f2e:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f30:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8001f32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8001f36:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f38:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f3a:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f3e:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 8001f40:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f42:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8001f46:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f48:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f4a:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8001f4c:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f54:	68e3      	ldr	r3, [r4, #12]
 8001f56:	f043 0320 	orr.w	r3, r3, #32
 8001f5a:	60e3      	str	r3, [r4, #12]
}
 8001f5c:	bc30      	pop	{r4, r5}
 8001f5e:	4770      	bx	lr
      return HAL_ERROR;
 8001f60:	2001      	movs	r0, #1
 8001f62:	4770      	bx	lr
    return HAL_BUSY;
 8001f64:	2002      	movs	r0, #2
}
 8001f66:	4770      	bx	lr

08001f68 <HAL_UART_TxCpltCallback>:
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop

08001f6c <HAL_UART_ErrorCallback>:
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop

08001f70 <UART_DMAAbortOnError>:
{
 8001f70:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001f72:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f74:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001f76:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f78:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001f7a:	f7ff fff7 	bl	8001f6c <HAL_UART_ErrorCallback>
}
 8001f7e:	bd08      	pop	{r3, pc}

08001f80 <HAL_UARTEx_RxEventCallback>:
}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop

08001f84 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f84:	6883      	ldr	r3, [r0, #8]
 8001f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8a:	d03b      	beq.n	8002004 <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f8c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d02f      	beq.n	8001ff2 <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f92:	6803      	ldr	r3, [r0, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f9a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001f9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001fa2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001faa:	bb4b      	cbnz	r3, 8002000 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001fac:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8001fae:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fb0:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001fb2:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fb4:	68d1      	ldr	r1, [r2, #12]
 8001fb6:	f021 0120 	bic.w	r1, r1, #32
 8001fba:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fbc:	68d1      	ldr	r1, [r2, #12]
 8001fbe:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001fc2:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fc4:	6951      	ldr	r1, [r2, #20]
 8001fc6:	f021 0101 	bic.w	r1, r1, #1
 8001fca:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001fcc:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fd0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001fd2:	2901      	cmp	r1, #1
 8001fd4:	d121      	bne.n	800201a <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd6:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fd8:	68d1      	ldr	r1, [r2, #12]
 8001fda:	f021 0110 	bic.w	r1, r1, #16
 8001fde:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001fe0:	6811      	ldr	r1, [r2, #0]
 8001fe2:	06c9      	lsls	r1, r1, #27
 8001fe4:	d423      	bmi.n	800202e <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001fe6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001fe8:	f7ff ffca 	bl	8001f80 <HAL_UARTEx_RxEventCallback>
}
 8001fec:	2000      	movs	r0, #0
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ff2:	6903      	ldr	r3, [r0, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1cc      	bne.n	8001f92 <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ff8:	6803      	ldr	r3, [r0, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	7013      	strb	r3, [r2, #0]
 8001ffe:	e7cd      	b.n	8001f9c <UART_Receive_IT.part.0+0x18>
}
 8002000:	2000      	movs	r0, #0
 8002002:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002004:	6903      	ldr	r3, [r0, #16]
 8002006:	b96b      	cbnz	r3, 8002024 <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002008:	6802      	ldr	r2, [r0, #0]
 800200a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800200c:	6852      	ldr	r2, [r2, #4]
 800200e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002012:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8002016:	6283      	str	r3, [r0, #40]	; 0x28
 8002018:	e7c3      	b.n	8001fa2 <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800201a:	f7fe f9cf 	bl	80003bc <HAL_UART_RxCpltCallback>
}
 800201e:	2000      	movs	r0, #0
 8002020:	b002      	add	sp, #8
 8002022:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002024:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002026:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	7013      	strb	r3, [r2, #0]
 800202c:	e7b6      	b.n	8001f9c <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	6813      	ldr	r3, [r2, #0]
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	6853      	ldr	r3, [r2, #4]
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	9b01      	ldr	r3, [sp, #4]
 800203a:	e7d4      	b.n	8001fe6 <UART_Receive_IT.part.0+0x62>

0800203c <HAL_UART_IRQHandler>:
{
 800203c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800203e:	6803      	ldr	r3, [r0, #0]
{
 8002040:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002042:	681a      	ldr	r2, [r3, #0]
{
 8002044:	b082      	sub	sp, #8
  if (errorflags == RESET)
 8002046:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002048:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800204a:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800204c:	d14e      	bne.n	80020ec <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800204e:	0696      	lsls	r6, r2, #26
 8002050:	d502      	bpl.n	8002058 <HAL_UART_IRQHandler+0x1c>
 8002052:	068d      	lsls	r5, r1, #26
 8002054:	f100 8090 	bmi.w	8002178 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002058:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800205a:	2801      	cmp	r0, #1
 800205c:	d00b      	beq.n	8002076 <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800205e:	0616      	lsls	r6, r2, #24
 8002060:	d502      	bpl.n	8002068 <HAL_UART_IRQHandler+0x2c>
 8002062:	060d      	lsls	r5, r1, #24
 8002064:	f100 8092 	bmi.w	800218c <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002068:	0650      	lsls	r0, r2, #25
 800206a:	d502      	bpl.n	8002072 <HAL_UART_IRQHandler+0x36>
 800206c:	064a      	lsls	r2, r1, #25
 800206e:	f100 80ab 	bmi.w	80021c8 <HAL_UART_IRQHandler+0x18c>
}
 8002072:	b002      	add	sp, #8
 8002074:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002076:	06d5      	lsls	r5, r2, #27
 8002078:	d5f1      	bpl.n	800205e <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800207a:	06c8      	lsls	r0, r1, #27
 800207c:	d5ef      	bpl.n	800205e <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800207e:	2100      	movs	r1, #0
 8002080:	9101      	str	r1, [sp, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	9201      	str	r2, [sp, #4]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	9201      	str	r2, [sp, #4]
 800208a:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8002092:	f000 80d2 	beq.w	800223a <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002096:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002098:	6802      	ldr	r2, [r0, #0]
 800209a:	6852      	ldr	r2, [r2, #4]
 800209c:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800209e:	2a00      	cmp	r2, #0
 80020a0:	d0e7      	beq.n	8002072 <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80020a2:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80020a4:	4295      	cmp	r5, r2
 80020a6:	d9e4      	bls.n	8002072 <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020a8:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 80020aa:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020ac:	2e20      	cmp	r6, #32
 80020ae:	d016      	beq.n	80020de <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 80020b0:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020b8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c8:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80020ca:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ce:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	f022 0210 	bic.w	r2, r2, #16
 80020d6:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020d8:	f7ff f87e 	bl	80011d8 <HAL_DMA_Abort>
 80020dc:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020de:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80020e0:	4620      	mov	r0, r4
 80020e2:	1a69      	subs	r1, r5, r1
 80020e4:	b289      	uxth	r1, r1
 80020e6:	f7ff ff4b 	bl	8001f80 <HAL_UARTEx_RxEventCallback>
 80020ea:	e7c2      	b.n	8002072 <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020ec:	f005 0501 	and.w	r5, r5, #1
 80020f0:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80020f4:	4328      	orrs	r0, r5
 80020f6:	d0af      	beq.n	8002058 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020f8:	07d0      	lsls	r0, r2, #31
 80020fa:	d505      	bpl.n	8002108 <HAL_UART_IRQHandler+0xcc>
 80020fc:	05ce      	lsls	r6, r1, #23
 80020fe:	d503      	bpl.n	8002108 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002100:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002102:	f040 0001 	orr.w	r0, r0, #1
 8002106:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002108:	0750      	lsls	r0, r2, #29
 800210a:	d52c      	bpl.n	8002166 <HAL_UART_IRQHandler+0x12a>
 800210c:	b12d      	cbz	r5, 800211a <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800210e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002110:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002112:	f040 0002 	orr.w	r0, r0, #2
 8002116:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002118:	d429      	bmi.n	800216e <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800211a:	0716      	lsls	r6, r2, #28
 800211c:	d507      	bpl.n	800212e <HAL_UART_IRQHandler+0xf2>
 800211e:	f001 0020 	and.w	r0, r1, #32
 8002122:	4328      	orrs	r0, r5
 8002124:	d003      	beq.n	800212e <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002126:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002128:	f040 0008 	orr.w	r0, r0, #8
 800212c:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800212e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002130:	2800      	cmp	r0, #0
 8002132:	d09e      	beq.n	8002072 <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002134:	0690      	lsls	r0, r2, #26
 8002136:	d509      	bpl.n	800214c <HAL_UART_IRQHandler+0x110>
 8002138:	068a      	lsls	r2, r1, #26
 800213a:	d507      	bpl.n	800214c <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800213c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002140:	2a22      	cmp	r2, #34	; 0x22
 8002142:	d103      	bne.n	800214c <HAL_UART_IRQHandler+0x110>
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff ff1d 	bl	8001f84 <UART_Receive_IT.part.0>
 800214a:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800214c:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800214e:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002150:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002154:	f005 0508 	and.w	r5, r5, #8
 8002158:	4315      	orrs	r5, r2
 800215a:	d140      	bne.n	80021de <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff ff05 	bl	8001f6c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002162:	6425      	str	r5, [r4, #64]	; 0x40
 8002164:	e785      	b.n	8002072 <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002166:	0790      	lsls	r0, r2, #30
 8002168:	d5d7      	bpl.n	800211a <HAL_UART_IRQHandler+0xde>
 800216a:	2d00      	cmp	r5, #0
 800216c:	d0d5      	beq.n	800211a <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800216e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002170:	f040 0004 	orr.w	r0, r0, #4
 8002174:	6420      	str	r0, [r4, #64]	; 0x40
 8002176:	e7d0      	b.n	800211a <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002178:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800217c:	2b22      	cmp	r3, #34	; 0x22
 800217e:	f47f af78 	bne.w	8002072 <HAL_UART_IRQHandler+0x36>
}
 8002182:	b002      	add	sp, #8
 8002184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002188:	f7ff befc 	b.w	8001f84 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800218c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002190:	2a21      	cmp	r2, #33	; 0x21
 8002192:	f47f af6e 	bne.w	8002072 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002196:	68a2      	ldr	r2, [r4, #8]
 8002198:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800219c:	d06e      	beq.n	800227c <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800219e:	6a22      	ldr	r2, [r4, #32]
 80021a0:	1c51      	adds	r1, r2, #1
 80021a2:	6221      	str	r1, [r4, #32]
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80021a8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80021aa:	3a01      	subs	r2, #1
 80021ac:	b292      	uxth	r2, r2
 80021ae:	84e2      	strh	r2, [r4, #38]	; 0x26
 80021b0:	2a00      	cmp	r2, #0
 80021b2:	f47f af5e 	bne.w	8002072 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021bc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	e754      	b.n	8002072 <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 80021c8:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021ca:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80021cc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80021d4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80021d8:	f7ff fec6 	bl	8001f68 <HAL_UART_TxCpltCallback>
    return;
 80021dc:	e749      	b.n	8002072 <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80021f0:	2a01      	cmp	r2, #1
 80021f2:	d103      	bne.n	80021fc <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	f022 0210 	bic.w	r2, r2, #16
 80021fa:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021fc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80021fe:	2120      	movs	r1, #32
 8002200:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002204:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	0656      	lsls	r6, r2, #25
 800220a:	d512      	bpl.n	8002232 <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800220c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800220e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002214:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002216:	b160      	cbz	r0, 8002232 <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_UART_IRQHandler+0x258>)
 800221a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800221c:	f7fe fffe 	bl	800121c <HAL_DMA_Abort_IT>
 8002220:	2800      	cmp	r0, #0
 8002222:	f43f af26 	beq.w	8002072 <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002226:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002228:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800222a:	b002      	add	sp, #8
 800222c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002230:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff fe9a 	bl	8001f6c <HAL_UART_ErrorCallback>
 8002238:	e71b      	b.n	8002072 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800223a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800223c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800223e:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8002240:	b289      	uxth	r1, r1
 8002242:	2900      	cmp	r1, #0
 8002244:	f43f af15 	beq.w	8002072 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002248:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800224a:	1a08      	subs	r0, r1, r0
 800224c:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800224e:	2900      	cmp	r1, #0
 8002250:	f43f af0f 	beq.w	8002072 <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 8002254:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002256:	68d8      	ldr	r0, [r3, #12]
 8002258:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800225c:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800225e:	6958      	ldr	r0, [r3, #20]
 8002260:	f020 0001 	bic.w	r0, r0, #1
 8002264:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8002266:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800226a:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800226c:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800226e:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002270:	f022 0210 	bic.w	r2, r2, #16
 8002274:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002276:	f7ff fe83 	bl	8001f80 <HAL_UARTEx_RxEventCallback>
 800227a:	e6fa      	b.n	8002072 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227c:	6922      	ldr	r2, [r4, #16]
 800227e:	2a00      	cmp	r2, #0
 8002280:	d18d      	bne.n	800219e <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002282:	6a22      	ldr	r2, [r4, #32]
 8002284:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002288:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800228c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800228e:	6222      	str	r2, [r4, #32]
 8002290:	e78a      	b.n	80021a8 <HAL_UART_IRQHandler+0x16c>
 8002292:	bf00      	nop
 8002294:	08001f71 	.word	0x08001f71

08002298 <__libc_init_array>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	2600      	movs	r6, #0
 800229c:	4d0c      	ldr	r5, [pc, #48]	; (80022d0 <__libc_init_array+0x38>)
 800229e:	4c0d      	ldr	r4, [pc, #52]	; (80022d4 <__libc_init_array+0x3c>)
 80022a0:	1b64      	subs	r4, r4, r5
 80022a2:	10a4      	asrs	r4, r4, #2
 80022a4:	42a6      	cmp	r6, r4
 80022a6:	d109      	bne.n	80022bc <__libc_init_array+0x24>
 80022a8:	f000 f81a 	bl	80022e0 <_init>
 80022ac:	2600      	movs	r6, #0
 80022ae:	4d0a      	ldr	r5, [pc, #40]	; (80022d8 <__libc_init_array+0x40>)
 80022b0:	4c0a      	ldr	r4, [pc, #40]	; (80022dc <__libc_init_array+0x44>)
 80022b2:	1b64      	subs	r4, r4, r5
 80022b4:	10a4      	asrs	r4, r4, #2
 80022b6:	42a6      	cmp	r6, r4
 80022b8:	d105      	bne.n	80022c6 <__libc_init_array+0x2e>
 80022ba:	bd70      	pop	{r4, r5, r6, pc}
 80022bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c0:	4798      	blx	r3
 80022c2:	3601      	adds	r6, #1
 80022c4:	e7ee      	b.n	80022a4 <__libc_init_array+0xc>
 80022c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ca:	4798      	blx	r3
 80022cc:	3601      	adds	r6, #1
 80022ce:	e7f2      	b.n	80022b6 <__libc_init_array+0x1e>
 80022d0:	0800262c 	.word	0x0800262c
 80022d4:	0800262c 	.word	0x0800262c
 80022d8:	0800262c 	.word	0x0800262c
 80022dc:	08002630 	.word	0x08002630

080022e0 <_init>:
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e2:	bf00      	nop
 80022e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e6:	bc08      	pop	{r3}
 80022e8:	469e      	mov	lr, r3
 80022ea:	4770      	bx	lr

080022ec <_fini>:
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	bf00      	nop
 80022f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f2:	bc08      	pop	{r3}
 80022f4:	469e      	mov	lr, r3
 80022f6:	4770      	bx	lr
