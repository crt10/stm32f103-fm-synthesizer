
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002464  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08002570  08002570  00012570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028ac  080028ac  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080028ac  080028ac  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028ac  080028ac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080028b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000018  080028cc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  080028cc  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b97  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d90  00000000  00000000  00034bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011b41  00000000  00000000  00037968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  000494b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002418  00000000  00000000  0004a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177d4  00000000  00000000  0004c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f91  00000000  00000000  00063bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008836e  00000000  00000000  0007bb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00103efb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028c0  00000000  00000000  00103f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002558 	.word	0x08002558

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002558 	.word	0x08002558

0800014c <init_audio_out>:
 */

#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	SPI1->CR1 |= SPI_CR1_SPE;
 800014c:	4a06      	ldr	r2, [pc, #24]	; (8000168 <init_audio_out+0x1c>)
void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
 800014e:	b508      	push	{r3, lr}
	SPI1->CR1 |= SPI_CR1_SPE;
 8000150:	6813      	ldr	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 8000152:	4608      	mov	r0, r1
	SPI1->CR1 |= SPI_CR1_SPE;
 8000154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015a:	f001 feab 	bl	8001eb4 <HAL_TIM_Base_Start_IT>
	output_volume = 0x3800;
 800015e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000162:	4b02      	ldr	r3, [pc, #8]	; (800016c <init_audio_out+0x20>)
 8000164:	801a      	strh	r2, [r3, #0]
}
 8000166:	bd08      	pop	{r3, pc}
 8000168:	40013000 	.word	0x40013000
 800016c:	200003e4 	.word	0x200003e4

08000170 <update_volume>:

void update_volume() {
	GPIOA->BSRR = GPIO_BSRR_BR4;					//pull CS pin low
 8000170:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
void update_volume() {
 8000174:	b510      	push	{r4, lr}
	GPIOA->BSRR = GPIO_BSRR_BR4;					//pull CS pin low
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <update_volume+0x38>)
	SPI1->DR = output_volume;						//write out data to SPI (assume SPI is not busy)
 8000178:	4c0c      	ldr	r4, [pc, #48]	; (80001ac <update_volume+0x3c>)
	GPIOA->BSRR = GPIO_BSRR_BR4;					//pull CS pin low
 800017a:	611a      	str	r2, [r3, #16]
	SPI1->DR = output_volume;						//write out data to SPI (assume SPI is not busy)
 800017c:	8822      	ldrh	r2, [r4, #0]
 800017e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000182:	60da      	str	r2, [r3, #12]
	output_volume = synth_sample();
 8000184:	f000 fe5a 	bl	8000e3c <synth_sample>
 8000188:	b280      	uxth	r0, r0
	if (output_volume > 0x0FFF) {					//max possible volume with 12-bit dac
 800018a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800018e:	bf28      	it	cs
 8000190:	f643 70ff 	movwcs	r0, #16383	; 0x3fff
		output_volume = 0x0FFF;
	}
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
	GPIOA->BSRR = GPIO_BSRR_BS4;					//pull CS pin high
 8000194:	f04f 0210 	mov.w	r2, #16
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <update_volume+0x38>)
 800019a:	bf38      	it	cc
 800019c:	f440 5040 	orrcc.w	r0, r0, #12288	; 0x3000
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 80001a0:	8020      	strh	r0, [r4, #0]
	GPIOA->BSRR = GPIO_BSRR_BS4;					//pull CS pin high
 80001a2:	611a      	str	r2, [r3, #16]
}
 80001a4:	bd10      	pop	{r4, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800
 80001ac:	200003e4 	.word	0x200003e4

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b4:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2601      	movs	r6, #1
 80001ba:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001bc:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001c0:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c4:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001cc:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d6:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001d8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001dc:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001de:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e0:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e2:	f001 fabb 	bl	800175c <HAL_RCC_OscConfig>
 80001e6:	b108      	cbz	r0, 80001ec <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001ea:	e7fe      	b.n	80001ea <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	f04f 080f 	mov.w	r8, #15
 80001f2:	f04f 0902 	mov.w	r9, #2
 80001f6:	2600      	movs	r6, #0
 80001f8:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fc:	4621      	mov	r1, r4
 80001fe:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	e9cd 8900 	strd	r8, r9, [sp]
 8000204:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020a:	f001 fca7 	bl	8001b5c <HAL_RCC_ClockConfig>
 800020e:	b108      	cbz	r0, 8000214 <SystemClock_Config+0x64>
 8000210:	b672      	cpsid	i
  while (1)
 8000212:	e7fe      	b.n	8000212 <SystemClock_Config+0x62>
}
 8000214:	b010      	add	sp, #64	; 0x40
 8000216:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800021a:	bf00      	nop

0800021c <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021c:	2400      	movs	r4, #0
{
 800021e:	b580      	push	{r7, lr}
 8000220:	b088      	sub	sp, #32
  HAL_Init();
 8000222:	f001 f881 	bl	8001328 <HAL_Init>
  SystemClock_Config();
 8000226:	f7ff ffc3 	bl	80001b0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800022e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000232:	4b45      	ldr	r3, [pc, #276]	; (8000348 <main+0x12c>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	6999      	ldr	r1, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000238:	4844      	ldr	r0, [pc, #272]	; (800034c <main+0x130>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	f041 0104 	orr.w	r1, r1, #4
 800023e:	6199      	str	r1, [r3, #24]
 8000240:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000242:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	f003 0304 	and.w	r3, r3, #4
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800024c:	f001 fa78 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000250:	4622      	mov	r2, r4
 8000252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000256:	483d      	ldr	r0, [pc, #244]	; (800034c <main+0x130>)
 8000258:	f001 fa72 	bl	8001740 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 800025c:	f44f 7688 	mov.w	r6, #272	; 0x110
 8000260:	2200      	movs	r2, #0
 8000262:	2302      	movs	r3, #2
 8000264:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000266:	4839      	ldr	r0, [pc, #228]	; (800034c <main+0x130>)
 8000268:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 800026a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800026e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000272:	f001 f959 	bl	8001528 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 31250;
 8000276:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 800027a:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 800027c:	4834      	ldr	r0, [pc, #208]	; (8000350 <main+0x134>)
 800027e:	4935      	ldr	r1, [pc, #212]	; (8000354 <main+0x138>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000280:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000284:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart1.Init.BaudRate = 31250;
 8000288:	e9c0 1200 	strd	r1, r2, [r0]
  huart1.Init.Parity = UART_PARITY_NONE;
 800028c:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800028e:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000290:	f001 ff12 	bl	80020b8 <HAL_UART_Init>
 8000294:	b108      	cbz	r0, 800029a <main+0x7e>
 8000296:	b672      	cpsid	i
  while (1)
 8000298:	e7fe      	b.n	8000298 <main+0x7c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800029a:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 800029c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1333-1;
 80002a0:	f240 5234 	movw	r2, #1332	; 0x534
  htim2.Instance = TIM2;
 80002a4:	4c2c      	ldr	r4, [pc, #176]	; (8000358 <main+0x13c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a6:	e9cd 0004 	strd	r0, r0, [sp, #16]
 80002aa:	e9cd 0006 	strd	r0, r0, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ae:	9002      	str	r0, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002b0:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b2:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim2.Instance = TIM2;
 80002b6:	6021      	str	r1, [r4, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b8:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ba:	61a3      	str	r3, [r4, #24]
  htim2.Init.Period = 1333-1;
 80002bc:	60e2      	str	r2, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002be:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002c0:	f001 fd94 	bl	8001dec <HAL_TIM_Base_Init>
 80002c4:	b108      	cbz	r0, 80002ca <main+0xae>
 80002c6:	b672      	cpsid	i
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <main+0xac>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ce:	4620      	mov	r0, r4
 80002d0:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002d2:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002d4:	f001 fe1a 	bl	8001f0c <HAL_TIM_ConfigClockSource>
 80002d8:	b108      	cbz	r0, 80002de <main+0xc2>
 80002da:	b672      	cpsid	i
  while (1)
 80002dc:	e7fe      	b.n	80002dc <main+0xc0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002de:	2300      	movs	r3, #0
 80002e0:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002e2:	4620      	mov	r0, r4
 80002e4:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002ea:	f001 feb3 	bl	8002054 <HAL_TIMEx_MasterConfigSynchronization>
 80002ee:	4603      	mov	r3, r0
 80002f0:	b9d0      	cbnz	r0, 8000328 <main+0x10c>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002f2:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80002f6:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002fa:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002fe:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 8000300:	220a      	movs	r2, #10
  hspi1.Instance = SPI1;
 8000302:	4816      	ldr	r0, [pc, #88]	; (800035c <main+0x140>)
 8000304:	4e16      	ldr	r6, [pc, #88]	; (8000360 <main+0x144>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000306:	e9c0 7301 	strd	r7, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800030a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800030e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000312:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000316:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Instance = SPI1;
 8000318:	6006      	str	r6, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800031a:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CRCPolynomial = 10;
 800031c:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800031e:	f001 fd0b 	bl	8001d38 <HAL_SPI_Init>
 8000322:	b118      	cbz	r0, 800032c <main+0x110>
 8000324:	b672      	cpsid	i
  while (1)
 8000326:	e7fe      	b.n	8000326 <main+0x10a>
 8000328:	b672      	cpsid	i
 800032a:	e7fe      	b.n	800032a <main+0x10e>
  init_midi(midi_uart);
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <main+0x148>)
 800032e:	6818      	ldr	r0, [r3, #0]
 8000330:	f000 f830 	bl	8000394 <init_midi>
  init_synth();
 8000334:	f000 fb68 	bl	8000a08 <init_synth>
  init_audio_out(audio_spi, audio_tim);
 8000338:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <main+0x14c>)
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <main+0x150>)
 800033c:	6811      	ldr	r1, [r2, #0]
 800033e:	6818      	ldr	r0, [r3, #0]
 8000340:	f7ff ff04 	bl	800014c <init_audio_out>
	__NOP();
 8000344:	bf00      	nop
  while (1)
 8000346:	e7fd      	b.n	8000344 <main+0x128>
 8000348:	40021000 	.word	0x40021000
 800034c:	40010800 	.word	0x40010800
 8000350:	200003ec 	.word	0x200003ec
 8000354:	40013800 	.word	0x40013800
 8000358:	2000048c 	.word	0x2000048c
 800035c:	20000434 	.word	0x20000434
 8000360:	40013000 	.word	0x40013000
 8000364:	20000008 	.word	0x20000008
 8000368:	20000004 	.word	0x20000004
 800036c:	20000000 	.word	0x20000000

08000370 <HAL_UART_RxCpltCallback>:
	process_midi_byte(huart);
 8000370:	f000 b81e 	b.w	80003b0 <process_midi_byte>

08000374 <sample>:
void sample() {
 8000374:	b508      	push	{r3, lr}
	TIM2->SR = 0;
 8000376:	2200      	movs	r2, #0
 8000378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800037c:	f44f 7180 	mov.w	r1, #256	; 0x100
	TIM2->SR = 0;
 8000380:	611a      	str	r2, [r3, #16]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000382:	4803      	ldr	r0, [pc, #12]	; (8000390 <sample+0x1c>)
 8000384:	f001 f9e0 	bl	8001748 <HAL_GPIO_TogglePin>
}
 8000388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_volume();
 800038c:	f7ff bef0 	b.w	8000170 <update_volume>
 8000390:	40010800 	.word	0x40010800

08000394 <init_midi>:
 *      Author: Tennyson Cheng
 */

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
 8000394:	b410      	push	{r4}
	data[0] = -1;
 8000396:	24ff      	movs	r4, #255	; 0xff
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <init_midi+0x14>)
	data[1] = -1;
	HAL_UART_Receive_IT(huart, &midi_in, 1);
 800039a:	2201      	movs	r2, #1
	data[0] = -1;
 800039c:	701c      	strb	r4, [r3, #0]
	data[1] = -1;
 800039e:	705c      	strb	r4, [r3, #1]
	HAL_UART_Receive_IT(huart, &midi_in, 1);
 80003a0:	4902      	ldr	r1, [pc, #8]	; (80003ac <init_midi+0x18>)
}
 80003a2:	bc10      	pop	{r4}
	HAL_UART_Receive_IT(huart, &midi_in, 1);
 80003a4:	f001 bef2 	b.w	800218c <HAL_UART_Receive_IT>
 80003a8:	20000430 	.word	0x20000430
 80003ac:	200004d4 	.word	0x200004d4

080003b0 <process_midi_byte>:

void process_midi_byte(UART_HandleTypeDef* huart) {
 80003b0:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(huart, &midi_in, 1);	//re-enable interrupt for next byte
 80003b2:	4c24      	ldr	r4, [pc, #144]	; (8000444 <process_midi_byte+0x94>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	4621      	mov	r1, r4
 80003b8:	f001 fee8 	bl	800218c <HAL_UART_Receive_IT>
	if ((midi_in & 0x80) == 0x80) {				//if byte received was status byte
 80003bc:	f994 3000 	ldrsb.w	r3, [r4]
 80003c0:	7822      	ldrb	r2, [r4, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db26      	blt.n	8000414 <process_midi_byte+0x64>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {										//if byte received was data byte
		switch (status) {
 80003c6:	4b20      	ldr	r3, [pc, #128]	; (8000448 <process_midi_byte+0x98>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2bc0      	cmp	r3, #192	; 0xc0
 80003cc:	d01f      	beq.n	800040e <process_midi_byte+0x5e>
 80003ce:	d818      	bhi.n	8000402 <process_midi_byte+0x52>
 80003d0:	2ba0      	cmp	r3, #160	; 0xa0
 80003d2:	d002      	beq.n	80003da <process_midi_byte+0x2a>
 80003d4:	d907      	bls.n	80003e6 <process_midi_byte+0x36>
 80003d6:	2bb0      	cmp	r3, #176	; 0xb0
 80003d8:	d129      	bne.n	800042e <process_midi_byte+0x7e>
		case 0xD0:									//channel pressure (unimplemented)
			data[0] = midi_in;
			channel_pressure();
			break;
		case 0xE0:									//pitch bend
			if (data[0] == (uint8_t)-1) {
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <process_midi_byte+0x9c>)
 80003dc:	7819      	ldrb	r1, [r3, #0]
 80003de:	29ff      	cmp	r1, #255	; 0xff
 80003e0:	d023      	beq.n	800042a <process_midi_byte+0x7a>
				data[0] = midi_in;
			}
			else {
				data[1] = midi_in;
 80003e2:	705a      	strb	r2, [r3, #1]
			break;
		default:
			__NOP();
		}
	}
}
 80003e4:	bd10      	pop	{r4, pc}
		switch (status) {
 80003e6:	2b80      	cmp	r3, #128	; 0x80
 80003e8:	d01b      	beq.n	8000422 <process_midi_byte+0x72>
 80003ea:	2b90      	cmp	r3, #144	; 0x90
 80003ec:	d11f      	bne.n	800042e <process_midi_byte+0x7e>
			if (data[0] == (uint8_t)-1) {
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <process_midi_byte+0x9c>)
 80003f0:	7818      	ldrb	r0, [r3, #0]
 80003f2:	28ff      	cmp	r0, #255	; 0xff
 80003f4:	d019      	beq.n	800042a <process_midi_byte+0x7a>
				data[1] = midi_in;
 80003f6:	705a      	strb	r2, [r3, #1]
				if (data[1] == 0) {					//some midi devices send velocity 0 to turn off notes
 80003f8:	bb02      	cbnz	r2, 800043c <process_midi_byte+0x8c>
}
 80003fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void note_off() {
	release_voice(data[0]);
 80003fe:	f000 bcaf 	b.w	8000d60 <release_voice>
		switch (status) {
 8000402:	2be0      	cmp	r3, #224	; 0xe0
 8000404:	d0e9      	beq.n	80003da <process_midi_byte+0x2a>
 8000406:	2bf0      	cmp	r3, #240	; 0xf0
 8000408:	d0ec      	beq.n	80003e4 <process_midi_byte+0x34>
 800040a:	2bd0      	cmp	r3, #208	; 0xd0
 800040c:	d10f      	bne.n	800042e <process_midi_byte+0x7e>
			data[0] = midi_in;
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <process_midi_byte+0x9c>)
 8000410:	701a      	strb	r2, [r3, #0]
}
 8000412:	bd10      	pop	{r4, pc}
		data[0] = -1;
 8000414:	21ff      	movs	r1, #255	; 0xff
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <process_midi_byte+0x9c>)
		status = midi_in;
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <process_midi_byte+0x98>)
		data[0] = -1;
 800041a:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 800041c:	7059      	strb	r1, [r3, #1]
		status = midi_in;
 800041e:	7002      	strb	r2, [r0, #0]
}
 8000420:	bd10      	pop	{r4, pc}
			if (data[0] == (uint8_t)-1) {
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <process_midi_byte+0x9c>)
 8000424:	7818      	ldrb	r0, [r3, #0]
 8000426:	28ff      	cmp	r0, #255	; 0xff
 8000428:	d103      	bne.n	8000432 <process_midi_byte+0x82>
				data[0] = midi_in;
 800042a:	701a      	strb	r2, [r3, #0]
}
 800042c:	bd10      	pop	{r4, pc}
			__NOP();
 800042e:	bf00      	nop
}
 8000430:	bd10      	pop	{r4, pc}
				data[1] = midi_in;
 8000432:	705a      	strb	r2, [r3, #1]
}
 8000434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	release_voice(data[0]);
 8000438:	f000 bc92 	b.w	8000d60 <release_voice>
}
 800043c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void note_on() {
	add_voice(data[0]);
 8000440:	f000 bbda 	b.w	8000bf8 <add_voice>
 8000444:	200004d4 	.word	0x200004d4
 8000448:	200004d5 	.word	0x200004d5
 800044c:	20000430 	.word	0x20000430

08000450 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 8000450:	4b01      	ldr	r3, [pc, #4]	; (8000458 <note_to_freq+0x8>)
}
 8000452:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000456:	4770      	bx	lr
 8000458:	08002580 	.word	0x08002580

0800045c <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 800045c:	4b03      	ldr	r3, [pc, #12]	; (800046c <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 800045e:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000460:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 8000464:	f3c0 208f 	ubfx	r0, r0, #10, #16
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	057619f1 	.word	0x057619f1

08000470 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <HAL_MspInit+0x3c>)
{
 8000472:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000474:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000476:	490e      	ldr	r1, [pc, #56]	; (80004b0 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000478:	f042 0201 	orr.w	r2, r2, #1
 800047c:	619a      	str	r2, [r3, #24]
 800047e:	699a      	ldr	r2, [r3, #24]
 8000480:	f002 0201 	and.w	r2, r2, #1
 8000484:	9200      	str	r2, [sp, #0]
 8000486:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000488:	69da      	ldr	r2, [r3, #28]
 800048a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800048e:	61da      	str	r2, [r3, #28]
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049a:	684b      	ldr	r3, [r1, #4]
 800049c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a4:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	b002      	add	sp, #8
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010000 	.word	0x40010000

080004b4 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	2300      	movs	r3, #0
{
 80004b6:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 80004b8:	6801      	ldr	r1, [r0, #0]
 80004ba:	4a16      	ldr	r2, [pc, #88]	; (8000514 <HAL_SPI_MspInit+0x60>)
{
 80004bc:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 80004be:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80004c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI1)
 80004c8:	d001      	beq.n	80004ce <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004ca:	b006      	add	sp, #24
 80004cc:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004ce:	24a0      	movs	r4, #160	; 0xa0
 80004d0:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d2:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80004dc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	480e      	ldr	r0, [pc, #56]	; (8000518 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80004e4:	619a      	str	r2, [r3, #24]
 80004e6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80004ee:	9200      	str	r2, [sp, #0]
 80004f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	699a      	ldr	r2, [r3, #24]
 80004f4:	f042 0204 	orr.w	r2, r2, #4
 80004f8:	619a      	str	r2, [r3, #24]
 80004fa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f001 f80d 	bl	8001528 <HAL_GPIO_Init>
}
 800050e:	b006      	add	sp, #24
 8000510:	bd70      	pop	{r4, r5, r6, pc}
 8000512:	bf00      	nop
 8000514:	40013000 	.word	0x40013000
 8000518:	40010800 	.word	0x40010800

0800051c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800051c:	6803      	ldr	r3, [r0, #0]
 800051e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000522:	d000      	beq.n	8000526 <HAL_TIM_Base_MspInit+0xa>
 8000524:	4770      	bx	lr

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000526:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000528:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800052c:	69d8      	ldr	r0, [r3, #28]
{
 800052e:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000530:	4308      	orrs	r0, r1
 8000532:	61d8      	str	r0, [r3, #28]
 8000534:	69db      	ldr	r3, [r3, #28]
{
 8000536:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000538:	400b      	ands	r3, r1
 800053a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000540:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000542:	f000 ff27 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000546:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000548:	b003      	add	sp, #12
 800054a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800054e:	f000 bf59 	b.w	8001404 <HAL_NVIC_EnableIRQ>
 8000552:	bf00      	nop

08000554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000554:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8000558:	6802      	ldr	r2, [r0, #0]
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <HAL_UART_MspInit+0x88>)
{
 800055c:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 800055e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000564:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8000568:	d001      	beq.n	800056e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800056a:	b007      	add	sp, #28
 800056c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800056e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000572:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000574:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8000576:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800057a:	699a      	ldr	r2, [r3, #24]
 800057c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000580:	619a      	str	r2, [r3, #24]
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000588:	9200      	str	r2, [sp, #0]
 800058a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	f042 0204 	orr.w	r2, r2, #4
 8000592:	619a      	str	r2, [r3, #24]
 8000594:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000596:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	a902      	add	r1, sp, #8
 80005a6:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ac:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f000 ffbb 	bl	8001528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	a902      	add	r1, sp, #8
 80005ba:	4809      	ldr	r0, [pc, #36]	; (80005e0 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f000 ffb1 	bl	8001528 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005c6:	4622      	mov	r2, r4
 80005c8:	4621      	mov	r1, r4
 80005ca:	2025      	movs	r0, #37	; 0x25
 80005cc:	f000 fee2 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005d0:	2025      	movs	r0, #37	; 0x25
 80005d2:	f000 ff17 	bl	8001404 <HAL_NVIC_EnableIRQ>
}
 80005d6:	b007      	add	sp, #28
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40010800 	.word	0x40010800

080005e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <NMI_Handler>
 80005e6:	bf00      	nop

080005e8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <HardFault_Handler>
 80005ea:	bf00      	nop

080005ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <MemManage_Handler>
 80005ee:	bf00      	nop

080005f0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <BusFault_Handler>
 80005f2:	bf00      	nop

080005f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <UsageFault_Handler>
 80005f6:	bf00      	nop

080005f8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <DebugMon_Handler>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <PendSV_Handler>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000604:	f000 bea2 	b.w	800134c <HAL_IncTick>

08000608 <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 8000608:	f7ff beb4 	b.w	8000374 <sample>

0800060c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800060c:	4801      	ldr	r0, [pc, #4]	; (8000614 <USART1_IRQHandler+0x8>)
 800060e:	f001 be51 	b.w	80022b4 <HAL_UART_IRQHandler>
 8000612:	bf00      	nop
 8000614:	200003ec 	.word	0x200003ec

08000618 <modulate>:
		}
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
	}
}

static inline int16_t modulate(uint8_t voice_index) {
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {			//loop through all operators of voice
		/*update phase of active operator*/
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 800061a:	4eb6      	ldr	r6, [pc, #728]	; (80008f4 <modulate+0x2dc>)
 800061c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8000620:	eb06 0343 	add.w	r3, r6, r3, lsl #1
	-27, -25, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9,  -7,  -5,  -3,  -2,
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 8000624:	f8b3 c0e8 	ldrh.w	ip, [r3, #232]	; 0xe8
 8000628:	f8b3 71c8 	ldrh.w	r7, [r3, #456]	; 0x1c8
 800062c:	891d      	ldrh	r5, [r3, #8]
 800062e:	88d9      	ldrh	r1, [r3, #6]
 8000630:	f8b3 40e6 	ldrh.w	r4, [r3, #230]	; 0xe6
 8000634:	f8b3 21c6 	ldrh.w	r2, [r3, #454]	; 0x1c6
 8000638:	440d      	add	r5, r1
 800063a:	4464      	add	r4, ip
 800063c:	f8b3 12a6 	ldrh.w	r1, [r3, #678]	; 0x2a6
 8000640:	f8b3 c2a8 	ldrh.w	ip, [r3, #680]	; 0x2a8
 8000644:	443a      	add	r2, r7
	}

	switch (algo) {
 8000646:	4fac      	ldr	r7, [pc, #688]	; (80008f8 <modulate+0x2e0>)
 8000648:	4461      	add	r1, ip
 800064a:	783f      	ldrb	r7, [r7, #0]
 800064c:	b2ad      	uxth	r5, r5
 800064e:	b2a4      	uxth	r4, r4
 8000650:	b292      	uxth	r2, r2
 8000652:	b289      	uxth	r1, r1
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 8000654:	811d      	strh	r5, [r3, #8]
 8000656:	f8a3 40e8 	strh.w	r4, [r3, #232]	; 0xe8
 800065a:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
 800065e:	f8a3 12a8 	strh.w	r1, [r3, #680]	; 0x2a8
 8000662:	00c3      	lsls	r3, r0, #3
 8000664:	2f0b      	cmp	r7, #11
 8000666:	f200 81c6 	bhi.w	80009f6 <modulate+0x3de>
 800066a:	e8df f017 	tbh	[pc, r7, lsl #1]
 800066e:	0036      	.short	0x0036
 8000670:	0074005e 	.word	0x0074005e
 8000674:	00bd009b 	.word	0x00bd009b
 8000678:	010400db 	.word	0x010400db
 800067c:	014b0125 	.word	0x014b0125
 8000680:	01a6017e 	.word	0x01a6017e
 8000684:	000c      	.short	0x000c
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000686:	4f9d      	ldr	r7, [pc, #628]	; (80008fc <modulate+0x2e4>)
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
		return ((int16_t)op2 + op1 + op0) / 3;
		break;
	case 0x0B:
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000688:	1a1b      	subs	r3, r3, r0
 800068a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800068e:	0a09      	lsrs	r1, r1, #8
 8000690:	0a12      	lsrs	r2, r2, #8
 8000692:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
 8000696:	f917 e001 	ldrsb.w	lr, [r7, r1]
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800069a:	f917 c002 	ldrsb.w	ip, [r7, r2]
 800069e:	f893 11c4 	ldrb.w	r1, [r3, #452]	; 0x1c4
 80006a2:	0a24      	lsrs	r4, r4, #8
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80006a4:	573e      	ldrsb	r6, [r7, r4]
 80006a6:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 80006aa:	0a2d      	lsrs	r5, r5, #8
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80006ac:	fb00 f00e 	mul.w	r0, r0, lr
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80006b0:	fb01 f10c 	mul.w	r1, r1, ip
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80006b4:	577c      	ldrsb	r4, [r7, r5]
 80006b6:	791b      	ldrb	r3, [r3, #4]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80006b8:	fb02 f206 	mul.w	r2, r2, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80006bc:	fb03 f304 	mul.w	r3, r3, r4
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 80006c0:	f341 11c7 	sbfx	r1, r1, #7, #8
 80006c4:	f340 10c7 	sbfx	r0, r0, #7, #8
 80006c8:	4408      	add	r0, r1
 80006ca:	f342 12c7 	sbfx	r2, r2, #7, #8
 80006ce:	4410      	add	r0, r2
 80006d0:	f343 13c7 	sbfx	r3, r3, #7, #8
 80006d4:	4418      	add	r0, r3
 80006d6:	1080      	asrs	r0, r0, #2
		break;
	default:
		break;
	}
	return 0;
}
 80006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80006da:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 80006dc:	4888      	ldr	r0, [pc, #544]	; (8000900 <modulate+0x2e8>)
 80006de:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80006e2:	0a0e      	lsrs	r6, r1, #8
 80006e4:	5786      	ldrsb	r6, [r0, r6]
 80006e6:	f893 12a4 	ldrb.w	r1, [r3, #676]	; 0x2a4
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80006ea:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80006ec:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80006f0:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	5686      	ldrsb	r6, [r0, r2]
 80006f8:	f893 11c4 	ldrb.w	r1, [r3, #452]	; 0x1c4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80006fc:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80006fe:	fb01 f106 	mul.w	r1, r1, r6
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000702:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000706:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000708:	5680      	ldrsb	r0, [r0, r2]
 800070a:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800070e:	0a2a      	lsrs	r2, r5, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000710:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000714:	4c79      	ldr	r4, [pc, #484]	; (80008fc <modulate+0x2e4>)
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000716:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	7918      	ldrb	r0, [r3, #4]
 800071e:	56a3      	ldrsb	r3, [r4, r2]
 8000720:	fb00 f003 	mul.w	r0, r0, r3
		return op0;
 8000724:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000728:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800072a:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 800072c:	4874      	ldr	r0, [pc, #464]	; (8000900 <modulate+0x2e8>)
 800072e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000732:	0a16      	lsrs	r6, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000734:	5787      	ldrsb	r7, [r0, r6]
 8000736:	0a09      	lsrs	r1, r1, #8
 8000738:	f893 21c4 	ldrb.w	r2, [r3, #452]	; 0x1c4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800073c:	5646      	ldrsb	r6, [r0, r1]
 800073e:	f893 12a4 	ldrb.w	r1, [r3, #676]	; 0x2a4
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000742:	fb02 f207 	mul.w	r2, r2, r7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000746:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800074a:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800074c:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000750:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8000754:	e7d7      	b.n	8000706 <modulate+0xee>
 8000756:	4f6a      	ldr	r7, [pc, #424]	; (8000900 <modulate+0x2e8>)
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000758:	1a1b      	subs	r3, r3, r0
 800075a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800075e:	0a12      	lsrs	r2, r2, #8
 8000760:	56be      	ldrsb	r6, [r7, r2]
 8000762:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000766:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000768:	fb00 f006 	mul.w	r0, r0, r6
 800076c:	0a09      	lsrs	r1, r1, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800076e:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000772:	567c      	ldrsb	r4, [r7, r1]
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800077a:	56b9      	ldrsb	r1, [r7, r2]
 800077c:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000780:	fb00 f004 	mul.w	r0, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000784:	fb02 f101 	mul.w	r1, r2, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000788:	0a2a      	lsrs	r2, r5, #8
 800078a:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 800078e:	eb02 12e1 	add.w	r2, r2, r1, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000792:	495a      	ldr	r1, [pc, #360]	; (80008fc <modulate+0x2e4>)
 8000794:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000796:	7918      	ldrb	r0, [r3, #4]
 8000798:	568b      	ldrsb	r3, [r1, r2]
 800079a:	fb00 f003 	mul.w	r0, r0, r3
		return op0;
 800079e:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 80007a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 80007a4:	4f56      	ldr	r7, [pc, #344]	; (8000900 <modulate+0x2e8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80007a6:	1a1b      	subs	r3, r3, r0
 80007a8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80007ac:	0a09      	lsrs	r1, r1, #8
 80007ae:	567e      	ldrsb	r6, [r7, r1]
 80007b0:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80007b4:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80007b8:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007bc:	f3c0 10c7 	ubfx	r0, r0, #7, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80007c0:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80007c4:	b2e4      	uxtb	r4, r4
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007c6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80007ca:	573e      	ldrsb	r6, [r7, r4]
 80007cc:	b2d2      	uxtb	r2, r2
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007ce:	56bc      	ldrsb	r4, [r7, r2]
 80007d0:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80007d4:	fb01 f206 	mul.w	r2, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007d8:	fb00 f104 	mul.w	r1, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80007dc:	11d2      	asrs	r2, r2, #7
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80007de:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80007e2:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80007e6:	e7d4      	b.n	8000792 <modulate+0x17a>
 80007e8:	4f45      	ldr	r7, [pc, #276]	; (8000900 <modulate+0x2e8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80007ea:	1a1b      	subs	r3, r3, r0
 80007ec:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80007f0:	0a10      	lsrs	r0, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007f2:	563e      	ldrsb	r6, [r7, r0]
 80007f4:	f893 21c4 	ldrb.w	r2, [r3, #452]	; 0x1c4
 80007f8:	0a09      	lsrs	r1, r1, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80007fa:	5679      	ldrsb	r1, [r7, r1]
 80007fc:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000800:	fb02 f206 	mul.w	r2, r2, r6
 8000804:	0a24      	lsrs	r4, r4, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000806:	fb00 f001 	mul.w	r0, r0, r1
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800080a:	573c      	ldrsb	r4, [r7, r4]
 800080c:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000810:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000812:	fb01 f104 	mul.w	r1, r1, r4
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000816:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 800081a:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 800081e:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000822:	e7b6      	b.n	8000792 <modulate+0x17a>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000824:	1a1b      	subs	r3, r3, r0
 8000826:	4836      	ldr	r0, [pc, #216]	; (8000900 <modulate+0x2e8>)
 8000828:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800082c:	0a0e      	lsrs	r6, r1, #8
 800082e:	5786      	ldrsb	r6, [r0, r6]
 8000830:	f893 12a4 	ldrb.w	r1, [r3, #676]	; 0x2a4
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000834:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000836:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800083a:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	5680      	ldrsb	r0, [r0, r2]
 8000842:	f893 11c4 	ldrb.w	r1, [r3, #452]	; 0x1c4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000846:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000848:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 800084c:	482b      	ldr	r0, [pc, #172]	; (80008fc <modulate+0x2e4>)
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800084e:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	0a2d      	lsrs	r5, r5, #8
 8000856:	5681      	ldrsb	r1, [r0, r2]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000858:	5742      	ldrsb	r2, [r0, r5]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800085a:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800085e:	791b      	ldrb	r3, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000860:	fb00 f001 	mul.w	r0, r0, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000864:	fb03 f302 	mul.w	r3, r3, r2
		return ((int16_t)op2 + op0) >> 1;
 8000868:	f340 10c7 	sbfx	r0, r0, #7, #8
 800086c:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000870:	4418      	add	r0, r3
 8000872:	1040      	asrs	r0, r0, #1
}
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000876:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000878:	4821      	ldr	r0, [pc, #132]	; (8000900 <modulate+0x2e8>)
 800087a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800087e:	0a0e      	lsrs	r6, r1, #8
 8000880:	5786      	ldrsb	r6, [r0, r6]
 8000882:	f893 12a4 	ldrb.w	r1, [r3, #676]	; 0x2a4
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000886:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000888:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800088c:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	5681      	ldrsb	r1, [r0, r2]
 8000894:	f893 21c4 	ldrb.w	r2, [r3, #452]	; 0x1c4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <modulate+0x2e4>)
 800089a:	fb02 f201 	mul.w	r2, r2, r1
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800089e:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 80008a2:	eb02 2114 	add.w	r1, r2, r4, lsr #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80008a6:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80008aa:	b2c9      	uxtb	r1, r1
 80008ac:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008ae:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80008b0:	5682      	ldrsb	r2, [r0, r2]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008b2:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
 80008b6:	e7d2      	b.n	800085e <modulate+0x246>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008b8:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 80008ba:	4811      	ldr	r0, [pc, #68]	; (8000900 <modulate+0x2e8>)
 80008bc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80008c0:	0a0f      	lsrs	r7, r1, #8
 80008c2:	0a26      	lsrs	r6, r4, #8
 80008c4:	f893 12a4 	ldrb.w	r1, [r3, #676]	; 0x2a4
 80008c8:	57c4      	ldrsb	r4, [r0, r7]
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008ca:	5786      	ldrsb	r6, [r0, r6]
 80008cc:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008d0:	fb01 f404 	mul.w	r4, r1, r4
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008d4:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008d8:	0a11      	lsrs	r1, r2, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80008da:	0a2a      	lsrs	r2, r5, #8
 80008dc:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008e0:	eb01 11e4 	add.w	r1, r1, r4, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <modulate+0x2e4>)
 80008e6:	b2c9      	uxtb	r1, r1
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80008ec:	5682      	ldrsb	r2, [r0, r2]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008ee:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 80008f2:	e7b4      	b.n	800085e <modulate+0x246>
 80008f4:	20000034 	.word	0x20000034
 80008f8:	200003b8 	.word	0x200003b8
 80008fc:	08002780 	.word	0x08002780
 8000900:	08002680 	.word	0x08002680
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000904:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000906:	483d      	ldr	r0, [pc, #244]	; (80009fc <modulate+0x3e4>)
 8000908:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800090c:	0a09      	lsrs	r1, r1, #8
 800090e:	5640      	ldrsb	r0, [r0, r1]
 8000910:	f893 12a4 	ldrb.w	r1, [r3, #676]	; 0x2a4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000914:	4e3a      	ldr	r6, [pc, #232]	; (8000a00 <modulate+0x3e8>)
 8000916:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800091a:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 800091e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000922:	eb01 2014 	add.w	r0, r1, r4, lsr #8
 8000926:	b2c0      	uxtb	r0, r0
 8000928:	b2d4      	uxtb	r4, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800092a:	eb01 2215 	add.w	r2, r1, r5, lsr #8
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800092e:	5737      	ldrsb	r7, [r6, r4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000930:	5635      	ldrsb	r5, [r6, r0]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000932:	f893 11c4 	ldrb.w	r1, [r3, #452]	; 0x1c4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000936:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
 800093a:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800093c:	56b4      	ldrsb	r4, [r6, r2]
 800093e:	791a      	ldrb	r2, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000940:	fb01 f307 	mul.w	r3, r1, r7
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000944:	fb00 f105 	mul.w	r1, r0, r5
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000948:	fb02 f204 	mul.w	r2, r2, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 800094c:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000950:	f341 11c7 	sbfx	r1, r1, #7, #8
		return ((int16_t)op2 + op1 + op0) / 3;
 8000954:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000958:	440b      	add	r3, r1
 800095a:	482a      	ldr	r0, [pc, #168]	; (8000a04 <modulate+0x3ec>)
 800095c:	4413      	add	r3, r2
 800095e:	fb80 2003 	smull	r2, r0, r0, r3
 8000962:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000966:	b200      	sxth	r0, r0
}
 8000968:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800096a:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 800096c:	4823      	ldr	r0, [pc, #140]	; (80009fc <modulate+0x3e4>)
 800096e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000972:	0a09      	lsrs	r1, r1, #8
 8000974:	5640      	ldrsb	r0, [r0, r1]
 8000976:	f893 12a4 	ldrb.w	r1, [r3, #676]	; 0x2a4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 800097a:	4e21      	ldr	r6, [pc, #132]	; (8000a00 <modulate+0x3e8>)
 800097c:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000980:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000984:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000988:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800098c:	b2d0      	uxtb	r0, r2
 800098e:	b2ca      	uxtb	r2, r1
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000990:	f916 c000 	ldrsb.w	ip, [r6, r0]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000994:	56b7      	ldrsb	r7, [r6, r2]
 8000996:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800099a:	f893 21c4 	ldrb.w	r2, [r3, #452]	; 0x1c4
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800099e:	7919      	ldrb	r1, [r3, #4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009a0:	fb00 f007 	mul.w	r0, r0, r7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009a4:	fb02 f30c 	mul.w	r3, r2, ip
 80009a8:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009aa:	5774      	ldrsb	r4, [r6, r5]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009ac:	fb01 f204 	mul.w	r2, r1, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 80009b0:	f343 13c7 	sbfx	r3, r3, #7, #8
 80009b4:	f340 11c7 	sbfx	r1, r0, #7, #8
 80009b8:	e7cc      	b.n	8000954 <modulate+0x33c>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009ba:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <modulate+0x3e4>)
 80009be:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80009c2:	0a09      	lsrs	r1, r1, #8
 80009c4:	5641      	ldrsb	r1, [r0, r1]
 80009c6:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009ca:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009cc:	fb00 f001 	mul.w	r0, r0, r1
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 80009d0:	490b      	ldr	r1, [pc, #44]	; (8000a00 <modulate+0x3e8>)
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009d2:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 80009d6:	0a24      	lsrs	r4, r4, #8
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	568f      	ldrsb	r7, [r1, r2]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009dc:	570e      	ldrsb	r6, [r1, r4]
 80009de:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009e2:	f893 21c4 	ldrb.w	r2, [r3, #452]	; 0x1c4
 80009e6:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009e8:	574c      	ldrsb	r4, [r1, r5]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009ea:	fb00 f006 	mul.w	r0, r0, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009ee:	7919      	ldrb	r1, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009f0:	fb02 f307 	mul.w	r3, r2, r7
 80009f4:	e7da      	b.n	80009ac <modulate+0x394>
	switch (algo) {
 80009f6:	2000      	movs	r0, #0
}
 80009f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08002680 	.word	0x08002680
 8000a00:	08002780 	.word	0x08002780
 8000a04:	55555556 	.word	0x55555556

08000a08 <init_synth>:
 *      Author: Tennyson Cheng
 */

#include "synth.h"

void init_synth() {
 8000a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
		algo = 0x00;								//default algorithm 0
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	f04f 3080 	mov.w	r0, #2155905152	; 0x80808080
 8000a12:	f04f 3410 	mov.w	r4, #269488144	; 0x10101010
 8000a16:	f04f 3360 	mov.w	r3, #1616928864	; 0x60606060
 8000a1a:	f04f 3640 	mov.w	r6, #1077952576	; 0x40404040
 8000a1e:	4968      	ldr	r1, [pc, #416]	; (8000bc0 <init_synth+0x1b8>)
 8000a20:	4a68      	ldr	r2, [pc, #416]	; (8000bc4 <init_synth+0x1bc>)
 8000a22:	700d      	strb	r5, [r1, #0]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 8000a24:	4968      	ldr	r1, [pc, #416]	; (8000bc8 <init_synth+0x1c0>)
 8000a26:	6010      	str	r0, [r2, #0]
 8000a28:	600c      	str	r4, [r1, #0]
 8000a2a:	4868      	ldr	r0, [pc, #416]	; (8000bcc <init_synth+0x1c4>)
 8000a2c:	4a68      	ldr	r2, [pc, #416]	; (8000bd0 <init_synth+0x1c8>)
 8000a2e:	4969      	ldr	r1, [pc, #420]	; (8000bd4 <init_synth+0x1cc>)
 8000a30:	6003      	str	r3, [r0, #0]
 8000a32:	600b      	str	r3, [r1, #0]
		op_ratio[i] = 0x10;							//default multiplier 1.0 (4 MSB integer, 4 LSB decimal)
		op_attack[i] = 96;//ENV_MAX_RATE;				//default attack 128
		op_decay[i] = 96;//ENV_MAX_RATE;					//default decay 128
		op_sustain[i] = 64;//MAX_VOLUME;					//default sustain 128
		op_release[i] = 96;//ENV_MAX_RATE;				//default release 128
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
 8000a34:	4c68      	ldr	r4, [pc, #416]	; (8000bd8 <init_synth+0x1d0>)
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);//ENV_MAX_RATE << 8;
 8000a36:	4869      	ldr	r0, [pc, #420]	; (8000bdc <init_synth+0x1d4>)
		op_release_inc[i] = calculate_env_inc(op_release[i]);//ENV_MAX_RATE << 8;
 8000a38:	4969      	ldr	r1, [pc, #420]	; (8000be0 <init_synth+0x1d8>)
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4d69      	ldr	r5, [pc, #420]	; (8000be4 <init_synth+0x1dc>)
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
 8000a3e:	4a6a      	ldr	r2, [pc, #424]	; (8000be8 <init_synth+0x1e0>)
 8000a40:	4b6a      	ldr	r3, [pc, #424]	; (8000bec <init_synth+0x1e4>)
 8000a42:	602e      	str	r6, [r5, #0]
 8000a44:	6022      	str	r2, [r4, #0]
 8000a46:	6062      	str	r2, [r4, #4]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);//ENV_MAX_RATE << 8;
 8000a48:	6002      	str	r2, [r0, #0]
 8000a4a:	6042      	str	r2, [r0, #4]
		op_release_inc[i] = calculate_env_inc(op_release[i]);//ENV_MAX_RATE << 8;
 8000a4c:	600a      	str	r2, [r1, #0]
 8000a4e:	604a      	str	r2, [r1, #4]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 8000a50:	f503 7960 	add.w	r9, r3, #896	; 0x380
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000a54:	4c66      	ldr	r4, [pc, #408]	; (8000bf0 <init_synth+0x1e8>)
 8000a56:	33e0      	adds	r3, #224	; 0xe0
 8000a58:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000a5a:	4626      	mov	r6, r4
 8000a5c:	f836 590c 	ldrh.w	r5, [r6], #-12
 8000a60:	f843 0ce0 	str.w	r0, [r3, #-224]
 8000a64:	46b3      	mov	fp, r6
 8000a66:	46b2      	mov	sl, r6
 8000a68:	46b0      	mov	r8, r6
 8000a6a:	f843 1cdc 	str.w	r1, [r3, #-220]
 8000a6e:	f843 2cd8 	str.w	r2, [r3, #-216]
 8000a72:	46b6      	mov	lr, r6
 8000a74:	46b4      	mov	ip, r6
 8000a76:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000a78:	465f      	mov	r7, fp
 8000a7a:	f843 0cd2 	str.w	r0, [r3, #-210]
 8000a7e:	f843 1cce 	str.w	r1, [r3, #-206]
 8000a82:	f843 2cca 	str.w	r2, [r3, #-202]
 8000a86:	4656      	mov	r6, sl
 8000a88:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8000a8c:	f843 0cc4 	str.w	r0, [r3, #-196]
 8000a90:	f843 1cc0 	str.w	r1, [r3, #-192]
 8000a94:	f843 2cbc 	str.w	r2, [r3, #-188]
 8000a98:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8000a9c:	46c2      	mov	sl, r8
 8000a9e:	f843 0cb6 	str.w	r0, [r3, #-182]
 8000aa2:	f843 1cb2 	str.w	r1, [r3, #-178]
 8000aa6:	f843 2cae 	str.w	r2, [r3, #-174]
 8000aaa:	f823 5cd4 	strh.w	r5, [r3, #-212]
 8000aae:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8000ab2:	f823 5cc6 	strh.w	r5, [r3, #-198]
 8000ab6:	f823 5cb8 	strh.w	r5, [r3, #-184]
 8000aba:	f823 5caa 	strh.w	r5, [r3, #-170]
 8000abe:	46f0      	mov	r8, lr
 8000ac0:	f843 0ca8 	str.w	r0, [r3, #-168]
 8000ac4:	4654      	mov	r4, sl
 8000ac6:	f843 1ca4 	str.w	r1, [r3, #-164]
 8000aca:	f843 2ca0 	str.w	r2, [r3, #-160]
 8000ace:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8000ad2:	46e6      	mov	lr, ip
 8000ad4:	f843 0c9a 	str.w	r0, [r3, #-154]
 8000ad8:	f843 1c96 	str.w	r1, [r3, #-150]
 8000adc:	f843 2c92 	str.w	r2, [r3, #-146]
 8000ae0:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8000ae4:	46bc      	mov	ip, r7
 8000ae6:	f843 0c8c 	str.w	r0, [r3, #-140]
 8000aea:	f843 1c88 	str.w	r1, [r3, #-136]
 8000aee:	f843 2c84 	str.w	r2, [r3, #-132]
 8000af2:	cf07      	ldmia	r7!, {r0, r1, r2}
 8000af4:	4637      	mov	r7, r6
 8000af6:	f843 0c7e 	str.w	r0, [r3, #-126]
 8000afa:	f843 1c7a 	str.w	r1, [r3, #-122]
 8000afe:	f843 2c76 	str.w	r2, [r3, #-118]
 8000b02:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000b04:	4656      	mov	r6, sl
 8000b06:	f823 5c9c 	strh.w	r5, [r3, #-156]
 8000b0a:	f823 5c8e 	strh.w	r5, [r3, #-142]
 8000b0e:	f823 5c80 	strh.w	r5, [r3, #-128]
 8000b12:	f823 5c72 	strh.w	r5, [r3, #-114]
 8000b16:	f823 5c64 	strh.w	r5, [r3, #-100]
 8000b1a:	f843 0c70 	str.w	r0, [r3, #-112]
 8000b1e:	f843 1c6c 	str.w	r1, [r3, #-108]
 8000b22:	f843 2c68 	str.w	r2, [r3, #-104]
 8000b26:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8000b2a:	f823 5c56 	strh.w	r5, [r3, #-86]
 8000b2e:	f843 0c62 	str.w	r0, [r3, #-98]
 8000b32:	f843 1c5e 	str.w	r1, [r3, #-94]
 8000b36:	f843 2c5a 	str.w	r2, [r3, #-90]
 8000b3a:	f823 5c48 	strh.w	r5, [r3, #-72]
 8000b3e:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8000b42:	f823 5c3a 	strh.w	r5, [r3, #-58]
 8000b46:	f843 0c54 	str.w	r0, [r3, #-84]
 8000b4a:	f843 1c50 	str.w	r1, [r3, #-80]
 8000b4e:	f843 2c4c 	str.w	r2, [r3, #-76]
 8000b52:	f823 5c2c 	strh.w	r5, [r3, #-44]
 8000b56:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8000b5a:	f843 0c46 	str.w	r0, [r3, #-70]
 8000b5e:	f843 1c42 	str.w	r1, [r3, #-66]
 8000b62:	f843 2c3e 	str.w	r2, [r3, #-62]
 8000b66:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8000b6a:	f843 0c38 	str.w	r0, [r3, #-56]
 8000b6e:	f843 1c34 	str.w	r1, [r3, #-52]
 8000b72:	f843 2c30 	str.w	r2, [r3, #-48]
 8000b76:	cf07      	ldmia	r7!, {r0, r1, r2}
 8000b78:	f843 0c2a 	str.w	r0, [r3, #-42]
 8000b7c:	f843 1c26 	str.w	r1, [r3, #-38]
 8000b80:	f843 2c22 	str.w	r2, [r3, #-34]
 8000b84:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000b86:	f843 0c1c 	str.w	r0, [r3, #-28]
 8000b8a:	f843 1c18 	str.w	r1, [r3, #-24]
 8000b8e:	f843 2c14 	str.w	r2, [r3, #-20]
 8000b92:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000b94:	f823 5c1e 	strh.w	r5, [r3, #-30]
 8000b98:	f823 5c10 	strh.w	r5, [r3, #-16]
 8000b9c:	f823 5c02 	strh.w	r5, [r3, #-2]
 8000ba0:	f843 0c0e 	str.w	r0, [r3, #-14]
 8000ba4:	f843 1c0a 	str.w	r1, [r3, #-10]
 8000ba8:	f843 2c06 	str.w	r2, [r3, #-6]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 8000bac:	454b      	cmp	r3, r9
 8000bae:	f47f af51 	bne.w	8000a54 <init_synth+0x4c>
		}
	}
	env_period = ENV_MAX_PERIOD;
 8000bb2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <init_synth+0x1ec>)
 8000bb8:	801a      	strh	r2, [r3, #0]
}
 8000bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200003b8 	.word	0x200003b8
 8000bc4:	200003cc 	.word	0x200003cc
 8000bc8:	200003e8 	.word	0x200003e8
 8000bcc:	200003c0 	.word	0x200003c0
 8000bd0:	200003e0 	.word	0x200003e0
 8000bd4:	200003bc 	.word	0x200003bc
 8000bd8:	200003d8 	.word	0x200003d8
 8000bdc:	200003d0 	.word	0x200003d0
 8000be0:	200003c4 	.word	0x200003c4
 8000be4:	200003b4 	.word	0x200003b4
 8000be8:	03e003e0 	.word	0x03e003e0
 8000bec:	20000034 	.word	0x20000034
 8000bf0:	08002570 	.word	0x08002570
 8000bf4:	200003ba 	.word	0x200003ba

08000bf8 <add_voice>:

void add_voice(uint8_t note_value) {
 8000bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000bfc:	4c55      	ldr	r4, [pc, #340]	; (8000d54 <add_voice+0x15c>)
void add_voice(uint8_t note_value) {
 8000bfe:	4607      	mov	r7, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000c00:	7823      	ldrb	r3, [r4, #0]
 8000c02:	2bff      	cmp	r3, #255	; 0xff
 8000c04:	f000 8089 	beq.w	8000d1a <add_voice+0x122>
 8000c08:	7ba3      	ldrb	r3, [r4, #14]
 8000c0a:	2bff      	cmp	r3, #255	; 0xff
 8000c0c:	f000 8087 	beq.w	8000d1e <add_voice+0x126>
 8000c10:	7f23      	ldrb	r3, [r4, #28]
 8000c12:	2bff      	cmp	r3, #255	; 0xff
 8000c14:	f000 8087 	beq.w	8000d26 <add_voice+0x12e>
 8000c18:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8000c1c:	2bff      	cmp	r3, #255	; 0xff
 8000c1e:	f000 8084 	beq.w	8000d2a <add_voice+0x132>
 8000c22:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000c26:	2bff      	cmp	r3, #255	; 0xff
 8000c28:	f000 8081 	beq.w	8000d2e <add_voice+0x136>
 8000c2c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8000c30:	2bff      	cmp	r3, #255	; 0xff
 8000c32:	d07e      	beq.n	8000d32 <add_voice+0x13a>
 8000c34:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8000c38:	2bff      	cmp	r3, #255	; 0xff
 8000c3a:	d07c      	beq.n	8000d36 <add_voice+0x13e>
 8000c3c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8000c40:	2bff      	cmp	r3, #255	; 0xff
 8000c42:	d07a      	beq.n	8000d3a <add_voice+0x142>
 8000c44:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8000c48:	2bff      	cmp	r3, #255	; 0xff
 8000c4a:	d078      	beq.n	8000d3e <add_voice+0x146>
 8000c4c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
 8000c50:	2bff      	cmp	r3, #255	; 0xff
 8000c52:	d076      	beq.n	8000d42 <add_voice+0x14a>
 8000c54:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 8000c58:	2bff      	cmp	r3, #255	; 0xff
 8000c5a:	d074      	beq.n	8000d46 <add_voice+0x14e>
 8000c5c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8000c60:	2bff      	cmp	r3, #255	; 0xff
 8000c62:	d072      	beq.n	8000d4a <add_voice+0x152>
 8000c64:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8000c68:	2bff      	cmp	r3, #255	; 0xff
 8000c6a:	d05a      	beq.n	8000d22 <add_voice+0x12a>
 8000c6c:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8000c70:	2bff      	cmp	r3, #255	; 0xff
 8000c72:	d06c      	beq.n	8000d4e <add_voice+0x156>
 8000c74:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 8000c78:	2bff      	cmp	r3, #255	; 0xff
 8000c7a:	d007      	beq.n	8000c8c <add_voice+0x94>
 8000c7c:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 8000c80:	2bff      	cmp	r3, #255	; 0xff
 8000c82:	bf08      	it	eq
 8000c84:	230f      	moveq	r3, #15
 8000c86:	d002      	beq.n	8000c8e <add_voice+0x96>
		}
		else {
			op[op_index][voice_index].adsr_state = ATTACK;											//else, start on attack state
		}
	}
}
 8000c88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000c8c:	230e      	movs	r3, #14
 8000c8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000c92:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8000c96:	4626      	mov	r6, r4
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000c98:	2501      	movs	r5, #1
 8000c9a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8000d58 <add_voice+0x160>
 8000c9e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8000d5c <add_voice+0x164>
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8000ca2:	f04f 0a00 	mov.w	sl, #0
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8000ca6:	4638      	mov	r0, r7
		op[op_index][voice_index].note_value = note_value;										//store note
 8000ca8:	7027      	strb	r7, [r4, #0]
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8000caa:	f8a4 a008 	strh.w	sl, [r4, #8]
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8000cae:	f818 bb01 	ldrb.w	fp, [r8], #1
 8000cb2:	f7ff fbcd 	bl	8000450 <note_to_freq>
 8000cb6:	fb00 f30b 	mul.w	r3, r0, fp
		if (op_index != 0)	{
 8000cba:	2d01      	cmp	r5, #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8000cbc:	ea4f 1323 	mov.w	r3, r3, asr #4
 8000cc0:	8063      	strh	r3, [r4, #2]
		if (op_index != 0)	{
 8000cc2:	d01a      	beq.n	8000cfa <add_voice+0x102>
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack inc
 8000cc4:	f8b9 2000 	ldrh.w	r2, [r9]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000cc8:	88f3      	ldrh	r3, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000cca:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8000cce:	fab1 f181 	clz	r1, r1
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000cd2:	f818 0c01 	ldrb.w	r0, [r8, #-1]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000cd6:	0949      	lsrs	r1, r1, #5
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000cd8:	fb03 f300 	mul.w	r3, r3, r0
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000cdc:	2d04      	cmp	r5, #4
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000cde:	ea4f 1323 	mov.w	r3, r3, asr #4
		op[op_index][voice_index].volume = 0x00;
 8000ce2:	f884 a004 	strb.w	sl, [r4, #4]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000ce6:	80e3      	strh	r3, [r4, #6]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack inc
 8000ce8:	81a2      	strh	r2, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000cea:	72a1      	strb	r1, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000cec:	d0cc      	beq.n	8000c88 <add_voice+0x90>
 8000cee:	3501      	adds	r5, #1
 8000cf0:	b2ed      	uxtb	r5, r5
 8000cf2:	34e0      	adds	r4, #224	; 0xe0
 8000cf4:	f109 0902 	add.w	r9, r9, #2
 8000cf8:	e7d3      	b.n	8000ca2 <add_voice+0xaa>
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8000cfa:	8870      	ldrh	r0, [r6, #2]
 8000cfc:	f7ff fbae 	bl	800045c <calculate_delta>
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack inc
 8000d00:	f8b9 3000 	ldrh.w	r3, [r9]
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8000d04:	80f0      	strh	r0, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000d06:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	0952      	lsrs	r2, r2, #5
		op[op_index][voice_index].volume = 0x00;
 8000d10:	f884 a004 	strb.w	sl, [r4, #4]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack inc
 8000d14:	81a3      	strh	r3, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000d16:	72a2      	strb	r2, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000d18:	e7e9      	b.n	8000cee <add_voice+0xf6>
		if (op[0][voice_index].note_value == (uint8_t)-1) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e7b7      	b.n	8000c8e <add_voice+0x96>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e7b5      	b.n	8000c8e <add_voice+0x96>
 8000d22:	230c      	movs	r3, #12
 8000d24:	e7b3      	b.n	8000c8e <add_voice+0x96>
 8000d26:	2302      	movs	r3, #2
 8000d28:	e7b1      	b.n	8000c8e <add_voice+0x96>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e7af      	b.n	8000c8e <add_voice+0x96>
 8000d2e:	2304      	movs	r3, #4
 8000d30:	e7ad      	b.n	8000c8e <add_voice+0x96>
 8000d32:	2305      	movs	r3, #5
 8000d34:	e7ab      	b.n	8000c8e <add_voice+0x96>
 8000d36:	2306      	movs	r3, #6
 8000d38:	e7a9      	b.n	8000c8e <add_voice+0x96>
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	e7a7      	b.n	8000c8e <add_voice+0x96>
 8000d3e:	2308      	movs	r3, #8
 8000d40:	e7a5      	b.n	8000c8e <add_voice+0x96>
 8000d42:	2309      	movs	r3, #9
 8000d44:	e7a3      	b.n	8000c8e <add_voice+0x96>
 8000d46:	230a      	movs	r3, #10
 8000d48:	e7a1      	b.n	8000c8e <add_voice+0x96>
 8000d4a:	230b      	movs	r3, #11
 8000d4c:	e79f      	b.n	8000c8e <add_voice+0x96>
 8000d4e:	230d      	movs	r3, #13
 8000d50:	e79d      	b.n	8000c8e <add_voice+0x96>
 8000d52:	bf00      	nop
 8000d54:	20000034 	.word	0x20000034
 8000d58:	200003e8 	.word	0x200003e8
 8000d5c:	200003d8 	.word	0x200003d8

08000d60 <release_voice>:

void release_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <release_voice+0xd8>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4282      	cmp	r2, r0
 8000d66:	d048      	beq.n	8000dfa <release_voice+0x9a>
 8000d68:	7b9a      	ldrb	r2, [r3, #14]
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	d047      	beq.n	8000dfe <release_voice+0x9e>
 8000d6e:	7f1a      	ldrb	r2, [r3, #28]
 8000d70:	4282      	cmp	r2, r0
 8000d72:	d048      	beq.n	8000e06 <release_voice+0xa6>
 8000d74:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8000d78:	4282      	cmp	r2, r0
 8000d7a:	d046      	beq.n	8000e0a <release_voice+0xaa>
 8000d7c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000d80:	4282      	cmp	r2, r0
 8000d82:	d044      	beq.n	8000e0e <release_voice+0xae>
 8000d84:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8000d88:	4282      	cmp	r2, r0
 8000d8a:	d042      	beq.n	8000e12 <release_voice+0xb2>
 8000d8c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8000d90:	4282      	cmp	r2, r0
 8000d92:	d040      	beq.n	8000e16 <release_voice+0xb6>
 8000d94:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8000d98:	4282      	cmp	r2, r0
 8000d9a:	d03e      	beq.n	8000e1a <release_voice+0xba>
 8000d9c:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8000da0:	4282      	cmp	r2, r0
 8000da2:	d03c      	beq.n	8000e1e <release_voice+0xbe>
 8000da4:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8000da8:	4282      	cmp	r2, r0
 8000daa:	d03a      	beq.n	8000e22 <release_voice+0xc2>
 8000dac:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8000db0:	4282      	cmp	r2, r0
 8000db2:	d038      	beq.n	8000e26 <release_voice+0xc6>
 8000db4:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
 8000db8:	4282      	cmp	r2, r0
 8000dba:	d036      	beq.n	8000e2a <release_voice+0xca>
 8000dbc:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	d01e      	beq.n	8000e02 <release_voice+0xa2>
 8000dc4:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	d030      	beq.n	8000e2e <release_voice+0xce>
 8000dcc:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	d02e      	beq.n	8000e32 <release_voice+0xd2>
 8000dd4:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
 8000dd8:	4282      	cmp	r2, r0
 8000dda:	bf14      	ite	ne
 8000ddc:	2010      	movne	r0, #16
 8000dde:	200f      	moveq	r0, #15
			break;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op[op_index][voice_index].adsr_state = RELEASE;
 8000de0:	2203      	movs	r2, #3
 8000de2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000de6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8000dea:	729a      	strb	r2, [r3, #10]
 8000dec:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8000df0:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 8000df4:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
	}
}
 8000df8:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	e7f0      	b.n	8000de0 <release_voice+0x80>
 8000dfe:	2001      	movs	r0, #1
 8000e00:	e7ee      	b.n	8000de0 <release_voice+0x80>
 8000e02:	200c      	movs	r0, #12
 8000e04:	e7ec      	b.n	8000de0 <release_voice+0x80>
 8000e06:	2002      	movs	r0, #2
 8000e08:	e7ea      	b.n	8000de0 <release_voice+0x80>
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	e7e8      	b.n	8000de0 <release_voice+0x80>
 8000e0e:	2004      	movs	r0, #4
 8000e10:	e7e6      	b.n	8000de0 <release_voice+0x80>
 8000e12:	2005      	movs	r0, #5
 8000e14:	e7e4      	b.n	8000de0 <release_voice+0x80>
 8000e16:	2006      	movs	r0, #6
 8000e18:	e7e2      	b.n	8000de0 <release_voice+0x80>
 8000e1a:	2007      	movs	r0, #7
 8000e1c:	e7e0      	b.n	8000de0 <release_voice+0x80>
 8000e1e:	2008      	movs	r0, #8
 8000e20:	e7de      	b.n	8000de0 <release_voice+0x80>
 8000e22:	2009      	movs	r0, #9
 8000e24:	e7dc      	b.n	8000de0 <release_voice+0x80>
 8000e26:	200a      	movs	r0, #10
 8000e28:	e7da      	b.n	8000de0 <release_voice+0x80>
 8000e2a:	200b      	movs	r0, #11
 8000e2c:	e7d8      	b.n	8000de0 <release_voice+0x80>
 8000e2e:	200d      	movs	r0, #13
 8000e30:	e7d6      	b.n	8000de0 <release_voice+0x80>
 8000e32:	200e      	movs	r0, #14
 8000e34:	e7d4      	b.n	8000de0 <release_voice+0x80>
 8000e36:	bf00      	nop
 8000e38:	20000034 	.word	0x20000034

08000e3c <synth_sample>:

int16_t synth_sample() {
 8000e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t output_volume = 0x0800;											//default output volume 2048
	if (--env_period == 0x00) {												//decrement and check envelope period
 8000e40:	4bce      	ldr	r3, [pc, #824]	; (800117c <synth_sample+0x340>)
 8000e42:	881d      	ldrh	r5, [r3, #0]
 8000e44:	3d01      	subs	r5, #1
 8000e46:	b2ad      	uxth	r5, r5
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	f040 80f7 	bne.w	800103c <synth_sample+0x200>
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 8000e4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
	int16_t output_volume = 0x0800;											//default output volume 2048
 8000e52:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8000e56:	4cca      	ldr	r4, [pc, #808]	; (8001180 <synth_sample+0x344>)
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000e58:	f8df 9338 	ldr.w	r9, [pc, #824]	; 8001194 <synth_sample+0x358>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8000e5c:	4fc9      	ldr	r7, [pc, #804]	; (8001184 <synth_sample+0x348>)
 8000e5e:	4eca      	ldr	r6, [pc, #808]	; (8001188 <synth_sample+0x34c>)
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 8000e60:	801a      	strh	r2, [r3, #0]
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8000e62:	7823      	ldrb	r3, [r4, #0]
 8000e64:	b2e8      	uxtb	r0, r5
 8000e66:	2bff      	cmp	r3, #255	; 0xff
 8000e68:	d00e      	beq.n	8000e88 <synth_sample+0x4c>
		switch (op[op_index][voice_index].adsr_state) {
 8000e6a:	7aa3      	ldrb	r3, [r4, #10]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d83e      	bhi.n	8000eee <synth_sample+0xb2>
 8000e70:	e8df f003 	tbb	[pc, r3]
 8000e74:	213d2c12 	.word	0x213d2c12
 8000e78:	03          	.byte	0x03
 8000e79:	00          	.byte	0x00
static inline void delete_voice(uint8_t voice_index) { op[0][voice_index].note_value = -1; };
 8000e7a:	23ff      	movs	r3, #255	; 0xff
 8000e7c:	7023      	strb	r3, [r4, #0]
				cycle_envelope(voice_index);
				output_volume += modulate(voice_index);
 8000e7e:	f7ff fbcb 	bl	8000618 <modulate>
 8000e82:	4480      	add	r8, r0
 8000e84:	fa0f f888 	sxth.w	r8, r8
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
 8000e88:	3501      	adds	r5, #1
 8000e8a:	2d10      	cmp	r5, #16
 8000e8c:	f104 040e 	add.w	r4, r4, #14
 8000e90:	d1e7      	bne.n	8000e62 <synth_sample+0x26>
				output_volume += modulate(voice_index);
			}
		}
	}
	return output_volume;
}
 8000e92:	4640      	mov	r0, r8
 8000e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8000e98:	4abc      	ldr	r2, [pc, #752]	; (800118c <synth_sample+0x350>)
 8000e9a:	89a3      	ldrh	r3, [r4, #12]
 8000e9c:	8812      	ldrh	r2, [r2, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ea4:	f2c0 8183 	blt.w	80011ae <synth_sample+0x372>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8000ea8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8000eac:	2101      	movs	r1, #1
 8000eae:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8000eb0:	81a2      	strh	r2, [r4, #12]
				op[op_index][voice_index].adsr_state = DECAY;
 8000eb2:	72a1      	strb	r1, [r4, #10]
 8000eb4:	e01c      	b.n	8000ef0 <synth_sample+0xb4>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8000eb6:	4ab6      	ldr	r2, [pc, #728]	; (8001190 <synth_sample+0x354>)
 8000eb8:	89a3      	ldrh	r3, [r4, #12]
 8000eba:	8812      	ldrh	r2, [r2, #0]
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f080 8172 	bcs.w	80011a6 <synth_sample+0x36a>
				op[op_index][voice_index].env_amp = 0;
 8000ec2:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8000ec4:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8000ec6:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SILENT;
 8000ec8:	72a2      	strb	r2, [r4, #10]
 8000eca:	e011      	b.n	8000ef0 <synth_sample+0xb4>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8000ecc:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8000ed0:	8839      	ldrh	r1, [r7, #0]
 8000ed2:	7832      	ldrb	r2, [r6, #0]
 8000ed4:	ebac 0e01 	sub.w	lr, ip, r1
 8000ed8:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8000edc:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8000ee0:	f280 815a 	bge.w	8001198 <synth_sample+0x35c>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8000ee4:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8000eea:	72a2      	strb	r2, [r4, #10]
 8000eec:	e000      	b.n	8000ef0 <synth_sample+0xb4>
 8000eee:	89a3      	ldrh	r3, [r4, #12]
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000ef0:	f899 2000 	ldrb.w	r2, [r9]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8000efa:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000efe:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8000f00:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000f02:	7123      	strb	r3, [r4, #4]
		switch (op[op_index][voice_index].adsr_state) {
 8000f04:	d054      	beq.n	8000fb0 <synth_sample+0x174>
 8000f06:	2a03      	cmp	r2, #3
 8000f08:	d044      	beq.n	8000f94 <synth_sample+0x158>
 8000f0a:	b38a      	cbz	r2, 8000f70 <synth_sample+0x134>
 8000f0c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000f10:	f899 2001 	ldrb.w	r2, [r9, #1]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8000f1a:	f894 21ca 	ldrb.w	r2, [r4, #458]	; 0x1ca
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000f1e:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8000f20:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000f22:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
		switch (op[op_index][voice_index].adsr_state) {
 8000f26:	d076      	beq.n	8001016 <synth_sample+0x1da>
 8000f28:	2a03      	cmp	r2, #3
 8000f2a:	d066      	beq.n	8000ffa <synth_sample+0x1be>
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d052      	beq.n	8000fd6 <synth_sample+0x19a>
 8000f30:	f8b4 31cc 	ldrh.w	r3, [r4, #460]	; 0x1cc
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000f34:	f899 2002 	ldrb.w	r2, [r9, #2]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8000f3e:	f894 22aa 	ldrb.w	r2, [r4, #682]	; 0x2aa
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000f42:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8000f44:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000f46:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
		switch (op[op_index][voice_index].adsr_state) {
 8000f4a:	f000 8174 	beq.w	8001236 <synth_sample+0x3fa>
 8000f4e:	2a03      	cmp	r2, #3
 8000f50:	f000 8166 	beq.w	8001220 <synth_sample+0x3e4>
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	f000 8157 	beq.w	8001208 <synth_sample+0x3cc>
 8000f5a:	f8b4 32ac 	ldrh.w	r3, [r4, #684]	; 0x2ac
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8000f5e:	f899 2003 	ldrb.w	r2, [r9, #3]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	11db      	asrs	r3, r3, #7
 8000f6a:	f884 32a4 	strb.w	r3, [r4, #676]	; 0x2a4
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000f6e:	e786      	b.n	8000e7e <synth_sample+0x42>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8000f70:	4a86      	ldr	r2, [pc, #536]	; (800118c <synth_sample+0x350>)
 8000f72:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8000f76:	8852      	ldrh	r2, [r2, #2]
 8000f78:	4413      	add	r3, r2
 8000f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f7e:	f2c0 811e 	blt.w	80011be <synth_sample+0x382>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8000f82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8000f86:	2101      	movs	r1, #1
 8000f88:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8000f8a:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = DECAY;
 8000f8e:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
 8000f92:	e7bd      	b.n	8000f10 <synth_sample+0xd4>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8000f94:	4a7e      	ldr	r2, [pc, #504]	; (8001190 <synth_sample+0x354>)
 8000f96:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8000f9a:	8852      	ldrh	r2, [r2, #2]
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	f080 8109 	bcs.w	80011b4 <synth_sample+0x378>
				op[op_index][voice_index].env_amp = 0;
 8000fa2:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8000fa4:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8000fa6:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SILENT;
 8000faa:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8000fae:	e7af      	b.n	8000f10 <synth_sample+0xd4>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8000fb0:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	; 0xec
 8000fb4:	8879      	ldrh	r1, [r7, #2]
 8000fb6:	7872      	ldrb	r2, [r6, #1]
 8000fb8:	ebac 0e01 	sub.w	lr, ip, r1
 8000fbc:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8000fc0:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8000fc4:	f280 80ff 	bge.w	80011c6 <synth_sample+0x38a>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8000fc8:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8000fd0:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8000fd4:	e79c      	b.n	8000f10 <synth_sample+0xd4>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8000fd6:	4a6d      	ldr	r2, [pc, #436]	; (800118c <synth_sample+0x350>)
 8000fd8:	f8b4 31cc 	ldrh.w	r3, [r4, #460]	; 0x1cc
 8000fdc:	8892      	ldrh	r2, [r2, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fe4:	f2c0 80f7 	blt.w	80011d6 <synth_sample+0x39a>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8000fe8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8000fec:	2101      	movs	r1, #1
 8000fee:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8000ff0:	f8a4 21cc 	strh.w	r2, [r4, #460]	; 0x1cc
				op[op_index][voice_index].adsr_state = DECAY;
 8000ff4:	f884 11ca 	strb.w	r1, [r4, #458]	; 0x1ca
 8000ff8:	e79c      	b.n	8000f34 <synth_sample+0xf8>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8000ffa:	4a65      	ldr	r2, [pc, #404]	; (8001190 <synth_sample+0x354>)
 8000ffc:	f8b4 31cc 	ldrh.w	r3, [r4, #460]	; 0x1cc
 8001000:	8892      	ldrh	r2, [r2, #4]
 8001002:	4293      	cmp	r3, r2
 8001004:	f080 80eb 	bcs.w	80011de <synth_sample+0x3a2>
				op[op_index][voice_index].env_amp = 0;
 8001008:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 800100a:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 800100c:	f8a4 31cc 	strh.w	r3, [r4, #460]	; 0x1cc
				op[op_index][voice_index].adsr_state = SILENT;
 8001010:	f884 21ca 	strb.w	r2, [r4, #458]	; 0x1ca
 8001014:	e78e      	b.n	8000f34 <synth_sample+0xf8>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8001016:	f8b4 c1cc 	ldrh.w	ip, [r4, #460]	; 0x1cc
 800101a:	88b9      	ldrh	r1, [r7, #4]
 800101c:	78b2      	ldrb	r2, [r6, #2]
 800101e:	ebac 0e01 	sub.w	lr, ip, r1
 8001022:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001026:	ea4f 2302 	mov.w	r3, r2, lsl #8
 800102a:	f280 80dd 	bge.w	80011e8 <synth_sample+0x3ac>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 800102e:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001030:	b29b      	uxth	r3, r3
 8001032:	f8a4 31cc 	strh.w	r3, [r4, #460]	; 0x1cc
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001036:	f884 21ca 	strb.w	r2, [r4, #458]	; 0x1ca
 800103a:	e77b      	b.n	8000f34 <synth_sample+0xf8>
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800103c:	4c50      	ldr	r4, [pc, #320]	; (8001180 <synth_sample+0x344>)
	if (--env_period == 0x00) {												//decrement and check envelope period
 800103e:	801d      	strh	r5, [r3, #0]
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001040:	7823      	ldrb	r3, [r4, #0]
 8001042:	2bff      	cmp	r3, #255	; 0xff
 8001044:	f040 80d8 	bne.w	80011f8 <synth_sample+0x3bc>
	int16_t output_volume = 0x0800;											//default output volume 2048
 8001048:	f44f 6800 	mov.w	r8, #2048	; 0x800
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800104c:	7ba3      	ldrb	r3, [r4, #14]
 800104e:	2bff      	cmp	r3, #255	; 0xff
 8001050:	d005      	beq.n	800105e <synth_sample+0x222>
				output_volume += modulate(voice_index);
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fae0 	bl	8000618 <modulate>
 8001058:	4480      	add	r8, r0
 800105a:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800105e:	7f23      	ldrb	r3, [r4, #28]
 8001060:	2bff      	cmp	r3, #255	; 0xff
 8001062:	d005      	beq.n	8001070 <synth_sample+0x234>
				output_volume += modulate(voice_index);
 8001064:	2002      	movs	r0, #2
 8001066:	f7ff fad7 	bl	8000618 <modulate>
 800106a:	4480      	add	r8, r0
 800106c:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001070:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001074:	2bff      	cmp	r3, #255	; 0xff
 8001076:	d005      	beq.n	8001084 <synth_sample+0x248>
				output_volume += modulate(voice_index);
 8001078:	2003      	movs	r0, #3
 800107a:	f7ff facd 	bl	8000618 <modulate>
 800107e:	4480      	add	r8, r0
 8001080:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001084:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001088:	2bff      	cmp	r3, #255	; 0xff
 800108a:	d005      	beq.n	8001098 <synth_sample+0x25c>
				output_volume += modulate(voice_index);
 800108c:	2004      	movs	r0, #4
 800108e:	f7ff fac3 	bl	8000618 <modulate>
 8001092:	4480      	add	r8, r0
 8001094:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001098:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800109c:	2bff      	cmp	r3, #255	; 0xff
 800109e:	d005      	beq.n	80010ac <synth_sample+0x270>
				output_volume += modulate(voice_index);
 80010a0:	2005      	movs	r0, #5
 80010a2:	f7ff fab9 	bl	8000618 <modulate>
 80010a6:	4480      	add	r8, r0
 80010a8:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80010ac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80010b0:	2bff      	cmp	r3, #255	; 0xff
 80010b2:	d005      	beq.n	80010c0 <synth_sample+0x284>
				output_volume += modulate(voice_index);
 80010b4:	2006      	movs	r0, #6
 80010b6:	f7ff faaf 	bl	8000618 <modulate>
 80010ba:	4480      	add	r8, r0
 80010bc:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80010c0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 80010c4:	2bff      	cmp	r3, #255	; 0xff
 80010c6:	d005      	beq.n	80010d4 <synth_sample+0x298>
				output_volume += modulate(voice_index);
 80010c8:	2007      	movs	r0, #7
 80010ca:	f7ff faa5 	bl	8000618 <modulate>
 80010ce:	4480      	add	r8, r0
 80010d0:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80010d4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80010d8:	2bff      	cmp	r3, #255	; 0xff
 80010da:	d005      	beq.n	80010e8 <synth_sample+0x2ac>
				output_volume += modulate(voice_index);
 80010dc:	2008      	movs	r0, #8
 80010de:	f7ff fa9b 	bl	8000618 <modulate>
 80010e2:	4480      	add	r8, r0
 80010e4:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80010e8:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
 80010ec:	2bff      	cmp	r3, #255	; 0xff
 80010ee:	d005      	beq.n	80010fc <synth_sample+0x2c0>
				output_volume += modulate(voice_index);
 80010f0:	2009      	movs	r0, #9
 80010f2:	f7ff fa91 	bl	8000618 <modulate>
 80010f6:	4480      	add	r8, r0
 80010f8:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80010fc:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 8001100:	2bff      	cmp	r3, #255	; 0xff
 8001102:	d005      	beq.n	8001110 <synth_sample+0x2d4>
				output_volume += modulate(voice_index);
 8001104:	200a      	movs	r0, #10
 8001106:	f7ff fa87 	bl	8000618 <modulate>
 800110a:	4480      	add	r8, r0
 800110c:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001110:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8001114:	2bff      	cmp	r3, #255	; 0xff
 8001116:	d005      	beq.n	8001124 <synth_sample+0x2e8>
				output_volume += modulate(voice_index);
 8001118:	200b      	movs	r0, #11
 800111a:	f7ff fa7d 	bl	8000618 <modulate>
 800111e:	4480      	add	r8, r0
 8001120:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001124:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8001128:	2bff      	cmp	r3, #255	; 0xff
 800112a:	d005      	beq.n	8001138 <synth_sample+0x2fc>
				output_volume += modulate(voice_index);
 800112c:	200c      	movs	r0, #12
 800112e:	f7ff fa73 	bl	8000618 <modulate>
 8001132:	4480      	add	r8, r0
 8001134:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001138:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 800113c:	2bff      	cmp	r3, #255	; 0xff
 800113e:	d005      	beq.n	800114c <synth_sample+0x310>
				output_volume += modulate(voice_index);
 8001140:	200d      	movs	r0, #13
 8001142:	f7ff fa69 	bl	8000618 <modulate>
 8001146:	4480      	add	r8, r0
 8001148:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800114c:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d005      	beq.n	8001160 <synth_sample+0x324>
				output_volume += modulate(voice_index);
 8001154:	200e      	movs	r0, #14
 8001156:	f7ff fa5f 	bl	8000618 <modulate>
 800115a:	4480      	add	r8, r0
 800115c:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001160:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 8001164:	2bff      	cmp	r3, #255	; 0xff
 8001166:	f43f ae94 	beq.w	8000e92 <synth_sample+0x56>
				output_volume += modulate(voice_index);
 800116a:	200f      	movs	r0, #15
 800116c:	f7ff fa54 	bl	8000618 <modulate>
 8001170:	4480      	add	r8, r0
 8001172:	fa0f f888 	sxth.w	r8, r8
}
 8001176:	4640      	mov	r0, r8
 8001178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800117c:	200003ba 	.word	0x200003ba
 8001180:	20000034 	.word	0x20000034
 8001184:	200003d0 	.word	0x200003d0
 8001188:	200003b4 	.word	0x200003b4
 800118c:	200003d8 	.word	0x200003d8
 8001190:	200003c4 	.word	0x200003c4
 8001194:	200003cc 	.word	0x200003cc
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001198:	458c      	cmp	ip, r1
 800119a:	f4ff aea3 	bcc.w	8000ee4 <synth_sample+0xa8>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 800119e:	fa1f f38e 	uxth.w	r3, lr
 80011a2:	81a3      	strh	r3, [r4, #12]
 80011a4:	e6a4      	b.n	8000ef0 <synth_sample+0xb4>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	81a3      	strh	r3, [r4, #12]
 80011ac:	e6a0      	b.n	8000ef0 <synth_sample+0xb4>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	81a3      	strh	r3, [r4, #12]
 80011b2:	e69d      	b.n	8000ef0 <synth_sample+0xb4>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 80011bc:	e6a8      	b.n	8000f10 <synth_sample+0xd4>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 80011c4:	e6a4      	b.n	8000f10 <synth_sample+0xd4>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80011c6:	458c      	cmp	ip, r1
 80011c8:	f4ff aefe 	bcc.w	8000fc8 <synth_sample+0x18c>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80011cc:	fa1f f38e 	uxth.w	r3, lr
 80011d0:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 80011d4:	e69c      	b.n	8000f10 <synth_sample+0xd4>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f8a4 31cc 	strh.w	r3, [r4, #460]	; 0x1cc
 80011dc:	e6aa      	b.n	8000f34 <synth_sample+0xf8>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80011de:	1a9b      	subs	r3, r3, r2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f8a4 31cc 	strh.w	r3, [r4, #460]	; 0x1cc
 80011e6:	e6a5      	b.n	8000f34 <synth_sample+0xf8>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80011e8:	458c      	cmp	ip, r1
 80011ea:	f4ff af20 	bcc.w	800102e <synth_sample+0x1f2>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	f8a4 31cc 	strh.w	r3, [r4, #460]	; 0x1cc
 80011f6:	e69d      	b.n	8000f34 <synth_sample+0xf8>
				output_volume += modulate(voice_index);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fa0d 	bl	8000618 <modulate>
 80011fe:	f500 6800 	add.w	r8, r0, #2048	; 0x800
 8001202:	fa0f f888 	sxth.w	r8, r8
 8001206:	e721      	b.n	800104c <synth_sample+0x210>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001208:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <synth_sample+0x44c>)
 800120a:	f8b4 32ac 	ldrh.w	r3, [r4, #684]	; 0x2ac
 800120e:	88d2      	ldrh	r2, [r2, #6]
 8001210:	4413      	add	r3, r2
 8001212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001216:	da22      	bge.n	800125e <synth_sample+0x422>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001218:	b29b      	uxth	r3, r3
 800121a:	f8a4 32ac 	strh.w	r3, [r4, #684]	; 0x2ac
 800121e:	e69e      	b.n	8000f5e <synth_sample+0x122>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001220:	4a1a      	ldr	r2, [pc, #104]	; (800128c <synth_sample+0x450>)
 8001222:	f8b4 32ac 	ldrh.w	r3, [r4, #684]	; 0x2ac
 8001226:	88d2      	ldrh	r2, [r2, #6]
 8001228:	4293      	cmp	r3, r2
 800122a:	d321      	bcc.n	8001270 <synth_sample+0x434>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	b29b      	uxth	r3, r3
 8001230:	f8a4 32ac 	strh.w	r3, [r4, #684]	; 0x2ac
 8001234:	e693      	b.n	8000f5e <synth_sample+0x122>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8001236:	f8b4 c2ac 	ldrh.w	ip, [r4, #684]	; 0x2ac
 800123a:	88f9      	ldrh	r1, [r7, #6]
 800123c:	78f2      	ldrb	r2, [r6, #3]
 800123e:	ebac 0e01 	sub.w	lr, ip, r1
 8001242:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001246:	ea4f 2302 	mov.w	r3, r2, lsl #8
 800124a:	db01      	blt.n	8001250 <synth_sample+0x414>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 800124c:	458c      	cmp	ip, r1
 800124e:	d216      	bcs.n	800127e <synth_sample+0x442>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001250:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001252:	b29b      	uxth	r3, r3
 8001254:	f8a4 32ac 	strh.w	r3, [r4, #684]	; 0x2ac
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001258:	f884 22aa 	strb.w	r2, [r4, #682]	; 0x2aa
 800125c:	e67f      	b.n	8000f5e <synth_sample+0x122>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800125e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001262:	2101      	movs	r1, #1
 8001264:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001266:	f8a4 22ac 	strh.w	r2, [r4, #684]	; 0x2ac
				op[op_index][voice_index].adsr_state = DECAY;
 800126a:	f884 12aa 	strb.w	r1, [r4, #682]	; 0x2aa
 800126e:	e676      	b.n	8000f5e <synth_sample+0x122>
				op[op_index][voice_index].env_amp = 0;
 8001270:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001272:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001274:	f8a4 32ac 	strh.w	r3, [r4, #684]	; 0x2ac
				op[op_index][voice_index].adsr_state = SILENT;
 8001278:	f884 22aa 	strb.w	r2, [r4, #682]	; 0x2aa
 800127c:	e66f      	b.n	8000f5e <synth_sample+0x122>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 800127e:	fa1f f38e 	uxth.w	r3, lr
 8001282:	f8a4 32ac 	strh.w	r3, [r4, #684]	; 0x2ac
 8001286:	e66a      	b.n	8000f5e <synth_sample+0x122>
 8001288:	200003d8 	.word	0x200003d8
 800128c:	200003c4 	.word	0x200003c4

08001290 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	; (80012cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	; (80012d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ba:	f7ff ffe9 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012be:	f001 f927 	bl	8002510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c2:	f7fe ffab 	bl	800021c <main>
  bx lr
 80012c6:	4770      	bx	lr
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80012d0:	080028b4 	.word	0x080028b4
  ldr r2, =_sbss
 80012d4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80012d8:	200004dc 	.word	0x200004dc

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>
	...

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	4a0d      	ldr	r2, [pc, #52]	; (800131c <HAL_InitTick+0x3c>)
{
 80012e8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ea:	7811      	ldrb	r1, [r2, #0]
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_InitTick+0x40>)
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	fbb2 f0f3 	udiv	r0, r2, r3
 80012f8:	f000 f892 	bl	8001420 <HAL_SYSTICK_Config>
 80012fc:	b908      	cbnz	r0, 8001302 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	2d0f      	cmp	r5, #15
 8001300:	d901      	bls.n	8001306 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001302:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001304:	bd38      	pop	{r3, r4, r5, pc}
 8001306:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	4602      	mov	r2, r0
 800130a:	4629      	mov	r1, r5
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f840 	bl	8001394 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_InitTick+0x44>)
 8001316:	4620      	mov	r0, r4
 8001318:	601d      	str	r5, [r3, #0]
}
 800131a:	bd38      	pop	{r3, r4, r5, pc}
 800131c:	20000010 	.word	0x20000010
 8001320:	2000000c 	.word	0x2000000c
 8001324:	20000014 	.word	0x20000014

08001328 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_Init+0x20>)
{
 800132a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001336:	f000 f81b 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ffd0 	bl	80012e0 <HAL_InitTick>
  HAL_MspInit();
 8001340:	f7ff f896 	bl	8000470 <HAL_MspInit>
}
 8001344:	2000      	movs	r0, #0
 8001346:	bd08      	pop	{r3, pc}
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_IncTick+0x10>)
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_IncTick+0x14>)
 8001350:	6811      	ldr	r1, [r2, #0]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	440b      	add	r3, r1
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200004d8 	.word	0x200004d8
 8001360:	20000010 	.word	0x20000010

08001364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001364:	4b01      	ldr	r3, [pc, #4]	; (800136c <HAL_GetTick+0x8>)
 8001366:	6818      	ldr	r0, [r3, #0]
}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200004d8 	.word	0x200004d8

08001370 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001370:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001376:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800137a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001382:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800138a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b430      	push	{r4, r5}
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139e:	f1c3 0507 	rsb	r5, r3, #7
 80013a2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	bf28      	it	cs
 80013aa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ac:	2c06      	cmp	r4, #6
 80013ae:	d919      	bls.n	80013e4 <HAL_NVIC_SetPriority+0x50>
 80013b0:	f04f 34ff 	mov.w	r4, #4294967295
 80013b4:	3b03      	subs	r3, #3
 80013b6:	409c      	lsls	r4, r3
 80013b8:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 34ff 	mov.w	r4, #4294967295
 80013c0:	40ac      	lsls	r4, r5
 80013c2:	ea21 0104 	bic.w	r1, r1, r4
 80013c6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80013c8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ca:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80013ce:	db0c      	blt.n	80013ea <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	0109      	lsls	r1, r1, #4
 80013d2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80013d6:	b2c9      	uxtb	r1, r1
 80013d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80013dc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013e0:	bc30      	pop	{r4, r5}
 80013e2:	4770      	bx	lr
 80013e4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	4613      	mov	r3, r2
 80013e8:	e7e8      	b.n	80013bc <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_NVIC_SetPriority+0x6c>)
 80013ec:	f000 000f 	and.w	r0, r0, #15
 80013f0:	0109      	lsls	r1, r1, #4
 80013f2:	b2c9      	uxtb	r1, r1
 80013f4:	4403      	add	r3, r0
 80013f6:	7619      	strb	r1, [r3, #24]
 80013f8:	bc30      	pop	{r4, r5}
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	e000ecfc 	.word	0xe000ecfc

08001404 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001404:	2800      	cmp	r0, #0
 8001406:	db07      	blt.n	8001418 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001408:	2301      	movs	r3, #1
 800140a:	f000 011f 	and.w	r1, r0, #31
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_NVIC_EnableIRQ+0x18>)
 8001410:	408b      	lsls	r3, r1
 8001412:	0940      	lsrs	r0, r0, #5
 8001414:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	3801      	subs	r0, #1
 8001422:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001426:	d20d      	bcs.n	8001444 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001428:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	4c06      	ldr	r4, [pc, #24]	; (800144c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001434:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143a:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 800143c:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001440:	6019      	str	r1, [r3, #0]
 8001442:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001444:	2001      	movs	r0, #1
 8001446:	4770      	bx	lr
 8001448:	e000e010 	.word	0xe000e010
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001450:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8001454:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001456:	2a02      	cmp	r2, #2
 8001458:	d006      	beq.n	8001468 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145a:	2104      	movs	r1, #4
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145e:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001460:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 8001464:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 8001466:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001468:	2101      	movs	r1, #1
{
 800146a:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 800146c:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001470:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001472:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001474:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001476:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001478:	f024 040e 	bic.w	r4, r4, #14
 800147c:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800147e:	6814      	ldr	r4, [r2, #0]
  return status; 
 8001480:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001482:	f024 0401 	bic.w	r4, r4, #1
 8001486:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800148a:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 800148c:	841d      	strh	r5, [r3, #32]
}
 800148e:	bc70      	pop	{r4, r5, r6}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001494:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8001498:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800149a:	2a02      	cmp	r2, #2
 800149c:	d003      	beq.n	80014a6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149e:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a2:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80014a4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a6:	6802      	ldr	r2, [r0, #0]
{  
 80014a8:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014aa:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ac:	481b      	ldr	r0, [pc, #108]	; (800151c <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ae:	f021 010e 	bic.w	r1, r1, #14
 80014b2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80014b4:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014b6:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 80014b8:	f021 0101 	bic.w	r1, r1, #1
 80014bc:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014be:	d021      	beq.n	8001504 <HAL_DMA_Abort_IT+0x70>
 80014c0:	4917      	ldr	r1, [pc, #92]	; (8001520 <HAL_DMA_Abort_IT+0x8c>)
 80014c2:	428a      	cmp	r2, r1
 80014c4:	d01a      	beq.n	80014fc <HAL_DMA_Abort_IT+0x68>
 80014c6:	3114      	adds	r1, #20
 80014c8:	428a      	cmp	r2, r1
 80014ca:	d01d      	beq.n	8001508 <HAL_DMA_Abort_IT+0x74>
 80014cc:	3114      	adds	r1, #20
 80014ce:	428a      	cmp	r2, r1
 80014d0:	d01d      	beq.n	800150e <HAL_DMA_Abort_IT+0x7a>
 80014d2:	3114      	adds	r1, #20
 80014d4:	428a      	cmp	r2, r1
 80014d6:	d01d      	beq.n	8001514 <HAL_DMA_Abort_IT+0x80>
 80014d8:	3114      	adds	r1, #20
 80014da:	428a      	cmp	r2, r1
 80014dc:	bf0c      	ite	eq
 80014de:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80014e2:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 80014e6:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ea:	4c0e      	ldr	r4, [pc, #56]	; (8001524 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 80014ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ee:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80014f0:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 80014f2:	b129      	cbz	r1, 8001500 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 80014f4:	4618      	mov	r0, r3
 80014f6:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 80014f8:	2000      	movs	r0, #0
}
 80014fa:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014fc:	2210      	movs	r2, #16
 80014fe:	e7f2      	b.n	80014e6 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8001500:	4608      	mov	r0, r1
}
 8001502:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001504:	2201      	movs	r2, #1
 8001506:	e7ee      	b.n	80014e6 <HAL_DMA_Abort_IT+0x52>
 8001508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150c:	e7eb      	b.n	80014e6 <HAL_DMA_Abort_IT+0x52>
 800150e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001512:	e7e8      	b.n	80014e6 <HAL_DMA_Abort_IT+0x52>
 8001514:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001518:	e7e5      	b.n	80014e6 <HAL_DMA_Abort_IT+0x52>
 800151a:	bf00      	nop
 800151c:	40020008 	.word	0x40020008
 8001520:	4002001c 	.word	0x4002001c
 8001524:	40020000 	.word	0x40020000

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	680c      	ldr	r4, [r1, #0]
{
 800152e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001530:	2c00      	cmp	r4, #0
 8001532:	f000 809e 	beq.w	8001672 <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 8001536:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001538:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8001730 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 800153c:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800153e:	4f77      	ldr	r7, [pc, #476]	; (800171c <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 8001540:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8001734 <HAL_GPIO_Init+0x20c>
 8001544:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8001738 <HAL_GPIO_Init+0x210>
 8001548:	9000      	str	r0, [sp, #0]
 800154a:	e004      	b.n	8001556 <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 800154c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154e:	fa34 f203 	lsrs.w	r2, r4, r3
 8001552:	f000 808e 	beq.w	8001672 <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 8001556:	2201      	movs	r2, #1
 8001558:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 800155a:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8001562:	d1f3      	bne.n	800154c <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001564:	684c      	ldr	r4, [r1, #4]
 8001566:	2c12      	cmp	r4, #18
 8001568:	f200 8086 	bhi.w	8001678 <HAL_GPIO_Init+0x150>
 800156c:	2c12      	cmp	r4, #18
 800156e:	d80c      	bhi.n	800158a <HAL_GPIO_Init+0x62>
 8001570:	e8df f004 	tbb	[pc, r4]
 8001574:	0abcbf8a 	.word	0x0abcbf8a
 8001578:	0b0b0b0b 	.word	0x0b0b0b0b
 800157c:	0b0b0b0b 	.word	0x0b0b0b0b
 8001580:	0b0b0b0b 	.word	0x0b0b0b0b
 8001584:	b90b      	.short	0xb90b
 8001586:	b6          	.byte	0xb6
 8001587:	00          	.byte	0x00
 8001588:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800158a:	2dff      	cmp	r5, #255	; 0xff
 800158c:	f200 8083 	bhi.w	8001696 <HAL_GPIO_Init+0x16e>
 8001590:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001594:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001598:	240f      	movs	r4, #15
 800159a:	f8d9 2000 	ldr.w	r2, [r9]
 800159e:	fa04 fb0a 	lsl.w	fp, r4, sl
 80015a2:	ea22 020b 	bic.w	r2, r2, fp
 80015a6:	fa06 fa0a 	lsl.w	sl, r6, sl
 80015aa:	ea42 020a 	orr.w	r2, r2, sl
 80015ae:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80015b6:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 80015ba:	f000 808f 	beq.w	80016dc <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015be:	f8dc a018 	ldr.w	sl, [ip, #24]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	f04a 0a01 	orr.w	sl, sl, #1
 80015ca:	f8cc a018 	str.w	sl, [ip, #24]
 80015ce:	f8dc a018 	ldr.w	sl, [ip, #24]
 80015d2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015d6:	f00a 0a01 	and.w	sl, sl, #1
 80015da:	f8cd a00c 	str.w	sl, [sp, #12]
 80015de:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e2:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e6:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ea:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80015ee:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f2:	fa04 f40a 	lsl.w	r4, r4, sl
 80015f6:	ea2b 0004 	bic.w	r0, fp, r4
 80015fa:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015fc:	9c00      	ldr	r4, [sp, #0]
 80015fe:	4848      	ldr	r0, [pc, #288]	; (8001720 <HAL_GPIO_Init+0x1f8>)
 8001600:	4284      	cmp	r4, r0
 8001602:	d013      	beq.n	800162c <HAL_GPIO_Init+0x104>
 8001604:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001608:	4284      	cmp	r4, r0
 800160a:	d07d      	beq.n	8001708 <HAL_GPIO_Init+0x1e0>
 800160c:	4845      	ldr	r0, [pc, #276]	; (8001724 <HAL_GPIO_Init+0x1fc>)
 800160e:	4284      	cmp	r4, r0
 8001610:	d071      	beq.n	80016f6 <HAL_GPIO_Init+0x1ce>
 8001612:	4845      	ldr	r0, [pc, #276]	; (8001728 <HAL_GPIO_Init+0x200>)
 8001614:	4284      	cmp	r4, r0
 8001616:	bf0c      	ite	eq
 8001618:	f04f 0b03 	moveq.w	fp, #3
 800161c:	f04f 0b04 	movne.w	fp, #4
 8001620:	9801      	ldr	r0, [sp, #4]
 8001622:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001626:	ea40 000a 	orr.w	r0, r0, sl
 800162a:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 800162c:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800162e:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8001632:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	bf14      	ite	ne
 8001638:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800163a:	43aa      	biceq	r2, r5
 800163c:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800163e:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001640:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001644:	bf14      	ite	ne
 8001646:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001648:	43aa      	biceq	r2, r5
 800164a:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800164c:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164e:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001652:	bf14      	ite	ne
 8001654:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001656:	43aa      	biceq	r2, r5
 8001658:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165a:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800165e:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001660:	d039      	beq.n	80016d6 <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001662:	4315      	orrs	r5, r2
 8001664:	60fd      	str	r5, [r7, #12]
 8001666:	680c      	ldr	r4, [r1, #0]
	position++;
 8001668:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	fa34 f203 	lsrs.w	r2, r4, r3
 800166e:	f47f af72 	bne.w	8001556 <HAL_GPIO_Init+0x2e>
  }
}
 8001672:	b005      	add	sp, #20
 8001674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001678:	4544      	cmp	r4, r8
 800167a:	d005      	beq.n	8001688 <HAL_GPIO_Init+0x160>
 800167c:	d913      	bls.n	80016a6 <HAL_GPIO_Init+0x17e>
 800167e:	4574      	cmp	r4, lr
 8001680:	d002      	beq.n	8001688 <HAL_GPIO_Init+0x160>
 8001682:	482a      	ldr	r0, [pc, #168]	; (800172c <HAL_GPIO_Init+0x204>)
 8001684:	4284      	cmp	r4, r0
 8001686:	d180      	bne.n	800158a <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001688:	688c      	ldr	r4, [r1, #8]
 800168a:	b9e4      	cbnz	r4, 80016c6 <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800168c:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800168e:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001692:	f67f af7d 	bls.w	8001590 <HAL_GPIO_Init+0x68>
 8001696:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001698:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800169c:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a0:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a4:	e778      	b.n	8001598 <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 80016a6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800173c <HAL_GPIO_Init+0x214>
 80016aa:	454c      	cmp	r4, r9
 80016ac:	d0ec      	beq.n	8001688 <HAL_GPIO_Init+0x160>
 80016ae:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80016b2:	454c      	cmp	r4, r9
 80016b4:	d0e8      	beq.n	8001688 <HAL_GPIO_Init+0x160>
 80016b6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80016ba:	454c      	cmp	r4, r9
 80016bc:	f47f af65 	bne.w	800158a <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c0:	688c      	ldr	r4, [r1, #8]
 80016c2:	2c00      	cmp	r4, #0
 80016c4:	d0e2      	beq.n	800168c <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 80016c6:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c8:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ca:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 80016ce:	bf0c      	ite	eq
 80016d0:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 80016d2:	6142      	strne	r2, [r0, #20]
 80016d4:	e759      	b.n	800158a <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016d6:	ea22 0505 	bic.w	r5, r2, r5
 80016da:	60fd      	str	r5, [r7, #12]
 80016dc:	680c      	ldr	r4, [r1, #0]
 80016de:	e735      	b.n	800154c <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e0:	68ce      	ldr	r6, [r1, #12]
 80016e2:	360c      	adds	r6, #12
          break;
 80016e4:	e751      	b.n	800158a <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016e6:	68ce      	ldr	r6, [r1, #12]
 80016e8:	3604      	adds	r6, #4
          break;
 80016ea:	e74e      	b.n	800158a <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ec:	68ce      	ldr	r6, [r1, #12]
 80016ee:	3608      	adds	r6, #8
          break;
 80016f0:	e74b      	b.n	800158a <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f2:	68ce      	ldr	r6, [r1, #12]
          break;
 80016f4:	e749      	b.n	800158a <HAL_GPIO_Init+0x62>
 80016f6:	f04f 0b02 	mov.w	fp, #2
 80016fa:	9801      	ldr	r0, [sp, #4]
 80016fc:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001700:	ea40 000a 	orr.w	r0, r0, sl
 8001704:	9001      	str	r0, [sp, #4]
 8001706:	e791      	b.n	800162c <HAL_GPIO_Init+0x104>
 8001708:	f04f 0b01 	mov.w	fp, #1
 800170c:	9801      	ldr	r0, [sp, #4]
 800170e:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001712:	ea40 000a 	orr.w	r0, r0, sl
 8001716:	9001      	str	r0, [sp, #4]
 8001718:	e788      	b.n	800162c <HAL_GPIO_Init+0x104>
 800171a:	bf00      	nop
 800171c:	40010400 	.word	0x40010400
 8001720:	40010800 	.word	0x40010800
 8001724:	40011000 	.word	0x40011000
 8001728:	40011400 	.word	0x40011400
 800172c:	10320000 	.word	0x10320000
 8001730:	40021000 	.word	0x40021000
 8001734:	10220000 	.word	0x10220000
 8001738:	10310000 	.word	0x10310000
 800173c:	10120000 	.word	0x10120000

08001740 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001740:	b902      	cbnz	r2, 8001744 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001742:	0409      	lsls	r1, r1, #16
 8001744:	6101      	str	r1, [r0, #16]
  }
}
 8001746:	4770      	bx	lr

08001748 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001748:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800174a:	ea01 0203 	and.w	r2, r1, r3
 800174e:	ea21 0103 	bic.w	r1, r1, r3
 8001752:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001756:	6101      	str	r1, [r0, #16]
}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop

0800175c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800175c:	2800      	cmp	r0, #0
 800175e:	f000 81c3 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x38c>
{
 8001762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	6803      	ldr	r3, [r0, #0]
 8001768:	4604      	mov	r4, r0
 800176a:	07dd      	lsls	r5, r3, #31
{
 800176c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176e:	d535      	bpl.n	80017dc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001770:	49a6      	ldr	r1, [pc, #664]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 8001772:	684a      	ldr	r2, [r1, #4]
 8001774:	f002 020c 	and.w	r2, r2, #12
 8001778:	2a04      	cmp	r2, #4
 800177a:	f000 80ef 	beq.w	800195c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800177e:	684a      	ldr	r2, [r1, #4]
 8001780:	f002 020c 	and.w	r2, r2, #12
 8001784:	2a08      	cmp	r2, #8
 8001786:	f000 80e5 	beq.w	8001954 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178a:	6863      	ldr	r3, [r4, #4]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d010      	beq.n	80017b4 <HAL_RCC_OscConfig+0x58>
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 810d 	beq.w	80019b2 <HAL_RCC_OscConfig+0x256>
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	f000 818f 	beq.w	8001abe <HAL_RCC_OscConfig+0x362>
 80017a0:	4b9a      	ldr	r3, [pc, #616]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e004      	b.n	80017be <HAL_RCC_OscConfig+0x62>
 80017b4:	4a95      	ldr	r2, [pc, #596]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 80017b6:	6813      	ldr	r3, [r2, #0]
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fdd1 	bl	8001364 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4e92      	ldr	r6, [pc, #584]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80017c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e005      	b.n	80017d4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fdcc 	bl	8001364 <HAL_GetTick>
 80017cc:	1b40      	subs	r0, r0, r5
 80017ce:	2864      	cmp	r0, #100	; 0x64
 80017d0:	f200 80eb 	bhi.w	80019aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d4:	6833      	ldr	r3, [r6, #0]
 80017d6:	039a      	lsls	r2, r3, #14
 80017d8:	d5f6      	bpl.n	80017c8 <HAL_RCC_OscConfig+0x6c>
 80017da:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017dc:	079f      	lsls	r7, r3, #30
 80017de:	d528      	bpl.n	8001832 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e0:	4a8a      	ldr	r2, [pc, #552]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 80017e2:	6851      	ldr	r1, [r2, #4]
 80017e4:	f011 0f0c 	tst.w	r1, #12
 80017e8:	f000 808e 	beq.w	8001908 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ec:	6851      	ldr	r1, [r2, #4]
 80017ee:	f001 010c 	and.w	r1, r1, #12
 80017f2:	2908      	cmp	r1, #8
 80017f4:	f000 8084 	beq.w	8001900 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f8:	6923      	ldr	r3, [r4, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8125 	beq.w	8001a4a <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001800:	2201      	movs	r2, #1
 8001802:	4b83      	ldr	r3, [pc, #524]	; (8001a10 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	4e81      	ldr	r6, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 8001806:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001808:	f7ff fdac 	bl	8001364 <HAL_GetTick>
 800180c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	e005      	b.n	800181c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fda8 	bl	8001364 <HAL_GetTick>
 8001814:	1b40      	subs	r0, r0, r5
 8001816:	2802      	cmp	r0, #2
 8001818:	f200 80c7 	bhi.w	80019aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	6833      	ldr	r3, [r6, #0]
 800181e:	0798      	lsls	r0, r3, #30
 8001820:	d5f6      	bpl.n	8001810 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	6833      	ldr	r3, [r6, #0]
 8001824:	6962      	ldr	r2, [r4, #20]
 8001826:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800182a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800182e:	6033      	str	r3, [r6, #0]
 8001830:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	071a      	lsls	r2, r3, #28
 8001834:	d41f      	bmi.n	8001876 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001836:	075d      	lsls	r5, r3, #29
 8001838:	d541      	bpl.n	80018be <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183a:	4b74      	ldr	r3, [pc, #464]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	00d0      	lsls	r0, r2, #3
 8001840:	d57d      	bpl.n	800193e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <HAL_RCC_OscConfig+0x2b8>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	05d1      	lsls	r1, r2, #23
 800184a:	f140 809d 	bpl.w	8001988 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184e:	68e3      	ldr	r3, [r4, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	f000 810b 	beq.w	8001a6c <HAL_RCC_OscConfig+0x310>
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80c5 	beq.w	80019e6 <HAL_RCC_OscConfig+0x28a>
 800185c:	2b05      	cmp	r3, #5
 800185e:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	f000 8139 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x37c>
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	621a      	str	r2, [r3, #32]
 800186c:	6a1a      	ldr	r2, [r3, #32]
 800186e:	f022 0204 	bic.w	r2, r2, #4
 8001872:	621a      	str	r2, [r3, #32]
 8001874:	e0ff      	b.n	8001a76 <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001876:	69a3      	ldr	r3, [r4, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d050      	beq.n	800191e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 800187c:	2201      	movs	r2, #1
 800187e:	4b66      	ldr	r3, [pc, #408]	; (8001a18 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001880:	4e62      	ldr	r6, [pc, #392]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8001882:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001884:	f7ff fd6e 	bl	8001364 <HAL_GetTick>
 8001888:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	e005      	b.n	8001898 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188c:	f7ff fd6a 	bl	8001364 <HAL_GetTick>
 8001890:	1b40      	subs	r0, r0, r5
 8001892:	2802      	cmp	r0, #2
 8001894:	f200 8089 	bhi.w	80019aa <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001898:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800189a:	079b      	lsls	r3, r3, #30
 800189c:	d5f6      	bpl.n	800188c <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800189e:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <HAL_RCC_OscConfig+0x2c0>)
 80018a0:	4a5f      	ldr	r2, [pc, #380]	; (8001a20 <HAL_RCC_OscConfig+0x2c4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0a5b      	lsrs	r3, r3, #9
 80018aa:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80018ac:	bf00      	nop
  }
  while (Delay --);
 80018ae:	9b01      	ldr	r3, [sp, #4]
 80018b0:	1e5a      	subs	r2, r3, #1
 80018b2:	9201      	str	r2, [sp, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f9      	bne.n	80018ac <HAL_RCC_OscConfig+0x150>
 80018b8:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ba:	075d      	lsls	r5, r3, #29
 80018bc:	d4bd      	bmi.n	800183a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018be:	69e0      	ldr	r0, [r4, #28]
 80018c0:	b1d0      	cbz	r0, 80018f8 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c2:	4d52      	ldr	r5, [pc, #328]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 80018c4:	686a      	ldr	r2, [r5, #4]
 80018c6:	f002 020c 	and.w	r2, r2, #12
 80018ca:	2a08      	cmp	r2, #8
 80018cc:	f000 80e6 	beq.w	8001a9c <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	4a53      	ldr	r2, [pc, #332]	; (8001a24 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d8:	f000 8108 	beq.w	8001aec <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 80018dc:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80018de:	f7ff fd41 	bl	8001364 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80018e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	e004      	b.n	80018f2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fd3c 	bl	8001364 <HAL_GetTick>
 80018ec:	1b40      	subs	r0, r0, r5
 80018ee:	2802      	cmp	r0, #2
 80018f0:	d85b      	bhi.n	80019aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	d4f7      	bmi.n	80018e8 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 80018f8:	2000      	movs	r0, #0
}
 80018fa:	b002      	add	sp, #8
 80018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001900:	6852      	ldr	r2, [r2, #4]
 8001902:	03d6      	lsls	r6, r2, #15
 8001904:	f53f af78 	bmi.w	80017f8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001908:	4a40      	ldr	r2, [pc, #256]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	0795      	lsls	r5, r2, #30
 800190e:	d52f      	bpl.n	8001970 <HAL_RCC_OscConfig+0x214>
 8001910:	6922      	ldr	r2, [r4, #16]
 8001912:	2a01      	cmp	r2, #1
 8001914:	d02c      	beq.n	8001970 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8001916:	2001      	movs	r0, #1
}
 8001918:	b002      	add	sp, #8
 800191a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800191e:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001920:	4e3a      	ldr	r6, [pc, #232]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 8001922:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001924:	f7ff fd1e 	bl	8001364 <HAL_GetTick>
 8001928:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192a:	e004      	b.n	8001936 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fd1a 	bl	8001364 <HAL_GetTick>
 8001930:	1b40      	subs	r0, r0, r5
 8001932:	2802      	cmp	r0, #2
 8001934:	d839      	bhi.n	80019aa <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001936:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001938:	079f      	lsls	r7, r3, #30
 800193a:	d4f7      	bmi.n	800192c <HAL_RCC_OscConfig+0x1d0>
 800193c:	e7bc      	b.n	80018b8 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001940:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001946:	61da      	str	r2, [r3, #28]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001952:	e777      	b.n	8001844 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001954:	684a      	ldr	r2, [r1, #4]
 8001956:	03d0      	lsls	r0, r2, #15
 8001958:	f57f af17 	bpl.w	800178a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	4a2b      	ldr	r2, [pc, #172]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	0391      	lsls	r1, r2, #14
 8001962:	f57f af3b 	bpl.w	80017dc <HAL_RCC_OscConfig+0x80>
 8001966:	6862      	ldr	r2, [r4, #4]
 8001968:	2a00      	cmp	r2, #0
 800196a:	f47f af37 	bne.w	80017dc <HAL_RCC_OscConfig+0x80>
 800196e:	e7d2      	b.n	8001916 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4926      	ldr	r1, [pc, #152]	; (8001a0c <HAL_RCC_OscConfig+0x2b0>)
 8001972:	6960      	ldr	r0, [r4, #20]
 8001974:	680a      	ldr	r2, [r1, #0]
 8001976:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800197a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800197e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001980:	071a      	lsls	r2, r3, #28
 8001982:	f57f af58 	bpl.w	8001836 <HAL_RCC_OscConfig+0xda>
 8001986:	e776      	b.n	8001876 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001988:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001990:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001992:	f7ff fce7 	bl	8001364 <HAL_GetTick>
 8001996:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	05da      	lsls	r2, r3, #23
 800199c:	f53f af57 	bmi.w	800184e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a0:	f7ff fce0 	bl	8001364 <HAL_GetTick>
 80019a4:	1b80      	subs	r0, r0, r6
 80019a6:	2864      	cmp	r0, #100	; 0x64
 80019a8:	d9f6      	bls.n	8001998 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 80019aa:	2003      	movs	r0, #3
}
 80019ac:	b002      	add	sp, #8
 80019ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019b6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80019ba:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019bc:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019cc:	f7ff fcca 	bl	8001364 <HAL_GetTick>
 80019d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	e004      	b.n	80019de <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fcc6 	bl	8001364 <HAL_GetTick>
 80019d8:	1b40      	subs	r0, r0, r5
 80019da:	2864      	cmp	r0, #100	; 0x64
 80019dc:	d8e5      	bhi.n	80019aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	6833      	ldr	r3, [r6, #0]
 80019e0:	039b      	lsls	r3, r3, #14
 80019e2:	d4f7      	bmi.n	80019d4 <HAL_RCC_OscConfig+0x278>
 80019e4:	e6f9      	b.n	80017da <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80019ee:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	621a      	str	r2, [r3, #32]
 80019f8:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fe:	f022 0204 	bic.w	r2, r2, #4
 8001a02:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8001a04:	f7ff fcae 	bl	8001364 <HAL_GetTick>
 8001a08:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0a:	e012      	b.n	8001a32 <HAL_RCC_OscConfig+0x2d6>
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	42420000 	.word	0x42420000
 8001a14:	40007000 	.word	0x40007000
 8001a18:	42420480 	.word	0x42420480
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	10624dd3 	.word	0x10624dd3
 8001a24:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a28:	f7ff fc9c 	bl	8001364 <HAL_GetTick>
 8001a2c:	1b80      	subs	r0, r0, r6
 8001a2e:	4540      	cmp	r0, r8
 8001a30:	d8bb      	bhi.n	80019aa <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	0798      	lsls	r0, r3, #30
 8001a36:	d4f7      	bmi.n	8001a28 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8001a38:	2d00      	cmp	r5, #0
 8001a3a:	f43f af40 	beq.w	80018be <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3e:	4a44      	ldr	r2, [pc, #272]	; (8001b50 <HAL_RCC_OscConfig+0x3f4>)
 8001a40:	69d3      	ldr	r3, [r2, #28]
 8001a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a46:	61d3      	str	r3, [r2, #28]
 8001a48:	e739      	b.n	80018be <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4a42      	ldr	r2, [pc, #264]	; (8001b54 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4c:	4e40      	ldr	r6, [pc, #256]	; (8001b50 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001a50:	f7ff fc88 	bl	8001364 <HAL_GetTick>
 8001a54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e004      	b.n	8001a62 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fc84 	bl	8001364 <HAL_GetTick>
 8001a5c:	1b40      	subs	r0, r0, r5
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d8a3      	bhi.n	80019aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	6833      	ldr	r3, [r6, #0]
 8001a64:	0799      	lsls	r1, r3, #30
 8001a66:	d4f7      	bmi.n	8001a58 <HAL_RCC_OscConfig+0x2fc>
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	e6e2      	b.n	8001832 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	4a38      	ldr	r2, [pc, #224]	; (8001b50 <HAL_RCC_OscConfig+0x3f4>)
 8001a6e:	6a13      	ldr	r3, [r2, #32]
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001a76:	f7ff fc75 	bl	8001364 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a7e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4f33      	ldr	r7, [pc, #204]	; (8001b50 <HAL_RCC_OscConfig+0x3f4>)
 8001a82:	e004      	b.n	8001a8e <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff fc6e 	bl	8001364 <HAL_GetTick>
 8001a88:	1b80      	subs	r0, r0, r6
 8001a8a:	4540      	cmp	r0, r8
 8001a8c:	d88d      	bhi.n	80019aa <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	079b      	lsls	r3, r3, #30
 8001a92:	d5f7      	bpl.n	8001a84 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	f43f af12 	beq.w	80018be <HAL_RCC_OscConfig+0x162>
 8001a9a:	e7d0      	b.n	8001a3e <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9c:	2801      	cmp	r0, #1
 8001a9e:	f43f af2c 	beq.w	80018fa <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8001aa2:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa4:	6a22      	ldr	r2, [r4, #32]
 8001aa6:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001aaa:	4291      	cmp	r1, r2
 8001aac:	f47f af33 	bne.w	8001916 <HAL_RCC_OscConfig+0x1ba>
 8001ab0:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8001ab6:	1a18      	subs	r0, r3, r0
 8001ab8:	bf18      	it	ne
 8001aba:	2001      	movne	r0, #1
 8001abc:	e71d      	b.n	80018fa <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ac2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e672      	b.n	80017be <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	f042 0204 	orr.w	r2, r2, #4
 8001adc:	621a      	str	r2, [r3, #32]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	621a      	str	r2, [r3, #32]
 8001ae6:	e7c6      	b.n	8001a76 <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8001ae8:	2001      	movs	r0, #1
}
 8001aea:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8001aec:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001aee:	f7ff fc39 	bl	8001364 <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e005      	b.n	8001b02 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fc35 	bl	8001364 <HAL_GetTick>
 8001afa:	1b80      	subs	r0, r0, r6
 8001afc:	2802      	cmp	r0, #2
 8001afe:	f63f af54 	bhi.w	80019aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b02:	682b      	ldr	r3, [r5, #0]
 8001b04:	0199      	lsls	r1, r3, #6
 8001b06:	d4f6      	bmi.n	8001af6 <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b08:	6a23      	ldr	r3, [r4, #32]
 8001b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b10:	686a      	ldr	r2, [r5, #4]
 8001b12:	68a1      	ldr	r1, [r4, #8]
 8001b14:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1e:	4d0c      	ldr	r5, [pc, #48]	; (8001b50 <HAL_RCC_OscConfig+0x3f4>)
 8001b20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b22:	686a      	ldr	r2, [r5, #4]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001b2a:	490b      	ldr	r1, [pc, #44]	; (8001b58 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b30:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8001b32:	f7ff fc17 	bl	8001364 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b36:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001b38:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff fc12 	bl	8001364 <HAL_GetTick>
 8001b40:	1b40      	subs	r0, r0, r5
 8001b42:	2802      	cmp	r0, #2
 8001b44:	f63f af31 	bhi.w	80019aa <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	019a      	lsls	r2, r3, #6
 8001b4c:	d5f6      	bpl.n	8001b3c <HAL_RCC_OscConfig+0x3e0>
 8001b4e:	e6d3      	b.n	80018f8 <HAL_RCC_OscConfig+0x19c>
 8001b50:	40021000 	.word	0x40021000
 8001b54:	42420000 	.word	0x42420000
 8001b58:	42420060 	.word	0x42420060

08001b5c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	f000 80af 	beq.w	8001cc0 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b62:	4a5d      	ldr	r2, [pc, #372]	; (8001cd8 <HAL_RCC_ClockConfig+0x17c>)
{
 8001b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	6813      	ldr	r3, [r2, #0]
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	428b      	cmp	r3, r1
 8001b72:	460d      	mov	r5, r1
{
 8001b74:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b76:	d20d      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	f023 0307 	bic.w	r3, r3, #7
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	d003      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8001b8c:	2001      	movs	r0, #1
}
 8001b8e:	b006      	add	sp, #24
 8001b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	0798      	lsls	r0, r3, #30
 8001b98:	d514      	bpl.n	8001bc4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9a:	0759      	lsls	r1, r3, #29
 8001b9c:	d504      	bpl.n	8001ba8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b9e:	494f      	ldr	r1, [pc, #316]	; (8001cdc <HAL_RCC_ClockConfig+0x180>)
 8001ba0:	684a      	ldr	r2, [r1, #4]
 8001ba2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001ba6:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba8:	071a      	lsls	r2, r3, #28
 8001baa:	d504      	bpl.n	8001bb6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bac:	494b      	ldr	r1, [pc, #300]	; (8001cdc <HAL_RCC_ClockConfig+0x180>)
 8001bae:	684a      	ldr	r2, [r1, #4]
 8001bb0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001bb4:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb6:	4949      	ldr	r1, [pc, #292]	; (8001cdc <HAL_RCC_ClockConfig+0x180>)
 8001bb8:	68a0      	ldr	r0, [r4, #8]
 8001bba:	684a      	ldr	r2, [r1, #4]
 8001bbc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001bc0:	4302      	orrs	r2, r0
 8001bc2:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc4:	07db      	lsls	r3, r3, #31
 8001bc6:	d520      	bpl.n	8001c0a <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bcc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd0:	d078      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd2:	2a02      	cmp	r2, #2
 8001bd4:	d071      	beq.n	8001cba <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	0798      	lsls	r0, r3, #30
 8001bd8:	d5d8      	bpl.n	8001b8c <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4e40      	ldr	r6, [pc, #256]	; (8001cdc <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be0:	6873      	ldr	r3, [r6, #4]
 8001be2:	f023 0303 	bic.w	r3, r3, #3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001bea:	f7ff fbbb 	bl	8001364 <HAL_GetTick>
 8001bee:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf0:	e004      	b.n	8001bfc <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf2:	f7ff fbb7 	bl	8001364 <HAL_GetTick>
 8001bf6:	1bc0      	subs	r0, r0, r7
 8001bf8:	4540      	cmp	r0, r8
 8001bfa:	d866      	bhi.n	8001cca <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfc:	6873      	ldr	r3, [r6, #4]
 8001bfe:	6862      	ldr	r2, [r4, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c08:	d1f3      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_RCC_ClockConfig+0x17c>)
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	42ab      	cmp	r3, r5
 8001c14:	d909      	bls.n	8001c2a <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	f023 0307 	bic.w	r3, r3, #7
 8001c1c:	432b      	orrs	r3, r5
 8001c1e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	42ab      	cmp	r3, r5
 8001c28:	d1b0      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	0759      	lsls	r1, r3, #29
 8001c2e:	d506      	bpl.n	8001c3e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c30:	492a      	ldr	r1, [pc, #168]	; (8001cdc <HAL_RCC_ClockConfig+0x180>)
 8001c32:	68e0      	ldr	r0, [r4, #12]
 8001c34:	684a      	ldr	r2, [r1, #4]
 8001c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	071a      	lsls	r2, r3, #28
 8001c40:	d507      	bpl.n	8001c52 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c42:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <HAL_RCC_ClockConfig+0x180>)
 8001c44:	6921      	ldr	r1, [r4, #16]
 8001c46:	6853      	ldr	r3, [r2, #4]
 8001c48:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c50:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c52:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_RCC_ClockConfig+0x184>)
 8001c58:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c5a:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c60:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8001c64:	491d      	ldr	r1, [pc, #116]	; (8001cdc <HAL_RCC_ClockConfig+0x180>)
 8001c66:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c68:	f002 030c 	and.w	r3, r2, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d011      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c72:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <HAL_RCC_ClockConfig+0x180>)
 8001c74:	481c      	ldr	r0, [pc, #112]	; (8001ce8 <HAL_RCC_ClockConfig+0x18c>)
 8001c76:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8001c78:	491c      	ldr	r1, [pc, #112]	; (8001cec <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c7a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001c7e:	5c80      	ldrb	r0, [r0, r2]
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_RCC_ClockConfig+0x194>)
 8001c82:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8001c84:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c86:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001c88:	f7ff fb2a 	bl	80012e0 <HAL_InitTick>
  return HAL_OK;
 8001c8c:	2000      	movs	r0, #0
}
 8001c8e:	b006      	add	sp, #24
 8001c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c94:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001c98:	4423      	add	r3, r4
 8001c9a:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c9e:	03d3      	lsls	r3, r2, #15
 8001ca0:	d515      	bpl.n	8001cce <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca2:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca6:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001caa:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cae:	4422      	add	r2, r4
 8001cb0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cb8:	e7db      	b.n	8001c72 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	019e      	lsls	r6, r3, #6
 8001cbc:	d48d      	bmi.n	8001bda <HAL_RCC_ClockConfig+0x7e>
 8001cbe:	e765      	b.n	8001b8c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001cc0:	2001      	movs	r0, #1
}
 8001cc2:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc4:	039f      	lsls	r7, r3, #14
 8001cc6:	d488      	bmi.n	8001bda <HAL_RCC_ClockConfig+0x7e>
 8001cc8:	e760      	b.n	8001b8c <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8001cca:	2003      	movs	r0, #3
 8001ccc:	e75f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x198>)
 8001cd0:	fb03 f300 	mul.w	r3, r3, r0
 8001cd4:	e7cd      	b.n	8001c72 <HAL_RCC_ClockConfig+0x116>
 8001cd6:	bf00      	nop
 8001cd8:	40022000 	.word	0x40022000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08002898 	.word	0x08002898
 8001ce4:	007a1200 	.word	0x007a1200
 8001ce8:	08002880 	.word	0x08002880
 8001cec:	20000014 	.word	0x20000014
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	003d0900 	.word	0x003d0900

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001cfa:	4905      	ldr	r1, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d04:	5ccb      	ldrb	r3, [r1, r3]
 8001d06:	6810      	ldr	r0, [r2, #0]
}
 8001d08:	40d8      	lsrs	r0, r3
 8001d0a:	4770      	bx	lr
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08002890 	.word	0x08002890
 8001d14:	2000000c 	.word	0x2000000c

08001d18 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d1a:	4905      	ldr	r1, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d20:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d24:	5ccb      	ldrb	r3, [r1, r3]
 8001d26:	6810      	ldr	r0, [r2, #0]
}
 8001d28:	40d8      	lsrs	r0, r3
 8001d2a:	4770      	bx	lr
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	08002890 	.word	0x08002890
 8001d34:	2000000c 	.word	0x2000000c

08001d38 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d055      	beq.n	8001de8 <HAL_SPI_Init+0xb0>
{
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d40:	4604      	mov	r4, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d041      	beq.n	8001dca <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d46:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d48:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4c:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d4e:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d52:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d54:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8001d58:	2900      	cmp	r1, #0
 8001d5a:	d03c      	beq.n	8001dd6 <HAL_SPI_Init+0x9e>
 8001d5c:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d5e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d62:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001d64:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d66:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d68:	68e1      	ldr	r1, [r4, #12]
 8001d6a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001d6e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001d72:	4303      	orrs	r3, r0
 8001d74:	6920      	ldr	r0, [r4, #16]
 8001d76:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8001d7a:	4038      	ands	r0, r7
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	6961      	ldr	r1, [r4, #20]
 8001d80:	4303      	orrs	r3, r0
 8001d82:	69a0      	ldr	r0, [r4, #24]
 8001d84:	4031      	ands	r1, r6
 8001d86:	430b      	orrs	r3, r1
 8001d88:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d90:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d94:	6a27      	ldr	r7, [r4, #32]
 8001d96:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8001da0:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001da2:	433b      	orrs	r3, r7
 8001da4:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8001da6:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001da8:	0c00      	lsrs	r0, r0, #16
 8001daa:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8001dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db2:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001db4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001db6:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001db8:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 8001dba:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dc0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dc2:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dc4:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8001dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dca:	6842      	ldr	r2, [r0, #4]
 8001dcc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001dd0:	d0bc      	beq.n	8001d4c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd2:	61c3      	str	r3, [r0, #28]
 8001dd4:	e7ba      	b.n	8001d4c <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8001dd6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7fe fb6a 	bl	80004b4 <HAL_SPI_MspInit>
 8001de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001de2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001de6:	e7ba      	b.n	8001d5e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8001de8:	2001      	movs	r0, #1
}
 8001dea:	4770      	bx	lr

08001dec <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d05d      	beq.n	8001eac <HAL_TIM_Base_Init+0xc0>
{
 8001df0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001df6:	4604      	mov	r4, r0
 8001df8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03c      	beq.n	8001e7a <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e00:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e02:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e04:	492a      	ldr	r1, [pc, #168]	; (8001eb0 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001e06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e0a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8001e0c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e0e:	d039      	beq.n	8001e84 <HAL_TIM_Base_Init+0x98>
 8001e10:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001e14:	d028      	beq.n	8001e68 <HAL_TIM_Base_Init+0x7c>
 8001e16:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8001e1a:	428a      	cmp	r2, r1
 8001e1c:	d024      	beq.n	8001e68 <HAL_TIM_Base_Init+0x7c>
 8001e1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001e22:	428a      	cmp	r2, r1
 8001e24:	d020      	beq.n	8001e68 <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e26:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e28:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e2a:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e30:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001e32:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e34:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001e36:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e3c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001e44:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001e48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001e4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001e5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001e60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e64:	2000      	movs	r0, #0
}
 8001e66:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8001e68:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e6e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e70:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e76:	430b      	orrs	r3, r1
 8001e78:	e7d5      	b.n	8001e26 <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 8001e7a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e7e:	f7fe fb4d 	bl	800051c <HAL_TIM_Base_MspInit>
 8001e82:	e7bd      	b.n	8001e00 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8001e84:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e8a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e92:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	69a1      	ldr	r1, [r4, #24]
 8001e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e9a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001e9c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e9e:	68e3      	ldr	r3, [r4, #12]
 8001ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001ea2:	6863      	ldr	r3, [r4, #4]
 8001ea4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea6:	6963      	ldr	r3, [r4, #20]
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	e7c5      	b.n	8001e38 <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
}
 8001eae:	4770      	bx	lr
 8001eb0:	40012c00 	.word	0x40012c00

08001eb4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d11f      	bne.n	8001efc <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ebe:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec4:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec6:	490f      	ldr	r1, [pc, #60]	; (8001f04 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ecc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ece:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed0:	d009      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x32>
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed6:	d006      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x32>
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <HAL_TIM_Base_Start_IT+0x54>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x32>
 8001ede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d104      	bne.n	8001ef0 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eec:	2a06      	cmp	r2, #6
 8001eee:	d007      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8001ef0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001ef2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	4770      	bx	lr
    return HAL_ERROR;
 8001efc:	2001      	movs	r0, #1
 8001efe:	4770      	bx	lr
  return HAL_OK;
 8001f00:	2000      	movs	r0, #0
}
 8001f02:	4770      	bx	lr
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	40000400 	.word	0x40000400

08001f0c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d074      	beq.n	8001ffe <HAL_TIM_ConfigClockSource+0xf2>
{
 8001f14:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8001f16:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8001f18:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 8001f1a:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8001f1c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f24:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f26:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f28:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8001f2c:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8001f30:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8001f32:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f34:	d065      	beq.n	8002002 <HAL_TIM_ConfigClockSource+0xf6>
 8001f36:	d831      	bhi.n	8001f9c <HAL_TIM_ConfigClockSource+0x90>
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d048      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0xc2>
 8001f3c:	d921      	bls.n	8001f82 <HAL_TIM_ConfigClockSource+0x76>
 8001f3e:	2b50      	cmp	r3, #80	; 0x50
 8001f40:	d116      	bne.n	8001f70 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f42:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f44:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f46:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f48:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f4c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f4e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f50:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f52:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f5a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f5e:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f60:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8001f62:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f64:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f6a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f6e:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8001f70:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f72:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001f74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001f78:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8001f7c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001f7e:	4618      	mov	r0, r3
}
 8001f80:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d002      	beq.n	8001f8c <HAL_TIM_ConfigClockSource+0x80>
 8001f86:	d91e      	bls.n	8001fc6 <HAL_TIM_ConfigClockSource+0xba>
 8001f88:	2b30      	cmp	r3, #48	; 0x30
 8001f8a:	d1f1      	bne.n	8001f70 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8001f8c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f8e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f92:	430b      	orrs	r3, r1
 8001f94:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8001f98:	6093      	str	r3, [r2, #8]
}
 8001f9a:	e7e9      	b.n	8001f70 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8001f9c:	2b70      	cmp	r3, #112	; 0x70
 8001f9e:	d049      	beq.n	8002034 <HAL_TIM_ConfigClockSource+0x128>
 8001fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fa4:	d1e4      	bne.n	8001f70 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fa6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8001faa:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001fac:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fae:	432b      	orrs	r3, r5
 8001fb0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fb8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fba:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fbc:	6893      	ldr	r3, [r2, #8]
 8001fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc2:	6093      	str	r3, [r2, #8]
      break;
 8001fc4:	e7d4      	b.n	8001f70 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8001fc6:	f033 0110 	bics.w	r1, r3, #16
 8001fca:	d1d1      	bne.n	8001f70 <HAL_TIM_ConfigClockSource+0x64>
 8001fcc:	e7de      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8001fce:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd0:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd2:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd4:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd8:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fda:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fdc:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fde:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fe6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001fea:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001fec:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8001fee:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8001ff0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ff6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8001ffa:	6093      	str	r3, [r2, #8]
}
 8001ffc:	e7b8      	b.n	8001f70 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8001ffe:	2002      	movs	r0, #2
}
 8002000:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002002:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002004:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002006:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800200a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800200c:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200e:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8002010:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002012:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800201a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800201e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002022:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002024:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002026:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800202c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002030:	6093      	str	r3, [r2, #8]
}
 8002032:	e79d      	b.n	8001f70 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002034:	68cc      	ldr	r4, [r1, #12]
 8002036:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800203a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800203c:	432b      	orrs	r3, r5
 800203e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002042:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002046:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002048:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800204a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800204c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002050:	6093      	str	r3, [r2, #8]
      break;
 8002052:	e78d      	b.n	8001f70 <HAL_TIM_ConfigClockSource+0x64>

08002054 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002058:	2b01      	cmp	r3, #1
 800205a:	d026      	beq.n	80020aa <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800205e:	6803      	ldr	r3, [r0, #0]
{
 8002060:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002062:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002066:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002068:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800206a:	4d11      	ldr	r5, [pc, #68]	; (80020b0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800206c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002070:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002072:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8002074:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8002076:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002078:	d009      	beq.n	800208e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800207a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207e:	d006      	beq.n	800208e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002080:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800208a:	4293      	cmp	r3, r2
 800208c:	d104      	bne.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800208e:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002090:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002094:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002096:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002098:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800209a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800209c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80020a0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 80020a4:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80020a6:	4618      	mov	r0, r3
}
 80020a8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80020aa:	2002      	movs	r0, #2
}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40000400 	.word	0x40000400

080020b8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d061      	beq.n	8002180 <HAL_UART_Init+0xc8>
{
 80020bc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020c2:	4604      	mov	r4, r0
 80020c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d051      	beq.n	8002170 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020cc:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020ce:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80020d4:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d6:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 80020d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020dc:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020de:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020e0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80020e6:	4301      	orrs	r1, r0
 80020e8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80020ea:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020ec:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 80020f0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020f4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80020f6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020fa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8002104:	491f      	ldr	r1, [pc, #124]	; (8002184 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002106:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800210a:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 800210c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800210e:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8002110:	d033      	beq.n	800217a <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002112:	f7ff fdf1 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002116:	6863      	ldr	r3, [r4, #4]
 8002118:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800211c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002128:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 800212a:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800212c:	4816      	ldr	r0, [pc, #88]	; (8002188 <HAL_UART_Init+0xd0>)
 800212e:	fba0 c103 	umull	ip, r1, r0, r3
 8002132:	0949      	lsrs	r1, r1, #5
 8002134:	fb02 3311 	mls	r3, r2, r1, r3
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	3332      	adds	r3, #50	; 0x32
 800213c:	fba0 2303 	umull	r2, r3, r0, r3
 8002140:	0109      	lsls	r1, r1, #4
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8002148:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800214a:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800214c:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800214e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002152:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002154:	6953      	ldr	r3, [r2, #20]
 8002156:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800215a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800215c:	68d3      	ldr	r3, [r2, #12]
 800215e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002162:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002164:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002166:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800216a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 800216e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8002170:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002174:	f7fe f9ee 	bl	8000554 <HAL_UART_MspInit>
 8002178:	e7a8      	b.n	80020cc <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800217a:	f7ff fdcd 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 800217e:	e7ca      	b.n	8002116 <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
}
 8002182:	4770      	bx	lr
 8002184:	40013800 	.word	0x40013800
 8002188:	51eb851f 	.word	0x51eb851f

0800218c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800218c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002190:	2b20      	cmp	r3, #32
 8002192:	d123      	bne.n	80021dc <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8002194:	b301      	cbz	r1, 80021d8 <HAL_UART_Receive_IT+0x4c>
 8002196:	b1fa      	cbz	r2, 80021d8 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8002198:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d01d      	beq.n	80021dc <HAL_UART_Receive_IT+0x50>
{
 80021a0:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a2:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021a4:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021a6:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a8:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 80021aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 80021ae:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b0:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021b2:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021b6:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 80021b8:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021ba:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 80021be:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021c0:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80021c2:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80021c4:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80021cc:	68e3      	ldr	r3, [r4, #12]
 80021ce:	f043 0320 	orr.w	r3, r3, #32
 80021d2:	60e3      	str	r3, [r4, #12]
}
 80021d4:	bc30      	pop	{r4, r5}
 80021d6:	4770      	bx	lr
      return HAL_ERROR;
 80021d8:	2001      	movs	r0, #1
 80021da:	4770      	bx	lr
    return HAL_BUSY;
 80021dc:	2002      	movs	r0, #2
}
 80021de:	4770      	bx	lr

080021e0 <HAL_UART_TxCpltCallback>:
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop

080021e4 <HAL_UART_ErrorCallback>:
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <UART_DMAAbortOnError>:
{
 80021e8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80021ea:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80021ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021f0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80021f2:	f7ff fff7 	bl	80021e4 <HAL_UART_ErrorCallback>
}
 80021f6:	bd08      	pop	{r3, pc}

080021f8 <HAL_UARTEx_RxEventCallback>:
}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021fc:	6883      	ldr	r3, [r0, #8]
 80021fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002202:	d03b      	beq.n	800227c <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002204:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002206:	2b00      	cmp	r3, #0
 8002208:	d02f      	beq.n	800226a <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002212:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002214:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002216:	3301      	adds	r3, #1
 8002218:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800221a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800221c:	3b01      	subs	r3, #1
 800221e:	b29b      	uxth	r3, r3
 8002220:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002222:	bb4b      	cbnz	r3, 8002278 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002224:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8002226:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002228:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800222a:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800222c:	68d1      	ldr	r1, [r2, #12]
 800222e:	f021 0120 	bic.w	r1, r1, #32
 8002232:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002234:	68d1      	ldr	r1, [r2, #12]
 8002236:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800223a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800223c:	6951      	ldr	r1, [r2, #20]
 800223e:	f021 0101 	bic.w	r1, r1, #1
 8002242:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002244:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002248:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800224a:	2901      	cmp	r1, #1
 800224c:	d121      	bne.n	8002292 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800224e:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002250:	68d1      	ldr	r1, [r2, #12]
 8002252:	f021 0110 	bic.w	r1, r1, #16
 8002256:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002258:	6811      	ldr	r1, [r2, #0]
 800225a:	06c9      	lsls	r1, r1, #27
 800225c:	d423      	bmi.n	80022a6 <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800225e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002260:	f7ff ffca 	bl	80021f8 <HAL_UARTEx_RxEventCallback>
}
 8002264:	2000      	movs	r0, #0
 8002266:	b002      	add	sp, #8
 8002268:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800226a:	6903      	ldr	r3, [r0, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1cc      	bne.n	800220a <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002270:	6803      	ldr	r3, [r0, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	7013      	strb	r3, [r2, #0]
 8002276:	e7cd      	b.n	8002214 <UART_Receive_IT.part.0+0x18>
}
 8002278:	2000      	movs	r0, #0
 800227a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227c:	6903      	ldr	r3, [r0, #16]
 800227e:	b96b      	cbnz	r3, 800229c <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002280:	6802      	ldr	r2, [r0, #0]
 8002282:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002284:	6852      	ldr	r2, [r2, #4]
 8002286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800228a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800228e:	6283      	str	r3, [r0, #40]	; 0x28
 8002290:	e7c3      	b.n	800221a <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8002292:	f7fe f86d 	bl	8000370 <HAL_UART_RxCpltCallback>
}
 8002296:	2000      	movs	r0, #0
 8002298:	b002      	add	sp, #8
 800229a:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800229c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800229e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	7013      	strb	r3, [r2, #0]
 80022a4:	e7b6      	b.n	8002214 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	6813      	ldr	r3, [r2, #0]
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	6853      	ldr	r3, [r2, #4]
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	9b01      	ldr	r3, [sp, #4]
 80022b2:	e7d4      	b.n	800225e <UART_Receive_IT.part.0+0x62>

080022b4 <HAL_UART_IRQHandler>:
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022b6:	6803      	ldr	r3, [r0, #0]
{
 80022b8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022ba:	681a      	ldr	r2, [r3, #0]
{
 80022bc:	b082      	sub	sp, #8
  if (errorflags == RESET)
 80022be:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022c0:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022c2:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80022c4:	d14e      	bne.n	8002364 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c6:	0696      	lsls	r6, r2, #26
 80022c8:	d502      	bpl.n	80022d0 <HAL_UART_IRQHandler+0x1c>
 80022ca:	068d      	lsls	r5, r1, #26
 80022cc:	f100 8090 	bmi.w	80023f0 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80022d2:	2801      	cmp	r0, #1
 80022d4:	d00b      	beq.n	80022ee <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022d6:	0616      	lsls	r6, r2, #24
 80022d8:	d502      	bpl.n	80022e0 <HAL_UART_IRQHandler+0x2c>
 80022da:	060d      	lsls	r5, r1, #24
 80022dc:	f100 8092 	bmi.w	8002404 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022e0:	0650      	lsls	r0, r2, #25
 80022e2:	d502      	bpl.n	80022ea <HAL_UART_IRQHandler+0x36>
 80022e4:	064a      	lsls	r2, r1, #25
 80022e6:	f100 80ab 	bmi.w	8002440 <HAL_UART_IRQHandler+0x18c>
}
 80022ea:	b002      	add	sp, #8
 80022ec:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 80022ee:	06d5      	lsls	r5, r2, #27
 80022f0:	d5f1      	bpl.n	80022d6 <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80022f2:	06c8      	lsls	r0, r1, #27
 80022f4:	d5ef      	bpl.n	80022d6 <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022f6:	2100      	movs	r1, #0
 80022f8:	9101      	str	r1, [sp, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	9201      	str	r2, [sp, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	9201      	str	r2, [sp, #4]
 8002302:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800230a:	f000 80d2 	beq.w	80024b2 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800230e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002310:	6802      	ldr	r2, [r0, #0]
 8002312:	6852      	ldr	r2, [r2, #4]
 8002314:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8002316:	2a00      	cmp	r2, #0
 8002318:	d0e7      	beq.n	80022ea <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800231a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800231c:	4295      	cmp	r5, r2
 800231e:	d9e4      	bls.n	80022ea <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002320:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 8002322:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002324:	2e20      	cmp	r6, #32
 8002326:	d016      	beq.n	8002356 <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 8002328:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002330:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002340:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8002342:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002346:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	f022 0210 	bic.w	r2, r2, #16
 800234e:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002350:	f7ff f87e 	bl	8001450 <HAL_DMA_Abort>
 8002354:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002356:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8002358:	4620      	mov	r0, r4
 800235a:	1a69      	subs	r1, r5, r1
 800235c:	b289      	uxth	r1, r1
 800235e:	f7ff ff4b 	bl	80021f8 <HAL_UARTEx_RxEventCallback>
 8002362:	e7c2      	b.n	80022ea <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002364:	f005 0501 	and.w	r5, r5, #1
 8002368:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800236c:	4328      	orrs	r0, r5
 800236e:	d0af      	beq.n	80022d0 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002370:	07d0      	lsls	r0, r2, #31
 8002372:	d505      	bpl.n	8002380 <HAL_UART_IRQHandler+0xcc>
 8002374:	05ce      	lsls	r6, r1, #23
 8002376:	d503      	bpl.n	8002380 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002378:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800237a:	f040 0001 	orr.w	r0, r0, #1
 800237e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002380:	0750      	lsls	r0, r2, #29
 8002382:	d52c      	bpl.n	80023de <HAL_UART_IRQHandler+0x12a>
 8002384:	b12d      	cbz	r5, 8002392 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002386:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002388:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800238a:	f040 0002 	orr.w	r0, r0, #2
 800238e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002390:	d429      	bmi.n	80023e6 <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002392:	0716      	lsls	r6, r2, #28
 8002394:	d507      	bpl.n	80023a6 <HAL_UART_IRQHandler+0xf2>
 8002396:	f001 0020 	and.w	r0, r1, #32
 800239a:	4328      	orrs	r0, r5
 800239c:	d003      	beq.n	80023a6 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800239e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80023a0:	f040 0008 	orr.w	r0, r0, #8
 80023a4:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80023a8:	2800      	cmp	r0, #0
 80023aa:	d09e      	beq.n	80022ea <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ac:	0690      	lsls	r0, r2, #26
 80023ae:	d509      	bpl.n	80023c4 <HAL_UART_IRQHandler+0x110>
 80023b0:	068a      	lsls	r2, r1, #26
 80023b2:	d507      	bpl.n	80023c4 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023b4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80023b8:	2a22      	cmp	r2, #34	; 0x22
 80023ba:	d103      	bne.n	80023c4 <HAL_UART_IRQHandler+0x110>
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff ff1d 	bl	80021fc <UART_Receive_IT.part.0>
 80023c2:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023c4:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023c6:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023c8:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023cc:	f005 0508 	and.w	r5, r5, #8
 80023d0:	4315      	orrs	r5, r2
 80023d2:	d140      	bne.n	8002456 <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7ff ff05 	bl	80021e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023da:	6425      	str	r5, [r4, #64]	; 0x40
 80023dc:	e785      	b.n	80022ea <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023de:	0790      	lsls	r0, r2, #30
 80023e0:	d5d7      	bpl.n	8002392 <HAL_UART_IRQHandler+0xde>
 80023e2:	2d00      	cmp	r5, #0
 80023e4:	d0d5      	beq.n	8002392 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80023e8:	f040 0004 	orr.w	r0, r0, #4
 80023ec:	6420      	str	r0, [r4, #64]	; 0x40
 80023ee:	e7d0      	b.n	8002392 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023f0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80023f4:	2b22      	cmp	r3, #34	; 0x22
 80023f6:	f47f af78 	bne.w	80022ea <HAL_UART_IRQHandler+0x36>
}
 80023fa:	b002      	add	sp, #8
 80023fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002400:	f7ff befc 	b.w	80021fc <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002404:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002408:	2a21      	cmp	r2, #33	; 0x21
 800240a:	f47f af6e 	bne.w	80022ea <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800240e:	68a2      	ldr	r2, [r4, #8]
 8002410:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002414:	d06e      	beq.n	80024f4 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002416:	6a22      	ldr	r2, [r4, #32]
 8002418:	1c51      	adds	r1, r2, #1
 800241a:	6221      	str	r1, [r4, #32]
 800241c:	7812      	ldrb	r2, [r2, #0]
 800241e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002420:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002422:	3a01      	subs	r2, #1
 8002424:	b292      	uxth	r2, r2
 8002426:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002428:	2a00      	cmp	r2, #0
 800242a:	f47f af5e 	bne.w	80022ea <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002434:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	e754      	b.n	80022ea <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8002440:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002442:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002444:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800244a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800244c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8002450:	f7ff fec6 	bl	80021e0 <HAL_UART_TxCpltCallback>
    return;
 8002454:	e749      	b.n	80022ea <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800245c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002466:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002468:	2a01      	cmp	r2, #1
 800246a:	d103      	bne.n	8002474 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	f022 0210 	bic.w	r2, r2, #16
 8002472:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002474:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8002476:	2120      	movs	r1, #32
 8002478:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800247c:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	0656      	lsls	r6, r2, #25
 8002482:	d512      	bpl.n	80024aa <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002484:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002486:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800248e:	b160      	cbz	r0, 80024aa <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_UART_IRQHandler+0x258>)
 8002492:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002494:	f7fe fffe 	bl	8001494 <HAL_DMA_Abort_IT>
 8002498:	2800      	cmp	r0, #0
 800249a:	f43f af26 	beq.w	80022ea <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800249e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80024a2:	b002      	add	sp, #8
 80024a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024a8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7ff fe9a 	bl	80021e4 <HAL_UART_ErrorCallback>
 80024b0:	e71b      	b.n	80022ea <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024b2:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 80024b4:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024b6:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80024b8:	b289      	uxth	r1, r1
 80024ba:	2900      	cmp	r1, #0
 80024bc:	f43f af15 	beq.w	80022ea <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024c0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80024c2:	1a08      	subs	r0, r1, r0
 80024c4:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 80024c6:	2900      	cmp	r1, #0
 80024c8:	f43f af0f 	beq.w	80022ea <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 80024cc:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ce:	68d8      	ldr	r0, [r3, #12]
 80024d0:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 80024d4:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d6:	6958      	ldr	r0, [r3, #20]
 80024d8:	f020 0001 	bic.w	r0, r0, #1
 80024dc:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80024de:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e2:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024e4:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024e6:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024e8:	f022 0210 	bic.w	r2, r2, #16
 80024ec:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024ee:	f7ff fe83 	bl	80021f8 <HAL_UARTEx_RxEventCallback>
 80024f2:	e6fa      	b.n	80022ea <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f4:	6922      	ldr	r2, [r4, #16]
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d18d      	bne.n	8002416 <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024fa:	6a22      	ldr	r2, [r4, #32]
 80024fc:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002500:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002504:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002506:	6222      	str	r2, [r4, #32]
 8002508:	e78a      	b.n	8002420 <HAL_UART_IRQHandler+0x16c>
 800250a:	bf00      	nop
 800250c:	080021e9 	.word	0x080021e9

08002510 <__libc_init_array>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	2600      	movs	r6, #0
 8002514:	4d0c      	ldr	r5, [pc, #48]	; (8002548 <__libc_init_array+0x38>)
 8002516:	4c0d      	ldr	r4, [pc, #52]	; (800254c <__libc_init_array+0x3c>)
 8002518:	1b64      	subs	r4, r4, r5
 800251a:	10a4      	asrs	r4, r4, #2
 800251c:	42a6      	cmp	r6, r4
 800251e:	d109      	bne.n	8002534 <__libc_init_array+0x24>
 8002520:	f000 f81a 	bl	8002558 <_init>
 8002524:	2600      	movs	r6, #0
 8002526:	4d0a      	ldr	r5, [pc, #40]	; (8002550 <__libc_init_array+0x40>)
 8002528:	4c0a      	ldr	r4, [pc, #40]	; (8002554 <__libc_init_array+0x44>)
 800252a:	1b64      	subs	r4, r4, r5
 800252c:	10a4      	asrs	r4, r4, #2
 800252e:	42a6      	cmp	r6, r4
 8002530:	d105      	bne.n	800253e <__libc_init_array+0x2e>
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	f855 3b04 	ldr.w	r3, [r5], #4
 8002538:	4798      	blx	r3
 800253a:	3601      	adds	r6, #1
 800253c:	e7ee      	b.n	800251c <__libc_init_array+0xc>
 800253e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002542:	4798      	blx	r3
 8002544:	3601      	adds	r6, #1
 8002546:	e7f2      	b.n	800252e <__libc_init_array+0x1e>
 8002548:	080028ac 	.word	0x080028ac
 800254c:	080028ac 	.word	0x080028ac
 8002550:	080028ac 	.word	0x080028ac
 8002554:	080028b0 	.word	0x080028b0

08002558 <_init>:
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255a:	bf00      	nop
 800255c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255e:	bc08      	pop	{r3}
 8002560:	469e      	mov	lr, r3
 8002562:	4770      	bx	lr

08002564 <_fini>:
 8002564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002566:	bf00      	nop
 8002568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256a:	bc08      	pop	{r3}
 800256c:	469e      	mov	lr, r3
 800256e:	4770      	bx	lr
