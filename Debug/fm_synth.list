
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002618  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08002724  08002724  00012724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a60  08002a60  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002a60  08002a60  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a60  08002a60  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000018  08002a80  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08002a80  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cde  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de6  00000000  00000000  00034d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000117e9  00000000  00000000  00037b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  000492f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002508  00000000  00000000  00049e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177f4  00000000  00000000  0004c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018015  00000000  00000000  00063b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000883de  00000000  00000000  0007bb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00103f47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002904  00000000  00000000  00103f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800270c 	.word	0x0800270c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800270c 	.word	0x0800270c

0800014c <init_audio_out>:
 */

#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	SPI1->CR1 |= SPI_CR1_SPE;
 800014c:	4a06      	ldr	r2, [pc, #24]	; (8000168 <init_audio_out+0x1c>)
void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
 800014e:	b508      	push	{r3, lr}
	SPI1->CR1 |= SPI_CR1_SPE;
 8000150:	6813      	ldr	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 8000152:	4608      	mov	r0, r1
	SPI1->CR1 |= SPI_CR1_SPE;
 8000154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015a:	f001 ff7d 	bl	8002058 <HAL_TIM_Base_Start_IT>
	output_volume = 0x3800;
 800015e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000162:	4b02      	ldr	r3, [pc, #8]	; (800016c <init_audio_out+0x20>)
 8000164:	801a      	strh	r2, [r3, #0]
}
 8000166:	bd08      	pop	{r3, pc}
 8000168:	40013000 	.word	0x40013000
 800016c:	20000224 	.word	0x20000224

08000170 <update_volume>:

void update_volume() {
	GPIOA->BSRR = GPIO_BSRR_BR4;					//pull CS pin low
 8000170:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
void update_volume() {
 8000174:	b510      	push	{r4, lr}
	GPIOA->BSRR = GPIO_BSRR_BR4;					//pull CS pin low
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <update_volume+0x38>)
	SPI1->DR = output_volume;						//write out data to SPI (assume SPI is not busy)
 8000178:	4c0c      	ldr	r4, [pc, #48]	; (80001ac <update_volume+0x3c>)
	GPIOA->BSRR = GPIO_BSRR_BR4;					//pull CS pin low
 800017a:	611a      	str	r2, [r3, #16]
	SPI1->DR = output_volume;						//write out data to SPI (assume SPI is not busy)
 800017c:	8822      	ldrh	r2, [r4, #0]
 800017e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000182:	60da      	str	r2, [r3, #12]
	output_volume = synth_sample();
 8000184:	f000 ff8a 	bl	800109c <synth_sample>
 8000188:	b280      	uxth	r0, r0
	if (output_volume > 0x0FFF) {					//max possible volume with 12-bit dac
 800018a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800018e:	bf28      	it	cs
 8000190:	f643 70ff 	movwcs	r0, #16383	; 0x3fff
		output_volume = 0x0FFF;
	}
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
	GPIOA->BSRR = GPIO_BSRR_BS4;					//pull CS pin high
 8000194:	f04f 0210 	mov.w	r2, #16
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <update_volume+0x38>)
 800019a:	bf38      	it	cc
 800019c:	f440 5040 	orrcc.w	r0, r0, #12288	; 0x3000
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 80001a0:	8020      	strh	r0, [r4, #0]
	GPIOA->BSRR = GPIO_BSRR_BS4;					//pull CS pin high
 80001a2:	611a      	str	r2, [r3, #16]
}
 80001a4:	bd10      	pop	{r4, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800
 80001ac:	20000224 	.word	0x20000224

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b4:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2601      	movs	r6, #1
 80001ba:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001bc:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001c0:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c4:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001cc:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d6:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001d8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001dc:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001de:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e0:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e2:	f001 fb8d 	bl	8001900 <HAL_RCC_OscConfig>
 80001e6:	b108      	cbz	r0, 80001ec <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001ea:	e7fe      	b.n	80001ea <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	f04f 080f 	mov.w	r8, #15
 80001f2:	f04f 0902 	mov.w	r9, #2
 80001f6:	2600      	movs	r6, #0
 80001f8:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fc:	4621      	mov	r1, r4
 80001fe:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	e9cd 8900 	strd	r8, r9, [sp]
 8000204:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020a:	f001 fd79 	bl	8001d00 <HAL_RCC_ClockConfig>
 800020e:	b108      	cbz	r0, 8000214 <SystemClock_Config+0x64>
 8000210:	b672      	cpsid	i
  while (1)
 8000212:	e7fe      	b.n	8000212 <SystemClock_Config+0x62>
}
 8000214:	b010      	add	sp, #64	; 0x40
 8000216:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800021a:	bf00      	nop

0800021c <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021c:	2400      	movs	r4, #0
{
 800021e:	b580      	push	{r7, lr}
 8000220:	b088      	sub	sp, #32
  HAL_Init();
 8000222:	f001 f953 	bl	80014cc <HAL_Init>
  SystemClock_Config();
 8000226:	f7ff ffc3 	bl	80001b0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800022e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000232:	4b4b      	ldr	r3, [pc, #300]	; (8000360 <main+0x144>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	6999      	ldr	r1, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000238:	484a      	ldr	r0, [pc, #296]	; (8000364 <main+0x148>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	f041 0104 	orr.w	r1, r1, #4
 800023e:	6199      	str	r1, [r3, #24]
 8000240:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000242:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	f003 0304 	and.w	r3, r3, #4
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800024c:	f001 fb4a 	bl	80018e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000250:	4622      	mov	r2, r4
 8000252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000256:	4843      	ldr	r0, [pc, #268]	; (8000364 <main+0x148>)
 8000258:	f001 fb44 	bl	80018e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 800025c:	f44f 7688 	mov.w	r6, #272	; 0x110
 8000260:	2200      	movs	r2, #0
 8000262:	2302      	movs	r3, #2
 8000264:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <main+0x148>)
 8000268:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 800026a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800026e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000272:	f001 fa2b 	bl	80016cc <HAL_GPIO_Init>
  huart1.Init.BaudRate = 31250;
 8000276:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 800027a:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 800027c:	483a      	ldr	r0, [pc, #232]	; (8000368 <main+0x14c>)
 800027e:	493b      	ldr	r1, [pc, #236]	; (800036c <main+0x150>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000280:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000284:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart1.Init.BaudRate = 31250;
 8000288:	e9c0 1200 	strd	r1, r2, [r0]
  huart1.Init.Parity = UART_PARITY_NONE;
 800028c:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800028e:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000290:	f001 ffe4 	bl	800225c <HAL_UART_Init>
 8000294:	b108      	cbz	r0, 800029a <main+0x7e>
 8000296:	b672      	cpsid	i
  while (1)
 8000298:	e7fe      	b.n	8000298 <main+0x7c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800029a:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 800029c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1451-1;
 80002a0:	f240 52aa 	movw	r2, #1450	; 0x5aa
  htim2.Instance = TIM2;
 80002a4:	4c32      	ldr	r4, [pc, #200]	; (8000370 <main+0x154>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a6:	e9cd 0004 	strd	r0, r0, [sp, #16]
 80002aa:	e9cd 0006 	strd	r0, r0, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ae:	9002      	str	r0, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002b0:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b2:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim2.Instance = TIM2;
 80002b6:	6021      	str	r1, [r4, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b8:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ba:	61a3      	str	r3, [r4, #24]
  htim2.Init.Period = 1451-1;
 80002bc:	60e2      	str	r2, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002be:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002c0:	f001 fe66 	bl	8001f90 <HAL_TIM_Base_Init>
 80002c4:	b108      	cbz	r0, 80002ca <main+0xae>
 80002c6:	b672      	cpsid	i
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <main+0xac>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ce:	4620      	mov	r0, r4
 80002d0:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002d2:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002d4:	f001 feec 	bl	80020b0 <HAL_TIM_ConfigClockSource>
 80002d8:	b108      	cbz	r0, 80002de <main+0xc2>
 80002da:	b672      	cpsid	i
  while (1)
 80002dc:	e7fe      	b.n	80002dc <main+0xc0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002de:	2300      	movs	r3, #0
 80002e0:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002e2:	4620      	mov	r0, r4
 80002e4:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002ea:	f001 ff85 	bl	80021f8 <HAL_TIMEx_MasterConfigSynchronization>
 80002ee:	4603      	mov	r3, r0
 80002f0:	b9d0      	cbnz	r0, 8000328 <main+0x10c>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002f2:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80002f6:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002fa:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002fe:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 8000300:	220a      	movs	r2, #10
  hspi1.Instance = SPI1;
 8000302:	481c      	ldr	r0, [pc, #112]	; (8000374 <main+0x158>)
 8000304:	4e1c      	ldr	r6, [pc, #112]	; (8000378 <main+0x15c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000306:	e9c0 7301 	strd	r7, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800030a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800030e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000312:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000316:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Instance = SPI1;
 8000318:	6006      	str	r6, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800031a:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CRCPolynomial = 10;
 800031c:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800031e:	f001 fddd 	bl	8001edc <HAL_SPI_Init>
 8000322:	b118      	cbz	r0, 800032c <main+0x110>
 8000324:	b672      	cpsid	i
  while (1)
 8000326:	e7fe      	b.n	8000326 <main+0x10a>
 8000328:	b672      	cpsid	i
 800032a:	e7fe      	b.n	800032a <main+0x10e>
  init_midi(midi_uart);
 800032c:	4e13      	ldr	r6, [pc, #76]	; (800037c <main+0x160>)
 800032e:	4d14      	ldr	r5, [pc, #80]	; (8000380 <main+0x164>)
 8000330:	6830      	ldr	r0, [r6, #0]
 8000332:	f000 f84f 	bl	80003d4 <init_midi>
  init_synth();
 8000336:	f000 fbc1 	bl	8000abc <init_synth>
  init_audio_out(audio_spi, audio_tim);
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <main+0x168>)
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <main+0x16c>)
 800033e:	6811      	ldr	r1, [r2, #0]
 8000340:	6818      	ldr	r0, [r3, #0]
 8000342:	f7ff ff03 	bl	800014c <init_audio_out>
 8000346:	4c11      	ldr	r4, [pc, #68]	; (800038c <main+0x170>)
	if (midi_buffer_read != midi_buffer_write) {
 8000348:	782a      	ldrb	r2, [r5, #0]
 800034a:	7823      	ldrb	r3, [r4, #0]
 800034c:	429a      	cmp	r2, r3
 800034e:	d0fb      	beq.n	8000348 <main+0x12c>
		process_midi_byte(midi_uart);
 8000350:	6830      	ldr	r0, [r6, #0]
 8000352:	f000 f861 	bl	8000418 <process_midi_byte>
	if (midi_buffer_read != midi_buffer_write) {
 8000356:	782a      	ldrb	r2, [r5, #0]
 8000358:	7823      	ldrb	r3, [r4, #0]
 800035a:	429a      	cmp	r2, r3
 800035c:	d0f4      	beq.n	8000348 <main+0x12c>
 800035e:	e7f7      	b.n	8000350 <main+0x134>
 8000360:	40021000 	.word	0x40021000
 8000364:	40010800 	.word	0x40010800
 8000368:	20000230 	.word	0x20000230
 800036c:	40013800 	.word	0x40013800
 8000370:	20000350 	.word	0x20000350
 8000374:	200002f8 	.word	0x200002f8
 8000378:	40013000 	.word	0x40013000
 800037c:	20000008 	.word	0x20000008
 8000380:	20000398 	.word	0x20000398
 8000384:	20000004 	.word	0x20000004
 8000388:	20000000 	.word	0x20000000
 800038c:	2000022c 	.word	0x2000022c

08000390 <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000390:	2201      	movs	r2, #1
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000392:	b410      	push	{r4}
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000394:	4c05      	ldr	r4, [pc, #20]	; (80003ac <HAL_UART_RxCpltCallback+0x1c>)
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000396:	4906      	ldr	r1, [pc, #24]	; (80003b0 <HAL_UART_RxCpltCallback+0x20>)
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000398:	7823      	ldrb	r3, [r4, #0]
 800039a:	4413      	add	r3, r2
 800039c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003a0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 80003a2:	7823      	ldrb	r3, [r4, #0]
}
 80003a4:	bc10      	pop	{r4}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 80003a6:	4419      	add	r1, r3
 80003a8:	f001 bfc2 	b.w	8002330 <HAL_UART_Receive_IT>
 80003ac:	2000022c 	.word	0x2000022c
 80003b0:	20000274 	.word	0x20000274

080003b4 <sample>:
void sample() {
 80003b4:	b508      	push	{r3, lr}
	TIM2->SR = 0;
 80003b6:	2200      	movs	r2, #0
 80003b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80003bc:	f44f 7180 	mov.w	r1, #256	; 0x100
	TIM2->SR = 0;
 80003c0:	611a      	str	r2, [r3, #16]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80003c2:	4803      	ldr	r0, [pc, #12]	; (80003d0 <sample+0x1c>)
 80003c4:	f001 fa92 	bl	80018ec <HAL_GPIO_TogglePin>
}
 80003c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_volume();
 80003cc:	f7ff bed0 	b.w	8000170 <update_volume>
 80003d0:	40010800 	.word	0x40010800

080003d4 <init_midi>:
 */

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
	data[0] = -1;
 80003d4:	21ff      	movs	r1, #255	; 0xff
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <init_midi+0x34>)
 80003d8:	4a0c      	ldr	r2, [pc, #48]	; (800040c <init_midi+0x38>)
void init_midi(UART_HandleTypeDef* huart) {
 80003da:	b510      	push	{r4, lr}
 80003dc:	4604      	mov	r4, r0
	data[0] = -1;
 80003de:	7011      	strb	r1, [r2, #0]
	data[1] = -1;
 80003e0:	7051      	strb	r1, [r2, #1]
	for (uint8_t i = 0; i < RING_BUFFER_SIZE; i++) {
 80003e2:	4618      	mov	r0, r3
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	f002 f989 	bl	80026fc <memset>
		midi_buffer[i] = -1;
	}
	midi_buffer_read = 0;
 80003ea:	2100      	movs	r1, #0
 80003ec:	4603      	mov	r3, r0
	midi_buffer_write = 0;
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <init_midi+0x3c>)
	midi_buffer_read = 0;
 80003f0:	4808      	ldr	r0, [pc, #32]	; (8000414 <init_midi+0x40>)
 80003f2:	7001      	strb	r1, [r0, #0]
	midi_buffer_write = 0;
 80003f4:	7011      	strb	r1, [r2, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 80003f6:	7811      	ldrb	r1, [r2, #0]
 80003f8:	4620      	mov	r0, r4
}
 80003fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 80003fe:	2201      	movs	r2, #1
 8000400:	4419      	add	r1, r3
 8000402:	f001 bf95 	b.w	8002330 <HAL_UART_Receive_IT>
 8000406:	bf00      	nop
 8000408:	20000274 	.word	0x20000274
 800040c:	200002f4 	.word	0x200002f4
 8000410:	2000022c 	.word	0x2000022c
 8000414:	20000398 	.word	0x20000398

08000418 <process_midi_byte>:

void process_midi_byte() {
 8000418:	b538      	push	{r3, r4, r5, lr}
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 800041a:	4c35      	ldr	r4, [pc, #212]	; (80004f0 <process_midi_byte+0xd8>)
 800041c:	4a35      	ldr	r2, [pc, #212]	; (80004f4 <process_midi_byte+0xdc>)
 800041e:	7823      	ldrb	r3, [r4, #0]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 8000420:	56d1      	ldrsb	r1, [r2, r3]
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 8000422:	5cd2      	ldrb	r2, [r2, r3]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 8000424:	2900      	cmp	r1, #0
 8000426:	db41      	blt.n	80004ac <process_midi_byte+0x94>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {													//if byte received was data byte
		switch (status & 0xF0) {
 8000428:	4b33      	ldr	r3, [pc, #204]	; (80004f8 <process_midi_byte+0xe0>)
 800042a:	7819      	ldrb	r1, [r3, #0]
 800042c:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 8000430:	2bc0      	cmp	r3, #192	; 0xc0
 8000432:	d033      	beq.n	800049c <process_midi_byte+0x84>
 8000434:	d820      	bhi.n	8000478 <process_midi_byte+0x60>
 8000436:	2ba0      	cmp	r3, #160	; 0xa0
 8000438:	d002      	beq.n	8000440 <process_midi_byte+0x28>
 800043a:	d90c      	bls.n	8000456 <process_midi_byte+0x3e>
 800043c:	2bb0      	cmp	r3, #176	; 0xb0
 800043e:	d147      	bne.n	80004d0 <process_midi_byte+0xb8>
		case 0xD0:												//channel pressure (unimplemented)
			data[0] = midi_in;
			channel_pressure();
			break;
		case 0xE0:												//pitch bend (unimplemented)
			if (data[0] == (uint8_t)-1) {
 8000440:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <process_midi_byte+0xe4>)
 8000442:	7819      	ldrb	r1, [r3, #0]
 8000444:	29ff      	cmp	r1, #255	; 0xff
 8000446:	d02a      	beq.n	800049e <process_midi_byte+0x86>
				data[0] = midi_in;
			}
			else {
				data[1] = midi_in;
 8000448:	705a      	strb	r2, [r3, #1]
			break;
		default:
			__NOP();
		}
	}
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800044a:	7823      	ldrb	r3, [r4, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000452:	7023      	strb	r3, [r4, #0]
}
 8000454:	bd38      	pop	{r3, r4, r5, pc}
		switch (status & 0xF0) {
 8000456:	2b80      	cmp	r3, #128	; 0x80
 8000458:	d034      	beq.n	80004c4 <process_midi_byte+0xac>
 800045a:	2b90      	cmp	r3, #144	; 0x90
 800045c:	d138      	bne.n	80004d0 <process_midi_byte+0xb8>
			if (data[0] == (uint8_t)-1) {
 800045e:	4d27      	ldr	r5, [pc, #156]	; (80004fc <process_midi_byte+0xe4>)
 8000460:	7828      	ldrb	r0, [r5, #0]
 8000462:	28ff      	cmp	r0, #255	; 0xff
 8000464:	d032      	beq.n	80004cc <process_midi_byte+0xb4>
				data[1] = midi_in;
 8000466:	706a      	strb	r2, [r5, #1]
				if (data[1] == 0) {
 8000468:	2a00      	cmp	r2, #0
 800046a:	d13a      	bne.n	80004e2 <process_midi_byte+0xca>

void note_off() {
	release_voice(data[0]);
 800046c:	f000 fdd8 	bl	8001020 <release_voice>
	data[0] = -1;
 8000470:	23ff      	movs	r3, #255	; 0xff
 8000472:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 8000474:	706b      	strb	r3, [r5, #1]
}
 8000476:	e7e8      	b.n	800044a <process_midi_byte+0x32>
		switch (status & 0xF0) {
 8000478:	2be0      	cmp	r3, #224	; 0xe0
 800047a:	d0e1      	beq.n	8000440 <process_midi_byte+0x28>
 800047c:	2bf0      	cmp	r3, #240	; 0xf0
 800047e:	d10b      	bne.n	8000498 <process_midi_byte+0x80>
			if (status == 0xFF) {									//system reset
 8000480:	29ff      	cmp	r1, #255	; 0xff
 8000482:	d1e2      	bne.n	800044a <process_midi_byte+0x32>
				midi_buffer_read = 0;
 8000484:	2200      	movs	r2, #0
				data[0] = -1;
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <process_midi_byte+0xe4>)
				midi_buffer_write = 0;
 8000488:	481d      	ldr	r0, [pc, #116]	; (8000500 <process_midi_byte+0xe8>)
				midi_buffer_read = 0;
 800048a:	7022      	strb	r2, [r4, #0]
				data[0] = -1;
 800048c:	7019      	strb	r1, [r3, #0]
				midi_buffer_write = 0;
 800048e:	7002      	strb	r2, [r0, #0]
				data[1] = -1;
 8000490:	7059      	strb	r1, [r3, #1]
				clear_voices();
 8000492:	f000 fcc1 	bl	8000e18 <clear_voices>
 8000496:	e7d8      	b.n	800044a <process_midi_byte+0x32>
		switch (status & 0xF0) {
 8000498:	2bd0      	cmp	r3, #208	; 0xd0
 800049a:	d119      	bne.n	80004d0 <process_midi_byte+0xb8>
			data[0] = midi_in;
 800049c:	4b17      	ldr	r3, [pc, #92]	; (80004fc <process_midi_byte+0xe4>)
 800049e:	701a      	strb	r2, [r3, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 80004a0:	7823      	ldrb	r3, [r4, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004a8:	7023      	strb	r3, [r4, #0]
}
 80004aa:	bd38      	pop	{r3, r4, r5, pc}
		data[0] = -1;
 80004ac:	21ff      	movs	r1, #255	; 0xff
 80004ae:	4b13      	ldr	r3, [pc, #76]	; (80004fc <process_midi_byte+0xe4>)
		status = midi_in;
 80004b0:	4811      	ldr	r0, [pc, #68]	; (80004f8 <process_midi_byte+0xe0>)
		data[0] = -1;
 80004b2:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 80004b4:	7059      	strb	r1, [r3, #1]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 80004b6:	7823      	ldrb	r3, [r4, #0]
		status = midi_in;
 80004b8:	7002      	strb	r2, [r0, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 80004ba:	3301      	adds	r3, #1
 80004bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004c0:	7023      	strb	r3, [r4, #0]
}
 80004c2:	bd38      	pop	{r3, r4, r5, pc}
			if (data[0] == (uint8_t)-1) {
 80004c4:	4d0d      	ldr	r5, [pc, #52]	; (80004fc <process_midi_byte+0xe4>)
 80004c6:	7828      	ldrb	r0, [r5, #0]
 80004c8:	28ff      	cmp	r0, #255	; 0xff
 80004ca:	d103      	bne.n	80004d4 <process_midi_byte+0xbc>
				data[0] = midi_in;
 80004cc:	702a      	strb	r2, [r5, #0]
 80004ce:	e7bc      	b.n	800044a <process_midi_byte+0x32>
			__NOP();
 80004d0:	bf00      	nop
 80004d2:	e7ba      	b.n	800044a <process_midi_byte+0x32>
				data[1] = midi_in;
 80004d4:	706a      	strb	r2, [r5, #1]
	release_voice(data[0]);
 80004d6:	f000 fda3 	bl	8001020 <release_voice>
	data[0] = -1;
 80004da:	23ff      	movs	r3, #255	; 0xff
 80004dc:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80004de:	706b      	strb	r3, [r5, #1]
}
 80004e0:	e7b3      	b.n	800044a <process_midi_byte+0x32>

void note_on() {
	add_voice(data[0]);
 80004e2:	f000 fcab 	bl	8000e3c <add_voice>
	data[0] = -1;
 80004e6:	23ff      	movs	r3, #255	; 0xff
 80004e8:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80004ea:	706b      	strb	r3, [r5, #1]
}
 80004ec:	e7ad      	b.n	800044a <process_midi_byte+0x32>
 80004ee:	bf00      	nop
 80004f0:	20000398 	.word	0x20000398
 80004f4:	20000274 	.word	0x20000274
 80004f8:	2000039a 	.word	0x2000039a
 80004fc:	200002f4 	.word	0x200002f4
 8000500:	2000022c 	.word	0x2000022c

08000504 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 8000504:	4b01      	ldr	r3, [pc, #4]	; (800050c <note_to_freq+0x8>)
}
 8000506:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800050a:	4770      	bx	lr
 800050c:	08002734 	.word	0x08002734

08000510 <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 8000512:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000514:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 8000518:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	be37c63b 	.word	0xbe37c63b

08000524 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_MspInit+0x3c>)
{
 8000526:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000528:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052a:	490e      	ldr	r1, [pc, #56]	; (8000564 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800052c:	f042 0201 	orr.w	r2, r2, #1
 8000530:	619a      	str	r2, [r3, #24]
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	f002 0201 	and.w	r2, r2, #1
 8000538:	9200      	str	r2, [sp, #0]
 800053a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	69da      	ldr	r2, [r3, #28]
 800053e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000542:	61da      	str	r2, [r3, #28]
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054e:	684b      	ldr	r3, [r1, #4]
 8000550:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000558:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	b002      	add	sp, #8
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	40010000 	.word	0x40010000

08000568 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	2300      	movs	r3, #0
{
 800056a:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 800056c:	6801      	ldr	r1, [r0, #0]
 800056e:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <HAL_SPI_MspInit+0x60>)
{
 8000570:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8000572:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000578:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI1)
 800057c:	d001      	beq.n	8000582 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800057e:	b006      	add	sp, #24
 8000580:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000582:	24a0      	movs	r4, #160	; 0xa0
 8000584:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000586:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800058c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000590:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000594:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000598:	619a      	str	r2, [r3, #24]
 800059a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800059e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	699a      	ldr	r2, [r3, #24]
 80005a8:	f042 0204 	orr.w	r2, r2, #4
 80005ac:	619a      	str	r2, [r3, #24]
 80005ae:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005bc:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f001 f885 	bl	80016cc <HAL_GPIO_Init>
}
 80005c2:	b006      	add	sp, #24
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
 80005c6:	bf00      	nop
 80005c8:	40013000 	.word	0x40013000
 80005cc:	40010800 	.word	0x40010800

080005d0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80005d0:	6803      	ldr	r3, [r0, #0]
 80005d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005d6:	d000      	beq.n	80005da <HAL_TIM_Base_MspInit+0xa>
 80005d8:	4770      	bx	lr

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80005da:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005dc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80005e0:	69d8      	ldr	r0, [r3, #28]
{
 80005e2:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005e4:	4308      	orrs	r0, r1
 80005e6:	61d8      	str	r0, [r3, #28]
 80005e8:	69db      	ldr	r3, [r3, #28]
{
 80005ea:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ec:	400b      	ands	r3, r1
 80005ee:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80005f6:	f000 ff9f 	bl	8001538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005fa:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005fc:	b003      	add	sp, #12
 80005fe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000602:	f000 bfd1 	b.w	80015a8 <HAL_NVIC_EnableIRQ>
 8000606:	bf00      	nop

08000608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000608:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 800060c:	6802      	ldr	r2, [r0, #0]
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <HAL_UART_MspInit+0x88>)
{
 8000610:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 8000612:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000618:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 800061c:	d001      	beq.n	8000622 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800061e:	b007      	add	sp, #28
 8000620:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000622:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000626:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 800062a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800062e:	699a      	ldr	r2, [r3, #24]
 8000630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000634:	619a      	str	r2, [r3, #24]
 8000636:	699a      	ldr	r2, [r3, #24]
 8000638:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800063c:	9200      	str	r2, [sp, #0]
 800063e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	f042 0204 	orr.w	r2, r2, #4
 8000646:	619a      	str	r2, [r3, #24]
 8000648:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800064a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	a902      	add	r1, sp, #8
 800065a:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000660:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f001 f833 	bl	80016cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000666:	2300      	movs	r3, #0
 8000668:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	a902      	add	r1, sp, #8
 800066e:	4809      	ldr	r0, [pc, #36]	; (8000694 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000670:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f001 f829 	bl	80016cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800067a:	4622      	mov	r2, r4
 800067c:	4621      	mov	r1, r4
 800067e:	2025      	movs	r0, #37	; 0x25
 8000680:	f000 ff5a 	bl	8001538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000684:	2025      	movs	r0, #37	; 0x25
 8000686:	f000 ff8f 	bl	80015a8 <HAL_NVIC_EnableIRQ>
}
 800068a:	b007      	add	sp, #28
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	bf00      	nop
 8000690:	40013800 	.word	0x40013800
 8000694:	40010800 	.word	0x40010800

08000698 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler>
 800069a:	bf00      	nop

0800069c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <HardFault_Handler>
 800069e:	bf00      	nop

080006a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <MemManage_Handler>
 80006a2:	bf00      	nop

080006a4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <BusFault_Handler>
 80006a6:	bf00      	nop

080006a8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <UsageFault_Handler>
 80006aa:	bf00      	nop

080006ac <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <DebugMon_Handler>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <PendSV_Handler>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f000 bf1a 	b.w	80014f0 <HAL_IncTick>

080006bc <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 80006bc:	f7ff be7a 	b.w	80003b4 <sample>

080006c0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006c0:	4801      	ldr	r0, [pc, #4]	; (80006c8 <USART1_IRQHandler+0x8>)
 80006c2:	f001 bec9 	b.w	8002458 <HAL_UART_IRQHandler>
 80006c6:	bf00      	nop
 80006c8:	20000230 	.word	0x20000230

080006cc <modulate>:
		}
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
	}
}

static inline int16_t modulate(uint8_t voice_index) {
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {			//loop through all operators of voice
		/*update phase of active operator*/
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 80006ce:	4eb6      	ldr	r6, [pc, #728]	; (80009a8 <modulate+0x2dc>)
 80006d0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80006d4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
	-27, -25, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9,  -7,  -5,  -3,  -2,
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 80006d8:	f8b3 c078 	ldrh.w	ip, [r3, #120]	; 0x78
 80006dc:	f8b3 70e8 	ldrh.w	r7, [r3, #232]	; 0xe8
 80006e0:	891d      	ldrh	r5, [r3, #8]
 80006e2:	88d9      	ldrh	r1, [r3, #6]
 80006e4:	f8b3 4076 	ldrh.w	r4, [r3, #118]	; 0x76
 80006e8:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	; 0xe6
 80006ec:	440d      	add	r5, r1
 80006ee:	4464      	add	r4, ip
 80006f0:	f8b3 1156 	ldrh.w	r1, [r3, #342]	; 0x156
 80006f4:	f8b3 c158 	ldrh.w	ip, [r3, #344]	; 0x158
 80006f8:	443a      	add	r2, r7
	}

	switch (algo) {
 80006fa:	4fac      	ldr	r7, [pc, #688]	; (80009ac <modulate+0x2e0>)
 80006fc:	4461      	add	r1, ip
 80006fe:	783f      	ldrb	r7, [r7, #0]
 8000700:	b2ad      	uxth	r5, r5
 8000702:	b2a4      	uxth	r4, r4
 8000704:	b292      	uxth	r2, r2
 8000706:	b289      	uxth	r1, r1
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 8000708:	811d      	strh	r5, [r3, #8]
 800070a:	f8a3 4078 	strh.w	r4, [r3, #120]	; 0x78
 800070e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
 8000712:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
 8000716:	00c3      	lsls	r3, r0, #3
 8000718:	2f0b      	cmp	r7, #11
 800071a:	f200 81c6 	bhi.w	8000aaa <modulate+0x3de>
 800071e:	e8df f017 	tbh	[pc, r7, lsl #1]
 8000722:	0036      	.short	0x0036
 8000724:	0074005e 	.word	0x0074005e
 8000728:	00bd009b 	.word	0x00bd009b
 800072c:	010400db 	.word	0x010400db
 8000730:	014b0125 	.word	0x014b0125
 8000734:	01a6017e 	.word	0x01a6017e
 8000738:	000c      	.short	0x000c
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 800073a:	4f9d      	ldr	r7, [pc, #628]	; (80009b0 <modulate+0x2e4>)
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
		return ((int16_t)op2 + op1 + op0) / 3;
		break;
	case 0x0B:
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800073c:	1a1b      	subs	r3, r3, r0
 800073e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000742:	0a09      	lsrs	r1, r1, #8
 8000744:	0a12      	lsrs	r2, r2, #8
 8000746:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
 800074a:	f917 e001 	ldrsb.w	lr, [r7, r1]
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800074e:	f917 c002 	ldrsb.w	ip, [r7, r2]
 8000752:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
 8000756:	0a24      	lsrs	r4, r4, #8
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000758:	573e      	ldrsb	r6, [r7, r4]
 800075a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800075e:	0a2d      	lsrs	r5, r5, #8
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000760:	fb00 f00e 	mul.w	r0, r0, lr
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000764:	fb01 f10c 	mul.w	r1, r1, ip
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000768:	577c      	ldrsb	r4, [r7, r5]
 800076a:	791b      	ldrb	r3, [r3, #4]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800076c:	fb02 f206 	mul.w	r2, r2, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000770:	fb03 f304 	mul.w	r3, r3, r4
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 8000774:	f341 11c7 	sbfx	r1, r1, #7, #8
 8000778:	f340 10c7 	sbfx	r0, r0, #7, #8
 800077c:	4408      	add	r0, r1
 800077e:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000782:	4410      	add	r0, r2
 8000784:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000788:	4418      	add	r0, r3
 800078a:	1080      	asrs	r0, r0, #2
		break;
	default:
		break;
	}
	return 0;
}
 800078c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800078e:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000790:	4888      	ldr	r0, [pc, #544]	; (80009b4 <modulate+0x2e8>)
 8000792:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000796:	0a0e      	lsrs	r6, r1, #8
 8000798:	5786      	ldrsb	r6, [r0, r6]
 800079a:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800079e:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80007a0:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007a4:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	5686      	ldrsb	r6, [r0, r2]
 80007ac:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80007b0:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007b2:	fb01 f106 	mul.w	r1, r1, r6
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80007b6:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80007ba:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80007bc:	5680      	ldrsb	r0, [r0, r2]
 80007be:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80007c2:	0a2a      	lsrs	r2, r5, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80007c4:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 80007c8:	4c79      	ldr	r4, [pc, #484]	; (80009b0 <modulate+0x2e4>)
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80007ca:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	7918      	ldrb	r0, [r3, #4]
 80007d2:	56a3      	ldrsb	r3, [r4, r2]
 80007d4:	fb00 f003 	mul.w	r0, r0, r3
		return op0;
 80007d8:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 80007dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80007de:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 80007e0:	4874      	ldr	r0, [pc, #464]	; (80009b4 <modulate+0x2e8>)
 80007e2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80007e6:	0a16      	lsrs	r6, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007e8:	5787      	ldrsb	r7, [r0, r6]
 80007ea:	0a09      	lsrs	r1, r1, #8
 80007ec:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80007f0:	5646      	ldrsb	r6, [r0, r1]
 80007f2:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007f6:	fb02 f207 	mul.w	r2, r2, r7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80007fa:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80007fe:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000800:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000804:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8000808:	e7d7      	b.n	80007ba <modulate+0xee>
 800080a:	4f6a      	ldr	r7, [pc, #424]	; (80009b4 <modulate+0x2e8>)
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800080c:	1a1b      	subs	r3, r3, r0
 800080e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000812:	0a12      	lsrs	r2, r2, #8
 8000814:	56be      	ldrsb	r6, [r7, r2]
 8000816:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800081a:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800081c:	fb00 f006 	mul.w	r0, r0, r6
 8000820:	0a09      	lsrs	r1, r1, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000822:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000826:	567c      	ldrsb	r4, [r7, r1]
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800082e:	56b9      	ldrsb	r1, [r7, r2]
 8000830:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000834:	fb00 f004 	mul.w	r0, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000838:	fb02 f101 	mul.w	r1, r2, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800083c:	0a2a      	lsrs	r2, r5, #8
 800083e:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 8000842:	eb02 12e1 	add.w	r2, r2, r1, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000846:	495a      	ldr	r1, [pc, #360]	; (80009b0 <modulate+0x2e4>)
 8000848:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800084a:	7918      	ldrb	r0, [r3, #4]
 800084c:	568b      	ldrsb	r3, [r1, r2]
 800084e:	fb00 f003 	mul.w	r0, r0, r3
		return op0;
 8000852:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000856:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000858:	4f56      	ldr	r7, [pc, #344]	; (80009b4 <modulate+0x2e8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800085a:	1a1b      	subs	r3, r3, r0
 800085c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000860:	0a09      	lsrs	r1, r1, #8
 8000862:	567e      	ldrsb	r6, [r7, r1]
 8000864:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000868:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800086c:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000870:	f3c0 10c7 	ubfx	r0, r0, #7, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000874:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8000878:	b2e4      	uxtb	r4, r4
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800087a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800087e:	573e      	ldrsb	r6, [r7, r4]
 8000880:	b2d2      	uxtb	r2, r2
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000882:	56bc      	ldrsb	r4, [r7, r2]
 8000884:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000888:	fb01 f206 	mul.w	r2, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800088c:	fb00 f104 	mul.w	r1, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000890:	11d2      	asrs	r2, r2, #7
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000892:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000896:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 800089a:	e7d4      	b.n	8000846 <modulate+0x17a>
 800089c:	4f45      	ldr	r7, [pc, #276]	; (80009b4 <modulate+0x2e8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800089e:	1a1b      	subs	r3, r3, r0
 80008a0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80008a4:	0a10      	lsrs	r0, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008a6:	563e      	ldrsb	r6, [r7, r0]
 80008a8:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 80008ac:	0a09      	lsrs	r1, r1, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008ae:	5679      	ldrsb	r1, [r7, r1]
 80008b0:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008b4:	fb02 f206 	mul.w	r2, r2, r6
 80008b8:	0a24      	lsrs	r4, r4, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008ba:	fb00 f001 	mul.w	r0, r0, r1
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008be:	573c      	ldrsb	r4, [r7, r4]
 80008c0:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008c4:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008c6:	fb01 f104 	mul.w	r1, r1, r4
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80008ca:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 80008ce:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80008d2:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80008d6:	e7b6      	b.n	8000846 <modulate+0x17a>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008d8:	1a1b      	subs	r3, r3, r0
 80008da:	4836      	ldr	r0, [pc, #216]	; (80009b4 <modulate+0x2e8>)
 80008dc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80008e0:	0a0e      	lsrs	r6, r1, #8
 80008e2:	5786      	ldrsb	r6, [r0, r6]
 80008e4:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008e8:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008ea:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008ee:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	5680      	ldrsb	r0, [r0, r2]
 80008f6:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008fa:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008fc:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000900:	482b      	ldr	r0, [pc, #172]	; (80009b0 <modulate+0x2e4>)
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000902:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	0a2d      	lsrs	r5, r5, #8
 800090a:	5681      	ldrsb	r1, [r0, r2]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800090c:	5742      	ldrsb	r2, [r0, r5]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800090e:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000912:	791b      	ldrb	r3, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000914:	fb00 f001 	mul.w	r0, r0, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000918:	fb03 f302 	mul.w	r3, r3, r2
		return ((int16_t)op2 + op0) >> 1;
 800091c:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000920:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000924:	4418      	add	r0, r3
 8000926:	1040      	asrs	r0, r0, #1
}
 8000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800092a:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 800092c:	4821      	ldr	r0, [pc, #132]	; (80009b4 <modulate+0x2e8>)
 800092e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000932:	0a0e      	lsrs	r6, r1, #8
 8000934:	5786      	ldrsb	r6, [r0, r6]
 8000936:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800093a:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800093c:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000940:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	5681      	ldrsb	r1, [r0, r2]
 8000948:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 800094c:	4818      	ldr	r0, [pc, #96]	; (80009b0 <modulate+0x2e4>)
 800094e:	fb02 f201 	mul.w	r2, r2, r1
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000952:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8000956:	eb02 2114 	add.w	r1, r2, r4, lsr #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800095a:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 800095e:	b2c9      	uxtb	r1, r1
 8000960:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000962:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000964:	5682      	ldrsb	r2, [r0, r2]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000966:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 800096a:	e7d2      	b.n	8000912 <modulate+0x246>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800096c:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 800096e:	4811      	ldr	r0, [pc, #68]	; (80009b4 <modulate+0x2e8>)
 8000970:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000974:	0a0f      	lsrs	r7, r1, #8
 8000976:	0a26      	lsrs	r6, r4, #8
 8000978:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
 800097c:	57c4      	ldrsb	r4, [r0, r7]
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800097e:	5786      	ldrsb	r6, [r0, r6]
 8000980:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000984:	fb01 f404 	mul.w	r4, r1, r4
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000988:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800098c:	0a11      	lsrs	r1, r2, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800098e:	0a2a      	lsrs	r2, r5, #8
 8000990:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000994:	eb01 11e4 	add.w	r1, r1, r4, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <modulate+0x2e4>)
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009a0:	5682      	ldrsb	r2, [r0, r2]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009a2:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
 80009a6:	e7b4      	b.n	8000912 <modulate+0x246>
 80009a8:	20000034 	.word	0x20000034
 80009ac:	200001f8 	.word	0x200001f8
 80009b0:	08002934 	.word	0x08002934
 80009b4:	08002834 	.word	0x08002834
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009b8:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 80009ba:	483d      	ldr	r0, [pc, #244]	; (8000ab0 <modulate+0x3e4>)
 80009bc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80009c0:	0a09      	lsrs	r1, r1, #8
 80009c2:	5640      	ldrsb	r0, [r0, r1]
 80009c4:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 80009c8:	4e3a      	ldr	r6, [pc, #232]	; (8000ab4 <modulate+0x3e8>)
 80009ca:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009ce:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 80009d2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009d6:	eb01 2014 	add.w	r0, r1, r4, lsr #8
 80009da:	b2c0      	uxtb	r0, r0
 80009dc:	b2d4      	uxtb	r4, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009de:	eb01 2215 	add.w	r2, r1, r5, lsr #8
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009e2:	5737      	ldrsb	r7, [r6, r4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009e4:	5635      	ldrsb	r5, [r6, r0]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009e6:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009ea:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 80009ee:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009f0:	56b4      	ldrsb	r4, [r6, r2]
 80009f2:	791a      	ldrb	r2, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009f4:	fb01 f307 	mul.w	r3, r1, r7
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009f8:	fb00 f105 	mul.w	r1, r0, r5
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009fc:	fb02 f204 	mul.w	r2, r2, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 8000a00:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000a04:	f341 11c7 	sbfx	r1, r1, #7, #8
		return ((int16_t)op2 + op1 + op0) / 3;
 8000a08:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000a0c:	440b      	add	r3, r1
 8000a0e:	482a      	ldr	r0, [pc, #168]	; (8000ab8 <modulate+0x3ec>)
 8000a10:	4413      	add	r3, r2
 8000a12:	fb80 2003 	smull	r2, r0, r0, r3
 8000a16:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000a1a:	b200      	sxth	r0, r0
}
 8000a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a1e:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000a20:	4823      	ldr	r0, [pc, #140]	; (8000ab0 <modulate+0x3e4>)
 8000a22:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a26:	0a09      	lsrs	r1, r1, #8
 8000a28:	5640      	ldrsb	r0, [r0, r1]
 8000a2a:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000a2e:	4e21      	ldr	r6, [pc, #132]	; (8000ab4 <modulate+0x3e8>)
 8000a30:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a34:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000a38:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a3c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8000a40:	b2d0      	uxtb	r0, r2
 8000a42:	b2ca      	uxtb	r2, r1
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a44:	f916 c000 	ldrsb.w	ip, [r6, r0]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a48:	56b7      	ldrsb	r7, [r6, r2]
 8000a4a:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a4e:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a52:	7919      	ldrb	r1, [r3, #4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a54:	fb00 f007 	mul.w	r0, r0, r7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a58:	fb02 f30c 	mul.w	r3, r2, ip
 8000a5c:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a5e:	5774      	ldrsb	r4, [r6, r5]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a60:	fb01 f204 	mul.w	r2, r1, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 8000a64:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000a68:	f340 11c7 	sbfx	r1, r0, #7, #8
 8000a6c:	e7cc      	b.n	8000a08 <modulate+0x33c>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a6e:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000a70:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <modulate+0x3e4>)
 8000a72:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a76:	0a09      	lsrs	r1, r1, #8
 8000a78:	5641      	ldrsb	r1, [r0, r1]
 8000a7a:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a7e:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a80:	fb00 f001 	mul.w	r0, r0, r1
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000a84:	490b      	ldr	r1, [pc, #44]	; (8000ab4 <modulate+0x3e8>)
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a86:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 8000a8a:	0a24      	lsrs	r4, r4, #8
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	568f      	ldrsb	r7, [r1, r2]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a90:	570e      	ldrsb	r6, [r1, r4]
 8000a92:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a96:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8000a9a:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a9c:	574c      	ldrsb	r4, [r1, r5]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a9e:	fb00 f006 	mul.w	r0, r0, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000aa2:	7919      	ldrb	r1, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000aa4:	fb02 f307 	mul.w	r3, r2, r7
 8000aa8:	e7da      	b.n	8000a60 <modulate+0x394>
	switch (algo) {
 8000aaa:	2000      	movs	r0, #0
}
 8000aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	08002834 	.word	0x08002834
 8000ab4:	08002934 	.word	0x08002934
 8000ab8:	55555556 	.word	0x55555556

08000abc <init_synth>:
 */

#include "synth.h"
#include "midi.h"

void init_synth() {
 8000abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		op_release[i] = 110;//ENV_MAX_RATE;				//default release 128
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);//ENV_MAX_RATE << 8;
		op_release_inc[i] = calculate_env_inc(op_release[i]);//ENV_MAX_RATE << 8;
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ac0:	4cc5      	ldr	r4, [pc, #788]	; (8000dd8 <init_synth+0x31c>)
		algo = 0x00;								//default algorithm 0
 8000ac2:	f04f 0600 	mov.w	r6, #0
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ac6:	4623      	mov	r3, r4
 8000ac8:	46a3      	mov	fp, r4
 8000aca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000acc:	46a2      	mov	sl, r4
 8000ace:	881d      	ldrh	r5, [r3, #0]
 8000ad0:	4bc2      	ldr	r3, [pc, #776]	; (8000ddc <init_synth+0x320>)
void init_synth() {
 8000ad2:	b097      	sub	sp, #92	; 0x5c
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ad4:	e9cd 4400 	strd	r4, r4, [sp]
 8000ad8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000adc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000ae0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000ae4:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000ae8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8000aec:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000af0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000af4:	9410      	str	r4, [sp, #64]	; 0x40
 8000af6:	6018      	str	r0, [r3, #0]
 8000af8:	9411      	str	r4, [sp, #68]	; 0x44
 8000afa:	6059      	str	r1, [r3, #4]
 8000afc:	9412      	str	r4, [sp, #72]	; 0x48
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	819d      	strh	r5, [r3, #12]
 8000b02:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8000b06:	835d      	strh	r5, [r3, #26]
 8000b08:	f8c3 000e 	str.w	r0, [r3, #14]
 8000b0c:	f8c3 1012 	str.w	r1, [r3, #18]
 8000b10:	f8c3 2016 	str.w	r2, [r3, #22]
 8000b14:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8000b18:	61d8      	str	r0, [r3, #28]
		algo = 0x00;								//default algorithm 0
 8000b1a:	48b1      	ldr	r0, [pc, #708]	; (8000de0 <init_synth+0x324>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000b1c:	46a3      	mov	fp, r4
		algo = 0x00;								//default algorithm 0
 8000b1e:	7006      	strb	r6, [r0, #0]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 8000b20:	f04f 3680 	mov.w	r6, #2155905152	; 0x80808080
 8000b24:	48af      	ldr	r0, [pc, #700]	; (8000de4 <init_synth+0x328>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000b26:	46a1      	mov	r9, r4
 8000b28:	6006      	str	r6, [r0, #0]
 8000b2a:	f04f 3610 	mov.w	r6, #269488144	; 0x10101010
 8000b2e:	48ae      	ldr	r0, [pc, #696]	; (8000de8 <init_synth+0x32c>)
 8000b30:	46a0      	mov	r8, r4
 8000b32:	6006      	str	r6, [r0, #0]
 8000b34:	f04f 367e 	mov.w	r6, #2122219134	; 0x7e7e7e7e
 8000b38:	48ac      	ldr	r0, [pc, #688]	; (8000dec <init_synth+0x330>)
 8000b3a:	46a6      	mov	lr, r4
 8000b3c:	6006      	str	r6, [r0, #0]
 8000b3e:	f04f 3678 	mov.w	r6, #2021161080	; 0x78787878
 8000b42:	48ab      	ldr	r0, [pc, #684]	; (8000df0 <init_synth+0x334>)
 8000b44:	46a4      	mov	ip, r4
 8000b46:	6006      	str	r6, [r0, #0]
 8000b48:	f04f 3664 	mov.w	r6, #1684300900	; 0x64646464
 8000b4c:	48a9      	ldr	r0, [pc, #676]	; (8000df4 <init_synth+0x338>)
 8000b4e:	4627      	mov	r7, r4
 8000b50:	6006      	str	r6, [r0, #0]
 8000b52:	f04f 366e 	mov.w	r6, #1852730990	; 0x6e6e6e6e
 8000b56:	48a8      	ldr	r0, [pc, #672]	; (8000df8 <init_synth+0x33c>)
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
 8000b58:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8000e0c <init_synth+0x350>
 8000b5c:	6006      	str	r6, [r0, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000b5e:	465e      	mov	r6, fp
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
 8000b60:	48a6      	ldr	r0, [pc, #664]	; (8000dfc <init_synth+0x340>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000b62:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
 8000b66:	f8c0 a000 	str.w	sl, [r0]
 8000b6a:	f8c0 a004 	str.w	sl, [r0, #4]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);//ENV_MAX_RATE << 8;
 8000b6e:	48a4      	ldr	r0, [pc, #656]	; (8000e00 <init_synth+0x344>)
 8000b70:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8000e10 <init_synth+0x354>
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000b74:	9413      	str	r4, [sp, #76]	; 0x4c
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);//ENV_MAX_RATE << 8;
 8000b76:	f8c0 a000 	str.w	sl, [r0]
 8000b7a:	f8c0 a004 	str.w	sl, [r0, #4]
		op_release_inc[i] = calculate_env_inc(op_release[i]);//ENV_MAX_RATE << 8;
 8000b7e:	48a1      	ldr	r0, [pc, #644]	; (8000e04 <init_synth+0x348>)
 8000b80:	f8df a290 	ldr.w	sl, [pc, #656]	; 8000e14 <init_synth+0x358>
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000b84:	6219      	str	r1, [r3, #32]
		op_release_inc[i] = calculate_env_inc(op_release[i]);//ENV_MAX_RATE << 8;
 8000b86:	f8c0 a000 	str.w	sl, [r0]
 8000b8a:	f8c0 a004 	str.w	sl, [r0, #4]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b90:	851d      	strh	r5, [r3, #40]	; 0x28
 8000b92:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000b94:	86dd      	strh	r5, [r3, #54]	; 0x36
 8000b96:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
 8000b9a:	f8a3 5052 	strh.w	r5, [r3, #82]	; 0x52
 8000b9e:	f8a3 5060 	strh.w	r5, [r3, #96]	; 0x60
 8000ba2:	f8c3 002a 	str.w	r0, [r3, #42]	; 0x2a
 8000ba6:	f8c3 102e 	str.w	r1, [r3, #46]	; 0x2e
 8000baa:	f8c3 2032 	str.w	r2, [r3, #50]	; 0x32
 8000bae:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8000bb2:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 8000bb6:	f8a3 507c 	strh.w	r5, [r3, #124]	; 0x7c
 8000bba:	6398      	str	r0, [r3, #56]	; 0x38
 8000bbc:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000bc0:	f8a3 508a 	strh.w	r5, [r3, #138]	; 0x8a
 8000bc4:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8000bc8:	f8a3 5098 	strh.w	r5, [r3, #152]	; 0x98
 8000bcc:	f8c3 0046 	str.w	r0, [r3, #70]	; 0x46
 8000bd0:	f8c3 104a 	str.w	r1, [r3, #74]	; 0x4a
 8000bd4:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
 8000bd8:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8000bdc:	6558      	str	r0, [r3, #84]	; 0x54
 8000bde:	6599      	str	r1, [r3, #88]	; 0x58
 8000be0:	65da      	str	r2, [r3, #92]	; 0x5c
 8000be2:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8000be6:	f8c3 0062 	str.w	r0, [r3, #98]	; 0x62
 8000bea:	f8c3 1066 	str.w	r1, [r3, #102]	; 0x66
 8000bee:	f8c3 206a 	str.w	r2, [r3, #106]	; 0x6a
 8000bf2:	cf07      	ldmia	r7!, {r0, r1, r2}
 8000bf4:	6718      	str	r0, [r3, #112]	; 0x70
 8000bf6:	6759      	str	r1, [r3, #116]	; 0x74
 8000bf8:	679a      	str	r2, [r3, #120]	; 0x78
 8000bfa:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000bfc:	465e      	mov	r6, fp
 8000bfe:	f8c3 007e 	str.w	r0, [r3, #126]	; 0x7e
 8000c02:	f8c3 1082 	str.w	r1, [r3, #130]	; 0x82
 8000c06:	f8c3 2086 	str.w	r2, [r3, #134]	; 0x86
 8000c0a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000c0c:	465e      	mov	r6, fp
 8000c0e:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000c12:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8000c16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000c1a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000c1c:	465e      	mov	r6, fp
 8000c1e:	f8c3 009a 	str.w	r0, [r3, #154]	; 0x9a
 8000c22:	f8c3 109e 	str.w	r1, [r3, #158]	; 0x9e
 8000c26:	f8c3 20a2 	str.w	r2, [r3, #162]	; 0xa2
 8000c2a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000c2c:	465e      	mov	r6, fp
 8000c2e:	f8a3 50a6 	strh.w	r5, [r3, #166]	; 0xa6
 8000c32:	f8a3 50b4 	strh.w	r5, [r3, #180]	; 0xb4
 8000c36:	f8a3 50c2 	strh.w	r5, [r3, #194]	; 0xc2
 8000c3a:	f8a3 50d0 	strh.w	r5, [r3, #208]	; 0xd0
 8000c3e:	f8a3 50de 	strh.w	r5, [r3, #222]	; 0xde
 8000c42:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 8000c46:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8000c4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000c4e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000c50:	465e      	mov	r6, fp
 8000c52:	f8c3 00b6 	str.w	r0, [r3, #182]	; 0xb6
 8000c56:	f8c3 10ba 	str.w	r1, [r3, #186]	; 0xba
 8000c5a:	f8c3 20be 	str.w	r2, [r3, #190]	; 0xbe
 8000c5e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000c60:	465e      	mov	r6, fp
 8000c62:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
 8000c66:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8000c6a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000c6e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000c70:	465e      	mov	r6, fp
 8000c72:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
 8000c76:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
 8000c7a:	f8c3 20da 	str.w	r2, [r3, #218]	; 0xda
 8000c7e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000c80:	465e      	mov	r6, fp
 8000c82:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000c86:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8000c8a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000c8e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000c90:	465e      	mov	r6, fp
 8000c92:	f8a3 50ec 	strh.w	r5, [r3, #236]	; 0xec
 8000c96:	f8a3 50fa 	strh.w	r5, [r3, #250]	; 0xfa
 8000c9a:	f8a3 5108 	strh.w	r5, [r3, #264]	; 0x108
 8000c9e:	f8a3 5116 	strh.w	r5, [r3, #278]	; 0x116
 8000ca2:	f8a3 5124 	strh.w	r5, [r3, #292]	; 0x124
 8000ca6:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
 8000caa:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
 8000cae:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
 8000cb2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000cb4:	465e      	mov	r6, fp
 8000cb6:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
 8000cba:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 8000cbe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000cc2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000cc4:	465e      	mov	r6, fp
 8000cc6:	f8c3 010a 	str.w	r0, [r3, #266]	; 0x10a
 8000cca:	f8c3 110e 	str.w	r1, [r3, #270]	; 0x10e
 8000cce:	f8c3 2112 	str.w	r2, [r3, #274]	; 0x112
 8000cd2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000cd4:	465e      	mov	r6, fp
 8000cd6:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000cda:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
 8000cde:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8000ce2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ce4:	465e      	mov	r6, fp
 8000ce6:	f8a3 5132 	strh.w	r5, [r3, #306]	; 0x132
 8000cea:	f8a3 5140 	strh.w	r5, [r3, #320]	; 0x140
 8000cee:	f8a3 514e 	strh.w	r5, [r3, #334]	; 0x14e
 8000cf2:	f8a3 515c 	strh.w	r5, [r3, #348]	; 0x15c
 8000cf6:	f8c3 0126 	str.w	r0, [r3, #294]	; 0x126
 8000cfa:	f8c3 112a 	str.w	r1, [r3, #298]	; 0x12a
 8000cfe:	f8c3 212e 	str.w	r2, [r3, #302]	; 0x12e
 8000d02:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d04:	465e      	mov	r6, fp
 8000d06:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8000d0a:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
 8000d0e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8000d12:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d14:	465e      	mov	r6, fp
 8000d16:	f8c3 0142 	str.w	r0, [r3, #322]	; 0x142
 8000d1a:	f8c3 1146 	str.w	r1, [r3, #326]	; 0x146
 8000d1e:	f8c3 214a 	str.w	r2, [r3, #330]	; 0x14a
 8000d22:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d24:	465e      	mov	r6, fp
 8000d26:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8000d2a:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
 8000d2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8000d32:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d34:	465e      	mov	r6, fp
 8000d36:	f8c3 015e 	str.w	r0, [r3, #350]	; 0x15e
 8000d3a:	f8c3 1162 	str.w	r1, [r3, #354]	; 0x162
 8000d3e:	f8c3 2166 	str.w	r2, [r3, #358]	; 0x166
 8000d42:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d44:	465e      	mov	r6, fp
 8000d46:	f8a3 516a 	strh.w	r5, [r3, #362]	; 0x16a
 8000d4a:	f8a3 5178 	strh.w	r5, [r3, #376]	; 0x178
 8000d4e:	f8a3 5186 	strh.w	r5, [r3, #390]	; 0x186
 8000d52:	f8a3 5194 	strh.w	r5, [r3, #404]	; 0x194
 8000d56:	f8a3 51a2 	strh.w	r5, [r3, #418]	; 0x1a2
 8000d5a:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
 8000d5e:	f8c3 1170 	str.w	r1, [r3, #368]	; 0x170
 8000d62:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8000d66:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d68:	f8c3 017a 	str.w	r0, [r3, #378]	; 0x17a
 8000d6c:	f8c3 117e 	str.w	r1, [r3, #382]	; 0x17e
 8000d70:	f8c3 2182 	str.w	r2, [r3, #386]	; 0x182
 8000d74:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8000d78:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8000d7c:	f1a6 020c 	sub.w	r2, r6, #12
 8000d80:	4616      	mov	r6, r2
 8000d82:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8000d86:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8000d8a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d8c:	f8c3 219e 	str.w	r2, [r3, #414]	; 0x19e
 8000d90:	f1a6 020c 	sub.w	r2, r6, #12
 8000d94:	4616      	mov	r6, r2
 8000d96:	f8c3 0196 	str.w	r0, [r3, #406]	; 0x196
 8000d9a:	f8c3 119a 	str.w	r1, [r3, #410]	; 0x19a
 8000d9e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000da0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8000da4:	f1a6 020c 	sub.w	r2, r6, #12
 8000da8:	f8a3 51b0 	strh.w	r5, [r3, #432]	; 0x1b0
 8000dac:	f8a3 51be 	strh.w	r5, [r3, #446]	; 0x1be
 8000db0:	4615      	mov	r5, r2
 8000db2:	f8c3 01a4 	str.w	r0, [r3, #420]	; 0x1a4
 8000db6:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
 8000dba:	cd07      	ldmia	r5!, {r0, r1, r2}
		}
	}
	env_period = ENV_MAX_PERIOD;
 8000dbc:	f240 5562 	movw	r5, #1378	; 0x562
 8000dc0:	4c11      	ldr	r4, [pc, #68]	; (8000e08 <init_synth+0x34c>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000dc2:	f8c3 01b2 	str.w	r0, [r3, #434]	; 0x1b2
	env_period = ENV_MAX_PERIOD;
 8000dc6:	8025      	strh	r5, [r4, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000dc8:	f8c3 11b6 	str.w	r1, [r3, #438]	; 0x1b6
 8000dcc:	f8c3 21ba 	str.w	r2, [r3, #442]	; 0x1ba
}
 8000dd0:	b017      	add	sp, #92	; 0x5c
 8000dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd6:	bf00      	nop
 8000dd8:	08002724 	.word	0x08002724
 8000ddc:	20000034 	.word	0x20000034
 8000de0:	200001f8 	.word	0x200001f8
 8000de4:	2000020c 	.word	0x2000020c
 8000de8:	20000228 	.word	0x20000228
 8000dec:	20000200 	.word	0x20000200
 8000df0:	20000220 	.word	0x20000220
 8000df4:	200001f4 	.word	0x200001f4
 8000df8:	200001fc 	.word	0x200001fc
 8000dfc:	20000218 	.word	0x20000218
 8000e00:	20000210 	.word	0x20000210
 8000e04:	20000204 	.word	0x20000204
 8000e08:	200001fa 	.word	0x200001fa
 8000e0c:	2aaa2aaa 	.word	0x2aaa2aaa
 8000e10:	0e380e38 	.word	0x0e380e38
 8000e14:	06bc06bc 	.word	0x06bc06bc

08000e18 <clear_voices>:

void clear_voices() {
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		op[0][i].note_value = -1;
 8000e18:	22ff      	movs	r2, #255	; 0xff
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <clear_voices+0x20>)
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	739a      	strb	r2, [r3, #14]
 8000e20:	771a      	strb	r2, [r3, #28]
 8000e22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000e2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8000e2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000e32:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}
}
 8000e36:	4770      	bx	lr
 8000e38:	20000034 	.word	0x20000034

08000e3c <add_voice>:

void add_voice(uint8_t note_value) {
 8000e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t voice_index, released_voice = -1;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000e40:	4c74      	ldr	r4, [pc, #464]	; (8001014 <add_voice+0x1d8>)
void add_voice(uint8_t note_value) {
 8000e42:	4607      	mov	r7, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000e44:	7823      	ldrb	r3, [r4, #0]
 8000e46:	2bff      	cmp	r3, #255	; 0xff
 8000e48:	f000 80bc 	beq.w	8000fc4 <add_voice+0x188>
 8000e4c:	7ba2      	ldrb	r2, [r4, #14]
 8000e4e:	2aff      	cmp	r2, #255	; 0xff
 8000e50:	f000 80bd 	beq.w	8000fce <add_voice+0x192>
 8000e54:	7f22      	ldrb	r2, [r4, #28]
 8000e56:	2aff      	cmp	r2, #255	; 0xff
 8000e58:	f000 80be 	beq.w	8000fd8 <add_voice+0x19c>
 8000e5c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8000e60:	2aff      	cmp	r2, #255	; 0xff
 8000e62:	f000 80be 	beq.w	8000fe2 <add_voice+0x1a6>
 8000e66:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000e6a:	2aff      	cmp	r2, #255	; 0xff
 8000e6c:	f000 80be 	beq.w	8000fec <add_voice+0x1b0>
 8000e70:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8000e74:	2aff      	cmp	r2, #255	; 0xff
 8000e76:	f000 80be 	beq.w	8000ff6 <add_voice+0x1ba>
 8000e7a:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8000e7e:	2aff      	cmp	r2, #255	; 0xff
 8000e80:	f000 80be 	beq.w	8001000 <add_voice+0x1c4>
 8000e84:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8000e88:	2aff      	cmp	r2, #255	; 0xff
 8000e8a:	f000 80c0 	beq.w	800100e <add_voice+0x1d2>
 8000e8e:	2108      	movs	r1, #8
 8000e90:	460d      	mov	r5, r1
			break;
		}
	}
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000e92:	429f      	cmp	r7, r3
 8000e94:	f000 8099 	beq.w	8000fca <add_voice+0x18e>
			voice_index = i;
			break;
		}
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000e98:	7aa3      	ldrb	r3, [r4, #10]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000e9a:	7ba2      	ldrb	r2, [r4, #14]
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	bf14      	ite	ne
 8000ea0:	23ff      	movne	r3, #255	; 0xff
 8000ea2:	2300      	moveq	r3, #0
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ea4:	42ba      	cmp	r2, r7
 8000ea6:	f000 8095 	beq.w	8000fd4 <add_voice+0x198>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000eaa:	7e20      	ldrb	r0, [r4, #24]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000eac:	7f22      	ldrb	r2, [r4, #28]
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8000eae:	2803      	cmp	r0, #3
 8000eb0:	bf08      	it	eq
 8000eb2:	2301      	moveq	r3, #1
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000eb4:	42ba      	cmp	r2, r7
 8000eb6:	f000 8092 	beq.w	8000fde <add_voice+0x1a2>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000eba:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ebe:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8000ec2:	2803      	cmp	r0, #3
 8000ec4:	bf08      	it	eq
 8000ec6:	2302      	moveq	r3, #2
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ec8:	42ba      	cmp	r2, r7
 8000eca:	f000 808d 	beq.w	8000fe8 <add_voice+0x1ac>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000ece:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ed2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8000ed6:	2803      	cmp	r0, #3
 8000ed8:	bf08      	it	eq
 8000eda:	2303      	moveq	r3, #3
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000edc:	42ba      	cmp	r2, r7
 8000ede:	f000 8088 	beq.w	8000ff2 <add_voice+0x1b6>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000ee2:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ee6:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8000eea:	2803      	cmp	r0, #3
 8000eec:	bf08      	it	eq
 8000eee:	2304      	moveq	r3, #4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ef0:	42ba      	cmp	r2, r7
 8000ef2:	f000 8083 	beq.w	8000ffc <add_voice+0x1c0>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000ef6:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000efa:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8000efe:	2803      	cmp	r0, #3
 8000f00:	bf08      	it	eq
 8000f02:	2305      	moveq	r3, #5
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000f04:	42ba      	cmp	r2, r7
 8000f06:	d07e      	beq.n	8001006 <add_voice+0x1ca>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000f08:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000f0c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8000f10:	2803      	cmp	r0, #3
 8000f12:	bf08      	it	eq
 8000f14:	2306      	moveq	r3, #6
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000f16:	42ba      	cmp	r2, r7
 8000f18:	d077      	beq.n	800100a <add_voice+0x1ce>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000f1a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8000f1e:	2a03      	cmp	r2, #3
 8000f20:	d03a      	beq.n	8000f98 <add_voice+0x15c>
			released_voice = i;
		}
	}
	if (voice_index == MAX_VOICES) {
 8000f22:	2d08      	cmp	r5, #8
 8000f24:	d102      	bne.n	8000f2c <add_voice+0xf0>
		if (released_voice == (uint8_t)-1) {
 8000f26:	2bff      	cmp	r3, #255	; 0xff
 8000f28:	d03a      	beq.n	8000fa0 <add_voice+0x164>
 8000f2a:	4619      	mov	r1, r3
		}
		else {
			voice_index = released_voice;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000f2c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000f30:	eb04 0441 	add.w	r4, r4, r1, lsl #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
		if (op_index != 0)	{
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
		}
		else {
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8000f34:	4626      	mov	r6, r4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000f36:	2501      	movs	r5, #1
 8000f38:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001018 <add_voice+0x1dc>
 8000f3c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800101c <add_voice+0x1e0>
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8000f40:	f04f 0a00 	mov.w	sl, #0
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8000f44:	4638      	mov	r0, r7
		op[op_index][voice_index].note_value = note_value;										//store note
 8000f46:	7027      	strb	r7, [r4, #0]
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8000f48:	f8a4 a008 	strh.w	sl, [r4, #8]
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8000f4c:	f818 bb01 	ldrb.w	fp, [r8], #1
 8000f50:	f7ff fad8 	bl	8000504 <note_to_freq>
 8000f54:	fb00 f30b 	mul.w	r3, r0, fp
		if (op_index != 0)	{
 8000f58:	2d01      	cmp	r5, #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8000f5a:	ea4f 1323 	mov.w	r3, r3, asr #4
 8000f5e:	8063      	strh	r3, [r4, #2]
		if (op_index != 0)	{
 8000f60:	d020      	beq.n	8000fa4 <add_voice+0x168>
		}

		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8000f62:	f8b9 2000 	ldrh.w	r2, [r9]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000f66:	88f3      	ldrh	r3, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000f68:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8000f6c:	fab1 f181 	clz	r1, r1
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000f70:	f818 0c01 	ldrb.w	r0, [r8, #-1]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000f74:	0949      	lsrs	r1, r1, #5
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000f76:	fb03 f300 	mul.w	r3, r3, r0
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000f7a:	2d04      	cmp	r5, #4
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000f7c:	ea4f 1323 	mov.w	r3, r3, asr #4
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8000f80:	f884 a004 	strb.w	sl, [r4, #4]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8000f84:	80e3      	strh	r3, [r4, #6]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8000f86:	81a2      	strh	r2, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000f88:	72a1      	strb	r1, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000f8a:	d009      	beq.n	8000fa0 <add_voice+0x164>
 8000f8c:	3501      	adds	r5, #1
 8000f8e:	b2ed      	uxtb	r5, r5
 8000f90:	3470      	adds	r4, #112	; 0x70
 8000f92:	f109 0902 	add.w	r9, r9, #2
 8000f96:	e7d3      	b.n	8000f40 <add_voice+0x104>
	if (voice_index == MAX_VOICES) {
 8000f98:	2d08      	cmp	r5, #8
 8000f9a:	d1c7      	bne.n	8000f2c <add_voice+0xf0>
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	e7c4      	b.n	8000f2a <add_voice+0xee>
		}
		else {
			op[op_index][voice_index].adsr_state = ATTACK;											//else, start on attack state
		}
	}
}
 8000fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8000fa4:	8870      	ldrh	r0, [r6, #2]
 8000fa6:	f7ff fab3 	bl	8000510 <calculate_delta>
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8000faa:	f8b9 3000 	ldrh.w	r3, [r9]
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8000fae:	80f0      	strh	r0, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000fb0:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 8000fb4:	fab2 f282 	clz	r2, r2
 8000fb8:	0952      	lsrs	r2, r2, #5
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8000fba:	f884 a004 	strb.w	sl, [r4, #4]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8000fbe:	81a3      	strh	r3, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8000fc0:	72a2      	strb	r2, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000fc2:	e7e3      	b.n	8000f8c <add_voice+0x150>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000fc4:	2100      	movs	r1, #0
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8000fc6:	460d      	mov	r5, r1
 8000fc8:	e763      	b.n	8000e92 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000fca:	2100      	movs	r1, #0
 8000fcc:	e7ae      	b.n	8000f2c <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000fce:	2101      	movs	r1, #1
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8000fd0:	460d      	mov	r5, r1
 8000fd2:	e75e      	b.n	8000e92 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	e7a9      	b.n	8000f2c <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000fd8:	2102      	movs	r1, #2
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8000fda:	460d      	mov	r5, r1
 8000fdc:	e759      	b.n	8000e92 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000fde:	2102      	movs	r1, #2
 8000fe0:	e7a4      	b.n	8000f2c <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000fe2:	2103      	movs	r1, #3
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8000fe4:	460d      	mov	r5, r1
 8000fe6:	e754      	b.n	8000e92 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000fe8:	2103      	movs	r1, #3
 8000fea:	e79f      	b.n	8000f2c <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000fec:	2104      	movs	r1, #4
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8000fee:	460d      	mov	r5, r1
 8000ff0:	e74f      	b.n	8000e92 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	e79a      	b.n	8000f2c <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000ff6:	2105      	movs	r1, #5
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8000ff8:	460d      	mov	r5, r1
 8000ffa:	e74a      	b.n	8000e92 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	e795      	b.n	8000f2c <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001000:	2106      	movs	r1, #6
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001002:	460d      	mov	r5, r1
 8001004:	e745      	b.n	8000e92 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001006:	2106      	movs	r1, #6
 8001008:	e790      	b.n	8000f2c <add_voice+0xf0>
 800100a:	2107      	movs	r1, #7
 800100c:	e78e      	b.n	8000f2c <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800100e:	2107      	movs	r1, #7
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001010:	460d      	mov	r5, r1
 8001012:	e73e      	b.n	8000e92 <add_voice+0x56>
 8001014:	20000034 	.word	0x20000034
 8001018:	20000228 	.word	0x20000228
 800101c:	20000218 	.word	0x20000218

08001020 <release_voice>:

void release_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <release_voice+0x78>)
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4282      	cmp	r2, r0
 8001026:	d028      	beq.n	800107a <release_voice+0x5a>
 8001028:	7b9a      	ldrb	r2, [r3, #14]
 800102a:	4282      	cmp	r2, r0
 800102c:	d027      	beq.n	800107e <release_voice+0x5e>
 800102e:	7f1a      	ldrb	r2, [r3, #28]
 8001030:	4282      	cmp	r2, r0
 8001032:	d026      	beq.n	8001082 <release_voice+0x62>
 8001034:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8001038:	4282      	cmp	r2, r0
 800103a:	d024      	beq.n	8001086 <release_voice+0x66>
 800103c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001040:	4282      	cmp	r2, r0
 8001042:	d022      	beq.n	800108a <release_voice+0x6a>
 8001044:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8001048:	4282      	cmp	r2, r0
 800104a:	d020      	beq.n	800108e <release_voice+0x6e>
 800104c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001050:	4282      	cmp	r2, r0
 8001052:	d01e      	beq.n	8001092 <release_voice+0x72>
 8001054:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8001058:	4282      	cmp	r2, r0
 800105a:	bf14      	ite	ne
 800105c:	2008      	movne	r0, #8
 800105e:	2007      	moveq	r0, #7
			break;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op[op_index][voice_index].adsr_state = RELEASE;
 8001060:	2203      	movs	r2, #3
 8001062:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001066:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800106a:	729a      	strb	r2, [r3, #10]
 800106c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8001070:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8001074:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	}
}
 8001078:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 800107a:	2000      	movs	r0, #0
 800107c:	e7f0      	b.n	8001060 <release_voice+0x40>
 800107e:	2001      	movs	r0, #1
 8001080:	e7ee      	b.n	8001060 <release_voice+0x40>
 8001082:	2002      	movs	r0, #2
 8001084:	e7ec      	b.n	8001060 <release_voice+0x40>
 8001086:	2003      	movs	r0, #3
 8001088:	e7ea      	b.n	8001060 <release_voice+0x40>
 800108a:	2004      	movs	r0, #4
 800108c:	e7e8      	b.n	8001060 <release_voice+0x40>
 800108e:	2005      	movs	r0, #5
 8001090:	e7e6      	b.n	8001060 <release_voice+0x40>
 8001092:	2006      	movs	r0, #6
 8001094:	e7e4      	b.n	8001060 <release_voice+0x40>
 8001096:	bf00      	nop
 8001098:	20000034 	.word	0x20000034

0800109c <synth_sample>:

int16_t synth_sample() {
 800109c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t output_volume = 0x0800;											//default output volume 2048
	if (--env_period == 0x00) {												//decrement and check envelope period
 80010a0:	4bbf      	ldr	r3, [pc, #764]	; (80013a0 <synth_sample+0x304>)
 80010a2:	881d      	ldrh	r5, [r3, #0]
 80010a4:	3d01      	subs	r5, #1
 80010a6:	b2ad      	uxth	r5, r5
 80010a8:	bb2d      	cbnz	r5, 80010f6 <synth_sample+0x5a>
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 80010aa:	f240 5262 	movw	r2, #1378	; 0x562
	int16_t output_volume = 0x0800;											//default output volume 2048
 80010ae:	f44f 6800 	mov.w	r8, #2048	; 0x800
 80010b2:	4cbc      	ldr	r4, [pc, #752]	; (80013a4 <synth_sample+0x308>)
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80010b4:	f8df 9300 	ldr.w	r9, [pc, #768]	; 80013b8 <synth_sample+0x31c>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80010b8:	4fbb      	ldr	r7, [pc, #748]	; (80013a8 <synth_sample+0x30c>)
 80010ba:	4ebc      	ldr	r6, [pc, #752]	; (80013ac <synth_sample+0x310>)
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 80010bc:	801a      	strh	r2, [r3, #0]
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80010be:	7823      	ldrb	r3, [r4, #0]
 80010c0:	b2e8      	uxtb	r0, r5
 80010c2:	2bff      	cmp	r3, #255	; 0xff
 80010c4:	d00f      	beq.n	80010e6 <synth_sample+0x4a>
		switch (op[op_index][voice_index].adsr_state) {
 80010c6:	7aa3      	ldrb	r3, [r4, #10]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	f200 8095 	bhi.w	80011f8 <synth_sample+0x15c>
 80010ce:	e8df f003 	tbb	[pc, r3]
 80010d2:	6b7c      	.short	0x6b7c
 80010d4:	6093      	.short	0x6093
 80010d6:	03          	.byte	0x03
 80010d7:	00          	.byte	0x00
static inline void delete_voice(uint8_t voice_index) { op[0][voice_index].note_value = -1; };
 80010d8:	23ff      	movs	r3, #255	; 0xff
 80010da:	7023      	strb	r3, [r4, #0]
				cycle_envelope(voice_index);
				output_volume += modulate(voice_index);
 80010dc:	f7ff faf6 	bl	80006cc <modulate>
 80010e0:	4480      	add	r8, r0
 80010e2:	fa0f f888 	sxth.w	r8, r8
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
 80010e6:	3501      	adds	r5, #1
 80010e8:	2d08      	cmp	r5, #8
 80010ea:	f104 040e 	add.w	r4, r4, #14
 80010ee:	d1e6      	bne.n	80010be <synth_sample+0x22>
				output_volume += modulate(voice_index);
			}
		}
	}
	return output_volume;
}
 80010f0:	4640      	mov	r0, r8
 80010f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80010f6:	4cab      	ldr	r4, [pc, #684]	; (80013a4 <synth_sample+0x308>)
	if (--env_period == 0x00) {												//decrement and check envelope period
 80010f8:	801d      	strh	r5, [r3, #0]
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80010fa:	7823      	ldrb	r3, [r4, #0]
 80010fc:	2bff      	cmp	r3, #255	; 0xff
 80010fe:	d173      	bne.n	80011e8 <synth_sample+0x14c>
	int16_t output_volume = 0x0800;											//default output volume 2048
 8001100:	f44f 6800 	mov.w	r8, #2048	; 0x800
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001104:	7ba3      	ldrb	r3, [r4, #14]
 8001106:	2bff      	cmp	r3, #255	; 0xff
 8001108:	d005      	beq.n	8001116 <synth_sample+0x7a>
				output_volume += modulate(voice_index);
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff fade 	bl	80006cc <modulate>
 8001110:	4480      	add	r8, r0
 8001112:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001116:	7f23      	ldrb	r3, [r4, #28]
 8001118:	2bff      	cmp	r3, #255	; 0xff
 800111a:	d005      	beq.n	8001128 <synth_sample+0x8c>
				output_volume += modulate(voice_index);
 800111c:	2002      	movs	r0, #2
 800111e:	f7ff fad5 	bl	80006cc <modulate>
 8001122:	4480      	add	r8, r0
 8001124:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001128:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800112c:	2bff      	cmp	r3, #255	; 0xff
 800112e:	d005      	beq.n	800113c <synth_sample+0xa0>
				output_volume += modulate(voice_index);
 8001130:	2003      	movs	r0, #3
 8001132:	f7ff facb 	bl	80006cc <modulate>
 8001136:	4480      	add	r8, r0
 8001138:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800113c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001140:	2bff      	cmp	r3, #255	; 0xff
 8001142:	d005      	beq.n	8001150 <synth_sample+0xb4>
				output_volume += modulate(voice_index);
 8001144:	2004      	movs	r0, #4
 8001146:	f7ff fac1 	bl	80006cc <modulate>
 800114a:	4480      	add	r8, r0
 800114c:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001150:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001154:	2bff      	cmp	r3, #255	; 0xff
 8001156:	d005      	beq.n	8001164 <synth_sample+0xc8>
				output_volume += modulate(voice_index);
 8001158:	2005      	movs	r0, #5
 800115a:	f7ff fab7 	bl	80006cc <modulate>
 800115e:	4480      	add	r8, r0
 8001160:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001164:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8001168:	2bff      	cmp	r3, #255	; 0xff
 800116a:	d005      	beq.n	8001178 <synth_sample+0xdc>
				output_volume += modulate(voice_index);
 800116c:	2006      	movs	r0, #6
 800116e:	f7ff faad 	bl	80006cc <modulate>
 8001172:	4480      	add	r8, r0
 8001174:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001178:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 800117c:	2bff      	cmp	r3, #255	; 0xff
 800117e:	d0b7      	beq.n	80010f0 <synth_sample+0x54>
				output_volume += modulate(voice_index);
 8001180:	2007      	movs	r0, #7
 8001182:	f7ff faa3 	bl	80006cc <modulate>
 8001186:	4480      	add	r8, r0
 8001188:	fa0f f888 	sxth.w	r8, r8
}
 800118c:	4640      	mov	r0, r8
 800118e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001192:	4a87      	ldr	r2, [pc, #540]	; (80013b0 <synth_sample+0x314>)
 8001194:	89a3      	ldrh	r3, [r4, #12]
 8001196:	8812      	ldrh	r2, [r2, #0]
 8001198:	4293      	cmp	r3, r2
 800119a:	f080 8124 	bcs.w	80013e6 <synth_sample+0x34a>
				op[op_index][voice_index].env_amp = 0;
 800119e:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 80011a0:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 80011a2:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SILENT;
 80011a4:	72a2      	strb	r2, [r4, #10]
 80011a6:	e028      	b.n	80011fa <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80011a8:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 80011ac:	8839      	ldrh	r1, [r7, #0]
 80011ae:	7832      	ldrb	r2, [r6, #0]
 80011b0:	ebac 0e01 	sub.w	lr, ip, r1
 80011b4:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80011b8:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80011bc:	db5d      	blt.n	800127a <synth_sample+0x1de>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80011be:	458c      	cmp	ip, r1
 80011c0:	d35b      	bcc.n	800127a <synth_sample+0x1de>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80011c2:	fa1f f38e 	uxth.w	r3, lr
 80011c6:	81a3      	strh	r3, [r4, #12]
 80011c8:	e017      	b.n	80011fa <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 80011ca:	4a7a      	ldr	r2, [pc, #488]	; (80013b4 <synth_sample+0x318>)
 80011cc:	89a3      	ldrh	r3, [r4, #12]
 80011ce:	8812      	ldrh	r2, [r2, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011d6:	f2c0 8103 	blt.w	80013e0 <synth_sample+0x344>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80011da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 80011de:	2101      	movs	r1, #1
 80011e0:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80011e2:	81a2      	strh	r2, [r4, #12]
				op[op_index][voice_index].adsr_state = DECAY;
 80011e4:	72a1      	strb	r1, [r4, #10]
 80011e6:	e008      	b.n	80011fa <synth_sample+0x15e>
				output_volume += modulate(voice_index);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fa6f 	bl	80006cc <modulate>
 80011ee:	f500 6800 	add.w	r8, r0, #2048	; 0x800
 80011f2:	fa0f f888 	sxth.w	r8, r8
 80011f6:	e785      	b.n	8001104 <synth_sample+0x68>
 80011f8:	89a3      	ldrh	r3, [r4, #12]
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80011fa:	f899 2000 	ldrb.w	r2, [r9]
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8001204:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001208:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 800120a:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800120c:	7123      	strb	r3, [r4, #4]
		switch (op[op_index][voice_index].adsr_state) {
 800120e:	d059      	beq.n	80012c4 <synth_sample+0x228>
 8001210:	2a03      	cmp	r2, #3
 8001212:	d049      	beq.n	80012a8 <synth_sample+0x20c>
 8001214:	b3b2      	cbz	r2, 8001284 <synth_sample+0x1e8>
 8001216:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800121a:	f899 2001 	ldrb.w	r2, [r9, #1]
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8001224:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001228:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 800122a:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800122c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		switch (op[op_index][voice_index].adsr_state) {
 8001230:	d061      	beq.n	80012f6 <synth_sample+0x25a>
 8001232:	2a03      	cmp	r2, #3
 8001234:	f000 8089 	beq.w	800134a <synth_sample+0x2ae>
 8001238:	2a00      	cmp	r2, #0
 800123a:	d075      	beq.n	8001328 <synth_sample+0x28c>
 800123c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001240:	f899 2002 	ldrb.w	r2, [r9, #2]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 800124a:	f894 215a 	ldrb.w	r2, [r4, #346]	; 0x15a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800124e:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8001250:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001252:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
		switch (op[op_index][voice_index].adsr_state) {
 8001256:	f000 80b1 	beq.w	80013bc <synth_sample+0x320>
 800125a:	2a03      	cmp	r2, #3
 800125c:	f000 8093 	beq.w	8001386 <synth_sample+0x2ea>
 8001260:	2a00      	cmp	r2, #0
 8001262:	d07f      	beq.n	8001364 <synth_sample+0x2c8>
 8001264:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001268:	f899 2003 	ldrb.w	r2, [r9, #3]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	11db      	asrs	r3, r3, #7
 8001274:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001278:	e730      	b.n	80010dc <synth_sample+0x40>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 800127a:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 800127c:	b29b      	uxth	r3, r3
 800127e:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001280:	72a2      	strb	r2, [r4, #10]
 8001282:	e7ba      	b.n	80011fa <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001284:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <synth_sample+0x318>)
 8001286:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800128a:	8852      	ldrh	r2, [r2, #2]
 800128c:	4413      	add	r3, r2
 800128e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001292:	f2c0 80b1 	blt.w	80013f8 <synth_sample+0x35c>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001296:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 800129a:	2101      	movs	r1, #1
 800129c:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800129e:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = DECAY;
 80012a2:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
 80012a6:	e7b8      	b.n	800121a <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 80012a8:	4a41      	ldr	r2, [pc, #260]	; (80013b0 <synth_sample+0x314>)
 80012aa:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80012ae:	8852      	ldrh	r2, [r2, #2]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	f080 809c 	bcs.w	80013ee <synth_sample+0x352>
				op[op_index][voice_index].env_amp = 0;
 80012b6:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 80012b8:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 80012ba:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SILENT;
 80012be:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 80012c2:	e7aa      	b.n	800121a <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80012c4:	f8b4 c07c 	ldrh.w	ip, [r4, #124]	; 0x7c
 80012c8:	8879      	ldrh	r1, [r7, #2]
 80012ca:	7872      	ldrb	r2, [r6, #1]
 80012cc:	ebac 0e01 	sub.w	lr, ip, r1
 80012d0:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80012d4:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80012d8:	db06      	blt.n	80012e8 <synth_sample+0x24c>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80012da:	458c      	cmp	ip, r1
 80012dc:	d304      	bcc.n	80012e8 <synth_sample+0x24c>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80012de:	fa1f f38e 	uxth.w	r3, lr
 80012e2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80012e6:	e798      	b.n	800121a <synth_sample+0x17e>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80012e8:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80012f0:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 80012f4:	e791      	b.n	800121a <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80012f6:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	; 0xec
 80012fa:	88b9      	ldrh	r1, [r7, #4]
 80012fc:	78b2      	ldrb	r2, [r6, #2]
 80012fe:	ebac 0e01 	sub.w	lr, ip, r1
 8001302:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001306:	ea4f 2302 	mov.w	r3, r2, lsl #8
 800130a:	db06      	blt.n	800131a <synth_sample+0x27e>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 800130c:	458c      	cmp	ip, r1
 800130e:	d304      	bcc.n	800131a <synth_sample+0x27e>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001310:	fa1f f38e 	uxth.w	r3, lr
 8001314:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001318:	e792      	b.n	8001240 <synth_sample+0x1a4>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 800131a:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 800131c:	b29b      	uxth	r3, r3
 800131e:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001322:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001326:	e78b      	b.n	8001240 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001328:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <synth_sample+0x318>)
 800132a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800132e:	8892      	ldrh	r2, [r2, #4]
 8001330:	4413      	add	r3, r2
 8001332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001336:	db63      	blt.n	8001400 <synth_sample+0x364>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001338:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 800133c:	2101      	movs	r1, #1
 800133e:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001340:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = DECAY;
 8001344:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
 8001348:	e77a      	b.n	8001240 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <synth_sample+0x314>)
 800134c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8001350:	8892      	ldrh	r2, [r2, #4]
 8001352:	4293      	cmp	r3, r2
 8001354:	d258      	bcs.n	8001408 <synth_sample+0x36c>
				op[op_index][voice_index].env_amp = 0;
 8001356:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001358:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 800135a:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SILENT;
 800135e:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001362:	e76d      	b.n	8001240 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <synth_sample+0x318>)
 8001366:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 800136a:	88d2      	ldrh	r2, [r2, #6]
 800136c:	4413      	add	r3, r2
 800136e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001372:	db55      	blt.n	8001420 <synth_sample+0x384>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001374:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001378:	2101      	movs	r1, #1
 800137a:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800137c:	f8a4 215c 	strh.w	r2, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = DECAY;
 8001380:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
 8001384:	e770      	b.n	8001268 <synth_sample+0x1cc>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <synth_sample+0x314>)
 8001388:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 800138c:	88d2      	ldrh	r2, [r2, #6]
 800138e:	4293      	cmp	r3, r2
 8001390:	d24a      	bcs.n	8001428 <synth_sample+0x38c>
				op[op_index][voice_index].env_amp = 0;
 8001392:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001394:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001396:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SILENT;
 800139a:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 800139e:	e763      	b.n	8001268 <synth_sample+0x1cc>
 80013a0:	200001fa 	.word	0x200001fa
 80013a4:	20000034 	.word	0x20000034
 80013a8:	20000210 	.word	0x20000210
 80013ac:	200001f4 	.word	0x200001f4
 80013b0:	20000204 	.word	0x20000204
 80013b4:	20000218 	.word	0x20000218
 80013b8:	2000020c 	.word	0x2000020c
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80013bc:	f8b4 c15c 	ldrh.w	ip, [r4, #348]	; 0x15c
 80013c0:	88f9      	ldrh	r1, [r7, #6]
 80013c2:	78f2      	ldrb	r2, [r6, #3]
 80013c4:	ebac 0e01 	sub.w	lr, ip, r1
 80013c8:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80013cc:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80013d0:	db1f      	blt.n	8001412 <synth_sample+0x376>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80013d2:	458c      	cmp	ip, r1
 80013d4:	d31d      	bcc.n	8001412 <synth_sample+0x376>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80013d6:	fa1f f38e 	uxth.w	r3, lr
 80013da:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 80013de:	e743      	b.n	8001268 <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	81a3      	strh	r3, [r4, #12]
 80013e4:	e709      	b.n	80011fa <synth_sample+0x15e>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	81a3      	strh	r3, [r4, #12]
 80013ec:	e705      	b.n	80011fa <synth_sample+0x15e>
 80013ee:	1a9b      	subs	r3, r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80013f6:	e710      	b.n	800121a <synth_sample+0x17e>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80013fe:	e70c      	b.n	800121a <synth_sample+0x17e>
 8001400:	b29b      	uxth	r3, r3
 8001402:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001406:	e71b      	b.n	8001240 <synth_sample+0x1a4>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001410:	e716      	b.n	8001240 <synth_sample+0x1a4>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001412:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001414:	b29b      	uxth	r3, r3
 8001416:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SUSTAIN;
 800141a:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 800141e:	e723      	b.n	8001268 <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001420:	b29b      	uxth	r3, r3
 8001422:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001426:	e71f      	b.n	8001268 <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001430:	e71a      	b.n	8001268 <synth_sample+0x1cc>
 8001432:	bf00      	nop

08001434 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop

08001438 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	; (8001470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	; (800147c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800145e:	f7ff ffe9 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f001 f927 	bl	80026b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001466:	f7fe fed9 	bl	800021c <main>
  bx lr
 800146a:	4770      	bx	lr
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001474:	08002a68 	.word	0x08002a68
  ldr r2, =_sbss
 8001478:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800147c:	200003a0 	.word	0x200003a0

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>
	...

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <HAL_InitTick+0x3c>)
{
 800148c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148e:	7811      	ldrb	r1, [r2, #0]
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_InitTick+0x40>)
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	fbb2 f0f3 	udiv	r0, r2, r3
 800149c:	f000 f892 	bl	80015c4 <HAL_SYSTICK_Config>
 80014a0:	b908      	cbnz	r0, 80014a6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	2d0f      	cmp	r5, #15
 80014a4:	d901      	bls.n	80014aa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014a8:	bd38      	pop	{r3, r4, r5, pc}
 80014aa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	4602      	mov	r2, r0
 80014ae:	4629      	mov	r1, r5
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 f840 	bl	8001538 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_InitTick+0x44>)
 80014ba:	4620      	mov	r0, r4
 80014bc:	601d      	str	r5, [r3, #0]
}
 80014be:	bd38      	pop	{r3, r4, r5, pc}
 80014c0:	20000010 	.word	0x20000010
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	20000014 	.word	0x20000014

080014cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x20>)
{
 80014ce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014da:	f000 f81b 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff ffd0 	bl	8001484 <HAL_InitTick>
  HAL_MspInit();
 80014e4:	f7ff f81e 	bl	8000524 <HAL_MspInit>
}
 80014e8:	2000      	movs	r0, #0
 80014ea:	bd08      	pop	{r3, pc}
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014f0:	4a03      	ldr	r2, [pc, #12]	; (8001500 <HAL_IncTick+0x10>)
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <HAL_IncTick+0x14>)
 80014f4:	6811      	ldr	r1, [r2, #0]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	440b      	add	r3, r1
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000039c 	.word	0x2000039c
 8001504:	20000010 	.word	0x20000010

08001508 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001508:	4b01      	ldr	r3, [pc, #4]	; (8001510 <HAL_GetTick+0x8>)
 800150a:	6818      	ldr	r0, [r3, #0]
}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000039c 	.word	0x2000039c

08001514 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001514:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800151a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800151e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001526:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800152a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800152e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b430      	push	{r4, r5}
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001542:	f1c3 0507 	rsb	r5, r3, #7
 8001546:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001548:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	bf28      	it	cs
 800154e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001550:	2c06      	cmp	r4, #6
 8001552:	d919      	bls.n	8001588 <HAL_NVIC_SetPriority+0x50>
 8001554:	f04f 34ff 	mov.w	r4, #4294967295
 8001558:	3b03      	subs	r3, #3
 800155a:	409c      	lsls	r4, r3
 800155c:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 34ff 	mov.w	r4, #4294967295
 8001564:	40ac      	lsls	r4, r5
 8001566:	ea21 0104 	bic.w	r1, r1, r4
 800156a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800156c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001572:	db0c      	blt.n	800158e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	0109      	lsls	r1, r1, #4
 8001576:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800157a:	b2c9      	uxtb	r1, r1
 800157c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001580:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001584:	bc30      	pop	{r4, r5}
 8001586:	4770      	bx	lr
 8001588:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	4613      	mov	r3, r2
 800158c:	e7e8      	b.n	8001560 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_NVIC_SetPriority+0x6c>)
 8001590:	f000 000f 	and.w	r0, r0, #15
 8001594:	0109      	lsls	r1, r1, #4
 8001596:	b2c9      	uxtb	r1, r1
 8001598:	4403      	add	r3, r0
 800159a:	7619      	strb	r1, [r3, #24]
 800159c:	bc30      	pop	{r4, r5}
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	e000ecfc 	.word	0xe000ecfc

080015a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015a8:	2800      	cmp	r0, #0
 80015aa:	db07      	blt.n	80015bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ac:	2301      	movs	r3, #1
 80015ae:	f000 011f 	and.w	r1, r0, #31
 80015b2:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <HAL_NVIC_EnableIRQ+0x18>)
 80015b4:	408b      	lsls	r3, r1
 80015b6:	0940      	lsrs	r0, r0, #5
 80015b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	3801      	subs	r0, #1
 80015c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015ca:	d20d      	bcs.n	80015e8 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015cc:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	4c06      	ldr	r4, [pc, #24]	; (80015f0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015de:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80015e0:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e4:	6019      	str	r1, [r3, #0]
 80015e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015e8:	2001      	movs	r0, #1
 80015ea:	4770      	bx	lr
 80015ec:	e000e010 	.word	0xe000e010
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80015f8:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fa:	2a02      	cmp	r2, #2
 80015fc:	d006      	beq.n	800160c <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fe:	2104      	movs	r1, #4
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001600:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001604:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 8001608:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 800160a:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800160c:	2101      	movs	r1, #1
{
 800160e:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8001610:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001614:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001616:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001618:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800161a:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161c:	f024 040e 	bic.w	r4, r4, #14
 8001620:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001622:	6814      	ldr	r4, [r2, #0]
  return status; 
 8001624:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001626:	f024 0401 	bic.w	r4, r4, #1
 800162a:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800162c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800162e:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001630:	841d      	strh	r5, [r3, #32]
}
 8001632:	bc70      	pop	{r4, r5, r6}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop

08001638 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001638:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 800163c:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800163e:	2a02      	cmp	r2, #2
 8001640:	d003      	beq.n	800164a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001642:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8001644:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001646:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001648:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164a:	6802      	ldr	r2, [r0, #0]
{  
 800164c:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164e:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001650:	481b      	ldr	r0, [pc, #108]	; (80016c0 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001652:	f021 010e 	bic.w	r1, r1, #14
 8001656:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001658:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800165a:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 800165c:	f021 0101 	bic.w	r1, r1, #1
 8001660:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001662:	d021      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x70>
 8001664:	4917      	ldr	r1, [pc, #92]	; (80016c4 <HAL_DMA_Abort_IT+0x8c>)
 8001666:	428a      	cmp	r2, r1
 8001668:	d01a      	beq.n	80016a0 <HAL_DMA_Abort_IT+0x68>
 800166a:	3114      	adds	r1, #20
 800166c:	428a      	cmp	r2, r1
 800166e:	d01d      	beq.n	80016ac <HAL_DMA_Abort_IT+0x74>
 8001670:	3114      	adds	r1, #20
 8001672:	428a      	cmp	r2, r1
 8001674:	d01d      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x7a>
 8001676:	3114      	adds	r1, #20
 8001678:	428a      	cmp	r2, r1
 800167a:	d01d      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x80>
 800167c:	3114      	adds	r1, #20
 800167e:	428a      	cmp	r2, r1
 8001680:	bf0c      	ite	eq
 8001682:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001686:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 800168a:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800168e:	4c0e      	ldr	r4, [pc, #56]	; (80016c8 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8001690:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001692:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001694:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8001696:	b129      	cbz	r1, 80016a4 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8001698:	4618      	mov	r0, r3
 800169a:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 800169c:	2000      	movs	r0, #0
}
 800169e:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016a0:	2210      	movs	r2, #16
 80016a2:	e7f2      	b.n	800168a <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 80016a4:	4608      	mov	r0, r1
}
 80016a6:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016a8:	2201      	movs	r2, #1
 80016aa:	e7ee      	b.n	800168a <HAL_DMA_Abort_IT+0x52>
 80016ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b0:	e7eb      	b.n	800168a <HAL_DMA_Abort_IT+0x52>
 80016b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b6:	e7e8      	b.n	800168a <HAL_DMA_Abort_IT+0x52>
 80016b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016bc:	e7e5      	b.n	800168a <HAL_DMA_Abort_IT+0x52>
 80016be:	bf00      	nop
 80016c0:	40020008 	.word	0x40020008
 80016c4:	4002001c 	.word	0x4002001c
 80016c8:	40020000 	.word	0x40020000

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	680c      	ldr	r4, [r1, #0]
{
 80016d2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d4:	2c00      	cmp	r4, #0
 80016d6:	f000 809e 	beq.w	8001816 <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 80016da:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016dc:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 80018d4 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 80016e0:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e2:	4f77      	ldr	r7, [pc, #476]	; (80018c0 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 80016e4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80018d8 <HAL_GPIO_Init+0x20c>
 80016e8:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 80018dc <HAL_GPIO_Init+0x210>
 80016ec:	9000      	str	r0, [sp, #0]
 80016ee:	e004      	b.n	80016fa <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 80016f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	fa34 f203 	lsrs.w	r2, r4, r3
 80016f6:	f000 808e 	beq.w	8001816 <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 80016fa:	2201      	movs	r2, #1
 80016fc:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80016fe:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001702:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8001706:	d1f3      	bne.n	80016f0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001708:	684c      	ldr	r4, [r1, #4]
 800170a:	2c12      	cmp	r4, #18
 800170c:	f200 8086 	bhi.w	800181c <HAL_GPIO_Init+0x150>
 8001710:	2c12      	cmp	r4, #18
 8001712:	d80c      	bhi.n	800172e <HAL_GPIO_Init+0x62>
 8001714:	e8df f004 	tbb	[pc, r4]
 8001718:	0abcbf8a 	.word	0x0abcbf8a
 800171c:	0b0b0b0b 	.word	0x0b0b0b0b
 8001720:	0b0b0b0b 	.word	0x0b0b0b0b
 8001724:	0b0b0b0b 	.word	0x0b0b0b0b
 8001728:	b90b      	.short	0xb90b
 800172a:	b6          	.byte	0xb6
 800172b:	00          	.byte	0x00
 800172c:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800172e:	2dff      	cmp	r5, #255	; 0xff
 8001730:	f200 8083 	bhi.w	800183a <HAL_GPIO_Init+0x16e>
 8001734:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001738:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800173c:	240f      	movs	r4, #15
 800173e:	f8d9 2000 	ldr.w	r2, [r9]
 8001742:	fa04 fb0a 	lsl.w	fp, r4, sl
 8001746:	ea22 020b 	bic.w	r2, r2, fp
 800174a:	fa06 fa0a 	lsl.w	sl, r6, sl
 800174e:	ea42 020a 	orr.w	r2, r2, sl
 8001752:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001756:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800175a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800175e:	f000 808f 	beq.w	8001880 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001762:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	f04a 0a01 	orr.w	sl, sl, #1
 800176e:	f8cc a018 	str.w	sl, [ip, #24]
 8001772:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001776:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800177a:	f00a 0a01 	and.w	sl, sl, #1
 800177e:	f8cd a00c 	str.w	sl, [sp, #12]
 8001782:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001786:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800178a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800178e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001792:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001796:	fa04 f40a 	lsl.w	r4, r4, sl
 800179a:	ea2b 0004 	bic.w	r0, fp, r4
 800179e:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a0:	9c00      	ldr	r4, [sp, #0]
 80017a2:	4848      	ldr	r0, [pc, #288]	; (80018c4 <HAL_GPIO_Init+0x1f8>)
 80017a4:	4284      	cmp	r4, r0
 80017a6:	d013      	beq.n	80017d0 <HAL_GPIO_Init+0x104>
 80017a8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80017ac:	4284      	cmp	r4, r0
 80017ae:	d07d      	beq.n	80018ac <HAL_GPIO_Init+0x1e0>
 80017b0:	4845      	ldr	r0, [pc, #276]	; (80018c8 <HAL_GPIO_Init+0x1fc>)
 80017b2:	4284      	cmp	r4, r0
 80017b4:	d071      	beq.n	800189a <HAL_GPIO_Init+0x1ce>
 80017b6:	4845      	ldr	r0, [pc, #276]	; (80018cc <HAL_GPIO_Init+0x200>)
 80017b8:	4284      	cmp	r4, r0
 80017ba:	bf0c      	ite	eq
 80017bc:	f04f 0b03 	moveq.w	fp, #3
 80017c0:	f04f 0b04 	movne.w	fp, #4
 80017c4:	9801      	ldr	r0, [sp, #4]
 80017c6:	fa0b fa0a 	lsl.w	sl, fp, sl
 80017ca:	ea40 000a 	orr.w	r0, r0, sl
 80017ce:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80017d0:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d2:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 80017d6:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	bf14      	ite	ne
 80017dc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017de:	43aa      	biceq	r2, r5
 80017e0:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80017e2:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e4:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80017e8:	bf14      	ite	ne
 80017ea:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ec:	43aa      	biceq	r2, r5
 80017ee:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80017f0:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80017f6:	bf14      	ite	ne
 80017f8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017fa:	43aa      	biceq	r2, r5
 80017fc:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fe:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001802:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001804:	d039      	beq.n	800187a <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001806:	4315      	orrs	r5, r2
 8001808:	60fd      	str	r5, [r7, #12]
 800180a:	680c      	ldr	r4, [r1, #0]
	position++;
 800180c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	fa34 f203 	lsrs.w	r2, r4, r3
 8001812:	f47f af72 	bne.w	80016fa <HAL_GPIO_Init+0x2e>
  }
}
 8001816:	b005      	add	sp, #20
 8001818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800181c:	4544      	cmp	r4, r8
 800181e:	d005      	beq.n	800182c <HAL_GPIO_Init+0x160>
 8001820:	d913      	bls.n	800184a <HAL_GPIO_Init+0x17e>
 8001822:	4574      	cmp	r4, lr
 8001824:	d002      	beq.n	800182c <HAL_GPIO_Init+0x160>
 8001826:	482a      	ldr	r0, [pc, #168]	; (80018d0 <HAL_GPIO_Init+0x204>)
 8001828:	4284      	cmp	r4, r0
 800182a:	d180      	bne.n	800172e <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800182c:	688c      	ldr	r4, [r1, #8]
 800182e:	b9e4      	cbnz	r4, 800186a <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001830:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001832:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001836:	f67f af7d 	bls.w	8001734 <HAL_GPIO_Init+0x68>
 800183a:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800183c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001840:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001844:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001848:	e778      	b.n	800173c <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 800184a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80018e0 <HAL_GPIO_Init+0x214>
 800184e:	454c      	cmp	r4, r9
 8001850:	d0ec      	beq.n	800182c <HAL_GPIO_Init+0x160>
 8001852:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001856:	454c      	cmp	r4, r9
 8001858:	d0e8      	beq.n	800182c <HAL_GPIO_Init+0x160>
 800185a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800185e:	454c      	cmp	r4, r9
 8001860:	f47f af65 	bne.w	800172e <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001864:	688c      	ldr	r4, [r1, #8]
 8001866:	2c00      	cmp	r4, #0
 8001868:	d0e2      	beq.n	8001830 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 800186a:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800186c:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186e:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8001872:	bf0c      	ite	eq
 8001874:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8001876:	6142      	strne	r2, [r0, #20]
 8001878:	e759      	b.n	800172e <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187a:	ea22 0505 	bic.w	r5, r2, r5
 800187e:	60fd      	str	r5, [r7, #12]
 8001880:	680c      	ldr	r4, [r1, #0]
 8001882:	e735      	b.n	80016f0 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001884:	68ce      	ldr	r6, [r1, #12]
 8001886:	360c      	adds	r6, #12
          break;
 8001888:	e751      	b.n	800172e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800188a:	68ce      	ldr	r6, [r1, #12]
 800188c:	3604      	adds	r6, #4
          break;
 800188e:	e74e      	b.n	800172e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001890:	68ce      	ldr	r6, [r1, #12]
 8001892:	3608      	adds	r6, #8
          break;
 8001894:	e74b      	b.n	800172e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001896:	68ce      	ldr	r6, [r1, #12]
          break;
 8001898:	e749      	b.n	800172e <HAL_GPIO_Init+0x62>
 800189a:	f04f 0b02 	mov.w	fp, #2
 800189e:	9801      	ldr	r0, [sp, #4]
 80018a0:	fa0b fa0a 	lsl.w	sl, fp, sl
 80018a4:	ea40 000a 	orr.w	r0, r0, sl
 80018a8:	9001      	str	r0, [sp, #4]
 80018aa:	e791      	b.n	80017d0 <HAL_GPIO_Init+0x104>
 80018ac:	f04f 0b01 	mov.w	fp, #1
 80018b0:	9801      	ldr	r0, [sp, #4]
 80018b2:	fa0b fa0a 	lsl.w	sl, fp, sl
 80018b6:	ea40 000a 	orr.w	r0, r0, sl
 80018ba:	9001      	str	r0, [sp, #4]
 80018bc:	e788      	b.n	80017d0 <HAL_GPIO_Init+0x104>
 80018be:	bf00      	nop
 80018c0:	40010400 	.word	0x40010400
 80018c4:	40010800 	.word	0x40010800
 80018c8:	40011000 	.word	0x40011000
 80018cc:	40011400 	.word	0x40011400
 80018d0:	10320000 	.word	0x10320000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	10220000 	.word	0x10220000
 80018dc:	10310000 	.word	0x10310000
 80018e0:	10120000 	.word	0x10120000

080018e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e4:	b902      	cbnz	r2, 80018e8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e6:	0409      	lsls	r1, r1, #16
 80018e8:	6101      	str	r1, [r0, #16]
  }
}
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018ec:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ee:	ea01 0203 	and.w	r2, r1, r3
 80018f2:	ea21 0103 	bic.w	r1, r1, r3
 80018f6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80018fa:	6101      	str	r1, [r0, #16]
}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001900:	2800      	cmp	r0, #0
 8001902:	f000 81c3 	beq.w	8001c8c <HAL_RCC_OscConfig+0x38c>
{
 8001906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	6803      	ldr	r3, [r0, #0]
 800190c:	4604      	mov	r4, r0
 800190e:	07dd      	lsls	r5, r3, #31
{
 8001910:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001912:	d535      	bpl.n	8001980 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001914:	49a6      	ldr	r1, [pc, #664]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 8001916:	684a      	ldr	r2, [r1, #4]
 8001918:	f002 020c 	and.w	r2, r2, #12
 800191c:	2a04      	cmp	r2, #4
 800191e:	f000 80ef 	beq.w	8001b00 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001922:	684a      	ldr	r2, [r1, #4]
 8001924:	f002 020c 	and.w	r2, r2, #12
 8001928:	2a08      	cmp	r2, #8
 800192a:	f000 80e5 	beq.w	8001af8 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192e:	6863      	ldr	r3, [r4, #4]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d010      	beq.n	8001958 <HAL_RCC_OscConfig+0x58>
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 810d 	beq.w	8001b56 <HAL_RCC_OscConfig+0x256>
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001940:	f000 818f 	beq.w	8001c62 <HAL_RCC_OscConfig+0x362>
 8001944:	4b9a      	ldr	r3, [pc, #616]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e004      	b.n	8001962 <HAL_RCC_OscConfig+0x62>
 8001958:	4a95      	ldr	r2, [pc, #596]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 800195a:	6813      	ldr	r3, [r2, #0]
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff fdd1 	bl	8001508 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4e92      	ldr	r6, [pc, #584]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8001968:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e005      	b.n	8001978 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fdcc 	bl	8001508 <HAL_GetTick>
 8001970:	1b40      	subs	r0, r0, r5
 8001972:	2864      	cmp	r0, #100	; 0x64
 8001974:	f200 80eb 	bhi.w	8001b4e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001978:	6833      	ldr	r3, [r6, #0]
 800197a:	039a      	lsls	r2, r3, #14
 800197c:	d5f6      	bpl.n	800196c <HAL_RCC_OscConfig+0x6c>
 800197e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001980:	079f      	lsls	r7, r3, #30
 8001982:	d528      	bpl.n	80019d6 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001984:	4a8a      	ldr	r2, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 8001986:	6851      	ldr	r1, [r2, #4]
 8001988:	f011 0f0c 	tst.w	r1, #12
 800198c:	f000 808e 	beq.w	8001aac <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001990:	6851      	ldr	r1, [r2, #4]
 8001992:	f001 010c 	and.w	r1, r1, #12
 8001996:	2908      	cmp	r1, #8
 8001998:	f000 8084 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199c:	6923      	ldr	r3, [r4, #16]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8125 	beq.w	8001bee <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	2201      	movs	r2, #1
 80019a6:	4b83      	ldr	r3, [pc, #524]	; (8001bb4 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	4e81      	ldr	r6, [pc, #516]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 80019aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ac:	f7ff fdac 	bl	8001508 <HAL_GetTick>
 80019b0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	e005      	b.n	80019c0 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff fda8 	bl	8001508 <HAL_GetTick>
 80019b8:	1b40      	subs	r0, r0, r5
 80019ba:	2802      	cmp	r0, #2
 80019bc:	f200 80c7 	bhi.w	8001b4e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	6833      	ldr	r3, [r6, #0]
 80019c2:	0798      	lsls	r0, r3, #30
 80019c4:	d5f6      	bpl.n	80019b4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c6:	6833      	ldr	r3, [r6, #0]
 80019c8:	6962      	ldr	r2, [r4, #20]
 80019ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019d2:	6033      	str	r3, [r6, #0]
 80019d4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	071a      	lsls	r2, r3, #28
 80019d8:	d41f      	bmi.n	8001a1a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019da:	075d      	lsls	r5, r3, #29
 80019dc:	d541      	bpl.n	8001a62 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	00d0      	lsls	r0, r2, #3
 80019e4:	d57d      	bpl.n	8001ae2 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80019e6:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x2b8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	05d1      	lsls	r1, r2, #23
 80019ee:	f140 809d 	bpl.w	8001b2c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f2:	68e3      	ldr	r3, [r4, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	f000 810b 	beq.w	8001c10 <HAL_RCC_OscConfig+0x310>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80c5 	beq.w	8001b8a <HAL_RCC_OscConfig+0x28a>
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 8001a04:	6a1a      	ldr	r2, [r3, #32]
 8001a06:	f000 8139 	beq.w	8001c7c <HAL_RCC_OscConfig+0x37c>
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	621a      	str	r2, [r3, #32]
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	f022 0204 	bic.w	r2, r2, #4
 8001a16:	621a      	str	r2, [r3, #32]
 8001a18:	e0ff      	b.n	8001c1a <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1a:	69a3      	ldr	r3, [r4, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d050      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8001a20:	2201      	movs	r2, #1
 8001a22:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a24:	4e62      	ldr	r6, [pc, #392]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8001a26:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a28:	f7ff fd6e 	bl	8001508 <HAL_GetTick>
 8001a2c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	e005      	b.n	8001a3c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fd6a 	bl	8001508 <HAL_GetTick>
 8001a34:	1b40      	subs	r0, r0, r5
 8001a36:	2802      	cmp	r0, #2
 8001a38:	f200 8089 	bhi.w	8001b4e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001a3e:	079b      	lsls	r3, r3, #30
 8001a40:	d5f6      	bpl.n	8001a30 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a42:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <HAL_RCC_OscConfig+0x2c0>)
 8001a44:	4a5f      	ldr	r2, [pc, #380]	; (8001bc4 <HAL_RCC_OscConfig+0x2c4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	0a5b      	lsrs	r3, r3, #9
 8001a4e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001a50:	bf00      	nop
  }
  while (Delay --);
 8001a52:	9b01      	ldr	r3, [sp, #4]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f9      	bne.n	8001a50 <HAL_RCC_OscConfig+0x150>
 8001a5c:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5e:	075d      	lsls	r5, r3, #29
 8001a60:	d4bd      	bmi.n	80019de <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a62:	69e0      	ldr	r0, [r4, #28]
 8001a64:	b1d0      	cbz	r0, 8001a9c <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a66:	4d52      	ldr	r5, [pc, #328]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 8001a68:	686a      	ldr	r2, [r5, #4]
 8001a6a:	f002 020c 	and.w	r2, r2, #12
 8001a6e:	2a08      	cmp	r2, #8
 8001a70:	f000 80e6 	beq.w	8001c40 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	4a53      	ldr	r2, [pc, #332]	; (8001bc8 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7c:	f000 8108 	beq.w	8001c90 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8001a80:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001a82:	f7ff fd41 	bl	8001508 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a86:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001a88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	e004      	b.n	8001a96 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff fd3c 	bl	8001508 <HAL_GetTick>
 8001a90:	1b40      	subs	r0, r0, r5
 8001a92:	2802      	cmp	r0, #2
 8001a94:	d85b      	bhi.n	8001b4e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	019b      	lsls	r3, r3, #6
 8001a9a:	d4f7      	bmi.n	8001a8c <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8001a9c:	2000      	movs	r0, #0
}
 8001a9e:	b002      	add	sp, #8
 8001aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aa4:	6852      	ldr	r2, [r2, #4]
 8001aa6:	03d6      	lsls	r6, r2, #15
 8001aa8:	f53f af78 	bmi.w	800199c <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aac:	4a40      	ldr	r2, [pc, #256]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	0795      	lsls	r5, r2, #30
 8001ab2:	d52f      	bpl.n	8001b14 <HAL_RCC_OscConfig+0x214>
 8001ab4:	6922      	ldr	r2, [r4, #16]
 8001ab6:	2a01      	cmp	r2, #1
 8001ab8:	d02c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8001aba:	2001      	movs	r0, #1
}
 8001abc:	b002      	add	sp, #8
 8001abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001ac2:	4a3e      	ldr	r2, [pc, #248]	; (8001bbc <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	4e3a      	ldr	r6, [pc, #232]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 8001ac6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fd1e 	bl	8001508 <HAL_GetTick>
 8001acc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ace:	e004      	b.n	8001ada <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fd1a 	bl	8001508 <HAL_GetTick>
 8001ad4:	1b40      	subs	r0, r0, r5
 8001ad6:	2802      	cmp	r0, #2
 8001ad8:	d839      	bhi.n	8001b4e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001adc:	079f      	lsls	r7, r3, #30
 8001ade:	d4f7      	bmi.n	8001ad0 <HAL_RCC_OscConfig+0x1d0>
 8001ae0:	e7bc      	b.n	8001a5c <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001ae4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aea:	61da      	str	r2, [r3, #28]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001af6:	e777      	b.n	80019e8 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af8:	684a      	ldr	r2, [r1, #4]
 8001afa:	03d0      	lsls	r0, r2, #15
 8001afc:	f57f af17 	bpl.w	800192e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	0391      	lsls	r1, r2, #14
 8001b06:	f57f af3b 	bpl.w	8001980 <HAL_RCC_OscConfig+0x80>
 8001b0a:	6862      	ldr	r2, [r4, #4]
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	f47f af37 	bne.w	8001980 <HAL_RCC_OscConfig+0x80>
 8001b12:	e7d2      	b.n	8001aba <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4926      	ldr	r1, [pc, #152]	; (8001bb0 <HAL_RCC_OscConfig+0x2b0>)
 8001b16:	6960      	ldr	r0, [r4, #20]
 8001b18:	680a      	ldr	r2, [r1, #0]
 8001b1a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b1e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001b22:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b24:	071a      	lsls	r2, r3, #28
 8001b26:	f57f af58 	bpl.w	80019da <HAL_RCC_OscConfig+0xda>
 8001b2a:	e776      	b.n	8001a1a <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b34:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b36:	f7ff fce7 	bl	8001508 <HAL_GetTick>
 8001b3a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	05da      	lsls	r2, r3, #23
 8001b40:	f53f af57 	bmi.w	80019f2 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b44:	f7ff fce0 	bl	8001508 <HAL_GetTick>
 8001b48:	1b80      	subs	r0, r0, r6
 8001b4a:	2864      	cmp	r0, #100	; 0x64
 8001b4c:	d9f6      	bls.n	8001b3c <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 8001b4e:	2003      	movs	r0, #3
}
 8001b50:	b002      	add	sp, #8
 8001b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b5a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b5e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b60:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b70:	f7ff fcca 	bl	8001508 <HAL_GetTick>
 8001b74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e004      	b.n	8001b82 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fcc6 	bl	8001508 <HAL_GetTick>
 8001b7c:	1b40      	subs	r0, r0, r5
 8001b7e:	2864      	cmp	r0, #100	; 0x64
 8001b80:	d8e5      	bhi.n	8001b4e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	6833      	ldr	r3, [r6, #0]
 8001b84:	039b      	lsls	r3, r3, #14
 8001b86:	d4f7      	bmi.n	8001b78 <HAL_RCC_OscConfig+0x278>
 8001b88:	e6f9      	b.n	800197e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b8e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b92:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b94:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	621a      	str	r2, [r3, #32]
 8001b9c:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	f022 0204 	bic.w	r2, r2, #4
 8001ba6:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fcae 	bl	8001508 <HAL_GetTick>
 8001bac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	e012      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2d6>
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	42420000 	.word	0x42420000
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	42420480 	.word	0x42420480
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	10624dd3 	.word	0x10624dd3
 8001bc8:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fc9c 	bl	8001508 <HAL_GetTick>
 8001bd0:	1b80      	subs	r0, r0, r6
 8001bd2:	4540      	cmp	r0, r8
 8001bd4:	d8bb      	bhi.n	8001b4e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	0798      	lsls	r0, r3, #30
 8001bda:	d4f7      	bmi.n	8001bcc <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8001bdc:	2d00      	cmp	r5, #0
 8001bde:	f43f af40 	beq.w	8001a62 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <HAL_RCC_OscConfig+0x3f4>)
 8001be4:	69d3      	ldr	r3, [r2, #28]
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	61d3      	str	r3, [r2, #28]
 8001bec:	e739      	b.n	8001a62 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf0:	4e40      	ldr	r6, [pc, #256]	; (8001cf4 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fc88 	bl	8001508 <HAL_GetTick>
 8001bf8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e004      	b.n	8001c06 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fc84 	bl	8001508 <HAL_GetTick>
 8001c00:	1b40      	subs	r0, r0, r5
 8001c02:	2802      	cmp	r0, #2
 8001c04:	d8a3      	bhi.n	8001b4e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c06:	6833      	ldr	r3, [r6, #0]
 8001c08:	0799      	lsls	r1, r3, #30
 8001c0a:	d4f7      	bmi.n	8001bfc <HAL_RCC_OscConfig+0x2fc>
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	e6e2      	b.n	80019d6 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	4a38      	ldr	r2, [pc, #224]	; (8001cf4 <HAL_RCC_OscConfig+0x3f4>)
 8001c12:	6a13      	ldr	r3, [r2, #32]
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fc75 	bl	8001508 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c22:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	4f33      	ldr	r7, [pc, #204]	; (8001cf4 <HAL_RCC_OscConfig+0x3f4>)
 8001c26:	e004      	b.n	8001c32 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff fc6e 	bl	8001508 <HAL_GetTick>
 8001c2c:	1b80      	subs	r0, r0, r6
 8001c2e:	4540      	cmp	r0, r8
 8001c30:	d88d      	bhi.n	8001b4e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	079b      	lsls	r3, r3, #30
 8001c36:	d5f7      	bpl.n	8001c28 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8001c38:	2d00      	cmp	r5, #0
 8001c3a:	f43f af12 	beq.w	8001a62 <HAL_RCC_OscConfig+0x162>
 8001c3e:	e7d0      	b.n	8001be2 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	2801      	cmp	r0, #1
 8001c42:	f43f af2c 	beq.w	8001a9e <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8001c46:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c48:	6a22      	ldr	r2, [r4, #32]
 8001c4a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001c4e:	4291      	cmp	r1, r2
 8001c50:	f47f af33 	bne.w	8001aba <HAL_RCC_OscConfig+0x1ba>
 8001c54:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c56:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8001c5a:	1a18      	subs	r0, r3, r0
 8001c5c:	bf18      	it	ne
 8001c5e:	2001      	movne	r0, #1
 8001c60:	e71d      	b.n	8001a9e <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c66:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e672      	b.n	8001962 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	f042 0204 	orr.w	r2, r2, #4
 8001c80:	621a      	str	r2, [r3, #32]
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	621a      	str	r2, [r3, #32]
 8001c8a:	e7c6      	b.n	8001c1a <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8001c8c:	2001      	movs	r0, #1
}
 8001c8e:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8001c90:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001c92:	f7ff fc39 	bl	8001508 <HAL_GetTick>
 8001c96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	e005      	b.n	8001ca6 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff fc35 	bl	8001508 <HAL_GetTick>
 8001c9e:	1b80      	subs	r0, r0, r6
 8001ca0:	2802      	cmp	r0, #2
 8001ca2:	f63f af54 	bhi.w	8001b4e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	682b      	ldr	r3, [r5, #0]
 8001ca8:	0199      	lsls	r1, r3, #6
 8001caa:	d4f6      	bmi.n	8001c9a <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cac:	6a23      	ldr	r3, [r4, #32]
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb4:	686a      	ldr	r2, [r5, #4]
 8001cb6:	68a1      	ldr	r1, [r4, #8]
 8001cb8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc2:	4d0c      	ldr	r5, [pc, #48]	; (8001cf4 <HAL_RCC_OscConfig+0x3f4>)
 8001cc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cc6:	686a      	ldr	r2, [r5, #4]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001cce:	490b      	ldr	r1, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fc17 	bl	8001508 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cda:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001cdc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cde:	e005      	b.n	8001cec <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff fc12 	bl	8001508 <HAL_GetTick>
 8001ce4:	1b40      	subs	r0, r0, r5
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	f63f af31 	bhi.w	8001b4e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	019a      	lsls	r2, r3, #6
 8001cf0:	d5f6      	bpl.n	8001ce0 <HAL_RCC_OscConfig+0x3e0>
 8001cf2:	e6d3      	b.n	8001a9c <HAL_RCC_OscConfig+0x19c>
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	42420000 	.word	0x42420000
 8001cfc:	42420060 	.word	0x42420060

08001d00 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001d00:	2800      	cmp	r0, #0
 8001d02:	f000 80af 	beq.w	8001e64 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d06:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <HAL_RCC_ClockConfig+0x17c>)
{
 8001d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	4604      	mov	r4, r0
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	428b      	cmp	r3, r1
 8001d16:	460d      	mov	r5, r1
{
 8001d18:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1a:	d20d      	bcs.n	8001d38 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f023 0307 	bic.w	r3, r3, #7
 8001d22:	430b      	orrs	r3, r1
 8001d24:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	428b      	cmp	r3, r1
 8001d2e:	d003      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8001d30:	2001      	movs	r0, #1
}
 8001d32:	b006      	add	sp, #24
 8001d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	0798      	lsls	r0, r3, #30
 8001d3c:	d514      	bpl.n	8001d68 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3e:	0759      	lsls	r1, r3, #29
 8001d40:	d504      	bpl.n	8001d4c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d42:	494f      	ldr	r1, [pc, #316]	; (8001e80 <HAL_RCC_ClockConfig+0x180>)
 8001d44:	684a      	ldr	r2, [r1, #4]
 8001d46:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001d4a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4c:	071a      	lsls	r2, r3, #28
 8001d4e:	d504      	bpl.n	8001d5a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d50:	494b      	ldr	r1, [pc, #300]	; (8001e80 <HAL_RCC_ClockConfig+0x180>)
 8001d52:	684a      	ldr	r2, [r1, #4]
 8001d54:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001d58:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5a:	4949      	ldr	r1, [pc, #292]	; (8001e80 <HAL_RCC_ClockConfig+0x180>)
 8001d5c:	68a0      	ldr	r0, [r4, #8]
 8001d5e:	684a      	ldr	r2, [r1, #4]
 8001d60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d64:	4302      	orrs	r2, r0
 8001d66:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d68:	07db      	lsls	r3, r3, #31
 8001d6a:	d520      	bpl.n	8001dae <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d70:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	d078      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d76:	2a02      	cmp	r2, #2
 8001d78:	d071      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	0798      	lsls	r0, r3, #30
 8001d7c:	d5d8      	bpl.n	8001d30 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7e:	4e40      	ldr	r6, [pc, #256]	; (8001e80 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d80:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d84:	6873      	ldr	r3, [r6, #4]
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001d8e:	f7ff fbbb 	bl	8001508 <HAL_GetTick>
 8001d92:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d94:	e004      	b.n	8001da0 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d96:	f7ff fbb7 	bl	8001508 <HAL_GetTick>
 8001d9a:	1bc0      	subs	r0, r0, r7
 8001d9c:	4540      	cmp	r0, r8
 8001d9e:	d866      	bhi.n	8001e6e <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da0:	6873      	ldr	r3, [r6, #4]
 8001da2:	6862      	ldr	r2, [r4, #4]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dac:	d1f3      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dae:	4a33      	ldr	r2, [pc, #204]	; (8001e7c <HAL_RCC_ClockConfig+0x17c>)
 8001db0:	6813      	ldr	r3, [r2, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	42ab      	cmp	r3, r5
 8001db8:	d909      	bls.n	8001dce <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	f023 0307 	bic.w	r3, r3, #7
 8001dc0:	432b      	orrs	r3, r5
 8001dc2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc4:	6813      	ldr	r3, [r2, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	42ab      	cmp	r3, r5
 8001dcc:	d1b0      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	0759      	lsls	r1, r3, #29
 8001dd2:	d506      	bpl.n	8001de2 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	492a      	ldr	r1, [pc, #168]	; (8001e80 <HAL_RCC_ClockConfig+0x180>)
 8001dd6:	68e0      	ldr	r0, [r4, #12]
 8001dd8:	684a      	ldr	r2, [r1, #4]
 8001dda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dde:	4302      	orrs	r2, r0
 8001de0:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de2:	071a      	lsls	r2, r3, #28
 8001de4:	d507      	bpl.n	8001df6 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de6:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_RCC_ClockConfig+0x180>)
 8001de8:	6921      	ldr	r1, [r4, #16]
 8001dea:	6853      	ldr	r3, [r2, #4]
 8001dec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001df0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001df4:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001df6:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_RCC_ClockConfig+0x184>)
 8001dfc:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dfe:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e04:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8001e08:	491d      	ldr	r1, [pc, #116]	; (8001e80 <HAL_RCC_ClockConfig+0x180>)
 8001e0a:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001e0c:	f002 030c 	and.w	r3, r2, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d011      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e16:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <HAL_RCC_ClockConfig+0x180>)
 8001e18:	481c      	ldr	r0, [pc, #112]	; (8001e8c <HAL_RCC_ClockConfig+0x18c>)
 8001e1a:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8001e1c:	491c      	ldr	r1, [pc, #112]	; (8001e90 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e1e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001e22:	5c80      	ldrb	r0, [r0, r2]
 8001e24:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <HAL_RCC_ClockConfig+0x194>)
 8001e26:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8001e28:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e2a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001e2c:	f7ff fb2a 	bl	8001484 <HAL_InitTick>
  return HAL_OK;
 8001e30:	2000      	movs	r0, #0
}
 8001e32:	b006      	add	sp, #24
 8001e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e38:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001e3c:	4423      	add	r3, r4
 8001e3e:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e42:	03d3      	lsls	r3, r2, #15
 8001e44:	d515      	bpl.n	8001e72 <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e46:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e4a:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e4e:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e52:	4422      	add	r2, r4
 8001e54:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e5c:	e7db      	b.n	8001e16 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	019e      	lsls	r6, r3, #6
 8001e60:	d48d      	bmi.n	8001d7e <HAL_RCC_ClockConfig+0x7e>
 8001e62:	e765      	b.n	8001d30 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001e64:	2001      	movs	r0, #1
}
 8001e66:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e68:	039f      	lsls	r7, r3, #14
 8001e6a:	d488      	bmi.n	8001d7e <HAL_RCC_ClockConfig+0x7e>
 8001e6c:	e760      	b.n	8001d30 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8001e6e:	2003      	movs	r0, #3
 8001e70:	e75f      	b.n	8001d32 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x198>)
 8001e74:	fb03 f300 	mul.w	r3, r3, r0
 8001e78:	e7cd      	b.n	8001e16 <HAL_RCC_ClockConfig+0x116>
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08002a4c 	.word	0x08002a4c
 8001e88:	007a1200 	.word	0x007a1200
 8001e8c:	08002a34 	.word	0x08002a34
 8001e90:	20000014 	.word	0x20000014
 8001e94:	2000000c 	.word	0x2000000c
 8001e98:	003d0900 	.word	0x003d0900

08001e9c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001e9e:	4905      	ldr	r1, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	6810      	ldr	r0, [r2, #0]
}
 8001eac:	40d8      	lsrs	r0, r3
 8001eae:	4770      	bx	lr
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	08002a44 	.word	0x08002a44
 8001eb8:	2000000c 	.word	0x2000000c

08001ebc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ebe:	4905      	ldr	r1, [pc, #20]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001ec2:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ec8:	5ccb      	ldrb	r3, [r1, r3]
 8001eca:	6810      	ldr	r0, [r2, #0]
}
 8001ecc:	40d8      	lsrs	r0, r3
 8001ece:	4770      	bx	lr
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08002a44 	.word	0x08002a44
 8001ed8:	2000000c 	.word	0x2000000c

08001edc <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001edc:	2800      	cmp	r0, #0
 8001ede:	d055      	beq.n	8001f8c <HAL_SPI_Init+0xb0>
{
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ee2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d041      	beq.n	8001f6e <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eea:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eec:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef0:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ef2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ef8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8001efc:	2900      	cmp	r1, #0
 8001efe:	d03c      	beq.n	8001f7a <HAL_SPI_Init+0x9e>
 8001f00:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f02:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f06:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001f08:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f0a:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f0c:	68e1      	ldr	r1, [r4, #12]
 8001f0e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001f12:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001f16:	4303      	orrs	r3, r0
 8001f18:	6920      	ldr	r0, [r4, #16]
 8001f1a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8001f1e:	4038      	ands	r0, r7
 8001f20:	430b      	orrs	r3, r1
 8001f22:	6961      	ldr	r1, [r4, #20]
 8001f24:	4303      	orrs	r3, r0
 8001f26:	69a0      	ldr	r0, [r4, #24]
 8001f28:	4031      	ands	r1, r6
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8001f30:	430b      	orrs	r3, r1
 8001f32:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f34:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f38:	6a27      	ldr	r7, [r4, #32]
 8001f3a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8001f44:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f46:	433b      	orrs	r3, r7
 8001f48:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8001f4a:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f4c:	0c00      	lsrs	r0, r0, #16
 8001f4e:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8001f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f56:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f58:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f5a:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f5c:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 8001f5e:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f64:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f66:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f68:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8001f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f6e:	6842      	ldr	r2, [r0, #4]
 8001f70:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001f74:	d0bc      	beq.n	8001ef0 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f76:	61c3      	str	r3, [r0, #28]
 8001f78:	e7ba      	b.n	8001ef0 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8001f7a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7fe faf2 	bl	8000568 <HAL_SPI_MspInit>
 8001f84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f8a:	e7ba      	b.n	8001f02 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8001f8c:	2001      	movs	r0, #1
}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f90:	2800      	cmp	r0, #0
 8001f92:	d05d      	beq.n	8002050 <HAL_TIM_Base_Init+0xc0>
{
 8001f94:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d03c      	beq.n	800201e <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa4:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa8:	492a      	ldr	r1, [pc, #168]	; (8002054 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fae:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8001fb0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb2:	d039      	beq.n	8002028 <HAL_TIM_Base_Init+0x98>
 8001fb4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001fb8:	d028      	beq.n	800200c <HAL_TIM_Base_Init+0x7c>
 8001fba:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8001fbe:	428a      	cmp	r2, r1
 8001fc0:	d024      	beq.n	800200c <HAL_TIM_Base_Init+0x7c>
 8001fc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001fc6:	428a      	cmp	r2, r1
 8001fc8:	d020      	beq.n	800200c <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fca:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fce:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001fd6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001fda:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001fe8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001fec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001ff0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ffc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002004:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002008:	2000      	movs	r0, #0
}
 800200a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800200c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800200e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002012:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002014:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800201a:	430b      	orrs	r3, r1
 800201c:	e7d5      	b.n	8001fca <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 800201e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002022:	f7fe fad5 	bl	80005d0 <HAL_TIM_Base_MspInit>
 8002026:	e7bd      	b.n	8001fa4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002028:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800202e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002030:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002036:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002038:	69a1      	ldr	r1, [r4, #24]
 800203a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800203e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002040:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002042:	68e3      	ldr	r3, [r4, #12]
 8002044:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002046:	6863      	ldr	r3, [r4, #4]
 8002048:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800204a:	6963      	ldr	r3, [r4, #20]
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	e7c5      	b.n	8001fdc <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 8002050:	2001      	movs	r0, #1
}
 8002052:	4770      	bx	lr
 8002054:	40012c00 	.word	0x40012c00

08002058 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002058:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800205c:	2b01      	cmp	r3, #1
 800205e:	d11f      	bne.n	80020a0 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002062:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002068:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800206a:	490f      	ldr	r1, [pc, #60]	; (80020a8 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800206c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002070:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002072:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002074:	d009      	beq.n	800208a <HAL_TIM_Base_Start_IT+0x32>
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207a:	d006      	beq.n	800208a <HAL_TIM_Base_Start_IT+0x32>
 800207c:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <HAL_TIM_Base_Start_IT+0x54>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d003      	beq.n	800208a <HAL_TIM_Base_Start_IT+0x32>
 8002082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002086:	4293      	cmp	r3, r2
 8002088:	d104      	bne.n	8002094 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	2a06      	cmp	r2, #6
 8002092:	d007      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8002094:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002096:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	4770      	bx	lr
    return HAL_ERROR;
 80020a0:	2001      	movs	r0, #1
 80020a2:	4770      	bx	lr
  return HAL_OK;
 80020a4:	2000      	movs	r0, #0
}
 80020a6:	4770      	bx	lr
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40000400 	.word	0x40000400

080020b0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80020b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d074      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0xf2>
{
 80020b8:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80020ba:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80020bc:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 80020be:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80020c0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80020c8:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80020ca:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020cc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80020d0:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80020d4:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80020d6:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80020d8:	d065      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0xf6>
 80020da:	d831      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x90>
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d048      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0xc2>
 80020e0:	d921      	bls.n	8002126 <HAL_TIM_ConfigClockSource+0x76>
 80020e2:	2b50      	cmp	r3, #80	; 0x50
 80020e4:	d116      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020e6:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020e8:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ea:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ec:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f0:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020f2:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020f4:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020f6:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020fe:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002102:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002104:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8002106:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002108:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800210a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800210e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002112:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8002114:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002116:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8002118:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800211c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8002120:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002122:	4618      	mov	r0, r3
}
 8002124:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002126:	2b20      	cmp	r3, #32
 8002128:	d002      	beq.n	8002130 <HAL_TIM_ConfigClockSource+0x80>
 800212a:	d91e      	bls.n	800216a <HAL_TIM_ConfigClockSource+0xba>
 800212c:	2b30      	cmp	r3, #48	; 0x30
 800212e:	d1f1      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8002130:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002132:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002136:	430b      	orrs	r3, r1
 8002138:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800213c:	6093      	str	r3, [r2, #8]
}
 800213e:	e7e9      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8002140:	2b70      	cmp	r3, #112	; 0x70
 8002142:	d049      	beq.n	80021d8 <HAL_TIM_ConfigClockSource+0x128>
 8002144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002148:	d1e4      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800214a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800214e:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002150:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002152:	432b      	orrs	r3, r5
 8002154:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002158:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800215c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800215e:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002160:	6893      	ldr	r3, [r2, #8]
 8002162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002166:	6093      	str	r3, [r2, #8]
      break;
 8002168:	e7d4      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800216a:	f033 0110 	bics.w	r1, r3, #16
 800216e:	d1d1      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x64>
 8002170:	e7de      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8002172:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002174:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002178:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800217c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800217e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002180:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002182:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800218a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800218e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002190:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8002192:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002194:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800219a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800219e:	6093      	str	r3, [r2, #8]
}
 80021a0:	e7b8      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 80021a2:	2002      	movs	r0, #2
}
 80021a4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021a6:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021aa:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ae:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021b0:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021b2:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80021b4:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021b6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021c2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80021c6:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80021c8:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80021ca:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021d0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80021d4:	6093      	str	r3, [r2, #8]
}
 80021d6:	e79d      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021d8:	68cc      	ldr	r4, [r1, #12]
 80021da:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80021de:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e0:	432b      	orrs	r3, r5
 80021e2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ea:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80021ec:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80021ee:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80021f4:	6093      	str	r3, [r2, #8]
      break;
 80021f6:	e78d      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x64>

080021f8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d026      	beq.n	800224e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002202:	6803      	ldr	r3, [r0, #0]
{
 8002204:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002206:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800220a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800220c:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220e:	4d11      	ldr	r5, [pc, #68]	; (8002254 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8002210:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002214:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002216:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8002218:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800221a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800221c:	d009      	beq.n	8002232 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800221e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002222:	d006      	beq.n	8002232 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800222a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800222e:	4293      	cmp	r3, r2
 8002230:	d104      	bne.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002232:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002234:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002238:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800223a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800223c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800223e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8002240:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8002244:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8002248:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800224a:	4618      	mov	r0, r3
}
 800224c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800224e:	2002      	movs	r0, #2
}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40000400 	.word	0x40000400

0800225c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800225c:	2800      	cmp	r0, #0
 800225e:	d061      	beq.n	8002324 <HAL_UART_Init+0xc8>
{
 8002260:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002262:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002266:	4604      	mov	r4, r0
 8002268:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800226c:	2b00      	cmp	r3, #0
 800226e:	d051      	beq.n	8002314 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002270:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002272:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002274:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002278:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800227a:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 800227c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002280:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002282:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002284:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002286:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800228a:	4301      	orrs	r1, r0
 800228c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800228e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002290:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002294:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002298:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800229a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800229e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 80022a8:	491f      	ldr	r1, [pc, #124]	; (8002328 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022ae:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 80022b0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022b2:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80022b4:	d033      	beq.n	800231e <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022b6:	f7ff fdf1 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022ba:	6863      	ldr	r3, [r4, #4]
 80022bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ca:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022cc:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 80022ce:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022d0:	4816      	ldr	r0, [pc, #88]	; (800232c <HAL_UART_Init+0xd0>)
 80022d2:	fba0 c103 	umull	ip, r1, r0, r3
 80022d6:	0949      	lsrs	r1, r1, #5
 80022d8:	fb02 3311 	mls	r3, r2, r1, r3
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	3332      	adds	r3, #50	; 0x32
 80022e0:	fba0 2303 	umull	r2, r3, r0, r3
 80022e4:	0109      	lsls	r1, r1, #4
 80022e6:	6822      	ldr	r2, [r4, #0]
 80022e8:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 80022ec:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ee:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 80022f0:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80022f6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f8:	6953      	ldr	r3, [r2, #20]
 80022fa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80022fe:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002300:	68d3      	ldr	r3, [r2, #12]
 8002302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002306:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800230a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800230e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8002312:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8002314:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002318:	f7fe f976 	bl	8000608 <HAL_UART_MspInit>
 800231c:	e7a8      	b.n	8002270 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800231e:	f7ff fdcd 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002322:	e7ca      	b.n	80022ba <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 8002324:	2001      	movs	r0, #1
}
 8002326:	4770      	bx	lr
 8002328:	40013800 	.word	0x40013800
 800232c:	51eb851f 	.word	0x51eb851f

08002330 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002330:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002334:	2b20      	cmp	r3, #32
 8002336:	d123      	bne.n	8002380 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8002338:	b301      	cbz	r1, 800237c <HAL_UART_Receive_IT+0x4c>
 800233a:	b1fa      	cbz	r2, 800237c <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 800233c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002340:	2b01      	cmp	r3, #1
 8002342:	d01d      	beq.n	8002380 <HAL_UART_Receive_IT+0x50>
{
 8002344:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002346:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002348:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800234a:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234c:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 800234e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8002352:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002354:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002356:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800235a:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 800235c:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800235e:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8002362:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002364:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002366:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8002368:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002370:	68e3      	ldr	r3, [r4, #12]
 8002372:	f043 0320 	orr.w	r3, r3, #32
 8002376:	60e3      	str	r3, [r4, #12]
}
 8002378:	bc30      	pop	{r4, r5}
 800237a:	4770      	bx	lr
      return HAL_ERROR;
 800237c:	2001      	movs	r0, #1
 800237e:	4770      	bx	lr
    return HAL_BUSY;
 8002380:	2002      	movs	r0, #2
}
 8002382:	4770      	bx	lr

08002384 <HAL_UART_TxCpltCallback>:
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <HAL_UART_ErrorCallback>:
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop

0800238c <UART_DMAAbortOnError>:
{
 800238c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800238e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002390:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002392:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002394:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002396:	f7ff fff7 	bl	8002388 <HAL_UART_ErrorCallback>
}
 800239a:	bd08      	pop	{r3, pc}

0800239c <HAL_UARTEx_RxEventCallback>:
}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop

080023a0 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a0:	6883      	ldr	r3, [r0, #8]
 80023a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a6:	d03b      	beq.n	8002420 <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d02f      	beq.n	800240e <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023ae:	6803      	ldr	r3, [r0, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80023b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023ba:	3301      	adds	r3, #1
 80023bc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80023be:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80023c6:	bb4b      	cbnz	r3, 800241c <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80023c8:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 80023ca:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023cc:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80023ce:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023d0:	68d1      	ldr	r1, [r2, #12]
 80023d2:	f021 0120 	bic.w	r1, r1, #32
 80023d6:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023d8:	68d1      	ldr	r1, [r2, #12]
 80023da:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80023de:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023e0:	6951      	ldr	r1, [r2, #20]
 80023e2:	f021 0101 	bic.w	r1, r1, #1
 80023e6:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80023e8:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80023ee:	2901      	cmp	r1, #1
 80023f0:	d121      	bne.n	8002436 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f2:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f4:	68d1      	ldr	r1, [r2, #12]
 80023f6:	f021 0110 	bic.w	r1, r1, #16
 80023fa:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80023fc:	6811      	ldr	r1, [r2, #0]
 80023fe:	06c9      	lsls	r1, r1, #27
 8002400:	d423      	bmi.n	800244a <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002402:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002404:	f7ff ffca 	bl	800239c <HAL_UARTEx_RxEventCallback>
}
 8002408:	2000      	movs	r0, #0
 800240a:	b002      	add	sp, #8
 800240c:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800240e:	6903      	ldr	r3, [r0, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1cc      	bne.n	80023ae <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002414:	6803      	ldr	r3, [r0, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	7013      	strb	r3, [r2, #0]
 800241a:	e7cd      	b.n	80023b8 <UART_Receive_IT.part.0+0x18>
}
 800241c:	2000      	movs	r0, #0
 800241e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002420:	6903      	ldr	r3, [r0, #16]
 8002422:	b96b      	cbnz	r3, 8002440 <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002424:	6802      	ldr	r2, [r0, #0]
 8002426:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002428:	6852      	ldr	r2, [r2, #4]
 800242a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800242e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8002432:	6283      	str	r3, [r0, #40]	; 0x28
 8002434:	e7c3      	b.n	80023be <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8002436:	f7fd ffab 	bl	8000390 <HAL_UART_RxCpltCallback>
}
 800243a:	2000      	movs	r0, #0
 800243c:	b002      	add	sp, #8
 800243e:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002440:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002442:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	7013      	strb	r3, [r2, #0]
 8002448:	e7b6      	b.n	80023b8 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	6813      	ldr	r3, [r2, #0]
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	6853      	ldr	r3, [r2, #4]
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	e7d4      	b.n	8002402 <UART_Receive_IT.part.0+0x62>

08002458 <HAL_UART_IRQHandler>:
{
 8002458:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800245a:	6803      	ldr	r3, [r0, #0]
{
 800245c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800245e:	681a      	ldr	r2, [r3, #0]
{
 8002460:	b082      	sub	sp, #8
  if (errorflags == RESET)
 8002462:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002464:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002466:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002468:	d14e      	bne.n	8002508 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800246a:	0696      	lsls	r6, r2, #26
 800246c:	d502      	bpl.n	8002474 <HAL_UART_IRQHandler+0x1c>
 800246e:	068d      	lsls	r5, r1, #26
 8002470:	f100 8090 	bmi.w	8002594 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002474:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002476:	2801      	cmp	r0, #1
 8002478:	d00b      	beq.n	8002492 <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800247a:	0616      	lsls	r6, r2, #24
 800247c:	d502      	bpl.n	8002484 <HAL_UART_IRQHandler+0x2c>
 800247e:	060d      	lsls	r5, r1, #24
 8002480:	f100 8092 	bmi.w	80025a8 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002484:	0650      	lsls	r0, r2, #25
 8002486:	d502      	bpl.n	800248e <HAL_UART_IRQHandler+0x36>
 8002488:	064a      	lsls	r2, r1, #25
 800248a:	f100 80ab 	bmi.w	80025e4 <HAL_UART_IRQHandler+0x18c>
}
 800248e:	b002      	add	sp, #8
 8002490:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002492:	06d5      	lsls	r5, r2, #27
 8002494:	d5f1      	bpl.n	800247a <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002496:	06c8      	lsls	r0, r1, #27
 8002498:	d5ef      	bpl.n	800247a <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800249a:	2100      	movs	r1, #0
 800249c:	9101      	str	r1, [sp, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	9201      	str	r2, [sp, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	9201      	str	r2, [sp, #4]
 80024a6:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80024ae:	f000 80d2 	beq.w	8002656 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024b4:	6802      	ldr	r2, [r0, #0]
 80024b6:	6852      	ldr	r2, [r2, #4]
 80024b8:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80024ba:	2a00      	cmp	r2, #0
 80024bc:	d0e7      	beq.n	800248e <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80024be:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80024c0:	4295      	cmp	r5, r2
 80024c2:	d9e4      	bls.n	800248e <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024c4:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 80024c6:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024c8:	2e20      	cmp	r6, #32
 80024ca:	d016      	beq.n	80024fa <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 80024cc:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e4:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80024e6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ea:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	f022 0210 	bic.w	r2, r2, #16
 80024f2:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024f4:	f7ff f87e 	bl	80015f4 <HAL_DMA_Abort>
 80024f8:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024fa:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80024fc:	4620      	mov	r0, r4
 80024fe:	1a69      	subs	r1, r5, r1
 8002500:	b289      	uxth	r1, r1
 8002502:	f7ff ff4b 	bl	800239c <HAL_UARTEx_RxEventCallback>
 8002506:	e7c2      	b.n	800248e <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002508:	f005 0501 	and.w	r5, r5, #1
 800250c:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8002510:	4328      	orrs	r0, r5
 8002512:	d0af      	beq.n	8002474 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002514:	07d0      	lsls	r0, r2, #31
 8002516:	d505      	bpl.n	8002524 <HAL_UART_IRQHandler+0xcc>
 8002518:	05ce      	lsls	r6, r1, #23
 800251a:	d503      	bpl.n	8002524 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800251c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800251e:	f040 0001 	orr.w	r0, r0, #1
 8002522:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002524:	0750      	lsls	r0, r2, #29
 8002526:	d52c      	bpl.n	8002582 <HAL_UART_IRQHandler+0x12a>
 8002528:	b12d      	cbz	r5, 8002536 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800252a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800252c:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800252e:	f040 0002 	orr.w	r0, r0, #2
 8002532:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002534:	d429      	bmi.n	800258a <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002536:	0716      	lsls	r6, r2, #28
 8002538:	d507      	bpl.n	800254a <HAL_UART_IRQHandler+0xf2>
 800253a:	f001 0020 	and.w	r0, r1, #32
 800253e:	4328      	orrs	r0, r5
 8002540:	d003      	beq.n	800254a <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002542:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002544:	f040 0008 	orr.w	r0, r0, #8
 8002548:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800254a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800254c:	2800      	cmp	r0, #0
 800254e:	d09e      	beq.n	800248e <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002550:	0690      	lsls	r0, r2, #26
 8002552:	d509      	bpl.n	8002568 <HAL_UART_IRQHandler+0x110>
 8002554:	068a      	lsls	r2, r1, #26
 8002556:	d507      	bpl.n	8002568 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002558:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800255c:	2a22      	cmp	r2, #34	; 0x22
 800255e:	d103      	bne.n	8002568 <HAL_UART_IRQHandler+0x110>
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff ff1d 	bl	80023a0 <UART_Receive_IT.part.0>
 8002566:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002568:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800256a:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800256c:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002570:	f005 0508 	and.w	r5, r5, #8
 8002574:	4315      	orrs	r5, r2
 8002576:	d140      	bne.n	80025fa <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff ff05 	bl	8002388 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257e:	6425      	str	r5, [r4, #64]	; 0x40
 8002580:	e785      	b.n	800248e <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002582:	0790      	lsls	r0, r2, #30
 8002584:	d5d7      	bpl.n	8002536 <HAL_UART_IRQHandler+0xde>
 8002586:	2d00      	cmp	r5, #0
 8002588:	d0d5      	beq.n	8002536 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800258a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800258c:	f040 0004 	orr.w	r0, r0, #4
 8002590:	6420      	str	r0, [r4, #64]	; 0x40
 8002592:	e7d0      	b.n	8002536 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002594:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002598:	2b22      	cmp	r3, #34	; 0x22
 800259a:	f47f af78 	bne.w	800248e <HAL_UART_IRQHandler+0x36>
}
 800259e:	b002      	add	sp, #8
 80025a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80025a4:	f7ff befc 	b.w	80023a0 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025a8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80025ac:	2a21      	cmp	r2, #33	; 0x21
 80025ae:	f47f af6e 	bne.w	800248e <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b2:	68a2      	ldr	r2, [r4, #8]
 80025b4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80025b8:	d06e      	beq.n	8002698 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025ba:	6a22      	ldr	r2, [r4, #32]
 80025bc:	1c51      	adds	r1, r2, #1
 80025be:	6221      	str	r1, [r4, #32]
 80025c0:	7812      	ldrb	r2, [r2, #0]
 80025c2:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80025c4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80025c6:	3a01      	subs	r2, #1
 80025c8:	b292      	uxth	r2, r2
 80025ca:	84e2      	strh	r2, [r4, #38]	; 0x26
 80025cc:	2a00      	cmp	r2, #0
 80025ce:	f47f af5e 	bne.w	800248e <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	e754      	b.n	800248e <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025e6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80025e8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ee:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025f0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80025f4:	f7ff fec6 	bl	8002384 <HAL_UART_TxCpltCallback>
    return;
 80025f8:	e749      	b.n	800248e <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002600:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800260a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800260c:	2a01      	cmp	r2, #1
 800260e:	d103      	bne.n	8002618 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	f022 0210 	bic.w	r2, r2, #16
 8002616:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002618:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800261a:	2120      	movs	r1, #32
 800261c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002620:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	0656      	lsls	r6, r2, #25
 8002626:	d512      	bpl.n	800264e <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002628:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800262a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800262c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002630:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002632:	b160      	cbz	r0, 800264e <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_UART_IRQHandler+0x258>)
 8002636:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002638:	f7fe fffe 	bl	8001638 <HAL_DMA_Abort_IT>
 800263c:	2800      	cmp	r0, #0
 800263e:	f43f af26 	beq.w	800248e <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002642:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002644:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8002646:	b002      	add	sp, #8
 8002648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800264c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff fe9a 	bl	8002388 <HAL_UART_ErrorCallback>
 8002654:	e71b      	b.n	800248e <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002656:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8002658:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800265a:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800265c:	b289      	uxth	r1, r1
 800265e:	2900      	cmp	r1, #0
 8002660:	f43f af15 	beq.w	800248e <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002664:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002666:	1a08      	subs	r0, r1, r0
 8002668:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800266a:	2900      	cmp	r1, #0
 800266c:	f43f af0f 	beq.w	800248e <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 8002670:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002672:	68d8      	ldr	r0, [r3, #12]
 8002674:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8002678:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267a:	6958      	ldr	r0, [r3, #20]
 800267c:	f020 0001 	bic.w	r0, r0, #1
 8002680:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8002682:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002686:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002688:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800268a:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800268c:	f022 0210 	bic.w	r2, r2, #16
 8002690:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002692:	f7ff fe83 	bl	800239c <HAL_UARTEx_RxEventCallback>
 8002696:	e6fa      	b.n	800248e <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002698:	6922      	ldr	r2, [r4, #16]
 800269a:	2a00      	cmp	r2, #0
 800269c:	d18d      	bne.n	80025ba <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800269e:	6a22      	ldr	r2, [r4, #32]
 80026a0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80026a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80026a8:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026aa:	6222      	str	r2, [r4, #32]
 80026ac:	e78a      	b.n	80025c4 <HAL_UART_IRQHandler+0x16c>
 80026ae:	bf00      	nop
 80026b0:	0800238d 	.word	0x0800238d

080026b4 <__libc_init_array>:
 80026b4:	b570      	push	{r4, r5, r6, lr}
 80026b6:	2600      	movs	r6, #0
 80026b8:	4d0c      	ldr	r5, [pc, #48]	; (80026ec <__libc_init_array+0x38>)
 80026ba:	4c0d      	ldr	r4, [pc, #52]	; (80026f0 <__libc_init_array+0x3c>)
 80026bc:	1b64      	subs	r4, r4, r5
 80026be:	10a4      	asrs	r4, r4, #2
 80026c0:	42a6      	cmp	r6, r4
 80026c2:	d109      	bne.n	80026d8 <__libc_init_array+0x24>
 80026c4:	f000 f822 	bl	800270c <_init>
 80026c8:	2600      	movs	r6, #0
 80026ca:	4d0a      	ldr	r5, [pc, #40]	; (80026f4 <__libc_init_array+0x40>)
 80026cc:	4c0a      	ldr	r4, [pc, #40]	; (80026f8 <__libc_init_array+0x44>)
 80026ce:	1b64      	subs	r4, r4, r5
 80026d0:	10a4      	asrs	r4, r4, #2
 80026d2:	42a6      	cmp	r6, r4
 80026d4:	d105      	bne.n	80026e2 <__libc_init_array+0x2e>
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
 80026d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026dc:	4798      	blx	r3
 80026de:	3601      	adds	r6, #1
 80026e0:	e7ee      	b.n	80026c0 <__libc_init_array+0xc>
 80026e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e6:	4798      	blx	r3
 80026e8:	3601      	adds	r6, #1
 80026ea:	e7f2      	b.n	80026d2 <__libc_init_array+0x1e>
 80026ec:	08002a60 	.word	0x08002a60
 80026f0:	08002a60 	.word	0x08002a60
 80026f4:	08002a60 	.word	0x08002a60
 80026f8:	08002a64 	.word	0x08002a64

080026fc <memset>:
 80026fc:	4603      	mov	r3, r0
 80026fe:	4402      	add	r2, r0
 8002700:	4293      	cmp	r3, r2
 8002702:	d100      	bne.n	8002706 <memset+0xa>
 8002704:	4770      	bx	lr
 8002706:	f803 1b01 	strb.w	r1, [r3], #1
 800270a:	e7f9      	b.n	8002700 <memset+0x4>

0800270c <_init>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr

08002718 <_fini>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr
