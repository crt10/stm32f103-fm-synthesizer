
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004244  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049cc  080049cc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080049cc  080049cc  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049cc  080049cc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c34  200000a0  08004a74  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cd4  08004a74  00020cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c293  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ba  00000000  00000000  0003c35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001642a  00000000  00000000  0003fc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00056040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000035a8  00000000  00000000  00056e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182ae  00000000  00000000  0005a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000200e7  00000000  00000000  0007268e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b5e5  00000000  00000000  00092775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011dd5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003688  00000000  00000000  0011ddb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004338 	.word	0x08004338

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08004338 	.word	0x08004338

0800014c <init_audio_out>:
 */

#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	audio_spi = hspi->Instance;
 800014c:	6803      	ldr	r3, [r0, #0]
void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
 800014e:	b510      	push	{r4, lr}
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000150:	681a      	ldr	r2, [r3, #0]
	audio_spi = hspi->Instance;
 8000152:	4c06      	ldr	r4, [pc, #24]	; (800016c <init_audio_out+0x20>)
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	audio_spi = hspi->Instance;
 8000158:	6023      	str	r3, [r4, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015a:	4608      	mov	r0, r1
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 800015c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015e:	f003 fd91 	bl	8003c84 <HAL_TIM_Base_Start_IT>
	output_volume = 0x3800;
 8000162:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000166:	4b02      	ldr	r3, [pc, #8]	; (8000170 <init_audio_out+0x24>)
 8000168:	801a      	strh	r2, [r3, #0]
}
 800016a:	bd10      	pop	{r4, pc}
 800016c:	20000294 	.word	0x20000294
 8000170:	200002b0 	.word	0x200002b0

08000174 <update_volume>:

void update_volume() {
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin low
 8000174:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
void update_volume() {
 8000178:	b510      	push	{r4, lr}
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin low
 800017a:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <update_volume+0x38>)
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 800017c:	4c0c      	ldr	r4, [pc, #48]	; (80001b0 <update_volume+0x3c>)
 800017e:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <update_volume+0x40>)
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin low
 8000180:	6111      	str	r1, [r2, #16]
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	8822      	ldrh	r2, [r4, #0]
 8000186:	60da      	str	r2, [r3, #12]
	output_volume = synth_sample();
 8000188:	f001 f860 	bl	800124c <synth_sample>
 800018c:	b280      	uxth	r0, r0
	if (output_volume > 0x0FFF) {					//max possible volume with 12-bit dac
 800018e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000192:	bf28      	it	cs
 8000194:	f643 70ff 	movwcs	r0, #16383	; 0x3fff
		output_volume = 0x0FFF;
	}
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 8000198:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <update_volume+0x38>)
 800019e:	bf38      	it	cc
 80001a0:	f440 5040 	orrcc.w	r0, r0, #12288	; 0x3000
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 80001a4:	8020      	strh	r0, [r4, #0]
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 80001a6:	611a      	str	r2, [r3, #16]
}
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800
 80001b0:	200002b0 	.word	0x200002b0
 80001b4:	20000294 	.word	0x20000294

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001bc:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001be:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2601      	movs	r6, #1
 80001c2:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001c4:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001c8:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001cc:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001d4:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001dc:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001de:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e4:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e6:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e8:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f003 f99f 	bl	800352c <HAL_RCC_OscConfig>
 80001ee:	b108      	cbz	r0, 80001f4 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f6:	f04f 080f 	mov.w	r8, #15
 80001fa:	f04f 0902 	mov.w	r9, #2
 80001fe:	2600      	movs	r6, #0
 8000200:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000204:	4621      	mov	r1, r4
 8000206:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000208:	e9cd 8900 	strd	r8, r9, [sp]
 800020c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000212:	f003 fb8b 	bl	800392c <HAL_RCC_ClockConfig>
 8000216:	b108      	cbz	r0, 800021c <SystemClock_Config+0x64>
 8000218:	b672      	cpsid	i
  while (1)
 800021a:	e7fe      	b.n	800021a <SystemClock_Config+0x62>
}
 800021c:	b010      	add	sp, #64	; 0x40
 800021e:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8000222:	bf00      	nop

08000224 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000224:	2500      	movs	r5, #0
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800022a:	f001 fbed 	bl	8001a08 <HAL_Init>
  SystemClock_Config();
 800022e:	f7ff ffc3 	bl	80001b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000232:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8000236:	e9cd 5508 	strd	r5, r5, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	4c6f      	ldr	r4, [pc, #444]	; (80003f8 <main+0x1d4>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000240:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	61a3      	str	r3, [r4, #24]
 8000248:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800024a:	486c      	ldr	r0, [pc, #432]	; (80003fc <main+0x1d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	f003 0304 	and.w	r3, r3, #4
 8000250:	9302      	str	r3, [sp, #8]
 8000252:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000254:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000256:	2610      	movs	r6, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	61a3      	str	r3, [r4, #24]
 800025e:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000260:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000262:	f003 0308 	and.w	r3, r3, #8
 8000266:	9303      	str	r3, [sp, #12]
 8000268:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800026a:	f001 fef7 	bl	800205c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800026e:	2200      	movs	r2, #0
 8000270:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000272:	4862      	ldr	r0, [pc, #392]	; (80003fc <main+0x1d8>)
 8000274:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000276:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800027a:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027e:	f001 fde1 	bl	8001e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000282:	f24f 0678 	movw	r6, #61560	; 0xf078
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000286:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000288:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028a:	485d      	ldr	r0, [pc, #372]	; (8000400 <main+0x1dc>)
 800028c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800028e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000290:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000294:	f001 fdd6 	bl	8001e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000298:	f44f 7260 	mov.w	r2, #896	; 0x380
 800029c:	4b59      	ldr	r3, [pc, #356]	; (8000404 <main+0x1e0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029e:	4858      	ldr	r0, [pc, #352]	; (8000400 <main+0x1dc>)
 80002a0:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80002a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a8:	f001 fdcc 	bl	8001e44 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80002ac:	462a      	mov	r2, r5
 80002ae:	4629      	mov	r1, r5
 80002b0:	2017      	movs	r0, #23
 80002b2:	f001 fbf1 	bl	8001a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002b6:	2017      	movs	r0, #23
 80002b8:	f001 fc26 	bl	8001b08 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002bc:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002be:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6163      	str	r3, [r4, #20]
 80002c6:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002c8:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ca:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002ce:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002d4:	f001 fbe0 	bl	8001a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002d8:	200e      	movs	r0, #14
 80002da:	f001 fc15 	bl	8001b08 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 31250;
 80002de:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 80002e2:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 80002e4:	4c48      	ldr	r4, [pc, #288]	; (8000408 <main+0x1e4>)
 80002e6:	4949      	ldr	r1, [pc, #292]	; (800040c <main+0x1e8>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e8:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ea:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ee:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart1.Init.BaudRate = 31250;
 80002f2:	e9c4 1200 	strd	r1, r2, [r4]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f6:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80002f8:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002fa:	f003 fdc5 	bl	8003e88 <HAL_UART_Init>
 80002fe:	b108      	cbz	r0, 8000304 <main+0xe0>
 8000300:	b672      	cpsid	i
  while (1)
 8000302:	e7fe      	b.n	8000302 <main+0xde>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000304:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 8000306:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1451-1;
 800030a:	f240 52aa 	movw	r2, #1450	; 0x5aa
  htim2.Instance = TIM2;
 800030e:	4f40      	ldr	r7, [pc, #256]	; (8000410 <main+0x1ec>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000310:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8000314:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800031a:	4638      	mov	r0, r7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	e9c7 3301 	strd	r3, r3, [r7, #4]
  htim2.Instance = TIM2;
 8000320:	6039      	str	r1, [r7, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000322:	613b      	str	r3, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000324:	61bb      	str	r3, [r7, #24]
  htim2.Init.Period = 1451-1;
 8000326:	60fa      	str	r2, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000328:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800032a:	f003 fc47 	bl	8003bbc <HAL_TIM_Base_Init>
 800032e:	b108      	cbz	r0, 8000334 <main+0x110>
 8000330:	b672      	cpsid	i
  while (1)
 8000332:	e7fe      	b.n	8000332 <main+0x10e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000338:	4638      	mov	r0, r7
 800033a:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033e:	f003 fccd 	bl	8003cdc <HAL_TIM_ConfigClockSource>
 8000342:	b108      	cbz	r0, 8000348 <main+0x124>
 8000344:	b672      	cpsid	i
  while (1)
 8000346:	e7fe      	b.n	8000346 <main+0x122>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000348:	2300      	movs	r3, #0
 800034a:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800034c:	4638      	mov	r0, r7
 800034e:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000350:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000354:	f003 fd66 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000358:	4603      	mov	r3, r0
 800035a:	b9e0      	cbnz	r0, 8000396 <main+0x172>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800035c:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000360:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000364:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 8000366:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000368:	f44f 6600 	mov.w	r6, #2048	; 0x800
  hspi1.Instance = SPI1;
 800036c:	4d29      	ldr	r5, [pc, #164]	; (8000414 <main+0x1f0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	e9c5 c301 	strd	ip, r3, [r5, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000372:	e9c5 3304 	strd	r3, r3, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000376:	e9c5 3308 	strd	r3, r3, [r5, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037a:	62ab      	str	r3, [r5, #40]	; 0x28
  hspi1.Instance = SPI1;
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <main+0x1f4>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800037e:	61a8      	str	r0, [r5, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000380:	4628      	mov	r0, r5
  hspi1.Instance = SPI1;
 8000382:	602b      	str	r3, [r5, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000384:	60ee      	str	r6, [r5, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000386:	61e9      	str	r1, [r5, #28]
  hspi1.Init.CRCPolynomial = 10;
 8000388:	62ea      	str	r2, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800038a:	f003 fbbd 	bl	8003b08 <HAL_SPI_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	b118      	cbz	r0, 800039a <main+0x176>
 8000392:	b672      	cpsid	i
  while (1)
 8000394:	e7fe      	b.n	8000394 <main+0x170>
 8000396:	b672      	cpsid	i
 8000398:	e7fe      	b.n	8000398 <main+0x174>
  hi2c2.Init.ClockSpeed = 10000;
 800039a:	f242 7010 	movw	r0, #10000	; 0x2710
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Instance = I2C2;
 80003a2:	4e1e      	ldr	r6, [pc, #120]	; (800041c <main+0x1f8>)
 80003a4:	491e      	ldr	r1, [pc, #120]	; (8000420 <main+0x1fc>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003a6:	e9c6 0301 	strd	r0, r3, [r6, #4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003aa:	4630      	mov	r0, r6
  hi2c2.Init.OwnAddress2 = 0;
 80003ac:	e9c6 3305 	strd	r3, r3, [r6, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b0:	e9c6 3307 	strd	r3, r3, [r6, #28]
  hi2c2.Init.OwnAddress1 = 0;
 80003b4:	60f3      	str	r3, [r6, #12]
  hi2c2.Instance = I2C2;
 80003b6:	6031      	str	r1, [r6, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b8:	6132      	str	r2, [r6, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003ba:	f001 fef5 	bl	80021a8 <HAL_I2C_Init>
 80003be:	b108      	cbz	r0, 80003c4 <main+0x1a0>
 80003c0:	b672      	cpsid	i
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <main+0x19e>
  init_midi(&huart1);
 80003c4:	4620      	mov	r0, r4
 80003c6:	f000 f867 	bl	8000498 <init_midi>
  init_synth();
 80003ca:	f000 fc4f 	bl	8000c6c <init_synth>
  init_audio_out(&hspi1, &htim2);
 80003ce:	4628      	mov	r0, r5
 80003d0:	4639      	mov	r1, r7
 80003d2:	f7ff febb 	bl	800014c <init_audio_out>
  init_ui(&hi2c2);
 80003d6:	4630      	mov	r0, r6
 80003d8:	f001 fa50 	bl	800187c <init_ui>
 80003dc:	4e11      	ldr	r6, [pc, #68]	; (8000424 <main+0x200>)
 80003de:	4d12      	ldr	r5, [pc, #72]	; (8000428 <main+0x204>)
	if (midi_buffer_read != midi_buffer_write) {
 80003e0:	7832      	ldrb	r2, [r6, #0]
 80003e2:	782b      	ldrb	r3, [r5, #0]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d0fb      	beq.n	80003e0 <main+0x1bc>
		process_midi_byte(&huart1);
 80003e8:	4620      	mov	r0, r4
 80003ea:	f000 f877 	bl	80004dc <process_midi_byte>
	if (midi_buffer_read != midi_buffer_write) {
 80003ee:	7832      	ldrb	r2, [r6, #0]
 80003f0:	782b      	ldrb	r3, [r5, #0]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d0f4      	beq.n	80003e0 <main+0x1bc>
 80003f6:	e7f7      	b.n	80003e8 <main+0x1c4>
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800
 8000400:	40010c00 	.word	0x40010c00
 8000404:	10110000 	.word	0x10110000
 8000408:	20000764 	.word	0x20000764
 800040c:	40013800 	.word	0x40013800
 8000410:	20000ae8 	.word	0x20000ae8
 8000414:	200009c4 	.word	0x200009c4
 8000418:	40013000 	.word	0x40013000
 800041c:	200002bc 	.word	0x200002bc
 8000420:	40005800 	.word	0x40005800
 8000424:	20000bfc 	.word	0x20000bfc
 8000428:	200003e8 	.word	0x200003e8

0800042c <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin) {
 800042c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8000430:	d005      	beq.n	800043e <HAL_GPIO_EXTI_Callback+0x12>
 8000432:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000436:	d008      	beq.n	800044a <HAL_GPIO_EXTI_Callback+0x1e>
 8000438:	2880      	cmp	r0, #128	; 0x80
 800043a:	d003      	beq.n	8000444 <HAL_GPIO_EXTI_Callback+0x18>
}
 800043c:	4770      	bx	lr
		fsm(pb_1);
 800043e:	2001      	movs	r0, #1
 8000440:	f001 ba70 	b.w	8001924 <fsm>
		fsm(pb_0);
 8000444:	2000      	movs	r0, #0
 8000446:	f001 ba6d 	b.w	8001924 <fsm>
		fsm(pb_2);
 800044a:	2002      	movs	r0, #2
 800044c:	f001 ba6a 	b.w	8001924 <fsm>

08000450 <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000450:	2201      	movs	r2, #1
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000452:	b410      	push	{r4}
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000454:	4c05      	ldr	r4, [pc, #20]	; (800046c <HAL_UART_RxCpltCallback+0x1c>)
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000456:	4906      	ldr	r1, [pc, #24]	; (8000470 <HAL_UART_RxCpltCallback+0x20>)
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000458:	7823      	ldrb	r3, [r4, #0]
 800045a:	4413      	add	r3, r2
 800045c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000460:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000462:	7823      	ldrb	r3, [r4, #0]
}
 8000464:	bc10      	pop	{r4}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000466:	4419      	add	r1, r3
 8000468:	f003 bd78 	b.w	8003f5c <HAL_UART_Receive_IT>
 800046c:	200003e8 	.word	0x200003e8
 8000470:	200007a8 	.word	0x200007a8

08000474 <sample>:
void sample() {
 8000474:	b508      	push	{r3, lr}
	TIM2->SR = 0;
 8000476:	2200      	movs	r2, #0
 8000478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800047c:	f44f 7180 	mov.w	r1, #256	; 0x100
	TIM2->SR = 0;
 8000480:	611a      	str	r2, [r3, #16]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <sample+0x1c>)
 8000484:	f001 fdee 	bl	8002064 <HAL_GPIO_TogglePin>
}
 8000488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_volume();
 800048c:	f7ff be72 	b.w	8000174 <update_volume>
 8000490:	40010800 	.word	0x40010800

08000494 <Error_Handler>:
 8000494:	b672      	cpsid	i
  while (1)
 8000496:	e7fe      	b.n	8000496 <Error_Handler+0x2>

08000498 <init_midi>:
 */

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
	data[0] = -1;
 8000498:	21ff      	movs	r1, #255	; 0xff
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <init_midi+0x34>)
 800049c:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <init_midi+0x38>)
void init_midi(UART_HandleTypeDef* huart) {
 800049e:	b510      	push	{r4, lr}
 80004a0:	4604      	mov	r4, r0
	data[0] = -1;
 80004a2:	7011      	strb	r1, [r2, #0]
	data[1] = -1;
 80004a4:	7051      	strb	r1, [r2, #1]
	for (uint8_t i = 0; i < RING_BUFFER_SIZE; i++) {
 80004a6:	4618      	mov	r0, r3
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	f003 ff3d 	bl	8004328 <memset>
		midi_buffer[i] = -1;
	}
	midi_buffer_read = 0;
 80004ae:	2100      	movs	r1, #0
 80004b0:	4603      	mov	r3, r0
	midi_buffer_write = 0;
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <init_midi+0x3c>)
	midi_buffer_read = 0;
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <init_midi+0x40>)
 80004b6:	7001      	strb	r1, [r0, #0]
	midi_buffer_write = 0;
 80004b8:	7011      	strb	r1, [r2, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 80004ba:	7811      	ldrb	r1, [r2, #0]
 80004bc:	4620      	mov	r0, r4
}
 80004be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	4419      	add	r1, r3
 80004c6:	f003 bd49 	b.w	8003f5c <HAL_UART_Receive_IT>
 80004ca:	bf00      	nop
 80004cc:	200007a8 	.word	0x200007a8
 80004d0:	200008f4 	.word	0x200008f4
 80004d4:	200003e8 	.word	0x200003e8
 80004d8:	20000bfc 	.word	0x20000bfc

080004dc <process_midi_byte>:

void process_midi_byte() {
 80004dc:	b538      	push	{r3, r4, r5, lr}
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 80004de:	4c35      	ldr	r4, [pc, #212]	; (80005b4 <process_midi_byte+0xd8>)
 80004e0:	4a35      	ldr	r2, [pc, #212]	; (80005b8 <process_midi_byte+0xdc>)
 80004e2:	7823      	ldrb	r3, [r4, #0]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80004e4:	56d1      	ldrsb	r1, [r2, r3]
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 80004e6:	5cd2      	ldrb	r2, [r2, r3]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80004e8:	2900      	cmp	r1, #0
 80004ea:	db41      	blt.n	8000570 <process_midi_byte+0x94>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {													//if byte received was data byte
		switch (status & 0xF0) {
 80004ec:	4b33      	ldr	r3, [pc, #204]	; (80005bc <process_midi_byte+0xe0>)
 80004ee:	7819      	ldrb	r1, [r3, #0]
 80004f0:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80004f4:	2bc0      	cmp	r3, #192	; 0xc0
 80004f6:	d033      	beq.n	8000560 <process_midi_byte+0x84>
 80004f8:	d820      	bhi.n	800053c <process_midi_byte+0x60>
 80004fa:	2ba0      	cmp	r3, #160	; 0xa0
 80004fc:	d002      	beq.n	8000504 <process_midi_byte+0x28>
 80004fe:	d90c      	bls.n	800051a <process_midi_byte+0x3e>
 8000500:	2bb0      	cmp	r3, #176	; 0xb0
 8000502:	d147      	bne.n	8000594 <process_midi_byte+0xb8>
		case 0xD0:												//channel pressure (unimplemented)
			data[0] = midi_in;
			channel_pressure();
			break;
		case 0xE0:												//pitch bend (unimplemented)
			if (data[0] == (uint8_t)-1) {
 8000504:	4b2e      	ldr	r3, [pc, #184]	; (80005c0 <process_midi_byte+0xe4>)
 8000506:	7819      	ldrb	r1, [r3, #0]
 8000508:	29ff      	cmp	r1, #255	; 0xff
 800050a:	d02a      	beq.n	8000562 <process_midi_byte+0x86>
				data[0] = midi_in;
			}
			else {
				data[1] = midi_in;
 800050c:	705a      	strb	r2, [r3, #1]
			break;
		default:
			__NOP();
		}
	}
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800050e:	7823      	ldrb	r3, [r4, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000516:	7023      	strb	r3, [r4, #0]
}
 8000518:	bd38      	pop	{r3, r4, r5, pc}
		switch (status & 0xF0) {
 800051a:	2b80      	cmp	r3, #128	; 0x80
 800051c:	d034      	beq.n	8000588 <process_midi_byte+0xac>
 800051e:	2b90      	cmp	r3, #144	; 0x90
 8000520:	d138      	bne.n	8000594 <process_midi_byte+0xb8>
			if (data[0] == (uint8_t)-1) {
 8000522:	4d27      	ldr	r5, [pc, #156]	; (80005c0 <process_midi_byte+0xe4>)
 8000524:	7828      	ldrb	r0, [r5, #0]
 8000526:	28ff      	cmp	r0, #255	; 0xff
 8000528:	d032      	beq.n	8000590 <process_midi_byte+0xb4>
				data[1] = midi_in;
 800052a:	706a      	strb	r2, [r5, #1]
				if (data[1] == 0) {
 800052c:	2a00      	cmp	r2, #0
 800052e:	d13a      	bne.n	80005a6 <process_midi_byte+0xca>

void note_off() {
	release_voice(data[0]);
 8000530:	f000 fe4e 	bl	80011d0 <release_voice>
	data[0] = -1;
 8000534:	23ff      	movs	r3, #255	; 0xff
 8000536:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 8000538:	706b      	strb	r3, [r5, #1]
}
 800053a:	e7e8      	b.n	800050e <process_midi_byte+0x32>
		switch (status & 0xF0) {
 800053c:	2be0      	cmp	r3, #224	; 0xe0
 800053e:	d0e1      	beq.n	8000504 <process_midi_byte+0x28>
 8000540:	2bf0      	cmp	r3, #240	; 0xf0
 8000542:	d10b      	bne.n	800055c <process_midi_byte+0x80>
			if (status == 0xFF) {									//system reset
 8000544:	29ff      	cmp	r1, #255	; 0xff
 8000546:	d1e2      	bne.n	800050e <process_midi_byte+0x32>
				midi_buffer_read = 0;
 8000548:	2200      	movs	r2, #0
				data[0] = -1;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <process_midi_byte+0xe4>)
				midi_buffer_write = 0;
 800054c:	481d      	ldr	r0, [pc, #116]	; (80005c4 <process_midi_byte+0xe8>)
				midi_buffer_read = 0;
 800054e:	7022      	strb	r2, [r4, #0]
				data[0] = -1;
 8000550:	7019      	strb	r1, [r3, #0]
				midi_buffer_write = 0;
 8000552:	7002      	strb	r2, [r0, #0]
				data[1] = -1;
 8000554:	7059      	strb	r1, [r3, #1]
				clear_voices();
 8000556:	f000 fd37 	bl	8000fc8 <clear_voices>
 800055a:	e7d8      	b.n	800050e <process_midi_byte+0x32>
		switch (status & 0xF0) {
 800055c:	2bd0      	cmp	r3, #208	; 0xd0
 800055e:	d119      	bne.n	8000594 <process_midi_byte+0xb8>
			data[0] = midi_in;
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <process_midi_byte+0xe4>)
 8000562:	701a      	strb	r2, [r3, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 8000564:	7823      	ldrb	r3, [r4, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800056c:	7023      	strb	r3, [r4, #0]
}
 800056e:	bd38      	pop	{r3, r4, r5, pc}
		data[0] = -1;
 8000570:	21ff      	movs	r1, #255	; 0xff
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <process_midi_byte+0xe4>)
		status = midi_in;
 8000574:	4811      	ldr	r0, [pc, #68]	; (80005bc <process_midi_byte+0xe0>)
		data[0] = -1;
 8000576:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 8000578:	7059      	strb	r1, [r3, #1]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800057a:	7823      	ldrb	r3, [r4, #0]
		status = midi_in;
 800057c:	7002      	strb	r2, [r0, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800057e:	3301      	adds	r3, #1
 8000580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000584:	7023      	strb	r3, [r4, #0]
}
 8000586:	bd38      	pop	{r3, r4, r5, pc}
			if (data[0] == (uint8_t)-1) {
 8000588:	4d0d      	ldr	r5, [pc, #52]	; (80005c0 <process_midi_byte+0xe4>)
 800058a:	7828      	ldrb	r0, [r5, #0]
 800058c:	28ff      	cmp	r0, #255	; 0xff
 800058e:	d103      	bne.n	8000598 <process_midi_byte+0xbc>
				data[0] = midi_in;
 8000590:	702a      	strb	r2, [r5, #0]
 8000592:	e7bc      	b.n	800050e <process_midi_byte+0x32>
			__NOP();
 8000594:	bf00      	nop
 8000596:	e7ba      	b.n	800050e <process_midi_byte+0x32>
				data[1] = midi_in;
 8000598:	706a      	strb	r2, [r5, #1]
	release_voice(data[0]);
 800059a:	f000 fe19 	bl	80011d0 <release_voice>
	data[0] = -1;
 800059e:	23ff      	movs	r3, #255	; 0xff
 80005a0:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80005a2:	706b      	strb	r3, [r5, #1]
}
 80005a4:	e7b3      	b.n	800050e <process_midi_byte+0x32>

void note_on() {
	add_voice(data[0]);
 80005a6:	f000 fd21 	bl	8000fec <add_voice>
	data[0] = -1;
 80005aa:	23ff      	movs	r3, #255	; 0xff
 80005ac:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80005ae:	706b      	strb	r3, [r5, #1]
}
 80005b0:	e7ad      	b.n	800050e <process_midi_byte+0x32>
 80005b2:	bf00      	nop
 80005b4:	20000bfc 	.word	0x20000bfc
 80005b8:	200007a8 	.word	0x200007a8
 80005bc:	20000ccc 	.word	0x20000ccc
 80005c0:	200008f4 	.word	0x200008f4
 80005c4:	200003e8 	.word	0x200003e8

080005c8 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 80005c8:	4b01      	ldr	r3, [pc, #4]	; (80005d0 <note_to_freq+0x8>)
}
 80005ca:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80005ce:	4770      	bx	lr
 80005d0:	08004360 	.word	0x08004360

080005d4 <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 80005d6:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 80005d8:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 80005dc:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	be37c63b 	.word	0xbe37c63b

080005e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_MspInit+0x3c>)
{
 80005ea:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ec:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f0:	f042 0201 	orr.w	r2, r2, #1
 80005f4:	619a      	str	r2, [r3, #24]
 80005f6:	699a      	ldr	r2, [r3, #24]
 80005f8:	f002 0201 	and.w	r2, r2, #1
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000606:	61da      	str	r2, [r3, #28]
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000612:	684b      	ldr	r3, [r1, #4]
 8000614:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000618:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061c:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	b002      	add	sp, #8
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	40010000 	.word	0x40010000

0800062c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800062c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C2)
 8000632:	6802      	ldr	r2, [r0, #0]
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_I2C_MspInit+0xa0>)
{
 8000636:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 8000638:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800063e:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hi2c->Instance==I2C2)
 8000642:	d002      	beq.n	800064a <HAL_I2C_MspInit+0x1e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000644:	b007      	add	sp, #28
 8000646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064a:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800064c:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 8000650:	f04f 0912 	mov.w	r9, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4f1e      	ldr	r7, [pc, #120]	; (80006d0 <HAL_I2C_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	4605      	mov	r5, r0
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	61bb      	str	r3, [r7, #24]
 8000662:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	481b      	ldr	r0, [pc, #108]	; (80006d4 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	f003 0308 	and.w	r3, r3, #8
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000670:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	f001 fbe6 	bl	8001e44 <HAL_GPIO_Init>
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000678:	f04f 0c10 	mov.w	ip, #16
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800067c:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C2_CLK_ENABLE();
 800067e:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000680:	4e15      	ldr	r6, [pc, #84]	; (80006d8 <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000686:	61fb      	str	r3, [r7, #28]
 8000688:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800068a:	4914      	ldr	r1, [pc, #80]	; (80006dc <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 800068c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000690:	9301      	str	r3, [sp, #4]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000692:	4630      	mov	r0, r6
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000694:	e9c6 c401 	strd	ip, r4, [r6, #4]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000698:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800069c:	e9c6 4406 	strd	r4, r4, [r6, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006a0:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80006a2:	6031      	str	r1, [r6, #0]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006a4:	60f2      	str	r2, [r6, #12]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80006a6:	f001 fa55 	bl	8001b54 <HAL_DMA_Init>
 80006aa:	b960      	cbnz	r0, 80006c6 <HAL_I2C_MspInit+0x9a>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2021      	movs	r0, #33	; 0x21
 80006b0:	4611      	mov	r1, r2
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80006b2:	636e      	str	r6, [r5, #52]	; 0x34
 80006b4:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80006b6:	f001 f9ef 	bl	8001a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80006ba:	2021      	movs	r0, #33	; 0x21
 80006bc:	f001 fa24 	bl	8001b08 <HAL_NVIC_EnableIRQ>
}
 80006c0:	b007      	add	sp, #28
 80006c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 80006c6:	f7ff fee5 	bl	8000494 <Error_Handler>
 80006ca:	e7ef      	b.n	80006ac <HAL_I2C_MspInit+0x80>
 80006cc:	40005800 	.word	0x40005800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	200004bc 	.word	0x200004bc
 80006dc:	40020044 	.word	0x40020044

080006e0 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	2300      	movs	r3, #0
{
 80006e2:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 80006e4:	6801      	ldr	r1, [r0, #0]
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <HAL_SPI_MspInit+0x60>)
{
 80006e8:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 80006ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80006f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI1)
 80006f4:	d001      	beq.n	80006fa <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006f6:	b006      	add	sp, #24
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006fa:	24a0      	movs	r4, #160	; 0xa0
 80006fc:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fe:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000700:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000704:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000708:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800070c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000710:	619a      	str	r2, [r3, #24]
 8000712:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000716:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800071a:	9200      	str	r2, [sp, #0]
 800071c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	f042 0204 	orr.w	r2, r2, #4
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000728:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000734:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f001 fb85 	bl	8001e44 <HAL_GPIO_Init>
}
 800073a:	b006      	add	sp, #24
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	bf00      	nop
 8000740:	40013000 	.word	0x40013000
 8000744:	40010800 	.word	0x40010800

08000748 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000748:	6803      	ldr	r3, [r0, #0]
 800074a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800074e:	d000      	beq.n	8000752 <HAL_TIM_Base_MspInit+0xa>
 8000750:	4770      	bx	lr

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000752:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000754:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000758:	69d8      	ldr	r0, [r3, #28]
{
 800075a:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800075c:	4308      	orrs	r0, r1
 800075e:	61d8      	str	r0, [r3, #28]
 8000760:	69db      	ldr	r3, [r3, #28]
{
 8000762:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000764:	400b      	ands	r3, r1
 8000766:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800076e:	f001 f993 	bl	8001a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000772:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000774:	b003      	add	sp, #12
 8000776:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800077a:	f001 b9c5 	b.w	8001b08 <HAL_NVIC_EnableIRQ>
 800077e:	bf00      	nop

08000780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8000784:	6802      	ldr	r2, [r0, #0]
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <HAL_UART_MspInit+0x88>)
{
 8000788:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 800078a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000790:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8000794:	d001      	beq.n	800079a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000796:	b007      	add	sp, #28
 8000798:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800079a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079e:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a0:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80007a6:	699a      	ldr	r2, [r3, #24]
 80007a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007ac:	619a      	str	r2, [r3, #24]
 80007ae:	699a      	ldr	r2, [r3, #24]
 80007b0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007b4:	9200      	str	r2, [sp, #0]
 80007b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	699a      	ldr	r2, [r3, #24]
 80007ba:	f042 0204 	orr.w	r2, r2, #4
 80007be:	619a      	str	r2, [r3, #24]
 80007c0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	a902      	add	r1, sp, #8
 80007d2:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f001 fb33 	bl	8001e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007de:	2300      	movs	r3, #0
 80007e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	a902      	add	r1, sp, #8
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f001 fb29 	bl	8001e44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f2:	4622      	mov	r2, r4
 80007f4:	4621      	mov	r1, r4
 80007f6:	2025      	movs	r0, #37	; 0x25
 80007f8:	f001 f94e 	bl	8001a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007fc:	2025      	movs	r0, #37	; 0x25
 80007fe:	f001 f983 	bl	8001b08 <HAL_NVIC_EnableIRQ>
}
 8000802:	b007      	add	sp, #28
 8000804:	bd30      	pop	{r4, r5, pc}
 8000806:	bf00      	nop
 8000808:	40013800 	.word	0x40013800
 800080c:	40010800 	.word	0x40010800

08000810 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler>
 8000812:	bf00      	nop

08000814 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <HardFault_Handler>
 8000816:	bf00      	nop

08000818 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler>
 800081a:	bf00      	nop

0800081c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <BusFault_Handler>
 800081e:	bf00      	nop

08000820 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler>
 8000822:	bf00      	nop

08000824 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <DebugMon_Handler>:
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <PendSV_Handler>:
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000830:	f001 b8fc 	b.w	8001a2c <HAL_IncTick>

08000834 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000834:	4801      	ldr	r0, [pc, #4]	; (800083c <DMA1_Channel4_IRQHandler+0x8>)
 8000836:	f001 ba6d 	b.w	8001d14 <HAL_DMA_IRQHandler>
 800083a:	bf00      	nop
 800083c:	200004bc 	.word	0x200004bc

08000840 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	f001 fc18 	bl	8002078 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000848:	f44f 7080 	mov.w	r0, #256	; 0x100
 800084c:	f001 fc14 	bl	8002078 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000854:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000858:	f001 bc0e 	b.w	8002078 <HAL_GPIO_EXTI_IRQHandler>

0800085c <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 800085c:	f7ff be0a 	b.w	8000474 <sample>

08000860 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000860:	4801      	ldr	r0, [pc, #4]	; (8000868 <I2C2_EV_IRQHandler+0x8>)
 8000862:	f002 b9a9 	b.w	8002bb8 <HAL_I2C_EV_IRQHandler>
 8000866:	bf00      	nop
 8000868:	200002bc 	.word	0x200002bc

0800086c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800086c:	4801      	ldr	r0, [pc, #4]	; (8000874 <USART1_IRQHandler+0x8>)
 800086e:	f003 bc09 	b.w	8004084 <HAL_UART_IRQHandler>
 8000872:	bf00      	nop
 8000874:	20000764 	.word	0x20000764

08000878 <modulate>:
		}
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
	}
}

static inline int8_t modulate(uint8_t voice_index) {
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {			//loop through all operators of voice
		/*update phase of active operator*/
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 800087a:	4eb7      	ldr	r6, [pc, #732]	; (8000b58 <modulate+0x2e0>)
 800087c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8000880:	eb06 0343 	add.w	r3, r6, r3, lsl #1
	-27, -25, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9,  -7,  -5,  -3,  -2,
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 8000884:	f8b3 c078 	ldrh.w	ip, [r3, #120]	; 0x78
 8000888:	f8b3 70e8 	ldrh.w	r7, [r3, #232]	; 0xe8
 800088c:	891d      	ldrh	r5, [r3, #8]
 800088e:	88d9      	ldrh	r1, [r3, #6]
 8000890:	f8b3 4076 	ldrh.w	r4, [r3, #118]	; 0x76
 8000894:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	; 0xe6
 8000898:	440d      	add	r5, r1
 800089a:	4464      	add	r4, ip
 800089c:	f8b3 1156 	ldrh.w	r1, [r3, #342]	; 0x156
 80008a0:	f8b3 c158 	ldrh.w	ip, [r3, #344]	; 0x158
 80008a4:	443a      	add	r2, r7
	}

	switch (algo) {
 80008a6:	4fad      	ldr	r7, [pc, #692]	; (8000b5c <modulate+0x2e4>)
 80008a8:	4461      	add	r1, ip
 80008aa:	783f      	ldrb	r7, [r7, #0]
 80008ac:	b2ad      	uxth	r5, r5
 80008ae:	b2a4      	uxth	r4, r4
 80008b0:	b292      	uxth	r2, r2
 80008b2:	b289      	uxth	r1, r1
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 80008b4:	811d      	strh	r5, [r3, #8]
 80008b6:	f8a3 4078 	strh.w	r4, [r3, #120]	; 0x78
 80008ba:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
 80008be:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
 80008c2:	00c3      	lsls	r3, r0, #3
 80008c4:	2f0b      	cmp	r7, #11
 80008c6:	f200 81c8 	bhi.w	8000c5a <modulate+0x3e2>
 80008ca:	e8df f017 	tbh	[pc, r7, lsl #1]
 80008ce:	0037      	.short	0x0037
 80008d0:	0075005f 	.word	0x0075005f
 80008d4:	00be009c 	.word	0x00be009c
 80008d8:	010600dc 	.word	0x010600dc
 80008dc:	014d0127 	.word	0x014d0127
 80008e0:	01a80180 	.word	0x01a80180
 80008e4:	000c      	.short	0x000c
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 80008e6:	4f9e      	ldr	r7, [pc, #632]	; (8000b60 <modulate+0x2e8>)
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
		return ((int16_t)op2 + op1 + op0) / 3;
		break;
	case 0x0B:
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008e8:	1a1b      	subs	r3, r3, r0
 80008ea:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80008ee:	0a09      	lsrs	r1, r1, #8
 80008f0:	0a12      	lsrs	r2, r2, #8
 80008f2:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
 80008f6:	f917 e001 	ldrsb.w	lr, [r7, r1]
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008fa:	f917 c002 	ldrsb.w	ip, [r7, r2]
 80008fe:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
 8000902:	0a24      	lsrs	r4, r4, #8
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000904:	573e      	ldrsb	r6, [r7, r4]
 8000906:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800090a:	0a2d      	lsrs	r5, r5, #8
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800090c:	fb00 f00e 	mul.w	r0, r0, lr
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000910:	fb01 f10c 	mul.w	r1, r1, ip
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000914:	577c      	ldrsb	r4, [r7, r5]
 8000916:	791b      	ldrb	r3, [r3, #4]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000918:	fb02 f206 	mul.w	r2, r2, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800091c:	fb03 f304 	mul.w	r3, r3, r4
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 8000920:	f341 11c7 	sbfx	r1, r1, #7, #8
 8000924:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000928:	4408      	add	r0, r1
 800092a:	f342 12c7 	sbfx	r2, r2, #7, #8
 800092e:	4410      	add	r0, r2
 8000930:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000934:	4418      	add	r0, r3
 8000936:	f340 0087 	sbfx	r0, r0, #2, #8
		break;
	default:
		break;
	}
	return 0;
}
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800093c:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 800093e:	4889      	ldr	r0, [pc, #548]	; (8000b64 <modulate+0x2ec>)
 8000940:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000944:	0a0e      	lsrs	r6, r1, #8
 8000946:	5786      	ldrsb	r6, [r0, r6]
 8000948:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800094c:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800094e:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000952:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	5686      	ldrsb	r6, [r0, r2]
 800095a:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800095e:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000960:	fb01 f106 	mul.w	r1, r1, r6
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000964:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000968:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800096a:	5680      	ldrsb	r0, [r0, r2]
 800096c:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000970:	0a2a      	lsrs	r2, r5, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000972:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000976:	4c7a      	ldr	r4, [pc, #488]	; (8000b60 <modulate+0x2e8>)
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000978:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	7918      	ldrb	r0, [r3, #4]
 8000980:	56a3      	ldrsb	r3, [r4, r2]
 8000982:	fb00 f003 	mul.w	r0, r0, r3
 8000986:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 800098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800098c:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 800098e:	4875      	ldr	r0, [pc, #468]	; (8000b64 <modulate+0x2ec>)
 8000990:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000994:	0a16      	lsrs	r6, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000996:	5787      	ldrsb	r7, [r0, r6]
 8000998:	0a09      	lsrs	r1, r1, #8
 800099a:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800099e:	5646      	ldrsb	r6, [r0, r1]
 80009a0:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009a4:	fb02 f207 	mul.w	r2, r2, r7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009a8:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009ac:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009ae:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80009b2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80009b6:	e7d7      	b.n	8000968 <modulate+0xf0>
 80009b8:	4f6a      	ldr	r7, [pc, #424]	; (8000b64 <modulate+0x2ec>)
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009ba:	1a1b      	subs	r3, r3, r0
 80009bc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80009c0:	0a12      	lsrs	r2, r2, #8
 80009c2:	56be      	ldrsb	r6, [r7, r2]
 80009c4:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009c8:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009ca:	fb00 f006 	mul.w	r0, r0, r6
 80009ce:	0a09      	lsrs	r1, r1, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009d0:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009d4:	567c      	ldrsb	r4, [r7, r1]
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009dc:	56b9      	ldrsb	r1, [r7, r2]
 80009de:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009e2:	fb00 f004 	mul.w	r0, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009e6:	fb02 f101 	mul.w	r1, r2, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009ea:	0a2a      	lsrs	r2, r5, #8
 80009ec:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 80009f0:	eb02 12e1 	add.w	r2, r2, r1, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 80009f4:	495a      	ldr	r1, [pc, #360]	; (8000b60 <modulate+0x2e8>)
 80009f6:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009f8:	7918      	ldrb	r0, [r3, #4]
 80009fa:	568b      	ldrsb	r3, [r1, r2]
 80009fc:	fb00 f003 	mul.w	r0, r0, r3
 8000a00:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000a06:	4f57      	ldr	r7, [pc, #348]	; (8000b64 <modulate+0x2ec>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a08:	1a1b      	subs	r3, r3, r0
 8000a0a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a0e:	0a09      	lsrs	r1, r1, #8
 8000a10:	567e      	ldrsb	r6, [r7, r1]
 8000a12:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a16:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a1a:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a1e:	f3c0 10c7 	ubfx	r0, r0, #7, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a22:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8000a26:	b2e4      	uxtb	r4, r4
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a28:	eb00 2212 	add.w	r2, r0, r2, lsr #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a2c:	573e      	ldrsb	r6, [r7, r4]
 8000a2e:	b2d2      	uxtb	r2, r2
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a30:	56bc      	ldrsb	r4, [r7, r2]
 8000a32:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a36:	fb01 f206 	mul.w	r2, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a3a:	fb00 f104 	mul.w	r1, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a3e:	11d2      	asrs	r2, r2, #7
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a40:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000a44:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8000a48:	e7d4      	b.n	80009f4 <modulate+0x17c>
 8000a4a:	4f46      	ldr	r7, [pc, #280]	; (8000b64 <modulate+0x2ec>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a4c:	1a1b      	subs	r3, r3, r0
 8000a4e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a52:	0a10      	lsrs	r0, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a54:	563e      	ldrsb	r6, [r7, r0]
 8000a56:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8000a5a:	0a09      	lsrs	r1, r1, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a5c:	5679      	ldrsb	r1, [r7, r1]
 8000a5e:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a62:	fb02 f206 	mul.w	r2, r2, r6
 8000a66:	0a24      	lsrs	r4, r4, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a68:	fb00 f001 	mul.w	r0, r0, r1
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a6c:	573c      	ldrsb	r4, [r7, r4]
 8000a6e:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a72:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a74:	fb01 f104 	mul.w	r1, r1, r4
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a78:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 8000a7c:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8000a80:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000a84:	e7b6      	b.n	80009f4 <modulate+0x17c>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a86:	1a1b      	subs	r3, r3, r0
 8000a88:	4836      	ldr	r0, [pc, #216]	; (8000b64 <modulate+0x2ec>)
 8000a8a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a8e:	0a0e      	lsrs	r6, r1, #8
 8000a90:	5786      	ldrsb	r6, [r0, r6]
 8000a92:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a96:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a98:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a9c:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	5680      	ldrsb	r0, [r0, r2]
 8000aa4:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000aa8:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000aaa:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000aae:	482c      	ldr	r0, [pc, #176]	; (8000b60 <modulate+0x2e8>)
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ab0:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	0a2d      	lsrs	r5, r5, #8
 8000ab8:	5681      	ldrsb	r1, [r0, r2]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000aba:	5742      	ldrsb	r2, [r0, r5]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000abc:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac0:	791b      	ldrb	r3, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac2:	fb00 f001 	mul.w	r0, r0, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac6:	fb03 f302 	mul.w	r3, r3, r2
		return ((int16_t)op2 + op0) >> 1;
 8000aca:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000ace:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000ad2:	4418      	add	r0, r3
 8000ad4:	f340 0047 	sbfx	r0, r0, #1, #8
}
 8000ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ada:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000adc:	4821      	ldr	r0, [pc, #132]	; (8000b64 <modulate+0x2ec>)
 8000ade:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000ae2:	0a0e      	lsrs	r6, r1, #8
 8000ae4:	5786      	ldrsb	r6, [r0, r6]
 8000ae6:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000aea:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000aec:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000af0:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	5681      	ldrsb	r1, [r0, r2]
 8000af8:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000afc:	4818      	ldr	r0, [pc, #96]	; (8000b60 <modulate+0x2e8>)
 8000afe:	fb02 f201 	mul.w	r2, r2, r1
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b02:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8000b06:	eb02 2114 	add.w	r1, r2, r4, lsr #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b0a:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8000b0e:	b2c9      	uxtb	r1, r1
 8000b10:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b12:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b14:	5682      	ldrsb	r2, [r0, r2]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b16:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8000b1a:	e7d1      	b.n	8000ac0 <modulate+0x248>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b1c:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <modulate+0x2ec>)
 8000b20:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000b24:	0a0f      	lsrs	r7, r1, #8
 8000b26:	0a26      	lsrs	r6, r4, #8
 8000b28:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
 8000b2c:	57c4      	ldrsb	r4, [r0, r7]
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b2e:	5786      	ldrsb	r6, [r0, r6]
 8000b30:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b34:	fb01 f404 	mul.w	r4, r1, r4
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b38:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b3c:	0a11      	lsrs	r1, r2, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b3e:	0a2a      	lsrs	r2, r5, #8
 8000b40:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b44:	eb01 11e4 	add.w	r1, r1, r4, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <modulate+0x2e8>)
 8000b4a:	b2c9      	uxtb	r1, r1
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b50:	5682      	ldrsb	r2, [r0, r2]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b52:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
 8000b56:	e7b3      	b.n	8000ac0 <modulate+0x248>
 8000b58:	200000bc 	.word	0x200000bc
 8000b5c:	20000280 	.word	0x20000280
 8000b60:	08004560 	.word	0x08004560
 8000b64:	08004460 	.word	0x08004460
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b68:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b6a:	483d      	ldr	r0, [pc, #244]	; (8000c60 <modulate+0x3e8>)
 8000b6c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000b70:	0a09      	lsrs	r1, r1, #8
 8000b72:	5640      	ldrsb	r0, [r0, r1]
 8000b74:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000b78:	4e3a      	ldr	r6, [pc, #232]	; (8000c64 <modulate+0x3ec>)
 8000b7a:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b7e:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000b82:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b86:	eb01 2014 	add.w	r0, r1, r4, lsr #8
 8000b8a:	b2c0      	uxtb	r0, r0
 8000b8c:	b2d4      	uxtb	r4, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b8e:	eb01 2215 	add.w	r2, r1, r5, lsr #8
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b92:	5737      	ldrsb	r7, [r6, r4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b94:	5635      	ldrsb	r5, [r6, r0]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b96:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b9a:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8000b9e:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba0:	56b4      	ldrsb	r4, [r6, r2]
 8000ba2:	791a      	ldrb	r2, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba4:	fb01 f307 	mul.w	r3, r1, r7
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba8:	fb00 f105 	mul.w	r1, r0, r5
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bac:	fb02 f204 	mul.w	r2, r2, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 8000bb0:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000bb4:	f341 11c7 	sbfx	r1, r1, #7, #8
		return ((int16_t)op2 + op1 + op0) / 3;
 8000bb8:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000bbc:	440b      	add	r3, r1
 8000bbe:	482a      	ldr	r0, [pc, #168]	; (8000c68 <modulate+0x3f0>)
 8000bc0:	4413      	add	r3, r2
 8000bc2:	fb80 2003 	smull	r2, r0, r0, r3
 8000bc6:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000bca:	b240      	sxtb	r0, r0
}
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bce:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000bd0:	4823      	ldr	r0, [pc, #140]	; (8000c60 <modulate+0x3e8>)
 8000bd2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000bd6:	0a09      	lsrs	r1, r1, #8
 8000bd8:	5640      	ldrsb	r0, [r0, r1]
 8000bda:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000bde:	4e21      	ldr	r6, [pc, #132]	; (8000c64 <modulate+0x3ec>)
 8000be0:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000be4:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000be8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bec:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8000bf0:	b2d0      	uxtb	r0, r2
 8000bf2:	b2ca      	uxtb	r2, r1
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf4:	f916 c000 	ldrsb.w	ip, [r6, r0]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf8:	56b7      	ldrsb	r7, [r6, r2]
 8000bfa:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bfe:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c02:	7919      	ldrb	r1, [r3, #4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c04:	fb00 f007 	mul.w	r0, r0, r7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c08:	fb02 f30c 	mul.w	r3, r2, ip
 8000c0c:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c0e:	5774      	ldrsb	r4, [r6, r5]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c10:	fb01 f204 	mul.w	r2, r1, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 8000c14:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000c18:	f340 11c7 	sbfx	r1, r0, #7, #8
 8000c1c:	e7cc      	b.n	8000bb8 <modulate+0x340>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c1e:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c20:	480f      	ldr	r0, [pc, #60]	; (8000c60 <modulate+0x3e8>)
 8000c22:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000c26:	0a09      	lsrs	r1, r1, #8
 8000c28:	5641      	ldrsb	r1, [r0, r1]
 8000c2a:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c2e:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c30:	fb00 f001 	mul.w	r0, r0, r1
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000c34:	490b      	ldr	r1, [pc, #44]	; (8000c64 <modulate+0x3ec>)
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c36:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 8000c3a:	0a24      	lsrs	r4, r4, #8
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	568f      	ldrsb	r7, [r1, r2]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c40:	570e      	ldrsb	r6, [r1, r4]
 8000c42:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c46:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8000c4a:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c4c:	574c      	ldrsb	r4, [r1, r5]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c4e:	fb00 f006 	mul.w	r0, r0, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c52:	7919      	ldrb	r1, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c54:	fb02 f307 	mul.w	r3, r2, r7
 8000c58:	e7da      	b.n	8000c10 <modulate+0x398>
	switch (algo) {
 8000c5a:	2000      	movs	r0, #0
}
 8000c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	08004460 	.word	0x08004460
 8000c64:	08004560 	.word	0x08004560
 8000c68:	55555556 	.word	0x55555556

08000c6c <init_synth>:
 *      Author: Tennyson Cheng
 */

#include "synth.h"

void init_synth() {
 8000c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		op_release[i] = 110;//ENV_MAX_RATE;				//default release 128
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
		op_release_inc[i] = calculate_env_inc(op_release[i]);
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c70:	4cc5      	ldr	r4, [pc, #788]	; (8000f88 <init_synth+0x31c>)
		algo = 0x00;								//default algorithm 0
 8000c72:	f04f 0600 	mov.w	r6, #0
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c76:	4623      	mov	r3, r4
 8000c78:	46a3      	mov	fp, r4
 8000c7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c7c:	46a2      	mov	sl, r4
 8000c7e:	881d      	ldrh	r5, [r3, #0]
 8000c80:	4bc2      	ldr	r3, [pc, #776]	; (8000f8c <init_synth+0x320>)
void init_synth() {
 8000c82:	b097      	sub	sp, #92	; 0x5c
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c84:	e9cd 4400 	strd	r4, r4, [sp]
 8000c88:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000c8c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000c90:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000c94:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000c98:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8000c9c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000ca0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000ca4:	9410      	str	r4, [sp, #64]	; 0x40
 8000ca6:	6018      	str	r0, [r3, #0]
 8000ca8:	9411      	str	r4, [sp, #68]	; 0x44
 8000caa:	6059      	str	r1, [r3, #4]
 8000cac:	9412      	str	r4, [sp, #72]	; 0x48
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	819d      	strh	r5, [r3, #12]
 8000cb2:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8000cb6:	835d      	strh	r5, [r3, #26]
 8000cb8:	f8c3 000e 	str.w	r0, [r3, #14]
 8000cbc:	f8c3 1012 	str.w	r1, [r3, #18]
 8000cc0:	f8c3 2016 	str.w	r2, [r3, #22]
 8000cc4:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8000cc8:	61d8      	str	r0, [r3, #28]
		algo = 0x00;								//default algorithm 0
 8000cca:	48b1      	ldr	r0, [pc, #708]	; (8000f90 <init_synth+0x324>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ccc:	46a3      	mov	fp, r4
		algo = 0x00;								//default algorithm 0
 8000cce:	7006      	strb	r6, [r0, #0]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 8000cd0:	f04f 3680 	mov.w	r6, #2155905152	; 0x80808080
 8000cd4:	48af      	ldr	r0, [pc, #700]	; (8000f94 <init_synth+0x328>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000cd6:	46a1      	mov	r9, r4
 8000cd8:	6006      	str	r6, [r0, #0]
 8000cda:	f04f 3610 	mov.w	r6, #269488144	; 0x10101010
 8000cde:	48ae      	ldr	r0, [pc, #696]	; (8000f98 <init_synth+0x32c>)
 8000ce0:	46a0      	mov	r8, r4
 8000ce2:	6006      	str	r6, [r0, #0]
 8000ce4:	f04f 367e 	mov.w	r6, #2122219134	; 0x7e7e7e7e
 8000ce8:	48ac      	ldr	r0, [pc, #688]	; (8000f9c <init_synth+0x330>)
 8000cea:	46a6      	mov	lr, r4
 8000cec:	6006      	str	r6, [r0, #0]
 8000cee:	f04f 3678 	mov.w	r6, #2021161080	; 0x78787878
 8000cf2:	48ab      	ldr	r0, [pc, #684]	; (8000fa0 <init_synth+0x334>)
 8000cf4:	46a4      	mov	ip, r4
 8000cf6:	6006      	str	r6, [r0, #0]
 8000cf8:	f04f 3664 	mov.w	r6, #1684300900	; 0x64646464
 8000cfc:	48a9      	ldr	r0, [pc, #676]	; (8000fa4 <init_synth+0x338>)
 8000cfe:	4627      	mov	r7, r4
 8000d00:	6006      	str	r6, [r0, #0]
 8000d02:	f04f 366e 	mov.w	r6, #1852730990	; 0x6e6e6e6e
 8000d06:	48a8      	ldr	r0, [pc, #672]	; (8000fa8 <init_synth+0x33c>)
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000d08:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8000fbc <init_synth+0x350>
 8000d0c:	6006      	str	r6, [r0, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d0e:	465e      	mov	r6, fp
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000d10:	48a6      	ldr	r0, [pc, #664]	; (8000fac <init_synth+0x340>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d12:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000d16:	f8c0 a000 	str.w	sl, [r0]
 8000d1a:	f8c0 a004 	str.w	sl, [r0, #4]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000d1e:	48a4      	ldr	r0, [pc, #656]	; (8000fb0 <init_synth+0x344>)
 8000d20:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8000fc0 <init_synth+0x354>
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d24:	9413      	str	r4, [sp, #76]	; 0x4c
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000d26:	f8c0 a000 	str.w	sl, [r0]
 8000d2a:	f8c0 a004 	str.w	sl, [r0, #4]
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000d2e:	48a1      	ldr	r0, [pc, #644]	; (8000fb4 <init_synth+0x348>)
 8000d30:	f8df a290 	ldr.w	sl, [pc, #656]	; 8000fc4 <init_synth+0x358>
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d34:	6219      	str	r1, [r3, #32]
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000d36:	f8c0 a000 	str.w	sl, [r0]
 8000d3a:	f8c0 a004 	str.w	sl, [r0, #4]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8000d40:	851d      	strh	r5, [r3, #40]	; 0x28
 8000d42:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000d44:	86dd      	strh	r5, [r3, #54]	; 0x36
 8000d46:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
 8000d4a:	f8a3 5052 	strh.w	r5, [r3, #82]	; 0x52
 8000d4e:	f8a3 5060 	strh.w	r5, [r3, #96]	; 0x60
 8000d52:	f8c3 002a 	str.w	r0, [r3, #42]	; 0x2a
 8000d56:	f8c3 102e 	str.w	r1, [r3, #46]	; 0x2e
 8000d5a:	f8c3 2032 	str.w	r2, [r3, #50]	; 0x32
 8000d5e:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8000d62:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 8000d66:	f8a3 507c 	strh.w	r5, [r3, #124]	; 0x7c
 8000d6a:	6398      	str	r0, [r3, #56]	; 0x38
 8000d6c:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d70:	f8a3 508a 	strh.w	r5, [r3, #138]	; 0x8a
 8000d74:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8000d78:	f8a3 5098 	strh.w	r5, [r3, #152]	; 0x98
 8000d7c:	f8c3 0046 	str.w	r0, [r3, #70]	; 0x46
 8000d80:	f8c3 104a 	str.w	r1, [r3, #74]	; 0x4a
 8000d84:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
 8000d88:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8000d8c:	6558      	str	r0, [r3, #84]	; 0x54
 8000d8e:	6599      	str	r1, [r3, #88]	; 0x58
 8000d90:	65da      	str	r2, [r3, #92]	; 0x5c
 8000d92:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8000d96:	f8c3 0062 	str.w	r0, [r3, #98]	; 0x62
 8000d9a:	f8c3 1066 	str.w	r1, [r3, #102]	; 0x66
 8000d9e:	f8c3 206a 	str.w	r2, [r3, #106]	; 0x6a
 8000da2:	cf07      	ldmia	r7!, {r0, r1, r2}
 8000da4:	6718      	str	r0, [r3, #112]	; 0x70
 8000da6:	6759      	str	r1, [r3, #116]	; 0x74
 8000da8:	679a      	str	r2, [r3, #120]	; 0x78
 8000daa:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000dac:	465e      	mov	r6, fp
 8000dae:	f8c3 007e 	str.w	r0, [r3, #126]	; 0x7e
 8000db2:	f8c3 1082 	str.w	r1, [r3, #130]	; 0x82
 8000db6:	f8c3 2086 	str.w	r2, [r3, #134]	; 0x86
 8000dba:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000dbc:	465e      	mov	r6, fp
 8000dbe:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000dc2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8000dc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000dca:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000dcc:	465e      	mov	r6, fp
 8000dce:	f8c3 009a 	str.w	r0, [r3, #154]	; 0x9a
 8000dd2:	f8c3 109e 	str.w	r1, [r3, #158]	; 0x9e
 8000dd6:	f8c3 20a2 	str.w	r2, [r3, #162]	; 0xa2
 8000dda:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ddc:	465e      	mov	r6, fp
 8000dde:	f8a3 50a6 	strh.w	r5, [r3, #166]	; 0xa6
 8000de2:	f8a3 50b4 	strh.w	r5, [r3, #180]	; 0xb4
 8000de6:	f8a3 50c2 	strh.w	r5, [r3, #194]	; 0xc2
 8000dea:	f8a3 50d0 	strh.w	r5, [r3, #208]	; 0xd0
 8000dee:	f8a3 50de 	strh.w	r5, [r3, #222]	; 0xde
 8000df2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 8000df6:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8000dfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000dfe:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e00:	465e      	mov	r6, fp
 8000e02:	f8c3 00b6 	str.w	r0, [r3, #182]	; 0xb6
 8000e06:	f8c3 10ba 	str.w	r1, [r3, #186]	; 0xba
 8000e0a:	f8c3 20be 	str.w	r2, [r3, #190]	; 0xbe
 8000e0e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e10:	465e      	mov	r6, fp
 8000e12:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
 8000e16:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8000e1a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000e1e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e20:	465e      	mov	r6, fp
 8000e22:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
 8000e26:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
 8000e2a:	f8c3 20da 	str.w	r2, [r3, #218]	; 0xda
 8000e2e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e30:	465e      	mov	r6, fp
 8000e32:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000e36:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8000e3a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000e3e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e40:	465e      	mov	r6, fp
 8000e42:	f8a3 50ec 	strh.w	r5, [r3, #236]	; 0xec
 8000e46:	f8a3 50fa 	strh.w	r5, [r3, #250]	; 0xfa
 8000e4a:	f8a3 5108 	strh.w	r5, [r3, #264]	; 0x108
 8000e4e:	f8a3 5116 	strh.w	r5, [r3, #278]	; 0x116
 8000e52:	f8a3 5124 	strh.w	r5, [r3, #292]	; 0x124
 8000e56:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
 8000e5a:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
 8000e5e:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
 8000e62:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e64:	465e      	mov	r6, fp
 8000e66:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
 8000e6a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 8000e6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000e72:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e74:	465e      	mov	r6, fp
 8000e76:	f8c3 010a 	str.w	r0, [r3, #266]	; 0x10a
 8000e7a:	f8c3 110e 	str.w	r1, [r3, #270]	; 0x10e
 8000e7e:	f8c3 2112 	str.w	r2, [r3, #274]	; 0x112
 8000e82:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e84:	465e      	mov	r6, fp
 8000e86:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000e8a:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
 8000e8e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8000e92:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e94:	465e      	mov	r6, fp
 8000e96:	f8a3 5132 	strh.w	r5, [r3, #306]	; 0x132
 8000e9a:	f8a3 5140 	strh.w	r5, [r3, #320]	; 0x140
 8000e9e:	f8a3 514e 	strh.w	r5, [r3, #334]	; 0x14e
 8000ea2:	f8a3 515c 	strh.w	r5, [r3, #348]	; 0x15c
 8000ea6:	f8c3 0126 	str.w	r0, [r3, #294]	; 0x126
 8000eaa:	f8c3 112a 	str.w	r1, [r3, #298]	; 0x12a
 8000eae:	f8c3 212e 	str.w	r2, [r3, #302]	; 0x12e
 8000eb2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000eb4:	465e      	mov	r6, fp
 8000eb6:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8000eba:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
 8000ebe:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8000ec2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ec4:	465e      	mov	r6, fp
 8000ec6:	f8c3 0142 	str.w	r0, [r3, #322]	; 0x142
 8000eca:	f8c3 1146 	str.w	r1, [r3, #326]	; 0x146
 8000ece:	f8c3 214a 	str.w	r2, [r3, #330]	; 0x14a
 8000ed2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ed4:	465e      	mov	r6, fp
 8000ed6:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8000eda:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
 8000ede:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8000ee2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ee4:	465e      	mov	r6, fp
 8000ee6:	f8c3 015e 	str.w	r0, [r3, #350]	; 0x15e
 8000eea:	f8c3 1162 	str.w	r1, [r3, #354]	; 0x162
 8000eee:	f8c3 2166 	str.w	r2, [r3, #358]	; 0x166
 8000ef2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ef4:	465e      	mov	r6, fp
 8000ef6:	f8a3 516a 	strh.w	r5, [r3, #362]	; 0x16a
 8000efa:	f8a3 5178 	strh.w	r5, [r3, #376]	; 0x178
 8000efe:	f8a3 5186 	strh.w	r5, [r3, #390]	; 0x186
 8000f02:	f8a3 5194 	strh.w	r5, [r3, #404]	; 0x194
 8000f06:	f8a3 51a2 	strh.w	r5, [r3, #418]	; 0x1a2
 8000f0a:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
 8000f0e:	f8c3 1170 	str.w	r1, [r3, #368]	; 0x170
 8000f12:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8000f16:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f18:	f8c3 017a 	str.w	r0, [r3, #378]	; 0x17a
 8000f1c:	f8c3 117e 	str.w	r1, [r3, #382]	; 0x17e
 8000f20:	f8c3 2182 	str.w	r2, [r3, #386]	; 0x182
 8000f24:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8000f28:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8000f2c:	f1a6 020c 	sub.w	r2, r6, #12
 8000f30:	4616      	mov	r6, r2
 8000f32:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8000f36:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8000f3a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f3c:	f8c3 219e 	str.w	r2, [r3, #414]	; 0x19e
 8000f40:	f1a6 020c 	sub.w	r2, r6, #12
 8000f44:	4616      	mov	r6, r2
 8000f46:	f8c3 0196 	str.w	r0, [r3, #406]	; 0x196
 8000f4a:	f8c3 119a 	str.w	r1, [r3, #410]	; 0x19a
 8000f4e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f50:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8000f54:	f1a6 020c 	sub.w	r2, r6, #12
 8000f58:	f8a3 51b0 	strh.w	r5, [r3, #432]	; 0x1b0
 8000f5c:	f8a3 51be 	strh.w	r5, [r3, #446]	; 0x1be
 8000f60:	4615      	mov	r5, r2
 8000f62:	f8c3 01a4 	str.w	r0, [r3, #420]	; 0x1a4
 8000f66:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
 8000f6a:	cd07      	ldmia	r5!, {r0, r1, r2}
		}
	}
	env_period = ENV_MAX_PERIOD;
 8000f6c:	f240 5562 	movw	r5, #1378	; 0x562
 8000f70:	4c11      	ldr	r4, [pc, #68]	; (8000fb8 <init_synth+0x34c>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000f72:	f8c3 01b2 	str.w	r0, [r3, #434]	; 0x1b2
	env_period = ENV_MAX_PERIOD;
 8000f76:	8025      	strh	r5, [r4, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000f78:	f8c3 11b6 	str.w	r1, [r3, #438]	; 0x1b6
 8000f7c:	f8c3 21ba 	str.w	r2, [r3, #442]	; 0x1ba
}
 8000f80:	b017      	add	sp, #92	; 0x5c
 8000f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f86:	bf00      	nop
 8000f88:	08004350 	.word	0x08004350
 8000f8c:	200000bc 	.word	0x200000bc
 8000f90:	20000280 	.word	0x20000280
 8000f94:	20000298 	.word	0x20000298
 8000f98:	200002b4 	.word	0x200002b4
 8000f9c:	20000288 	.word	0x20000288
 8000fa0:	200002ac 	.word	0x200002ac
 8000fa4:	2000027c 	.word	0x2000027c
 8000fa8:	20000284 	.word	0x20000284
 8000fac:	200002a4 	.word	0x200002a4
 8000fb0:	2000029c 	.word	0x2000029c
 8000fb4:	2000028c 	.word	0x2000028c
 8000fb8:	20000282 	.word	0x20000282
 8000fbc:	2aaa2aaa 	.word	0x2aaa2aaa
 8000fc0:	0e380e38 	.word	0x0e380e38
 8000fc4:	06bc06bc 	.word	0x06bc06bc

08000fc8 <clear_voices>:

void clear_voices() {
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		op[0][i].note_value = -1;
 8000fc8:	22ff      	movs	r2, #255	; 0xff
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <clear_voices+0x20>)
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	739a      	strb	r2, [r3, #14]
 8000fd0:	771a      	strb	r2, [r3, #28]
 8000fd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8000fde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000fe2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}
}
 8000fe6:	4770      	bx	lr
 8000fe8:	200000bc 	.word	0x200000bc

08000fec <add_voice>:

void add_voice(uint8_t note_value) {
 8000fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t voice_index, released_voice = -1;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000ff0:	4c74      	ldr	r4, [pc, #464]	; (80011c4 <add_voice+0x1d8>)
void add_voice(uint8_t note_value) {
 8000ff2:	4607      	mov	r7, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000ff4:	7823      	ldrb	r3, [r4, #0]
 8000ff6:	2bff      	cmp	r3, #255	; 0xff
 8000ff8:	f000 80bc 	beq.w	8001174 <add_voice+0x188>
 8000ffc:	7ba2      	ldrb	r2, [r4, #14]
 8000ffe:	2aff      	cmp	r2, #255	; 0xff
 8001000:	f000 80bd 	beq.w	800117e <add_voice+0x192>
 8001004:	7f22      	ldrb	r2, [r4, #28]
 8001006:	2aff      	cmp	r2, #255	; 0xff
 8001008:	f000 80be 	beq.w	8001188 <add_voice+0x19c>
 800100c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8001010:	2aff      	cmp	r2, #255	; 0xff
 8001012:	f000 80be 	beq.w	8001192 <add_voice+0x1a6>
 8001016:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800101a:	2aff      	cmp	r2, #255	; 0xff
 800101c:	f000 80be 	beq.w	800119c <add_voice+0x1b0>
 8001020:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8001024:	2aff      	cmp	r2, #255	; 0xff
 8001026:	f000 80be 	beq.w	80011a6 <add_voice+0x1ba>
 800102a:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 800102e:	2aff      	cmp	r2, #255	; 0xff
 8001030:	f000 80be 	beq.w	80011b0 <add_voice+0x1c4>
 8001034:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8001038:	2aff      	cmp	r2, #255	; 0xff
 800103a:	f000 80c0 	beq.w	80011be <add_voice+0x1d2>
 800103e:	2108      	movs	r1, #8
 8001040:	460d      	mov	r5, r1
			break;
		}
	}
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001042:	429f      	cmp	r7, r3
 8001044:	f000 8099 	beq.w	800117a <add_voice+0x18e>
			voice_index = i;
			break;
		}
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001048:	7aa3      	ldrb	r3, [r4, #10]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800104a:	7ba2      	ldrb	r2, [r4, #14]
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800104c:	2b03      	cmp	r3, #3
 800104e:	bf14      	ite	ne
 8001050:	23ff      	movne	r3, #255	; 0xff
 8001052:	2300      	moveq	r3, #0
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001054:	42ba      	cmp	r2, r7
 8001056:	f000 8095 	beq.w	8001184 <add_voice+0x198>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800105a:	7e20      	ldrb	r0, [r4, #24]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800105c:	7f22      	ldrb	r2, [r4, #28]
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800105e:	2803      	cmp	r0, #3
 8001060:	bf08      	it	eq
 8001062:	2301      	moveq	r3, #1
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001064:	42ba      	cmp	r2, r7
 8001066:	f000 8092 	beq.w	800118e <add_voice+0x1a2>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800106a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800106e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001072:	2803      	cmp	r0, #3
 8001074:	bf08      	it	eq
 8001076:	2302      	moveq	r3, #2
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001078:	42ba      	cmp	r2, r7
 800107a:	f000 808d 	beq.w	8001198 <add_voice+0x1ac>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800107e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001082:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001086:	2803      	cmp	r0, #3
 8001088:	bf08      	it	eq
 800108a:	2303      	moveq	r3, #3
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800108c:	42ba      	cmp	r2, r7
 800108e:	f000 8088 	beq.w	80011a2 <add_voice+0x1b6>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001092:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001096:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800109a:	2803      	cmp	r0, #3
 800109c:	bf08      	it	eq
 800109e:	2304      	moveq	r3, #4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80010a0:	42ba      	cmp	r2, r7
 80010a2:	f000 8083 	beq.w	80011ac <add_voice+0x1c0>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80010a6:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80010aa:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80010ae:	2803      	cmp	r0, #3
 80010b0:	bf08      	it	eq
 80010b2:	2305      	moveq	r3, #5
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80010b4:	42ba      	cmp	r2, r7
 80010b6:	d07e      	beq.n	80011b6 <add_voice+0x1ca>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80010b8:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80010bc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80010c0:	2803      	cmp	r0, #3
 80010c2:	bf08      	it	eq
 80010c4:	2306      	moveq	r3, #6
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80010c6:	42ba      	cmp	r2, r7
 80010c8:	d077      	beq.n	80011ba <add_voice+0x1ce>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80010ca:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 80010ce:	2a03      	cmp	r2, #3
 80010d0:	d03a      	beq.n	8001148 <add_voice+0x15c>
			released_voice = i;
		}
	}
	if (voice_index == MAX_VOICES) {
 80010d2:	2d08      	cmp	r5, #8
 80010d4:	d102      	bne.n	80010dc <add_voice+0xf0>
		if (released_voice == (uint8_t)-1) {
 80010d6:	2bff      	cmp	r3, #255	; 0xff
 80010d8:	d03a      	beq.n	8001150 <add_voice+0x164>
 80010da:	4619      	mov	r1, r3
		}
		else {
			voice_index = released_voice;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 80010dc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80010e0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
		if (op_index != 0)	{
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
		}
		else {
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 80010e4:	4626      	mov	r6, r4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80010e6:	2501      	movs	r5, #1
 80010e8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80011c8 <add_voice+0x1dc>
 80010ec:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80011cc <add_voice+0x1e0>
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 80010f0:	f04f 0a00 	mov.w	sl, #0
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 80010f4:	4638      	mov	r0, r7
		op[op_index][voice_index].note_value = note_value;										//store note
 80010f6:	7027      	strb	r7, [r4, #0]
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 80010f8:	f8a4 a008 	strh.w	sl, [r4, #8]
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 80010fc:	f818 bb01 	ldrb.w	fp, [r8], #1
 8001100:	f7ff fa62 	bl	80005c8 <note_to_freq>
 8001104:	fb00 f30b 	mul.w	r3, r0, fp
		if (op_index != 0)	{
 8001108:	2d01      	cmp	r5, #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 800110a:	ea4f 1323 	mov.w	r3, r3, asr #4
 800110e:	8063      	strh	r3, [r4, #2]
		if (op_index != 0)	{
 8001110:	d020      	beq.n	8001154 <add_voice+0x168>
		}

		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001112:	f8b9 2000 	ldrh.w	r2, [r9]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8001116:	88f3      	ldrh	r3, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001118:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800111c:	fab1 f181 	clz	r1, r1
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8001120:	f818 0c01 	ldrb.w	r0, [r8, #-1]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001124:	0949      	lsrs	r1, r1, #5
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8001126:	fb03 f300 	mul.w	r3, r3, r0
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 800112a:	2d04      	cmp	r5, #4
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 800112c:	ea4f 1323 	mov.w	r3, r3, asr #4
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8001130:	f884 a004 	strb.w	sl, [r4, #4]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 8001134:	80e3      	strh	r3, [r4, #6]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001136:	81a2      	strh	r2, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001138:	72a1      	strb	r1, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 800113a:	d009      	beq.n	8001150 <add_voice+0x164>
 800113c:	3501      	adds	r5, #1
 800113e:	b2ed      	uxtb	r5, r5
 8001140:	3470      	adds	r4, #112	; 0x70
 8001142:	f109 0902 	add.w	r9, r9, #2
 8001146:	e7d3      	b.n	80010f0 <add_voice+0x104>
	if (voice_index == MAX_VOICES) {
 8001148:	2d08      	cmp	r5, #8
 800114a:	d1c7      	bne.n	80010dc <add_voice+0xf0>
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800114c:	2307      	movs	r3, #7
 800114e:	e7c4      	b.n	80010da <add_voice+0xee>
		}
		else {
			op[op_index][voice_index].adsr_state = ATTACK;											//else, start on attack state
		}
	}
}
 8001150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8001154:	8870      	ldrh	r0, [r6, #2]
 8001156:	f7ff fa3d 	bl	80005d4 <calculate_delta>
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 800115a:	f8b9 3000 	ldrh.w	r3, [r9]
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 800115e:	80f0      	strh	r0, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001160:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 8001164:	fab2 f282 	clz	r2, r2
 8001168:	0952      	lsrs	r2, r2, #5
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 800116a:	f884 a004 	strb.w	sl, [r4, #4]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 800116e:	81a3      	strh	r3, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001170:	72a2      	strb	r2, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001172:	e7e3      	b.n	800113c <add_voice+0x150>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001174:	2100      	movs	r1, #0
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001176:	460d      	mov	r5, r1
 8001178:	e763      	b.n	8001042 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800117a:	2100      	movs	r1, #0
 800117c:	e7ae      	b.n	80010dc <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800117e:	2101      	movs	r1, #1
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001180:	460d      	mov	r5, r1
 8001182:	e75e      	b.n	8001042 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001184:	2101      	movs	r1, #1
 8001186:	e7a9      	b.n	80010dc <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001188:	2102      	movs	r1, #2
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 800118a:	460d      	mov	r5, r1
 800118c:	e759      	b.n	8001042 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800118e:	2102      	movs	r1, #2
 8001190:	e7a4      	b.n	80010dc <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001192:	2103      	movs	r1, #3
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001194:	460d      	mov	r5, r1
 8001196:	e754      	b.n	8001042 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001198:	2103      	movs	r1, #3
 800119a:	e79f      	b.n	80010dc <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800119c:	2104      	movs	r1, #4
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 800119e:	460d      	mov	r5, r1
 80011a0:	e74f      	b.n	8001042 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011a2:	2104      	movs	r1, #4
 80011a4:	e79a      	b.n	80010dc <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80011a6:	2105      	movs	r1, #5
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80011a8:	460d      	mov	r5, r1
 80011aa:	e74a      	b.n	8001042 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011ac:	2105      	movs	r1, #5
 80011ae:	e795      	b.n	80010dc <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80011b0:	2106      	movs	r1, #6
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80011b2:	460d      	mov	r5, r1
 80011b4:	e745      	b.n	8001042 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011b6:	2106      	movs	r1, #6
 80011b8:	e790      	b.n	80010dc <add_voice+0xf0>
 80011ba:	2107      	movs	r1, #7
 80011bc:	e78e      	b.n	80010dc <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80011be:	2107      	movs	r1, #7
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80011c0:	460d      	mov	r5, r1
 80011c2:	e73e      	b.n	8001042 <add_voice+0x56>
 80011c4:	200000bc 	.word	0x200000bc
 80011c8:	200002b4 	.word	0x200002b4
 80011cc:	200002a4 	.word	0x200002a4

080011d0 <release_voice>:

void release_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <release_voice+0x78>)
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4282      	cmp	r2, r0
 80011d6:	d028      	beq.n	800122a <release_voice+0x5a>
 80011d8:	7b9a      	ldrb	r2, [r3, #14]
 80011da:	4282      	cmp	r2, r0
 80011dc:	d027      	beq.n	800122e <release_voice+0x5e>
 80011de:	7f1a      	ldrb	r2, [r3, #28]
 80011e0:	4282      	cmp	r2, r0
 80011e2:	d026      	beq.n	8001232 <release_voice+0x62>
 80011e4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80011e8:	4282      	cmp	r2, r0
 80011ea:	d024      	beq.n	8001236 <release_voice+0x66>
 80011ec:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80011f0:	4282      	cmp	r2, r0
 80011f2:	d022      	beq.n	800123a <release_voice+0x6a>
 80011f4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80011f8:	4282      	cmp	r2, r0
 80011fa:	d020      	beq.n	800123e <release_voice+0x6e>
 80011fc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001200:	4282      	cmp	r2, r0
 8001202:	d01e      	beq.n	8001242 <release_voice+0x72>
 8001204:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8001208:	4282      	cmp	r2, r0
 800120a:	bf14      	ite	ne
 800120c:	2008      	movne	r0, #8
 800120e:	2007      	moveq	r0, #7
			break;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op[op_index][voice_index].adsr_state = RELEASE;
 8001210:	2203      	movs	r2, #3
 8001212:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001216:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800121a:	729a      	strb	r2, [r3, #10]
 800121c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8001220:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8001224:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	}
}
 8001228:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 800122a:	2000      	movs	r0, #0
 800122c:	e7f0      	b.n	8001210 <release_voice+0x40>
 800122e:	2001      	movs	r0, #1
 8001230:	e7ee      	b.n	8001210 <release_voice+0x40>
 8001232:	2002      	movs	r0, #2
 8001234:	e7ec      	b.n	8001210 <release_voice+0x40>
 8001236:	2003      	movs	r0, #3
 8001238:	e7ea      	b.n	8001210 <release_voice+0x40>
 800123a:	2004      	movs	r0, #4
 800123c:	e7e8      	b.n	8001210 <release_voice+0x40>
 800123e:	2005      	movs	r0, #5
 8001240:	e7e6      	b.n	8001210 <release_voice+0x40>
 8001242:	2006      	movs	r0, #6
 8001244:	e7e4      	b.n	8001210 <release_voice+0x40>
 8001246:	bf00      	nop
 8001248:	200000bc 	.word	0x200000bc

0800124c <synth_sample>:

int16_t synth_sample() {
 800124c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t output_volume = 0x0800;											//default output volume 2048
	if (--env_period == 0x00) {												//decrement and check envelope period
 8001250:	4bbf      	ldr	r3, [pc, #764]	; (8001550 <synth_sample+0x304>)
 8001252:	881d      	ldrh	r5, [r3, #0]
 8001254:	3d01      	subs	r5, #1
 8001256:	b2ad      	uxth	r5, r5
 8001258:	bb2d      	cbnz	r5, 80012a6 <synth_sample+0x5a>
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 800125a:	f240 5262 	movw	r2, #1378	; 0x562
	int16_t output_volume = 0x0800;											//default output volume 2048
 800125e:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8001262:	4cbc      	ldr	r4, [pc, #752]	; (8001554 <synth_sample+0x308>)
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001264:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8001568 <synth_sample+0x31c>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8001268:	4fbb      	ldr	r7, [pc, #748]	; (8001558 <synth_sample+0x30c>)
 800126a:	4ebc      	ldr	r6, [pc, #752]	; (800155c <synth_sample+0x310>)
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 800126c:	801a      	strh	r2, [r3, #0]
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800126e:	7823      	ldrb	r3, [r4, #0]
 8001270:	b2e8      	uxtb	r0, r5
 8001272:	2bff      	cmp	r3, #255	; 0xff
 8001274:	d00f      	beq.n	8001296 <synth_sample+0x4a>
		switch (op[op_index][voice_index].adsr_state) {
 8001276:	7aa3      	ldrb	r3, [r4, #10]
 8001278:	2b04      	cmp	r3, #4
 800127a:	f200 8095 	bhi.w	80013a8 <synth_sample+0x15c>
 800127e:	e8df f003 	tbb	[pc, r3]
 8001282:	6b7c      	.short	0x6b7c
 8001284:	6093      	.short	0x6093
 8001286:	03          	.byte	0x03
 8001287:	00          	.byte	0x00
static inline void delete_voice(uint8_t voice_index) { op[0][voice_index].note_value = -1; };
 8001288:	23ff      	movs	r3, #255	; 0xff
 800128a:	7023      	strb	r3, [r4, #0]
				cycle_envelope(voice_index);
				output_volume += modulate(voice_index);
 800128c:	f7ff faf4 	bl	8000878 <modulate>
 8001290:	4480      	add	r8, r0
 8001292:	fa0f f888 	sxth.w	r8, r8
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
 8001296:	3501      	adds	r5, #1
 8001298:	2d08      	cmp	r5, #8
 800129a:	f104 040e 	add.w	r4, r4, #14
 800129e:	d1e6      	bne.n	800126e <synth_sample+0x22>
				output_volume += modulate(voice_index);
			}
		}
	}
	return output_volume;
}
 80012a0:	4640      	mov	r0, r8
 80012a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012a6:	4cab      	ldr	r4, [pc, #684]	; (8001554 <synth_sample+0x308>)
	if (--env_period == 0x00) {												//decrement and check envelope period
 80012a8:	801d      	strh	r5, [r3, #0]
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012aa:	7823      	ldrb	r3, [r4, #0]
 80012ac:	2bff      	cmp	r3, #255	; 0xff
 80012ae:	d173      	bne.n	8001398 <synth_sample+0x14c>
	int16_t output_volume = 0x0800;											//default output volume 2048
 80012b0:	f44f 6800 	mov.w	r8, #2048	; 0x800
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012b4:	7ba3      	ldrb	r3, [r4, #14]
 80012b6:	2bff      	cmp	r3, #255	; 0xff
 80012b8:	d005      	beq.n	80012c6 <synth_sample+0x7a>
				output_volume += modulate(voice_index);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fadc 	bl	8000878 <modulate>
 80012c0:	4480      	add	r8, r0
 80012c2:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012c6:	7f23      	ldrb	r3, [r4, #28]
 80012c8:	2bff      	cmp	r3, #255	; 0xff
 80012ca:	d005      	beq.n	80012d8 <synth_sample+0x8c>
				output_volume += modulate(voice_index);
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff fad3 	bl	8000878 <modulate>
 80012d2:	4480      	add	r8, r0
 80012d4:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012d8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80012dc:	2bff      	cmp	r3, #255	; 0xff
 80012de:	d005      	beq.n	80012ec <synth_sample+0xa0>
				output_volume += modulate(voice_index);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f7ff fac9 	bl	8000878 <modulate>
 80012e6:	4480      	add	r8, r0
 80012e8:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80012f0:	2bff      	cmp	r3, #255	; 0xff
 80012f2:	d005      	beq.n	8001300 <synth_sample+0xb4>
				output_volume += modulate(voice_index);
 80012f4:	2004      	movs	r0, #4
 80012f6:	f7ff fabf 	bl	8000878 <modulate>
 80012fa:	4480      	add	r8, r0
 80012fc:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001300:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001304:	2bff      	cmp	r3, #255	; 0xff
 8001306:	d005      	beq.n	8001314 <synth_sample+0xc8>
				output_volume += modulate(voice_index);
 8001308:	2005      	movs	r0, #5
 800130a:	f7ff fab5 	bl	8000878 <modulate>
 800130e:	4480      	add	r8, r0
 8001310:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001314:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8001318:	2bff      	cmp	r3, #255	; 0xff
 800131a:	d005      	beq.n	8001328 <synth_sample+0xdc>
				output_volume += modulate(voice_index);
 800131c:	2006      	movs	r0, #6
 800131e:	f7ff faab 	bl	8000878 <modulate>
 8001322:	4480      	add	r8, r0
 8001324:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001328:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 800132c:	2bff      	cmp	r3, #255	; 0xff
 800132e:	d0b7      	beq.n	80012a0 <synth_sample+0x54>
				output_volume += modulate(voice_index);
 8001330:	2007      	movs	r0, #7
 8001332:	f7ff faa1 	bl	8000878 <modulate>
 8001336:	4480      	add	r8, r0
 8001338:	fa0f f888 	sxth.w	r8, r8
}
 800133c:	4640      	mov	r0, r8
 800133e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001342:	4a87      	ldr	r2, [pc, #540]	; (8001560 <synth_sample+0x314>)
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	8812      	ldrh	r2, [r2, #0]
 8001348:	4293      	cmp	r3, r2
 800134a:	f080 8124 	bcs.w	8001596 <synth_sample+0x34a>
				op[op_index][voice_index].env_amp = 0;
 800134e:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001350:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001352:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SILENT;
 8001354:	72a2      	strb	r2, [r4, #10]
 8001356:	e028      	b.n	80013aa <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8001358:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 800135c:	8839      	ldrh	r1, [r7, #0]
 800135e:	7832      	ldrb	r2, [r6, #0]
 8001360:	ebac 0e01 	sub.w	lr, ip, r1
 8001364:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001368:	ea4f 2302 	mov.w	r3, r2, lsl #8
 800136c:	db5d      	blt.n	800142a <synth_sample+0x1de>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 800136e:	458c      	cmp	ip, r1
 8001370:	d35b      	bcc.n	800142a <synth_sample+0x1de>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001372:	fa1f f38e 	uxth.w	r3, lr
 8001376:	81a3      	strh	r3, [r4, #12]
 8001378:	e017      	b.n	80013aa <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 800137a:	4a7a      	ldr	r2, [pc, #488]	; (8001564 <synth_sample+0x318>)
 800137c:	89a3      	ldrh	r3, [r4, #12]
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	4413      	add	r3, r2
 8001382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001386:	f2c0 8103 	blt.w	8001590 <synth_sample+0x344>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800138a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 800138e:	2101      	movs	r1, #1
 8001390:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001392:	81a2      	strh	r2, [r4, #12]
				op[op_index][voice_index].adsr_state = DECAY;
 8001394:	72a1      	strb	r1, [r4, #10]
 8001396:	e008      	b.n	80013aa <synth_sample+0x15e>
				output_volume += modulate(voice_index);
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fa6d 	bl	8000878 <modulate>
 800139e:	f500 6800 	add.w	r8, r0, #2048	; 0x800
 80013a2:	fa0f f888 	sxth.w	r8, r8
 80013a6:	e785      	b.n	80012b4 <synth_sample+0x68>
 80013a8:	89a3      	ldrh	r3, [r4, #12]
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013aa:	f899 2000 	ldrb.w	r2, [r9]
 80013ae:	0a1b      	lsrs	r3, r3, #8
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 80013b4:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013b8:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 80013ba:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013bc:	7123      	strb	r3, [r4, #4]
		switch (op[op_index][voice_index].adsr_state) {
 80013be:	d059      	beq.n	8001474 <synth_sample+0x228>
 80013c0:	2a03      	cmp	r2, #3
 80013c2:	d049      	beq.n	8001458 <synth_sample+0x20c>
 80013c4:	b3b2      	cbz	r2, 8001434 <synth_sample+0x1e8>
 80013c6:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013ca:	f899 2001 	ldrb.w	r2, [r9, #1]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 80013d4:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013d8:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 80013da:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013dc:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		switch (op[op_index][voice_index].adsr_state) {
 80013e0:	d061      	beq.n	80014a6 <synth_sample+0x25a>
 80013e2:	2a03      	cmp	r2, #3
 80013e4:	f000 8089 	beq.w	80014fa <synth_sample+0x2ae>
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d075      	beq.n	80014d8 <synth_sample+0x28c>
 80013ec:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013f0:	f899 2002 	ldrb.w	r2, [r9, #2]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 80013fa:	f894 215a 	ldrb.w	r2, [r4, #346]	; 0x15a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013fe:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8001400:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001402:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
		switch (op[op_index][voice_index].adsr_state) {
 8001406:	f000 80b1 	beq.w	800156c <synth_sample+0x320>
 800140a:	2a03      	cmp	r2, #3
 800140c:	f000 8093 	beq.w	8001536 <synth_sample+0x2ea>
 8001410:	2a00      	cmp	r2, #0
 8001412:	d07f      	beq.n	8001514 <synth_sample+0x2c8>
 8001414:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001418:	f899 2003 	ldrb.w	r2, [r9, #3]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	11db      	asrs	r3, r3, #7
 8001424:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001428:	e730      	b.n	800128c <synth_sample+0x40>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 800142a:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 800142c:	b29b      	uxth	r3, r3
 800142e:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001430:	72a2      	strb	r2, [r4, #10]
 8001432:	e7ba      	b.n	80013aa <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001434:	4a4b      	ldr	r2, [pc, #300]	; (8001564 <synth_sample+0x318>)
 8001436:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800143a:	8852      	ldrh	r2, [r2, #2]
 800143c:	4413      	add	r3, r2
 800143e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001442:	f2c0 80b1 	blt.w	80015a8 <synth_sample+0x35c>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 800144a:	2101      	movs	r1, #1
 800144c:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800144e:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = DECAY;
 8001452:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
 8001456:	e7b8      	b.n	80013ca <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001458:	4a41      	ldr	r2, [pc, #260]	; (8001560 <synth_sample+0x314>)
 800145a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800145e:	8852      	ldrh	r2, [r2, #2]
 8001460:	4293      	cmp	r3, r2
 8001462:	f080 809c 	bcs.w	800159e <synth_sample+0x352>
				op[op_index][voice_index].env_amp = 0;
 8001466:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001468:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 800146a:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SILENT;
 800146e:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 8001472:	e7aa      	b.n	80013ca <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 8001474:	f8b4 c07c 	ldrh.w	ip, [r4, #124]	; 0x7c
 8001478:	8879      	ldrh	r1, [r7, #2]
 800147a:	7872      	ldrb	r2, [r6, #1]
 800147c:	ebac 0e01 	sub.w	lr, ip, r1
 8001480:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001484:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8001488:	db06      	blt.n	8001498 <synth_sample+0x24c>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 800148a:	458c      	cmp	ip, r1
 800148c:	d304      	bcc.n	8001498 <synth_sample+0x24c>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 800148e:	fa1f f38e 	uxth.w	r3, lr
 8001492:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8001496:	e798      	b.n	80013ca <synth_sample+0x17e>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001498:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 800149a:	b29b      	uxth	r3, r3
 800149c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80014a0:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 80014a4:	e791      	b.n	80013ca <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80014a6:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	; 0xec
 80014aa:	88b9      	ldrh	r1, [r7, #4]
 80014ac:	78b2      	ldrb	r2, [r6, #2]
 80014ae:	ebac 0e01 	sub.w	lr, ip, r1
 80014b2:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80014b6:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80014ba:	db06      	blt.n	80014ca <synth_sample+0x27e>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80014bc:	458c      	cmp	ip, r1
 80014be:	d304      	bcc.n	80014ca <synth_sample+0x27e>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80014c0:	fa1f f38e 	uxth.w	r3, lr
 80014c4:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 80014c8:	e792      	b.n	80013f0 <synth_sample+0x1a4>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80014ca:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80014d2:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 80014d6:	e78b      	b.n	80013f0 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 80014d8:	4a22      	ldr	r2, [pc, #136]	; (8001564 <synth_sample+0x318>)
 80014da:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80014de:	8892      	ldrh	r2, [r2, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014e6:	db63      	blt.n	80015b0 <synth_sample+0x364>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 80014ec:	2101      	movs	r1, #1
 80014ee:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014f0:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = DECAY;
 80014f4:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
 80014f8:	e77a      	b.n	80013f0 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 80014fa:	4a19      	ldr	r2, [pc, #100]	; (8001560 <synth_sample+0x314>)
 80014fc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8001500:	8892      	ldrh	r2, [r2, #4]
 8001502:	4293      	cmp	r3, r2
 8001504:	d258      	bcs.n	80015b8 <synth_sample+0x36c>
				op[op_index][voice_index].env_amp = 0;
 8001506:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001508:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 800150a:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SILENT;
 800150e:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001512:	e76d      	b.n	80013f0 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001514:	4a13      	ldr	r2, [pc, #76]	; (8001564 <synth_sample+0x318>)
 8001516:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 800151a:	88d2      	ldrh	r2, [r2, #6]
 800151c:	4413      	add	r3, r2
 800151e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001522:	db55      	blt.n	80015d0 <synth_sample+0x384>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001524:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001528:	2101      	movs	r1, #1
 800152a:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800152c:	f8a4 215c 	strh.w	r2, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = DECAY;
 8001530:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
 8001534:	e770      	b.n	8001418 <synth_sample+0x1cc>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <synth_sample+0x314>)
 8001538:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 800153c:	88d2      	ldrh	r2, [r2, #6]
 800153e:	4293      	cmp	r3, r2
 8001540:	d24a      	bcs.n	80015d8 <synth_sample+0x38c>
				op[op_index][voice_index].env_amp = 0;
 8001542:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001544:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001546:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SILENT;
 800154a:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 800154e:	e763      	b.n	8001418 <synth_sample+0x1cc>
 8001550:	20000282 	.word	0x20000282
 8001554:	200000bc 	.word	0x200000bc
 8001558:	2000029c 	.word	0x2000029c
 800155c:	2000027c 	.word	0x2000027c
 8001560:	2000028c 	.word	0x2000028c
 8001564:	200002a4 	.word	0x200002a4
 8001568:	20000298 	.word	0x20000298
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 800156c:	f8b4 c15c 	ldrh.w	ip, [r4, #348]	; 0x15c
 8001570:	88f9      	ldrh	r1, [r7, #6]
 8001572:	78f2      	ldrb	r2, [r6, #3]
 8001574:	ebac 0e01 	sub.w	lr, ip, r1
 8001578:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 800157c:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8001580:	db1f      	blt.n	80015c2 <synth_sample+0x376>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001582:	458c      	cmp	ip, r1
 8001584:	d31d      	bcc.n	80015c2 <synth_sample+0x376>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001586:	fa1f f38e 	uxth.w	r3, lr
 800158a:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 800158e:	e743      	b.n	8001418 <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001590:	b29b      	uxth	r3, r3
 8001592:	81a3      	strh	r3, [r4, #12]
 8001594:	e709      	b.n	80013aa <synth_sample+0x15e>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	81a3      	strh	r3, [r4, #12]
 800159c:	e705      	b.n	80013aa <synth_sample+0x15e>
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80015a6:	e710      	b.n	80013ca <synth_sample+0x17e>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80015ae:	e70c      	b.n	80013ca <synth_sample+0x17e>
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 80015b6:	e71b      	b.n	80013f0 <synth_sample+0x1a4>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 80015c0:	e716      	b.n	80013f0 <synth_sample+0x1a4>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80015c2:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80015ca:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 80015ce:	e723      	b.n	8001418 <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 80015d6:	e71f      	b.n	8001418 <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 80015e0:	e71a      	b.n	8001418 <synth_sample+0x1cc>
 80015e2:	bf00      	nop

080015e4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <display_send_command>:
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
	//turn on display
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
}

void display_send_command(uint8_t cmd) {
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	display_i2c_write(data_LSB | DISPLAY_BIT_E);	//pull enable bit HIGH
	display_i2c_write(data_LSB);					//pull enable bit LOW
}

void display_i2c_write(uint8_t byte) {
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80015ea:	26ff      	movs	r6, #255	; 0xff
 80015ec:	4d27      	ldr	r5, [pc, #156]	; (800168c <display_send_command+0xa4>)
void display_send_command(uint8_t cmd) {
 80015ee:	b085      	sub	sp, #20
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 80015f0:	f020 070f 	bic.w	r7, r0, #15
 80015f4:	f047 0708 	orr.w	r7, r7, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80015f8:	f10d 020f 	add.w	r2, sp, #15
 80015fc:	2301      	movs	r3, #1
 80015fe:	214e      	movs	r1, #78	; 0x4e
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001600:	0104      	lsls	r4, r0, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001602:	9600      	str	r6, [sp, #0]
 8001604:	6828      	ldr	r0, [r5, #0]
 8001606:	f88d 700f 	strb.w	r7, [sp, #15]
 800160a:	f000 fe91 	bl	8002330 <HAL_I2C_Master_Transmit>
	display_i2c_write(cmd_MSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 800160e:	f047 0c04 	orr.w	ip, r7, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001612:	f10d 020f 	add.w	r2, sp, #15
 8001616:	2301      	movs	r3, #1
 8001618:	214e      	movs	r1, #78	; 0x4e
 800161a:	6828      	ldr	r0, [r5, #0]
 800161c:	9600      	str	r6, [sp, #0]
 800161e:	f88d c00f 	strb.w	ip, [sp, #15]
 8001622:	f000 fe85 	bl	8002330 <HAL_I2C_Master_Transmit>
 8001626:	f10d 020f 	add.w	r2, sp, #15
 800162a:	2301      	movs	r3, #1
 800162c:	214e      	movs	r1, #78	; 0x4e
 800162e:	6828      	ldr	r0, [r5, #0]
 8001630:	9600      	str	r6, [sp, #0]
 8001632:	f88d 700f 	strb.w	r7, [sp, #15]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001636:	f044 0408 	orr.w	r4, r4, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800163a:	f000 fe79 	bl	8002330 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);									//wait 5 ms
 800163e:	2005      	movs	r0, #5
 8001640:	f000 fa06 	bl	8001a50 <HAL_Delay>
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001644:	b2e4      	uxtb	r4, r4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001646:	f10d 020f 	add.w	r2, sp, #15
 800164a:	2301      	movs	r3, #1
 800164c:	214e      	movs	r1, #78	; 0x4e
 800164e:	6828      	ldr	r0, [r5, #0]
 8001650:	9600      	str	r6, [sp, #0]
 8001652:	f88d 400f 	strb.w	r4, [sp, #15]
	display_i2c_write(cmd_LSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 8001656:	f044 0704 	orr.w	r7, r4, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800165a:	f000 fe69 	bl	8002330 <HAL_I2C_Master_Transmit>
 800165e:	f10d 020f 	add.w	r2, sp, #15
 8001662:	2301      	movs	r3, #1
 8001664:	214e      	movs	r1, #78	; 0x4e
 8001666:	6828      	ldr	r0, [r5, #0]
 8001668:	9600      	str	r6, [sp, #0]
 800166a:	f88d 700f 	strb.w	r7, [sp, #15]
 800166e:	f000 fe5f 	bl	8002330 <HAL_I2C_Master_Transmit>
 8001672:	2301      	movs	r3, #1
 8001674:	214e      	movs	r1, #78	; 0x4e
 8001676:	6828      	ldr	r0, [r5, #0]
 8001678:	9600      	str	r6, [sp, #0]
 800167a:	f10d 020f 	add.w	r2, sp, #15
 800167e:	f88d 400f 	strb.w	r4, [sp, #15]
 8001682:	f000 fe55 	bl	8002330 <HAL_I2C_Master_Transmit>
}
 8001686:	b005      	add	sp, #20
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	bf00      	nop
 800168c:	20000314 	.word	0x20000314

08001690 <init_display>:
void init_display(I2C_HandleTypeDef* hi2c) {
 8001690:	4602      	mov	r2, r0
 8001692:	b508      	push	{r3, lr}
	display_i2c = hi2c;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <init_display+0x30>)
	display_send_command(init_4_bit_cmd);
 8001696:	2033      	movs	r0, #51	; 0x33
	display_i2c = hi2c;
 8001698:	601a      	str	r2, [r3, #0]
	display_send_command(init_4_bit_cmd);
 800169a:	f7ff ffa5 	bl	80015e8 <display_send_command>
	display_send_command(init_4_bit_cmd);
 800169e:	2032      	movs	r0, #50	; 0x32
 80016a0:	f7ff ffa2 	bl	80015e8 <display_send_command>
	display_send_command(DISPLAY_CMD_FUNC |  DISPLAY_BIT_FUNC_DOUBLE);
 80016a4:	2028      	movs	r0, #40	; 0x28
 80016a6:	f7ff ff9f 	bl	80015e8 <display_send_command>
	display_send_command(DISPLAY_CMD_CLEAR);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff ff9c 	bl	80015e8 <display_send_command>
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
 80016b0:	2006      	movs	r0, #6
 80016b2:	f7ff ff99 	bl	80015e8 <display_send_command>
}
 80016b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
 80016ba:	200e      	movs	r0, #14
 80016bc:	f7ff bf94 	b.w	80015e8 <display_send_command>
 80016c0:	20000314 	.word	0x20000314

080016c4 <display_i2c_dma_write>:
}

void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 80016c4:	b410      	push	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 80016c6:	4c04      	ldr	r4, [pc, #16]	; (80016d8 <display_i2c_dma_write+0x14>)
void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 80016cc:	6820      	ldr	r0, [r4, #0]
 80016ce:	214e      	movs	r1, #78	; 0x4e
}
 80016d0:	bc10      	pop	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 80016d2:	f000 bf79 	b.w	80025c8 <HAL_I2C_Master_Transmit_DMA>
 80016d6:	bf00      	nop
 80016d8:	20000314 	.word	0x20000314

080016dc <display_convert_cmd>:

void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = cmd_MSB;
 80016dc:	7813      	ldrb	r3, [r2, #0]
void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
 80016de:	b470      	push	{r4, r5, r6}
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 80016e0:	f020 040f 	bic.w	r4, r0, #15
 80016e4:	f044 0408 	orr.w	r4, r4, #8
	*(buffer + (*pos)++) = cmd_MSB;
 80016e8:	1c5d      	adds	r5, r3, #1
 80016ea:	7015      	strb	r5, [r2, #0]
 80016ec:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB | DISPLAY_BIT_E;
 80016ee:	7813      	ldrb	r3, [r2, #0]
 80016f0:	f044 0504 	orr.w	r5, r4, #4
 80016f4:	1c5e      	adds	r6, r3, #1
 80016f6:	7016      	strb	r6, [r2, #0]
 80016f8:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB;
 80016fa:	7815      	ldrb	r5, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80016fc:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = cmd_MSB;
 80016fe:	1c68      	adds	r0, r5, #1
 8001700:	7010      	strb	r0, [r2, #0]
 8001702:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = cmd_LSB;
 8001704:	7810      	ldrb	r0, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = cmd_LSB;
 800170c:	1c44      	adds	r4, r0, #1
 800170e:	7014      	strb	r4, [r2, #0]
 8001710:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB | DISPLAY_BIT_E;
 8001712:	7810      	ldrb	r0, [r2, #0]
 8001714:	f043 0404 	orr.w	r4, r3, #4
 8001718:	1c45      	adds	r5, r0, #1
 800171a:	7015      	strb	r5, [r2, #0]
 800171c:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB;
 800171e:	7810      	ldrb	r0, [r2, #0]
 8001720:	1c44      	adds	r4, r0, #1
 8001722:	7014      	strb	r4, [r2, #0]
 8001724:	540b      	strb	r3, [r1, r0]
}
 8001726:	bc70      	pop	{r4, r5, r6}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop

0800172c <display_convert_data>:

void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = data_MSB;
 800172c:	7813      	ldrb	r3, [r2, #0]
void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
 800172e:	b470      	push	{r4, r5, r6}
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 8001730:	f020 040f 	bic.w	r4, r0, #15
 8001734:	f044 0409 	orr.w	r4, r4, #9
	*(buffer + (*pos)++) = data_MSB;
 8001738:	1c5d      	adds	r5, r3, #1
 800173a:	7015      	strb	r5, [r2, #0]
 800173c:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = data_MSB | DISPLAY_BIT_E;
 800173e:	7813      	ldrb	r3, [r2, #0]
 8001740:	f044 0504 	orr.w	r5, r4, #4
 8001744:	1c5e      	adds	r6, r3, #1
 8001746:	7016      	strb	r6, [r2, #0]
 8001748:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = data_MSB;
 800174a:	7815      	ldrb	r5, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 800174c:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = data_MSB;
 800174e:	1c68      	adds	r0, r5, #1
 8001750:	7010      	strb	r0, [r2, #0]
 8001752:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = data_LSB;
 8001754:	7810      	ldrb	r0, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 8001756:	f043 0309 	orr.w	r3, r3, #9
 800175a:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = data_LSB;
 800175c:	1c44      	adds	r4, r0, #1
 800175e:	7014      	strb	r4, [r2, #0]
 8001760:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = data_LSB | DISPLAY_BIT_E;
 8001762:	7810      	ldrb	r0, [r2, #0]
 8001764:	f043 0404 	orr.w	r4, r3, #4
 8001768:	1c45      	adds	r5, r0, #1
 800176a:	7015      	strb	r5, [r2, #0]
 800176c:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = data_LSB;
 800176e:	7810      	ldrb	r0, [r2, #0]
 8001770:	1c44      	adds	r4, r0, #1
 8001772:	7014      	strb	r4, [r2, #0]
 8001774:	540b      	strb	r3, [r1, r0]
}
 8001776:	bc70      	pop	{r4, r5, r6}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <input_invalid>:
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
}

void input_invalid() {
}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop

08001780 <change_inc_dec>:

void change_inc_dec() {
	if (inc_dec == 0x01) {
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <change_inc_dec+0x10>)
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	2a01      	cmp	r2, #1
		inc_dec = 0x08;
	}
	else {
		inc_dec = 0x01;
 8001786:	bf0c      	ite	eq
 8001788:	2208      	moveq	r2, #8
 800178a:	2201      	movne	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
	}
}
 800178e:	4770      	bx	lr
 8001790:	20000310 	.word	0x20000310

08001794 <select_menu_amp>:

void select_menu_amp() {
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 8001794:	21cc      	movs	r1, #204	; 0xcc
 8001796:	4801      	ldr	r0, [pc, #4]	; (800179c <select_menu_amp+0x8>)
 8001798:	f7ff bf94 	b.w	80016c4 <display_i2c_dma_write>
 800179c:	20000500 	.word	0x20000500

080017a0 <select_menu_ratio>:
}

void select_menu_ratio() {
	display_i2c_dma_write(ui_menu_ratio_converted, UI_STRING_CONVERTED_SIZE);
 80017a0:	21cc      	movs	r1, #204	; 0xcc
 80017a2:	4801      	ldr	r0, [pc, #4]	; (80017a8 <select_menu_ratio+0x8>)
 80017a4:	f7ff bf8e 	b.w	80016c4 <display_i2c_dma_write>
 80017a8:	200008f8 	.word	0x200008f8

080017ac <select_menu_detune>:
}
void select_menu_detune() {
	display_i2c_dma_write(ui_menu_detune_converted, UI_STRING_CONVERTED_SIZE);
 80017ac:	21cc      	movs	r1, #204	; 0xcc
 80017ae:	4801      	ldr	r0, [pc, #4]	; (80017b4 <select_menu_detune+0x8>)
 80017b0:	f7ff bf88 	b.w	80016c4 <display_i2c_dma_write>
 80017b4:	20000c00 	.word	0x20000c00

080017b8 <select_menu_env>:
}

void select_menu_env() {
	display_i2c_dma_write(ui_menu_env_converted, UI_STRING_CONVERTED_SIZE);
 80017b8:	21cc      	movs	r1, #204	; 0xcc
 80017ba:	4801      	ldr	r0, [pc, #4]	; (80017c0 <select_menu_env+0x8>)
 80017bc:	f7ff bf82 	b.w	80016c4 <display_i2c_dma_write>
 80017c0:	200005cc 	.word	0x200005cc

080017c4 <select_menu_fdbk>:
}

void select_menu_fdbk() {
	display_i2c_dma_write(ui_menu_fdbk_converted, UI_STRING_CONVERTED_SIZE);
 80017c4:	21cc      	movs	r1, #204	; 0xcc
 80017c6:	4801      	ldr	r0, [pc, #4]	; (80017cc <select_menu_fdbk+0x8>)
 80017c8:	f7ff bf7c 	b.w	80016c4 <display_i2c_dma_write>
 80017cc:	20000b30 	.word	0x20000b30

080017d0 <select_menu_lfo>:
}

void select_menu_lfo() {
	display_i2c_dma_write(ui_menu_lfo_converted, UI_STRING_CONVERTED_SIZE);
 80017d0:	21cc      	movs	r1, #204	; 0xcc
 80017d2:	4801      	ldr	r0, [pc, #4]	; (80017d8 <select_menu_lfo+0x8>)
 80017d4:	f7ff bf76 	b.w	80016c4 <display_i2c_dma_write>
 80017d8:	20000a1c 	.word	0x20000a1c

080017dc <select_menu_algo>:
}

void select_menu_algo() {
	display_i2c_dma_write(ui_menu_algo_converted, UI_STRING_CONVERTED_SIZE);
 80017dc:	21cc      	movs	r1, #204	; 0xcc
 80017de:	4801      	ldr	r0, [pc, #4]	; (80017e4 <select_menu_algo+0x8>)
 80017e0:	f7ff bf70 	b.w	80016c4 <display_i2c_dma_write>
 80017e4:	20000698 	.word	0x20000698

080017e8 <select_menu_instr>:
}

void select_menu_instr() {
	display_i2c_dma_write(ui_menu_instr_converted, UI_STRING_CONVERTED_SIZE);
 80017e8:	21cc      	movs	r1, #204	; 0xcc
 80017ea:	4801      	ldr	r0, [pc, #4]	; (80017f0 <select_menu_instr+0x8>)
 80017ec:	f7ff bf6a 	b.w	80016c4 <display_i2c_dma_write>
 80017f0:	20000828 	.word	0x20000828

080017f4 <temp_set_instr>:
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <enter_menu_amp>:
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop

080017fc <enter_menu_ratio>:
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <enter_menu_detune>:
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <enter_menu_env>:
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <enter_menu_env_op>:
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <enter_menu_fdbk>:
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <enter_menu_lfo>:
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop

08001814 <enter_menu_algo>:
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop

08001818 <enter_menu_instr>:
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop

0800181c <inc_menu_env_op>:
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop

08001820 <inc_set_amp>:
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop

08001824 <inc_set_ratio>:
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <inc_set_detune>:
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <inc_set_env>:
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <inc_set_fdbk>:
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop

08001834 <inc_set_lfo>:
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop

08001838 <inc_set_algo>:
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop

0800183c <inc_set_instr>:
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop

08001840 <dec_set_amp>:
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop

08001844 <dec_set_ratio>:
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <dec_set_detune>:
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop

0800184c <dec_set_env>:
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <dec_set_fdbk>:
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <dec_set_lfo>:
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <dec_set_algo>:
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <dec_set_instr>:
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <temp_set_amp>:
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <temp_set_ratio>:
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <temp_set_detune>:
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <temp_set_env>:
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <temp_set_fdbk>:
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop

08001874 <temp_set_lfo>:
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <temp_set_algo>:
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <init_ui>:
void init_ui(I2C_HandleTypeDef* hi2c) {
 800187c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001880:	b082      	sub	sp, #8
	init_display(hi2c);
 8001882:	f7ff ff05 	bl	8001690 <init_display>
		uint8_t index = 0;
 8001886:	f04f 0800 	mov.w	r8, #0
 800188a:	4d1f      	ldr	r5, [pc, #124]	; (8001908 <init_ui+0x8c>)
 800188c:	4e1f      	ldr	r6, [pc, #124]	; (800190c <init_ui+0x90>)
 800188e:	f105 0728 	add.w	r7, r5, #40	; 0x28
		display_convert_cmd(							//start DDRAM address at beginning of first line
 8001892:	2080      	movs	r0, #128	; 0x80
 8001894:	f855 1b04 	ldr.w	r1, [r5], #4
 8001898:	f10d 0207 	add.w	r2, sp, #7
 800189c:	2400      	movs	r4, #0
		uint8_t index = 0;
 800189e:	f88d 8007 	strb.w	r8, [sp, #7]
		display_convert_cmd(							//start DDRAM address at beginning of first line
 80018a2:	f7ff ff1b 	bl	80016dc <display_convert_cmd>
			display_convert_data(						//convert chars to 4-bit bus data for 1602 LCD
 80018a6:	6833      	ldr	r3, [r6, #0]
 80018a8:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80018ac:	5d18      	ldrb	r0, [r3, r4]
 80018ae:	f10d 0207 	add.w	r2, sp, #7
 80018b2:	3401      	adds	r4, #1
 80018b4:	f7ff ff3a 	bl	800172c <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 80018b8:	2c10      	cmp	r4, #16
 80018ba:	d1f4      	bne.n	80018a6 <init_ui+0x2a>
		display_convert_cmd(							//move DDRAM address at beginning of second line
 80018bc:	20c0      	movs	r0, #192	; 0xc0
 80018be:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80018c2:	f10d 0207 	add.w	r2, sp, #7
 80018c6:	f7ff ff09 	bl	80016dc <display_convert_cmd>
			display_convert_data(						//write null terminator for second line
 80018ca:	2020      	movs	r0, #32
 80018cc:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80018d0:	f10d 0207 	add.w	r2, sp, #7
 80018d4:	3c01      	subs	r4, #1
 80018d6:	f7ff ff29 	bl	800172c <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 80018da:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80018de:	d1f4      	bne.n	80018ca <init_ui+0x4e>
	for (uint8_t i = 0; i < NUM_OF_UI_STRINGS; i++) {	//loop through all UI strings to convert
 80018e0:	42bd      	cmp	r5, r7
 80018e2:	f106 0604 	add.w	r6, r6, #4
 80018e6:	d1d4      	bne.n	8001892 <init_ui+0x16>
	fsm_op = 0;
 80018e8:	4a09      	ldr	r2, [pc, #36]	; (8001910 <init_ui+0x94>)
	fsm_env_op = 0;
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <init_ui+0x98>)
	present_state = menu_amp;				//set state to menu_amp
 80018ec:	4d0a      	ldr	r5, [pc, #40]	; (8001918 <init_ui+0x9c>)
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 80018ee:	21cc      	movs	r1, #204	; 0xcc
 80018f0:	480a      	ldr	r0, [pc, #40]	; (800191c <init_ui+0xa0>)
	fsm_op = 0;
 80018f2:	7014      	strb	r4, [r2, #0]
	fsm_env_op = 0;
 80018f4:	701c      	strb	r4, [r3, #0]
	present_state = menu_amp;				//set state to menu_amp
 80018f6:	702c      	strb	r4, [r5, #0]
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 80018f8:	f7ff fee4 	bl	80016c4 <display_i2c_dma_write>
	inc_dec = 0x01;
 80018fc:	2201      	movs	r2, #1
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <init_ui+0xa4>)
 8001900:	701a      	strb	r2, [r3, #0]
}
 8001902:	b002      	add	sp, #8
 8001904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001908:	20000070 	.word	0x20000070
 800190c:	20000048 	.word	0x20000048
 8001910:	200002b8 	.word	0x200002b8
 8001914:	200003e9 	.word	0x200003e9
 8001918:	200004b8 	.word	0x200004b8
 800191c:	20000500 	.word	0x20000500
 8001920:	20000310 	.word	0x20000310

08001924 <fsm>:
void fsm(input key) {
 8001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8001926:	4e11      	ldr	r6, [pc, #68]	; (800196c <fsm+0x48>)
 8001928:	4f11      	ldr	r7, [pc, #68]	; (8001970 <fsm+0x4c>)
 800192a:	7833      	ldrb	r3, [r6, #0]
 800192c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8001930:	780a      	ldrb	r2, [r1, #0]
 8001932:	4290      	cmp	r0, r2
 8001934:	d017      	beq.n	8001966 <fsm+0x42>
 8001936:	2300      	movs	r3, #0
 8001938:	460d      	mov	r5, r1
 800193a:	461c      	mov	r4, r3
 800193c:	e006      	b.n	800194c <fsm+0x28>
 800193e:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
 8001942:	00dc      	lsls	r4, r3, #3
 8001944:	4282      	cmp	r2, r0
 8001946:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
 800194a:	d003      	beq.n	8001954 <fsm+0x30>
	fsm_transition_table[present_state][i].key != invalid; i++);		//point i to the correct transition
 800194c:	3301      	adds	r3, #1
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 800194e:	2a05      	cmp	r2, #5
	fsm_transition_table[present_state][i].key != invalid; i++);		//point i to the correct transition
 8001950:	b2db      	uxtb	r3, r3
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8001952:	d1f4      	bne.n	800193e <fsm+0x1a>
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
 8001954:	686b      	ldr	r3, [r5, #4]
 8001956:	4798      	blx	r3
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
 8001958:	7833      	ldrb	r3, [r6, #0]
 800195a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800195e:	441c      	add	r4, r3
 8001960:	7863      	ldrb	r3, [r4, #1]
 8001962:	7033      	strb	r3, [r6, #0]
}
 8001964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8001966:	460d      	mov	r5, r1
 8001968:	2400      	movs	r4, #0
 800196a:	e7f3      	b.n	8001954 <fsm+0x30>
 800196c:	200004b8 	.word	0x200004b8
 8001970:	20000004 	.word	0x20000004

08001974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001976:	490d      	ldr	r1, [pc, #52]	; (80019ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800198c:	4c0a      	ldr	r4, [pc, #40]	; (80019b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800199a:	f7ff fe23 	bl	80015e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f002 fc9f 	bl	80042e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019a2:	f7fe fc3f 	bl	8000224 <main>
  bx lr
 80019a6:	4770      	bx	lr
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ac:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80019b0:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 80019b4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80019b8:	20000cd4 	.word	0x20000cd4

080019bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC1_2_IRQHandler>
	...

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_InitTick+0x3c>)
{
 80019c8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ca:	7811      	ldrb	r1, [r2, #0]
 80019cc:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <HAL_InitTick+0x40>)
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	fbb2 f0f3 	udiv	r0, r2, r3
 80019d8:	f000 f8a4 	bl	8001b24 <HAL_SYSTICK_Config>
 80019dc:	b908      	cbnz	r0, 80019e2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	2d0f      	cmp	r5, #15
 80019e0:	d901      	bls.n	80019e6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80019e2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019e4:	bd38      	pop	{r3, r4, r5, pc}
 80019e6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e8:	4602      	mov	r2, r0
 80019ea:	4629      	mov	r1, r5
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f000 f852 	bl	8001a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_InitTick+0x44>)
 80019f6:	4620      	mov	r0, r4
 80019f8:	601d      	str	r5, [r3, #0]
}
 80019fa:	bd38      	pop	{r3, r4, r5, pc}
 80019fc:	20000098 	.word	0x20000098
 8001a00:	20000000 	.word	0x20000000
 8001a04:	2000009c 	.word	0x2000009c

08001a08 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x20>)
{
 8001a0a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a16:	f000 f82d 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff ffd0 	bl	80019c0 <HAL_InitTick>
  HAL_MspInit();
 8001a20:	f7fe fde2 	bl	80005e8 <HAL_MspInit>
}
 8001a24:	2000      	movs	r0, #0
 8001a26:	bd08      	pop	{r3, pc}
 8001a28:	40022000 	.word	0x40022000

08001a2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_IncTick+0x10>)
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_IncTick+0x14>)
 8001a30:	6811      	ldr	r1, [r2, #0]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	440b      	add	r3, r1
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000cd0 	.word	0x20000cd0
 8001a40:	20000098 	.word	0x20000098

08001a44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a44:	4b01      	ldr	r3, [pc, #4]	; (8001a4c <HAL_GetTick+0x8>)
 8001a46:	6818      	ldr	r0, [r3, #0]
}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000cd0 	.word	0x20000cd0

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff fff6 	bl	8001a44 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a58:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001a5a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001a5c:	d002      	beq.n	8001a64 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_Delay+0x20>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	1b40      	subs	r0, r0, r5
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d3fa      	bcc.n	8001a64 <HAL_Delay+0x14>
  {
  }
}
 8001a6e:	bd38      	pop	{r3, r4, r5, pc}
 8001a70:	20000098 	.word	0x20000098

08001a74 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a74:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a7a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001a86:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a8e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b430      	push	{r4, r5}
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa2:	f1c3 0507 	rsb	r5, r3, #7
 8001aa6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa8:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	bf28      	it	cs
 8001aae:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab0:	2c06      	cmp	r4, #6
 8001ab2:	d919      	bls.n	8001ae8 <HAL_NVIC_SetPriority+0x50>
 8001ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	409c      	lsls	r4, r3
 8001abc:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8001ac4:	40ac      	lsls	r4, r5
 8001ac6:	ea21 0104 	bic.w	r1, r1, r4
 8001aca:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001acc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ace:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	db0c      	blt.n	8001aee <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	0109      	lsls	r1, r1, #4
 8001ad6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001ada:	b2c9      	uxtb	r1, r1
 8001adc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ae0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ae4:	bc30      	pop	{r4, r5}
 8001ae6:	4770      	bx	lr
 8001ae8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	4613      	mov	r3, r2
 8001aec:	e7e8      	b.n	8001ac0 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_NVIC_SetPriority+0x6c>)
 8001af0:	f000 000f 	and.w	r0, r0, #15
 8001af4:	0109      	lsls	r1, r1, #4
 8001af6:	b2c9      	uxtb	r1, r1
 8001af8:	4403      	add	r3, r0
 8001afa:	7619      	strb	r1, [r3, #24]
 8001afc:	bc30      	pop	{r4, r5}
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00
 8001b04:	e000ecfc 	.word	0xe000ecfc

08001b08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	db07      	blt.n	8001b1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f000 011f 	and.w	r1, r0, #31
 8001b12:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <HAL_NVIC_EnableIRQ+0x18>)
 8001b14:	408b      	lsls	r3, r1
 8001b16:	0940      	lsrs	r0, r0, #5
 8001b18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100

08001b24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	3801      	subs	r0, #1
 8001b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b2a:	d20d      	bcs.n	8001b48 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2c:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b32:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	4c06      	ldr	r4, [pc, #24]	; (8001b50 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b38:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3e:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8001b40:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b44:	6019      	str	r1, [r3, #0]
 8001b46:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b48:	2001      	movs	r0, #1
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e010 	.word	0xe000e010
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b54:	b340      	cbz	r0, 8001ba8 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b56:	4603      	mov	r3, r0
{
 8001b58:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b5a:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b5e:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b62:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8001b64:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b66:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b68:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b6c:	490f      	ldr	r1, [pc, #60]	; (8001bac <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6e:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b70:	4f0f      	ldr	r7, [pc, #60]	; (8001bb0 <HAL_DMA_Init+0x5c>)
 8001b72:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b74:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b78:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7c:	4332      	orrs	r2, r6
 8001b7e:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b80:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b82:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 8001b84:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b86:	0909      	lsrs	r1, r1, #4
 8001b88:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b8a:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8e:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b90:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b94:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b96:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 8001b98:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 8001b9a:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8001b9c:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8001b9e:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 8001ba0:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba2:	639c      	str	r4, [r3, #56]	; 0x38
}
 8001ba4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba6:	4770      	bx	lr
    return HAL_ERROR;
 8001ba8:	2001      	movs	r0, #1
}
 8001baa:	4770      	bx	lr
 8001bac:	bffdfff8 	.word	0xbffdfff8
 8001bb0:	cccccccd 	.word	0xcccccccd
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb8:	b4f0      	push	{r4, r5, r6, r7}
 8001bba:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bbc:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001bc0:	2801      	cmp	r0, #1
 8001bc2:	d038      	beq.n	8001c36 <HAL_DMA_Start_IT+0x7e>
 8001bc4:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001bca:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bce:	42a8      	cmp	r0, r5
 8001bd0:	d005      	beq.n	8001bde <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bd8:	2002      	movs	r0, #2
  }    
  return status;
}
 8001bda:	bcf0      	pop	{r4, r5, r6, r7}
 8001bdc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bde:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be0:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 8001be2:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be4:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be8:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bea:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001bec:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bee:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 8001bf0:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bf4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001bf6:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bf8:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bfa:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001bfc:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8001bfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c00:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c02:	bf0b      	itete	eq
 8001c04:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c06:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c08:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c0a:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001c0c:	b153      	cbz	r3, 8001c24 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0e:	682b      	ldr	r3, [r5, #0]
 8001c10:	f043 030e 	orr.w	r3, r3, #14
 8001c14:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c16:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c18:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	602b      	str	r3, [r5, #0]
}
 8001c20:	bcf0      	pop	{r4, r5, r6, r7}
 8001c22:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	f023 0304 	bic.w	r3, r3, #4
 8001c2a:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	f043 030a 	orr.w	r3, r3, #10
 8001c32:	602b      	str	r3, [r5, #0]
 8001c34:	e7ef      	b.n	8001c16 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8001c36:	2002      	movs	r0, #2
}
 8001c38:	bcf0      	pop	{r4, r5, r6, r7}
 8001c3a:	4770      	bx	lr

08001c3c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8001c40:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c42:	2a02      	cmp	r2, #2
 8001c44:	d006      	beq.n	8001c54 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c46:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8001c48:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4a:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001c4c:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8001c50:	2001      	movs	r0, #1
}
 8001c52:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c54:	2101      	movs	r1, #1
{
 8001c56:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8001c58:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c5e:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c60:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c62:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c64:	f024 040e 	bic.w	r4, r4, #14
 8001c68:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c6a:	6814      	ldr	r4, [r2, #0]
  return status; 
 8001c6c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001c6e:	f024 0401 	bic.w	r4, r4, #1
 8001c72:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c76:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001c78:	841d      	strh	r5, [r3, #32]
}
 8001c7a:	bc70      	pop	{r4, r5, r6}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop

08001c80 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c80:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8001c84:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c86:	2a02      	cmp	r2, #2
 8001c88:	d003      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8a:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8001c8c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c90:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c92:	6802      	ldr	r2, [r0, #0]
{  
 8001c94:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c96:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c98:	481b      	ldr	r0, [pc, #108]	; (8001d08 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9a:	f021 010e 	bic.w	r1, r1, #14
 8001c9e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ca0:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ca2:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8001ca4:	f021 0101 	bic.w	r1, r1, #1
 8001ca8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001caa:	d021      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x70>
 8001cac:	4917      	ldr	r1, [pc, #92]	; (8001d0c <HAL_DMA_Abort_IT+0x8c>)
 8001cae:	428a      	cmp	r2, r1
 8001cb0:	d01a      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x68>
 8001cb2:	3114      	adds	r1, #20
 8001cb4:	428a      	cmp	r2, r1
 8001cb6:	d01d      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x74>
 8001cb8:	3114      	adds	r1, #20
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	d01d      	beq.n	8001cfa <HAL_DMA_Abort_IT+0x7a>
 8001cbe:	3114      	adds	r1, #20
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	d01d      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x80>
 8001cc4:	3114      	adds	r1, #20
 8001cc6:	428a      	cmp	r2, r1
 8001cc8:	bf0c      	ite	eq
 8001cca:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001cce:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8001cd2:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cd6:	4c0e      	ldr	r4, [pc, #56]	; (8001d10 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8001cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cda:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001cdc:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8001cde:	b129      	cbz	r1, 8001cec <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2000      	movs	r0, #0
}
 8001ce6:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ce8:	2210      	movs	r2, #16
 8001cea:	e7f2      	b.n	8001cd2 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	4608      	mov	r0, r1
}
 8001cee:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	e7ee      	b.n	8001cd2 <HAL_DMA_Abort_IT+0x52>
 8001cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf8:	e7eb      	b.n	8001cd2 <HAL_DMA_Abort_IT+0x52>
 8001cfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cfe:	e7e8      	b.n	8001cd2 <HAL_DMA_Abort_IT+0x52>
 8001d00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d04:	e7e5      	b.n	8001cd2 <HAL_DMA_Abort_IT+0x52>
 8001d06:	bf00      	nop
 8001d08:	40020008 	.word	0x40020008
 8001d0c:	4002001c 	.word	0x4002001c
 8001d10:	40020000 	.word	0x40020000

08001d14 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d14:	2204      	movs	r2, #4
{
 8001d16:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d18:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d1c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d1e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d20:	408a      	lsls	r2, r1
 8001d22:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001d24:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d26:	d01f      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x54>
 8001d28:	076a      	lsls	r2, r5, #29
 8001d2a:	d51d      	bpl.n	8001d68 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	0691      	lsls	r1, r2, #26
 8001d30:	d403      	bmi.n	8001d3a <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f022 0204 	bic.w	r2, r2, #4
 8001d38:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d3a:	4a3e      	ldr	r2, [pc, #248]	; (8001e34 <HAL_DMA_IRQHandler+0x120>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d05a      	beq.n	8001df6 <HAL_DMA_IRQHandler+0xe2>
 8001d40:	3214      	adds	r2, #20
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d05f      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xf2>
 8001d46:	3214      	adds	r2, #20
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d066      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x106>
 8001d4c:	3214      	adds	r2, #20
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d069      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x112>
 8001d52:	3214      	adds	r2, #20
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d05b      	beq.n	8001e10 <HAL_DMA_IRQHandler+0xfc>
 8001d58:	3214      	adds	r2, #20
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	bf0c      	ite	eq
 8001d5e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001d62:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001d66:	e047      	b.n	8001df8 <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d68:	2202      	movs	r2, #2
 8001d6a:	408a      	lsls	r2, r1
 8001d6c:	4222      	tst	r2, r4
 8001d6e:	d022      	beq.n	8001db6 <HAL_DMA_IRQHandler+0xa2>
 8001d70:	07aa      	lsls	r2, r5, #30
 8001d72:	d520      	bpl.n	8001db6 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	0691      	lsls	r1, r2, #26
 8001d78:	d406      	bmi.n	8001d88 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f022 020a 	bic.w	r2, r2, #10
 8001d82:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d84:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d88:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <HAL_DMA_IRQHandler+0x120>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d029      	beq.n	8001de2 <HAL_DMA_IRQHandler+0xce>
 8001d8e:	3214      	adds	r2, #20
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d040      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x102>
 8001d94:	3214      	adds	r2, #20
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d042      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x10c>
 8001d9a:	3214      	adds	r2, #20
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d034      	beq.n	8001e0a <HAL_DMA_IRQHandler+0xf6>
 8001da0:	3214      	adds	r2, #20
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d042      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x118>
 8001da6:	3214      	adds	r2, #20
 8001da8:	4293      	cmp	r3, r2
 8001daa:	bf0c      	ite	eq
 8001dac:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001db0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001db4:	e016      	b.n	8001de4 <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001db6:	2208      	movs	r2, #8
 8001db8:	408a      	lsls	r2, r1
 8001dba:	4222      	tst	r2, r4
 8001dbc:	d019      	beq.n	8001df2 <HAL_DMA_IRQHandler+0xde>
 8001dbe:	072a      	lsls	r2, r5, #28
 8001dc0:	d517      	bpl.n	8001df2 <HAL_DMA_IRQHandler+0xde>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dc2:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 8001dc4:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc8:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dca:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dce:	f022 020e 	bic.w	r2, r2, #14
 8001dd2:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8001dd4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dd6:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dd8:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001dda:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001ddc:	b14b      	cbz	r3, 8001df2 <HAL_DMA_IRQHandler+0xde>
}
 8001dde:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001de0:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001de2:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8001de4:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001de6:	4c14      	ldr	r4, [pc, #80]	; (8001e38 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8001de8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001dea:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001dec:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001df0:	b93a      	cbnz	r2, 8001e02 <HAL_DMA_IRQHandler+0xee>
}
 8001df2:	bc70      	pop	{r4, r5, r6}
 8001df4:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001df6:	2304      	movs	r3, #4
 8001df8:	490f      	ldr	r1, [pc, #60]	; (8001e38 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8001dfa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001dfc:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d0f7      	beq.n	8001df2 <HAL_DMA_IRQHandler+0xde>
}
 8001e02:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001e04:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e06:	2340      	movs	r3, #64	; 0x40
 8001e08:	e7f6      	b.n	8001df8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0e:	e7e9      	b.n	8001de4 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e14:	e7f0      	b.n	8001df8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e16:	2320      	movs	r3, #32
 8001e18:	e7e4      	b.n	8001de4 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1e:	e7eb      	b.n	8001df8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e24:	e7de      	b.n	8001de4 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e2a:	e7e5      	b.n	8001df8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e30:	e7d8      	b.n	8001de4 <HAL_DMA_IRQHandler+0xd0>
 8001e32:	bf00      	nop
 8001e34:	40020008 	.word	0x40020008
 8001e38:	40020000 	.word	0x40020000

08001e3c <HAL_DMA_GetState>:
}
 8001e3c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	680c      	ldr	r4, [r1, #0]
{
 8001e4a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4c:	2c00      	cmp	r4, #0
 8001e4e:	f000 809e 	beq.w	8001f8e <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 8001e52:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e54:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800204c <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 8001e58:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e5a:	4f77      	ldr	r7, [pc, #476]	; (8002038 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 8001e5c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8002050 <HAL_GPIO_Init+0x20c>
 8001e60:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8002054 <HAL_GPIO_Init+0x210>
 8001e64:	9000      	str	r0, [sp, #0]
 8001e66:	e004      	b.n	8001e72 <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8001e68:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6a:	fa34 f203 	lsrs.w	r2, r4, r3
 8001e6e:	f000 808e 	beq.w	8001f8e <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 8001e72:	2201      	movs	r2, #1
 8001e74:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 8001e76:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8001e7e:	d1f3      	bne.n	8001e68 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001e80:	684c      	ldr	r4, [r1, #4]
 8001e82:	2c12      	cmp	r4, #18
 8001e84:	f200 8086 	bhi.w	8001f94 <HAL_GPIO_Init+0x150>
 8001e88:	2c12      	cmp	r4, #18
 8001e8a:	d80c      	bhi.n	8001ea6 <HAL_GPIO_Init+0x62>
 8001e8c:	e8df f004 	tbb	[pc, r4]
 8001e90:	0abcbf8a 	.word	0x0abcbf8a
 8001e94:	0b0b0b0b 	.word	0x0b0b0b0b
 8001e98:	0b0b0b0b 	.word	0x0b0b0b0b
 8001e9c:	0b0b0b0b 	.word	0x0b0b0b0b
 8001ea0:	b90b      	.short	0xb90b
 8001ea2:	b6          	.byte	0xb6
 8001ea3:	00          	.byte	0x00
 8001ea4:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea6:	2dff      	cmp	r5, #255	; 0xff
 8001ea8:	f200 8083 	bhi.w	8001fb2 <HAL_GPIO_Init+0x16e>
 8001eac:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb0:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb4:	240f      	movs	r4, #15
 8001eb6:	f8d9 2000 	ldr.w	r2, [r9]
 8001eba:	fa04 fb0a 	lsl.w	fp, r4, sl
 8001ebe:	ea22 020b 	bic.w	r2, r2, fp
 8001ec2:	fa06 fa0a 	lsl.w	sl, r6, sl
 8001ec6:	ea42 020a 	orr.w	r2, r2, sl
 8001eca:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ece:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001ed2:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8001ed6:	f000 808f 	beq.w	8001ff8 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eda:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001ede:	f023 0203 	bic.w	r2, r3, #3
 8001ee2:	f04a 0a01 	orr.w	sl, sl, #1
 8001ee6:	f8cc a018 	str.w	sl, [ip, #24]
 8001eea:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001eee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001ef2:	f00a 0a01 	and.w	sl, sl, #1
 8001ef6:	f8cd a00c 	str.w	sl, [sp, #12]
 8001efa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001efe:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f02:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f06:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001f0a:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0e:	fa04 f40a 	lsl.w	r4, r4, sl
 8001f12:	ea2b 0004 	bic.w	r0, fp, r4
 8001f16:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f18:	9c00      	ldr	r4, [sp, #0]
 8001f1a:	4848      	ldr	r0, [pc, #288]	; (800203c <HAL_GPIO_Init+0x1f8>)
 8001f1c:	4284      	cmp	r4, r0
 8001f1e:	d013      	beq.n	8001f48 <HAL_GPIO_Init+0x104>
 8001f20:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001f24:	4284      	cmp	r4, r0
 8001f26:	d07d      	beq.n	8002024 <HAL_GPIO_Init+0x1e0>
 8001f28:	4845      	ldr	r0, [pc, #276]	; (8002040 <HAL_GPIO_Init+0x1fc>)
 8001f2a:	4284      	cmp	r4, r0
 8001f2c:	d071      	beq.n	8002012 <HAL_GPIO_Init+0x1ce>
 8001f2e:	4845      	ldr	r0, [pc, #276]	; (8002044 <HAL_GPIO_Init+0x200>)
 8001f30:	4284      	cmp	r4, r0
 8001f32:	bf0c      	ite	eq
 8001f34:	f04f 0b03 	moveq.w	fp, #3
 8001f38:	f04f 0b04 	movne.w	fp, #4
 8001f3c:	9801      	ldr	r0, [sp, #4]
 8001f3e:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001f42:	ea40 000a 	orr.w	r0, r0, sl
 8001f46:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f48:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4a:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8001f4e:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	bf14      	ite	ne
 8001f54:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f56:	43aa      	biceq	r2, r5
 8001f58:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001f5a:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f5c:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001f60:	bf14      	ite	ne
 8001f62:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f64:	43aa      	biceq	r2, r5
 8001f66:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f68:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6a:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f6e:	bf14      	ite	ne
 8001f70:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f72:	43aa      	biceq	r2, r5
 8001f74:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f76:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f7a:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7c:	d039      	beq.n	8001ff2 <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f7e:	4315      	orrs	r5, r2
 8001f80:	60fd      	str	r5, [r7, #12]
 8001f82:	680c      	ldr	r4, [r1, #0]
	position++;
 8001f84:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f86:	fa34 f203 	lsrs.w	r2, r4, r3
 8001f8a:	f47f af72 	bne.w	8001e72 <HAL_GPIO_Init+0x2e>
  }
}
 8001f8e:	b005      	add	sp, #20
 8001f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001f94:	4544      	cmp	r4, r8
 8001f96:	d005      	beq.n	8001fa4 <HAL_GPIO_Init+0x160>
 8001f98:	d913      	bls.n	8001fc2 <HAL_GPIO_Init+0x17e>
 8001f9a:	4574      	cmp	r4, lr
 8001f9c:	d002      	beq.n	8001fa4 <HAL_GPIO_Init+0x160>
 8001f9e:	482a      	ldr	r0, [pc, #168]	; (8002048 <HAL_GPIO_Init+0x204>)
 8001fa0:	4284      	cmp	r4, r0
 8001fa2:	d180      	bne.n	8001ea6 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fa4:	688c      	ldr	r4, [r1, #8]
 8001fa6:	b9e4      	cbnz	r4, 8001fe2 <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa8:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001faa:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fae:	f67f af7d 	bls.w	8001eac <HAL_GPIO_Init+0x68>
 8001fb2:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fb4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001fb8:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fbc:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc0:	e778      	b.n	8001eb4 <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 8001fc2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002058 <HAL_GPIO_Init+0x214>
 8001fc6:	454c      	cmp	r4, r9
 8001fc8:	d0ec      	beq.n	8001fa4 <HAL_GPIO_Init+0x160>
 8001fca:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001fce:	454c      	cmp	r4, r9
 8001fd0:	d0e8      	beq.n	8001fa4 <HAL_GPIO_Init+0x160>
 8001fd2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001fd6:	454c      	cmp	r4, r9
 8001fd8:	f47f af65 	bne.w	8001ea6 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fdc:	688c      	ldr	r4, [r1, #8]
 8001fde:	2c00      	cmp	r4, #0
 8001fe0:	d0e2      	beq.n	8001fa8 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 8001fe2:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fe4:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe6:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8001fea:	bf0c      	ite	eq
 8001fec:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8001fee:	6142      	strne	r2, [r0, #20]
 8001ff0:	e759      	b.n	8001ea6 <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff2:	ea22 0505 	bic.w	r5, r2, r5
 8001ff6:	60fd      	str	r5, [r7, #12]
 8001ff8:	680c      	ldr	r4, [r1, #0]
 8001ffa:	e735      	b.n	8001e68 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ffc:	68ce      	ldr	r6, [r1, #12]
 8001ffe:	360c      	adds	r6, #12
          break;
 8002000:	e751      	b.n	8001ea6 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002002:	68ce      	ldr	r6, [r1, #12]
 8002004:	3604      	adds	r6, #4
          break;
 8002006:	e74e      	b.n	8001ea6 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002008:	68ce      	ldr	r6, [r1, #12]
 800200a:	3608      	adds	r6, #8
          break;
 800200c:	e74b      	b.n	8001ea6 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800200e:	68ce      	ldr	r6, [r1, #12]
          break;
 8002010:	e749      	b.n	8001ea6 <HAL_GPIO_Init+0x62>
 8002012:	f04f 0b02 	mov.w	fp, #2
 8002016:	9801      	ldr	r0, [sp, #4]
 8002018:	fa0b fa0a 	lsl.w	sl, fp, sl
 800201c:	ea40 000a 	orr.w	r0, r0, sl
 8002020:	9001      	str	r0, [sp, #4]
 8002022:	e791      	b.n	8001f48 <HAL_GPIO_Init+0x104>
 8002024:	f04f 0b01 	mov.w	fp, #1
 8002028:	9801      	ldr	r0, [sp, #4]
 800202a:	fa0b fa0a 	lsl.w	sl, fp, sl
 800202e:	ea40 000a 	orr.w	r0, r0, sl
 8002032:	9001      	str	r0, [sp, #4]
 8002034:	e788      	b.n	8001f48 <HAL_GPIO_Init+0x104>
 8002036:	bf00      	nop
 8002038:	40010400 	.word	0x40010400
 800203c:	40010800 	.word	0x40010800
 8002040:	40011000 	.word	0x40011000
 8002044:	40011400 	.word	0x40011400
 8002048:	10320000 	.word	0x10320000
 800204c:	40021000 	.word	0x40021000
 8002050:	10220000 	.word	0x10220000
 8002054:	10310000 	.word	0x10310000
 8002058:	10120000 	.word	0x10120000

0800205c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205c:	b902      	cbnz	r2, 8002060 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800205e:	0409      	lsls	r1, r1, #16
 8002060:	6101      	str	r1, [r0, #16]
  }
}
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002064:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002066:	ea01 0203 	and.w	r2, r1, r3
 800206a:	ea21 0103 	bic.w	r1, r1, r3
 800206e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002072:	6101      	str	r1, [r0, #16]
}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop

08002078 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800207a:	6951      	ldr	r1, [r2, #20]
 800207c:	4201      	tst	r1, r0
 800207e:	d100      	bne.n	8002082 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002080:	4770      	bx	lr
{
 8002082:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002084:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002086:	f7fe f9d1 	bl	800042c <HAL_GPIO_EXTI_Callback>
  }
}
 800208a:	bd08      	pop	{r3, pc}
 800208c:	40010400 	.word	0x40010400

08002090 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	4605      	mov	r5, r0
 8002094:	460e      	mov	r6, r1
 8002096:	4617      	mov	r7, r2
 8002098:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800209a:	682c      	ldr	r4, [r5, #0]
 800209c:	d003      	beq.n	80020a6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 800209e:	e009      	b.n	80020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020a0:	6963      	ldr	r3, [r4, #20]
 80020a2:	055b      	lsls	r3, r3, #21
 80020a4:	d424      	bmi.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020a6:	6963      	ldr	r3, [r4, #20]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	f013 0308 	ands.w	r3, r3, #8
 80020ae:	d1f7      	bne.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80020b0:	4618      	mov	r0, r3
}
 80020b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020b4:	6963      	ldr	r3, [r4, #20]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	f013 0308 	ands.w	r3, r3, #8
 80020bc:	d0f8      	beq.n	80020b0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020be:	6963      	ldr	r3, [r4, #20]
 80020c0:	0559      	lsls	r1, r3, #21
 80020c2:	d415      	bmi.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff fcbe 	bl	8001a44 <HAL_GetTick>
 80020c8:	1bc0      	subs	r0, r0, r7
 80020ca:	4286      	cmp	r6, r0
 80020cc:	d301      	bcc.n	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 80020ce:	2e00      	cmp	r6, #0
 80020d0:	d1e2      	bne.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d2:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80020d4:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d6:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020d8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020dc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80020e2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e6:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 80020ea:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ec:	642b      	str	r3, [r5, #64]	; 0x40
}
 80020ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80020f0:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f2:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80020f6:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fe:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002100:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002102:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002104:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002108:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800210c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800210e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002112:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002116:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002118:	642b      	str	r3, [r5, #64]	; 0x40
}
 800211a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800211c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	4605      	mov	r5, r0
 8002120:	460e      	mov	r6, r1
 8002122:	4617      	mov	r7, r2
 8002124:	1c72      	adds	r2, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002126:	682c      	ldr	r4, [r5, #0]
 8002128:	d003      	beq.n	8002132 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 800212a:	e009      	b.n	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800212c:	6963      	ldr	r3, [r4, #20]
 800212e:	055b      	lsls	r3, r3, #21
 8002130:	d424      	bmi.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002132:	6963      	ldr	r3, [r4, #20]
 8002134:	43db      	mvns	r3, r3
 8002136:	f013 0302 	ands.w	r3, r3, #2
 800213a:	d1f7      	bne.n	800212c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 800213c:	4618      	mov	r0, r3
}
 800213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002140:	6963      	ldr	r3, [r4, #20]
 8002142:	43db      	mvns	r3, r3
 8002144:	f013 0302 	ands.w	r3, r3, #2
 8002148:	d0f8      	beq.n	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800214a:	6963      	ldr	r3, [r4, #20]
 800214c:	0559      	lsls	r1, r3, #21
 800214e:	d415      	bmi.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002150:	f7ff fc78 	bl	8001a44 <HAL_GetTick>
 8002154:	1bc0      	subs	r0, r0, r7
 8002156:	4286      	cmp	r6, r0
 8002158:	d301      	bcc.n	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 800215a:	2e00      	cmp	r6, #0
 800215c:	d1e2      	bne.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800215e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002160:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002162:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002164:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002168:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800216e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002172:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8002176:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002178:	642b      	str	r3, [r5, #64]	; 0x40
}
 800217a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800217c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800217e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002182:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218a:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218c:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800218e:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002190:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002194:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002198:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800219a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800219e:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021a4:	642b      	str	r3, [r5, #64]	; 0x40
}
 80021a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021a8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80021a8:	2800      	cmp	r0, #0
 80021aa:	f000 80b5 	beq.w	8002318 <HAL_I2C_Init+0x170>
{
 80021ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021b4:	4604      	mov	r4, r0
 80021b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8094 	beq.w	80022e8 <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c0:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80021c2:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021de:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e0:	f001 fc72 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021e4:	6865      	ldr	r5, [r4, #4]
 80021e6:	4b4d      	ldr	r3, [pc, #308]	; (800231c <HAL_I2C_Init+0x174>)
 80021e8:	429d      	cmp	r5, r3
 80021ea:	d84c      	bhi.n	8002286 <HAL_I2C_Init+0xde>
 80021ec:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_I2C_Init+0x178>)
 80021ee:	4298      	cmp	r0, r3
 80021f0:	d978      	bls.n	80022e4 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f2:	1e42      	subs	r2, r0, #1
 80021f4:	006d      	lsls	r5, r5, #1
 80021f6:	fbb2 f2f5 	udiv	r2, r2, r5
 80021fa:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 80021fe:	4949      	ldr	r1, [pc, #292]	; (8002324 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002200:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002202:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002206:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002208:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800220a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800220e:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 8002212:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002214:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002216:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002218:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800221c:	3001      	adds	r0, #1
 800221e:	4308      	orrs	r0, r1
 8002220:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002222:	69d9      	ldr	r1, [r3, #28]
 8002224:	4232      	tst	r2, r6
 8002226:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800222a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800222e:	d160      	bne.n	80022f2 <HAL_I2C_Init+0x14a>
 8002230:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002232:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002234:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002236:	430a      	orrs	r2, r1
 8002238:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8002240:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002244:	4302      	orrs	r2, r0
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8002250:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002254:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002258:	4302      	orrs	r2, r0
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800225e:	68d9      	ldr	r1, [r3, #12]
 8002260:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8002264:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002268:	4302      	orrs	r2, r0
 800226a:	430a      	orrs	r2, r1
 800226c:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 800226e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002270:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002278:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800227a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800227e:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8002284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_I2C_Init+0x180>)
 8002288:	4298      	cmp	r0, r3
 800228a:	d92b      	bls.n	80022e4 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800228c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002290:	4e24      	ldr	r6, [pc, #144]	; (8002324 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002292:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002294:	fba6 2600 	umull	r2, r6, r6, r0
 8002298:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800229a:	fb01 f102 	mul.w	r1, r1, r2
 800229e:	4f23      	ldr	r7, [pc, #140]	; (800232c <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a0:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022a2:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80022aa:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 80022ae:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022b0:	6a1a      	ldr	r2, [r3, #32]
 80022b2:	0989      	lsrs	r1, r1, #6
 80022b4:	3101      	adds	r1, #1
 80022b6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80022ba:	4311      	orrs	r1, r2
 80022bc:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022be:	69d9      	ldr	r1, [r3, #28]
 80022c0:	68a6      	ldr	r6, [r4, #8]
 80022c2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80022c6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80022ca:	b9ae      	cbnz	r6, 80022f8 <HAL_I2C_Init+0x150>
 80022cc:	3801      	subs	r0, #1
 80022ce:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80022d2:	fbb0 f2f2 	udiv	r2, r0, r2
 80022d6:	3201      	adds	r2, #1
 80022d8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80022dc:	b1d2      	cbz	r2, 8002314 <HAL_I2C_Init+0x16c>
 80022de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e2:	e7a6      	b.n	8002232 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
}
 80022e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80022e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80022ec:	f7fe f99e 	bl	800062c <HAL_I2C_MspInit>
 80022f0:	e766      	b.n	80021c0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022f2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80022f6:	e79c      	b.n	8002232 <HAL_I2C_Init+0x8a>
 80022f8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80022fc:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8002300:	1e42      	subs	r2, r0, #1
 8002302:	fbb2 f2f5 	udiv	r2, r2, r5
 8002306:	3201      	adds	r2, #1
 8002308:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800230c:	b112      	cbz	r2, 8002314 <HAL_I2C_Init+0x16c>
 800230e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002312:	e78e      	b.n	8002232 <HAL_I2C_Init+0x8a>
 8002314:	2201      	movs	r2, #1
 8002316:	e78c      	b.n	8002232 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8002318:	2001      	movs	r0, #1
}
 800231a:	4770      	bx	lr
 800231c:	000186a0 	.word	0x000186a0
 8002320:	001e847f 	.word	0x001e847f
 8002324:	431bde83 	.word	0x431bde83
 8002328:	003d08ff 	.word	0x003d08ff
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_I2C_Master_Transmit>:
{
 8002330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002334:	4604      	mov	r4, r0
 8002336:	b082      	sub	sp, #8
 8002338:	469a      	mov	sl, r3
 800233a:	4688      	mov	r8, r1
 800233c:	4691      	mov	r9, r2
 800233e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff fb80 	bl	8001a44 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002344:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002348:	2b20      	cmp	r3, #32
 800234a:	d005      	beq.n	8002358 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 800234c:	f04f 0802 	mov.w	r8, #2
}
 8002350:	4640      	mov	r0, r8
 8002352:	b002      	add	sp, #8
 8002354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002358:	4607      	mov	r7, r0
 800235a:	e005      	b.n	8002368 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235c:	f7ff fb72 	bl	8001a44 <HAL_GetTick>
 8002360:	1bc0      	subs	r0, r0, r7
 8002362:	2819      	cmp	r0, #25
 8002364:	f200 80f3 	bhi.w	800254e <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	699d      	ldr	r5, [r3, #24]
 800236c:	43ed      	mvns	r5, r5
 800236e:	f015 0502 	ands.w	r5, r5, #2
 8002372:	d0f3      	beq.n	800235c <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 8002374:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002378:	2a01      	cmp	r2, #1
 800237a:	d0e7      	beq.n	800234c <HAL_I2C_Master_Transmit+0x1c>
 800237c:	2201      	movs	r2, #1
 800237e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	07d2      	lsls	r2, r2, #31
 8002386:	d570      	bpl.n	800246a <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002388:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800238a:	2521      	movs	r5, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800238c:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002394:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002396:	4a8b      	ldr	r2, [pc, #556]	; (80025c4 <HAL_I2C_Master_Transmit+0x294>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002398:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800239c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023a0:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80023a2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023a6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a8:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80023ac:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023b0:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 80023b2:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023b4:	d007      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x96>
 80023b6:	2a01      	cmp	r2, #1
 80023b8:	d005      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x96>
 80023ba:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80023be:	d002      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023c2:	2a12      	cmp	r2, #18
 80023c4:	d103      	bne.n	80023ce <HAL_I2C_Master_Transmit+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	1c75      	adds	r5, r6, #1
 80023d0:	d13d      	bne.n	800244e <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	07d0      	lsls	r0, r2, #31
 80023d6:	d5fc      	bpl.n	80023d2 <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d8:	6922      	ldr	r2, [r4, #16]
 80023da:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80023de:	d149      	bne.n	8002474 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023e0:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80023e4:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e6:	463a      	mov	r2, r7
 80023e8:	4631      	mov	r1, r6
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7ff fe96 	bl	800211c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 80023f0:	4680      	mov	r8, r0
 80023f2:	bb30      	cbnz	r0, 8002442 <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	9001      	str	r0, [sp, #4]
 80023f8:	6959      	ldr	r1, [r3, #20]
    while (hi2c->XferSize > 0U)
 80023fa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fc:	9101      	str	r1, [sp, #4]
 80023fe:	6999      	ldr	r1, [r3, #24]
 8002400:	9101      	str	r1, [sp, #4]
 8002402:	9901      	ldr	r1, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002404:	2a00      	cmp	r2, #0
 8002406:	d076      	beq.n	80024f6 <HAL_I2C_Master_Transmit+0x1c6>
 8002408:	1c75      	adds	r5, r6, #1
 800240a:	f040 8081 	bne.w	8002510 <HAL_I2C_Master_Transmit+0x1e0>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	0610      	lsls	r0, r2, #24
 8002412:	d442      	bmi.n	800249a <HAL_I2C_Master_Transmit+0x16a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	0551      	lsls	r1, r2, #21
 8002418:	d5f9      	bpl.n	800240e <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800241a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8002420:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002422:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002424:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002426:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800242e:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002430:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800243c:	2b04      	cmp	r3, #4
 800243e:	f000 80ab 	beq.w	8002598 <HAL_I2C_Master_Transmit+0x268>
      return HAL_ERROR;
 8002442:	f04f 0801 	mov.w	r8, #1
}
 8002446:	4640      	mov	r0, r8
 8002448:	b002      	add	sp, #8
 800244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	07d1      	lsls	r1, r2, #31
 8002452:	d4c1      	bmi.n	80023d8 <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002454:	f7ff faf6 	bl	8001a44 <HAL_GetTick>
 8002458:	1bc0      	subs	r0, r0, r7
 800245a:	4286      	cmp	r6, r0
 800245c:	f0c0 8084 	bcc.w	8002568 <HAL_I2C_Master_Transmit+0x238>
 8002460:	2e00      	cmp	r6, #0
 8002462:	f000 8081 	beq.w	8002568 <HAL_I2C_Master_Transmit+0x238>
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	e7b1      	b.n	80023ce <HAL_I2C_Master_Transmit+0x9e>
      __HAL_I2C_ENABLE(hi2c);
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e789      	b.n	8002388 <HAL_I2C_Master_Transmit+0x58>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002474:	ea4f 12e8 	mov.w	r2, r8, asr #7
 8002478:	f002 0206 	and.w	r2, r2, #6
 800247c:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002480:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002482:	4631      	mov	r1, r6
 8002484:	463a      	mov	r2, r7
 8002486:	4620      	mov	r0, r4
 8002488:	f7ff fe02 	bl	8002090 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 800248c:	2800      	cmp	r0, #0
 800248e:	d1d8      	bne.n	8002442 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	fa5f f188 	uxtb.w	r1, r8
 8002496:	6119      	str	r1, [r3, #16]
 8002498:	e7a5      	b.n	80023e6 <HAL_I2C_Master_Transmit+0xb6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800249c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a0:	4605      	mov	r5, r0
 80024a2:	f815 2b01 	ldrb.w	r2, [r5], #1
      hi2c->XferSize--;
 80024a6:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024aa:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80024ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80024ae:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 80024b0:	3a01      	subs	r2, #1
 80024b2:	b292      	uxth	r2, r2
 80024b4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024b6:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 80024b8:	6265      	str	r5, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ba:	0755      	lsls	r5, r2, #29
      hi2c->XferSize--;
 80024bc:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024be:	d50c      	bpl.n	80024da <HAL_I2C_Master_Transmit+0x1aa>
 80024c0:	b159      	cbz	r1, 80024da <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c2:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 80024c4:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c8:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80024ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80024cc:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80024ce:	3a01      	subs	r2, #1
 80024d0:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80024d2:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80024d6:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80024d8:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80024da:	1c75      	adds	r5, r6, #1
 80024dc:	d128      	bne.n	8002530 <HAL_I2C_Master_Transmit+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	0750      	lsls	r0, r2, #29
 80024e2:	d405      	bmi.n	80024f0 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	0551      	lsls	r1, r2, #21
 80024e8:	d497      	bmi.n	800241a <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	0750      	lsls	r0, r2, #29
 80024ee:	d5f9      	bpl.n	80024e4 <HAL_I2C_Master_Transmit+0x1b4>
    while (hi2c->XferSize > 0U)
 80024f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	d188      	bne.n	8002408 <HAL_I2C_Master_Transmit+0xd8>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f6:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80024f8:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002500:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002502:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002506:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800250a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 800250e:	e71f      	b.n	8002350 <HAL_I2C_Master_Transmit+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	0612      	lsls	r2, r2, #24
 8002514:	d4c1      	bmi.n	800249a <HAL_I2C_Master_Transmit+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	0552      	lsls	r2, r2, #21
 800251a:	f53f af7e 	bmi.w	800241a <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7ff fa91 	bl	8001a44 <HAL_GetTick>
 8002522:	1bc0      	subs	r0, r0, r7
 8002524:	4286      	cmp	r6, r0
 8002526:	d33f      	bcc.n	80025a8 <HAL_I2C_Master_Transmit+0x278>
 8002528:	2e00      	cmp	r6, #0
 800252a:	d03d      	beq.n	80025a8 <HAL_I2C_Master_Transmit+0x278>
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	e76b      	b.n	8002408 <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	0752      	lsls	r2, r2, #29
 8002534:	d4dc      	bmi.n	80024f0 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	0552      	lsls	r2, r2, #21
 800253a:	f53f af6e 	bmi.w	800241a <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff fa81 	bl	8001a44 <HAL_GetTick>
 8002542:	1bc0      	subs	r0, r0, r7
 8002544:	4286      	cmp	r6, r0
 8002546:	d32f      	bcc.n	80025a8 <HAL_I2C_Master_Transmit+0x278>
 8002548:	b376      	cbz	r6, 80025a8 <HAL_I2C_Master_Transmit+0x278>
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	e7c5      	b.n	80024da <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->State             = HAL_I2C_STATE_READY;
 800254e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002550:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002552:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002556:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800255a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800255c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002560:	f043 0320 	orr.w	r3, r3, #32
 8002564:	6423      	str	r3, [r4, #64]	; 0x40
 8002566:	e6f1      	b.n	800234c <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002568:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800256a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800256c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800256e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002572:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002578:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800257a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800257e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002582:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002584:	680b      	ldr	r3, [r1, #0]
 8002586:	05de      	lsls	r6, r3, #23
 8002588:	f57f af5b 	bpl.w	8002442 <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800258c:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8002590:	f04f 0801 	mov.w	r8, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002594:	6423      	str	r3, [r4, #64]	; 0x40
 8002596:	e6db      	b.n	8002350 <HAL_I2C_Master_Transmit+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 800259a:	f04f 0801 	mov.w	r8, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e6d3      	b.n	8002350 <HAL_I2C_Master_Transmit+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025a8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80025aa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025ac:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025b2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80025b8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025bc:	f043 0320 	orr.w	r3, r3, #32
 80025c0:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80025c2:	e73a      	b.n	800243a <HAL_I2C_Master_Transmit+0x10a>
 80025c4:	ffff0000 	.word	0xffff0000

080025c8 <HAL_I2C_Master_Transmit_DMA>:
{
 80025c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80025ca:	2400      	movs	r4, #0
{
 80025cc:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80025ce:	9401      	str	r4, [sp, #4]
{
 80025d0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80025d6:	2820      	cmp	r0, #32
 80025d8:	d126      	bne.n	8002628 <HAL_I2C_Master_Transmit_DMA+0x60>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80025da:	484f      	ldr	r0, [pc, #316]	; (8002718 <HAL_I2C_Master_Transmit_DMA+0x150>)
 80025dc:	4616      	mov	r6, r2
 80025de:	6800      	ldr	r0, [r0, #0]
 80025e0:	4a4e      	ldr	r2, [pc, #312]	; (800271c <HAL_I2C_Master_Transmit_DMA+0x154>)
 80025e2:	08c0      	lsrs	r0, r0, #3
 80025e4:	fba2 2000 	umull	r2, r0, r2, r0
 80025e8:	0a00      	lsrs	r0, r0, #8
 80025ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025f2:	9001      	str	r0, [sp, #4]
 80025f4:	e003      	b.n	80025fe <HAL_I2C_Master_Transmit_DMA+0x36>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80025f6:	682c      	ldr	r4, [r5, #0]
 80025f8:	69a0      	ldr	r0, [r4, #24]
 80025fa:	0780      	lsls	r0, r0, #30
 80025fc:	d517      	bpl.n	800262e <HAL_I2C_Master_Transmit_DMA+0x66>
      count--;
 80025fe:	9c01      	ldr	r4, [sp, #4]
 8002600:	3c01      	subs	r4, #1
 8002602:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8002604:	9801      	ldr	r0, [sp, #4]
 8002606:	2800      	cmp	r0, #0
 8002608:	d1f5      	bne.n	80025f6 <HAL_I2C_Master_Transmit_DMA+0x2e>
        hi2c->State               = HAL_I2C_STATE_READY;
 800260a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800260c:	6328      	str	r0, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800260e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->State               = HAL_I2C_STATE_READY;
 8002612:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002616:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        return HAL_ERROR;
 800261a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800261c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800261e:	f043 0320 	orr.w	r3, r3, #32
 8002622:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002624:	b003      	add	sp, #12
 8002626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002628:	2002      	movs	r0, #2
}
 800262a:	b003      	add	sp, #12
 800262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800262e:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 8002632:	2a01      	cmp	r2, #1
 8002634:	d0f8      	beq.n	8002628 <HAL_I2C_Master_Transmit_DMA+0x60>
 8002636:	2201      	movs	r2, #1
 8002638:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	07d2      	lsls	r2, r2, #31
 8002640:	d403      	bmi.n	800264a <HAL_I2C_Master_Transmit_DMA+0x82>
      __HAL_I2C_ENABLE(hi2c);
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800264a:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800264e:	2010      	movs	r0, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002650:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002658:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800265a:	f885 c03d 	strb.w	ip, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800265e:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002662:	642f      	str	r7, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002664:	856b      	strh	r3, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002666:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002668:	4a2d      	ldr	r2, [pc, #180]	; (8002720 <HAL_I2C_Master_Transmit_DMA+0x158>)
    hi2c->XferSize    = hi2c->XferCount;
 800266a:	b29b      	uxth	r3, r3
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800266c:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 800266e:	626e      	str	r6, [r5, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002670:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8002672:	6469      	str	r1, [r5, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 8002674:	b333      	cbz	r3, 80026c4 <HAL_I2C_Master_Transmit_DMA+0xfc>
      if (hi2c->hdmatx != NULL)
 8002676:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8002678:	2800      	cmp	r0, #0
 800267a:	d040      	beq.n	80026fe <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800267c:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8002724 <HAL_I2C_Master_Transmit_DMA+0x15c>
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002680:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8002728 <HAL_I2C_Master_Transmit_DMA+0x160>
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002684:	4631      	mov	r1, r6
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002686:	62c7      	str	r7, [r0, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002688:	6347      	str	r7, [r0, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800268a:	f104 0210 	add.w	r2, r4, #16
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800268e:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002692:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002696:	f7ff fa8f 	bl	8001bb8 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800269a:	bb18      	cbnz	r0, 80026e4 <HAL_I2C_Master_Transmit_DMA+0x11c>
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800269c:	682b      	ldr	r3, [r5, #0]
        __HAL_UNLOCK(hi2c);
 800269e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80026a8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026b0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026b8:	601a      	str	r2, [r3, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e7af      	b.n	8002624 <HAL_I2C_Master_Transmit_DMA+0x5c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c4:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80026c6:	4618      	mov	r0, r3
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026cc:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ce:	6822      	ldr	r2, [r4, #0]
 80026d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d4:	6022      	str	r2, [r4, #0]
      __HAL_UNLOCK(hi2c);
 80026d6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026da:	6863      	ldr	r3, [r4, #4]
 80026dc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e0:	6063      	str	r3, [r4, #4]
 80026e2:	e79f      	b.n	8002624 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80026e4:	2320      	movs	r3, #32
 80026e6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80026ea:	f885 703e 	strb.w	r7, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80026ee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80026f2:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hi2c);
 80026f6:	f885 703c 	strb.w	r7, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80026fa:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80026fc:	e792      	b.n	8002624 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80026fe:	2320      	movs	r3, #32
 8002700:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002704:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002708:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800270a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800270e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        return HAL_ERROR;
 8002712:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002714:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002716:	e785      	b.n	8002624 <HAL_I2C_Master_Transmit_DMA+0x5c>
 8002718:	20000000 	.word	0x20000000
 800271c:	14f8b589 	.word	0x14f8b589
 8002720:	ffff0000 	.word	0xffff0000
 8002724:	08002845 	.word	0x08002845
 8002728:	08002809 	.word	0x08002809

0800272c <HAL_I2C_MasterTxCpltCallback>:
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop

08002730 <HAL_I2C_MasterRxCpltCallback>:
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <HAL_I2C_SlaveTxCpltCallback>:
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop

08002738 <HAL_I2C_SlaveRxCpltCallback>:
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <HAL_I2C_AddrCallback>:
}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop

08002740 <HAL_I2C_ListenCpltCallback>:
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop

08002744 <HAL_I2C_MemTxCpltCallback>:
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop

08002748 <I2C_MemoryTransmit_TXE_BTF>:
{
 8002748:	b538      	push	{r3, r4, r5, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800274a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 800274e:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002750:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8002752:	b959      	cbnz	r1, 800276c <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002754:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002756:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002758:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800275a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800275c:	d032      	beq.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x7c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800275e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002762:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8002764:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002766:	3201      	adds	r2, #1
 8002768:	6502      	str	r2, [r0, #80]	; 0x50
}
 800276a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 800276c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800276e:	2901      	cmp	r1, #1
 8002770:	d020      	beq.n	80027b4 <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 8002772:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002774:	2902      	cmp	r1, #2
 8002776:	d1f8      	bne.n	800276a <I2C_MemoryTransmit_TXE_BTF+0x22>
 8002778:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800277a:	2a22      	cmp	r2, #34	; 0x22
 800277c:	d02c      	beq.n	80027d8 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800277e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002780:	b289      	uxth	r1, r1
 8002782:	bb29      	cbnz	r1, 80027d0 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002784:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002786:	b289      	uxth	r1, r1
 8002788:	2900      	cmp	r1, #0
 800278a:	d1ee      	bne.n	800276a <I2C_MemoryTransmit_TXE_BTF+0x22>
 800278c:	2a21      	cmp	r2, #33	; 0x21
 800278e:	d1ec      	bne.n	800276a <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->State = HAL_I2C_STATE_READY;
 8002790:	2520      	movs	r5, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002792:	6802      	ldr	r2, [r0, #0]
 8002794:	6854      	ldr	r4, [r2, #4]
 8002796:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800279a:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	6814      	ldr	r4, [r2, #0]
 800279e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80027a2:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027a4:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80027ae:	f7ff ffc9 	bl	8002744 <HAL_I2C_MemTxCpltCallback>
}
 80027b2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027b4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80027b6:	6801      	ldr	r1, [r0, #0]
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 80027bc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80027be:	3201      	adds	r2, #1
 80027c0:	6502      	str	r2, [r0, #80]	; 0x50
}
 80027c2:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80027c8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80027ca:	3202      	adds	r2, #2
 80027cc:	6502      	str	r2, [r0, #80]	; 0x50
}
 80027ce:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027d0:	2a21      	cmp	r2, #33	; 0x21
 80027d2:	d00a      	beq.n	80027ea <I2C_MemoryTransmit_TXE_BTF+0xa2>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80027d8:	6801      	ldr	r1, [r0, #0]
 80027da:	680a      	ldr	r2, [r1, #0]
 80027dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e0:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 80027e2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80027e4:	3201      	adds	r2, #1
 80027e6:	6502      	str	r2, [r0, #80]	; 0x50
}
 80027e8:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ea:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80027ec:	6802      	ldr	r2, [r0, #0]
 80027ee:	f811 0b01 	ldrb.w	r0, [r1], #1
 80027f2:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 80027f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80027f6:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80027f8:	3a01      	subs	r2, #1
 80027fa:	b292      	uxth	r2, r2
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027fe:	bd38      	pop	{r3, r4, r5, pc}

08002800 <HAL_I2C_MemRxCpltCallback>:
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop

08002804 <HAL_I2C_ErrorCallback>:
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop

08002808 <I2C_DMAError>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002808:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800280a:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 800280c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800280e:	b10b      	cbz	r3, 8002814 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002810:	2200      	movs	r2, #0
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8002814:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002816:	b10b      	cbz	r3, 800281c <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002818:	2200      	movs	r2, #0
 800281a:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->XferCount       = 0U;
 800281c:	2200      	movs	r2, #0
  hi2c->State           = HAL_I2C_STATE_READY;
 800281e:	2420      	movs	r4, #32
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002820:	6801      	ldr	r1, [r0, #0]
 8002822:	680b      	ldr	r3, [r1, #0]
 8002824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002828:	600b      	str	r3, [r1, #0]
  hi2c->XferCount       = 0U;
 800282a:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800282c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8002830:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8002834:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002836:	f043 0310 	orr.w	r3, r3, #16
 800283a:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 800283c:	f7ff ffe2 	bl	8002804 <HAL_I2C_ErrorCallback>
}
 8002840:	bd10      	pop	{r4, pc}
 8002842:	bf00      	nop

08002844 <I2C_DMAXferCplt>:
{
 8002844:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002846:	6a44      	ldr	r4, [r0, #36]	; 0x24
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002848:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800284a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800284e:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002854:	6859      	ldr	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8002856:	6b65      	ldr	r5, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002858:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800285c:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800285e:	b2c0      	uxtb	r0, r0
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002860:	6059      	str	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8002862:	b10d      	cbz	r5, 8002868 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002864:	2100      	movs	r1, #0
 8002866:	62a9      	str	r1, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8002868:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800286a:	b109      	cbz	r1, 8002870 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800286c:	2500      	movs	r5, #0
 800286e:	628d      	str	r5, [r1, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002870:	f002 0121 	and.w	r1, r2, #33	; 0x21
 8002874:	2921      	cmp	r1, #33	; 0x21
 8002876:	d039      	beq.n	80028ec <I2C_DMAXferCplt+0xa8>
 8002878:	f002 0122 	and.w	r1, r2, #34	; 0x22
 800287c:	2922      	cmp	r1, #34	; 0x22
 800287e:	d033      	beq.n	80028e8 <I2C_DMAXferCplt+0xa4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002880:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002884:	b37a      	cbz	r2, 80028e6 <I2C_DMAXferCplt+0xa2>
    if (hi2c->XferCount == (uint16_t)1)
 8002886:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002888:	b292      	uxth	r2, r2
 800288a:	2a01      	cmp	r2, #1
 800288c:	d03d      	beq.n	800290a <I2C_DMAXferCplt+0xc6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800288e:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002890:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002894:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002898:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800289a:	d006      	beq.n	80028aa <I2C_DMAXferCplt+0x66>
 800289c:	2e08      	cmp	r6, #8
 800289e:	d004      	beq.n	80028aa <I2C_DMAXferCplt+0x66>
 80028a0:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 80028a4:	d001      	beq.n	80028aa <I2C_DMAXferCplt+0x66>
 80028a6:	2e20      	cmp	r6, #32
 80028a8:	d103      	bne.n	80028b2 <I2C_DMAXferCplt+0x6e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b0:	601a      	str	r2, [r3, #0]
    hi2c->XferCount = 0U;
 80028b2:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028ba:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c2:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80028c4:	8561      	strh	r1, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028c8:	bb23      	cbnz	r3, 8002914 <I2C_DMAXferCplt+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	2220      	movs	r2, #32
 80028cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028d0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80028d4:	2a40      	cmp	r2, #64	; 0x40
 80028d6:	d035      	beq.n	8002944 <I2C_DMAXferCplt+0x100>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028d8:	2212      	movs	r2, #18
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80028de:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028e0:	6322      	str	r2, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80028e2:	f7ff ff25 	bl	8002730 <HAL_I2C_MasterRxCpltCallback>
}
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80028e8:	2820      	cmp	r0, #32
 80028ea:	d1c9      	bne.n	8002880 <I2C_DMAXferCplt+0x3c>
    hi2c->XferCount = 0U;
 80028ec:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028ee:	6859      	ldr	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80028f0:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028f2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80028f6:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 80028f8:	8560      	strh	r0, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80028fa:	d00f      	beq.n	800291c <I2C_DMAXferCplt+0xd8>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028fc:	2a2a      	cmp	r2, #42	; 0x2a
 80028fe:	d017      	beq.n	8002930 <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002906:	605a      	str	r2, [r3, #4]
}
 8002908:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e7bc      	b.n	800288e <I2C_DMAXferCplt+0x4a>
      HAL_I2C_ErrorCallback(hi2c);
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff ff75 	bl	8002804 <HAL_I2C_ErrorCallback>
}
 800291a:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800291c:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800291e:	2221      	movs	r2, #33	; 0x21
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002920:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002922:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002924:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002928:	f7ff ff04 	bl	8002734 <HAL_I2C_SlaveTxCpltCallback>
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	e7e7      	b.n	8002900 <I2C_DMAXferCplt+0xbc>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002930:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002932:	2222      	movs	r2, #34	; 0x22
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002934:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002936:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002938:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800293c:	f7ff fefc 	bl	8002738 <HAL_I2C_SlaveRxCpltCallback>
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	e7dd      	b.n	8002900 <I2C_DMAXferCplt+0xbc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002948:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 800294a:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800294c:	f7ff ff58 	bl	8002800 <HAL_I2C_MemRxCpltCallback>
}
 8002950:	bd70      	pop	{r4, r5, r6, pc}
 8002952:	bf00      	nop

08002954 <HAL_I2C_AbortCpltCallback>:
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop

08002958 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8002958:	2200      	movs	r2, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800295a:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <I2C_DMAAbort+0xec>)
{
 800295c:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4939      	ldr	r1, [pc, #228]	; (8002a48 <I2C_DMAAbort+0xf0>)
 8002962:	08db      	lsrs	r3, r3, #3
 8002964:	fba1 1303 	umull	r1, r3, r1, r3
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002968:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800296a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800296c:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800296e:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002970:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002974:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002978:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800297c:	6802      	ldr	r2, [r0, #0]
 800297e:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002980:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002982:	e005      	b.n	8002990 <I2C_DMAAbort+0x38>
    count--;
 8002984:	9b01      	ldr	r3, [sp, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	059b      	lsls	r3, r3, #22
 800298e:	d506      	bpl.n	800299e <I2C_DMAAbort+0x46>
    if (count == 0U)
 8002990:	9b01      	ldr	r3, [sp, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f6      	bne.n	8002984 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002996:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002998:	f043 0320 	orr.w	r3, r3, #32
 800299c:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 800299e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80029a0:	b34c      	cbz	r4, 80029f6 <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80029a2:	2500      	movs	r5, #0
  if (hi2c->hdmarx != NULL)
 80029a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 80029a6:	62a5      	str	r5, [r4, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 80029a8:	b1f3      	cbz	r3, 80029e8 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80029ac:	629d      	str	r5, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 80029b2:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 80029b4:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80029b6:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->hdmarx->XferAbortCallback = NULL;
 80029b8:	2400      	movs	r4, #0
 80029ba:	635c      	str	r4, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029c8:	2b60      	cmp	r3, #96	; 0x60
 80029ca:	d02a      	beq.n	8002a22 <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029cc:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80029d0:	2928      	cmp	r1, #40	; 0x28
 80029d2:	d019      	beq.n	8002a08 <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d6:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80029e0:	f7ff ff10 	bl	8002804 <HAL_I2C_ErrorCallback>
}
 80029e4:	b002      	add	sp, #8
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e8:	6815      	ldr	r5, [r2, #0]
 80029ea:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80029ee:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80029f0:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80029f2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 80029f4:	e7e2      	b.n	80029bc <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 80029f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80029f8:	b1f3      	cbz	r3, 8002a38 <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fa:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80029fc:	629c      	str	r4, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8002a02:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8002a04:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8002a06:	e7d7      	b.n	80029b8 <I2C_DMAAbort+0x60>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a08:	2400      	movs	r4, #0
      __HAL_I2C_ENABLE(hi2c);
 8002a0a:	6813      	ldr	r3, [r2, #0]
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a18:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a1a:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a1c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8002a20:	e7de      	b.n	80029e0 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a22:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a24:	2220      	movs	r2, #32
 8002a26:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a2a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002a2e:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a30:	f7ff ff90 	bl	8002954 <HAL_I2C_AbortCpltCallback>
}
 8002a34:	b002      	add	sp, #8
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a38:	6814      	ldr	r4, [r2, #0]
 8002a3a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8002a3e:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8002a40:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8002a42:	e7bb      	b.n	80029bc <I2C_DMAAbort+0x64>
 8002a44:	20000000 	.word	0x20000000
 8002a48:	14f8b589 	.word	0x14f8b589

08002a4c <I2C_ITError>:
{
 8002a4c:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a4e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002a52:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 8002a56:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a58:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a5a:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a5c:	d039      	beq.n	8002ad2 <I2C_ITError+0x86>
 8002a5e:	b2d9      	uxtb	r1, r3
 8002a60:	2940      	cmp	r1, #64	; 0x40
 8002a62:	d036      	beq.n	8002ad2 <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a64:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8002a68:	2928      	cmp	r1, #40	; 0x28
 8002a6a:	d03d      	beq.n	8002ae8 <I2C_ITError+0x9c>
 8002a6c:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	0508      	lsls	r0, r1, #20
 8002a72:	d407      	bmi.n	8002a84 <I2C_ITError+0x38>
 8002a74:	2a60      	cmp	r2, #96	; 0x60
 8002a76:	d005      	beq.n	8002a84 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a84:	2200      	movs	r2, #0
 8002a86:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002a8e:	d134      	bne.n	8002afa <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a90:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002a94:	2960      	cmp	r1, #96	; 0x60
 8002a96:	d075      	beq.n	8002b84 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	0650      	lsls	r0, r2, #25
 8002a9c:	d505      	bpl.n	8002aaa <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aa2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7ff feaa 	bl	8002804 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8002ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ab2:	0719      	lsls	r1, r3, #28
 8002ab4:	d004      	beq.n	8002ac0 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	6853      	ldr	r3, [r2, #4]
 8002aba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002abe:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8002ac0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ac4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8002ac6:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ac8:	0752      	lsls	r2, r2, #29
 8002aca:	d501      	bpl.n	8002ad0 <I2C_ITError+0x84>
 8002acc:	2b28      	cmp	r3, #40	; 0x28
 8002ace:	d02f      	beq.n	8002b30 <I2C_ITError+0xe4>
}
 8002ad0:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ad2:	2a22      	cmp	r2, #34	; 0x22
 8002ad4:	d1c6      	bne.n	8002a64 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ade:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	0512      	lsls	r2, r2, #20
 8002ae4:	d5c8      	bpl.n	8002a78 <I2C_ITError+0x2c>
 8002ae6:	e7cd      	b.n	8002a84 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ae8:	2200      	movs	r2, #0
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aee:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002af8:	d0ca      	beq.n	8002a90 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002afa:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002afc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b02:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b04:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d01e      	beq.n	8002b4a <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b0c:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <I2C_ITError+0x164>)
 8002b0e:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b10:	f7ff f8b6 	bl	8001c80 <HAL_DMA_Abort_IT>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d0cb      	beq.n	8002ab0 <I2C_ITError+0x64>
        hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8002b1a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b2c:	4798      	blx	r3
 8002b2e:	e7bf      	b.n	8002ab0 <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b30:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b32:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b34:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <I2C_ITError+0x168>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b36:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b38:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b3a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b44:	f7ff fdfc 	bl	8002740 <HAL_I2C_ListenCpltCallback>
}
 8002b48:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <I2C_ITError+0x164>)
 8002b4e:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b50:	f7ff f896 	bl	8001c80 <HAL_DMA_Abort_IT>
 8002b54:	2800      	cmp	r0, #0
 8002b56:	d0ab      	beq.n	8002ab0 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	0651      	lsls	r1, r2, #25
 8002b5e:	d506      	bpl.n	8002b6e <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b64:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002b66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	3201      	adds	r2, #1
 8002b6c:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8002b6e:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8002b70:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b80:	4798      	blx	r3
 8002b82:	e795      	b.n	8002ab0 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	2120      	movs	r1, #32
 8002b86:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b8a:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	0652      	lsls	r2, r2, #25
 8002b90:	d506      	bpl.n	8002ba0 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b96:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002b98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	3201      	adds	r2, #1
 8002b9e:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002ba0:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ba2:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002baa:	f7ff fed3 	bl	8002954 <HAL_I2C_AbortCpltCallback>
 8002bae:	e77f      	b.n	8002ab0 <I2C_ITError+0x64>
 8002bb0:	08002959 	.word	0x08002959
 8002bb4:	ffff0000 	.word	0xffff0000

08002bb8 <HAL_I2C_EV_IRQHandler>:
{
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bba:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bbc:	6803      	ldr	r3, [r0, #0]
{
 8002bbe:	b08f      	sub	sp, #60	; 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bc0:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bc4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bc8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bcc:	2910      	cmp	r1, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bce:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bd0:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bd2:	d022      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x62>
 8002bd4:	2d40      	cmp	r5, #64	; 0x40
 8002bd6:	d020      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002bda:	2900      	cmp	r1, #0
 8002bdc:	f000 8095 	beq.w	8002d0a <HAL_I2C_EV_IRQHandler+0x152>
  uint32_t sr2itflags               = 0U;
 8002be0:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002be2:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be4:	078f      	lsls	r7, r1, #30
 8002be6:	f3c1 0640 	ubfx	r6, r1, #1, #1
 8002bea:	d559      	bpl.n	8002ca0 <HAL_I2C_EV_IRQHandler+0xe8>
 8002bec:	0586      	lsls	r6, r0, #22
 8002bee:	d559      	bpl.n	8002ca4 <HAL_I2C_EV_IRQHandler+0xec>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bf0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bf2:	b102      	cbz	r2, 8002bf6 <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bf4:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bf6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002bfa:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002bfe:	2a28      	cmp	r2, #40	; 0x28
 8002c00:	f000 821d 	beq.w	800303e <HAL_I2C_EV_IRQHandler+0x486>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c04:	2200      	movs	r2, #0
 8002c06:	920c      	str	r2, [sp, #48]	; 0x30
 8002c08:	6959      	ldr	r1, [r3, #20]
 8002c0a:	910c      	str	r1, [sp, #48]	; 0x30
 8002c0c:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 8002c0e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	930c      	str	r3, [sp, #48]	; 0x30
 8002c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 8002c16:	b00f      	add	sp, #60	; 0x3c
 8002c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c1a:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c1c:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c1e:	f011 0f01 	tst.w	r1, #1
 8002c22:	d11a      	bne.n	8002c5a <HAL_I2C_EV_IRQHandler+0xa2>
 8002c24:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8002c28:	d0f5      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8002c2a:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8002c2e:	d0f2      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c30:	070e      	lsls	r6, r1, #28
 8002c32:	d56d      	bpl.n	8002d10 <HAL_I2C_EV_IRQHandler+0x158>
 8002c34:	0586      	lsls	r6, r0, #22
 8002c36:	f140 8083 	bpl.w	8002d40 <HAL_I2C_EV_IRQHandler+0x188>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c3a:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c3e:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c40:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c42:	2900      	cmp	r1, #0
 8002c44:	f000 81e2 	beq.w	800300c <HAL_I2C_EV_IRQHandler+0x454>
 8002c48:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002c4a:	2a00      	cmp	r2, #0
 8002c4c:	f000 81de 	beq.w	800300c <HAL_I2C_EV_IRQHandler+0x454>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	e7dd      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c5a:	0586      	lsls	r6, r0, #22
 8002c5c:	d56e      	bpl.n	8002d3c <HAL_I2C_EV_IRQHandler+0x184>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002c5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c60:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8002c64:	f000 81e8 	beq.w	8003038 <HAL_I2C_EV_IRQHandler+0x480>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002c68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c6a:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002c6e:	bf04      	itt	eq
 8002c70:	2208      	moveq	r2, #8
 8002c72:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c74:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002c78:	2a40      	cmp	r2, #64	; 0x40
 8002c7a:	f000 81d6 	beq.w	800302a <HAL_I2C_EV_IRQHandler+0x472>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c7e:	6922      	ldr	r2, [r4, #16]
 8002c80:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002c84:	f000 81b1 	beq.w	8002fea <HAL_I2C_EV_IRQHandler+0x432>
      if (hi2c->EventCount == 0U)
 8002c88:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002c8a:	2a00      	cmp	r2, #0
 8002c8c:	f040 81eb 	bne.w	8003066 <HAL_I2C_EV_IRQHandler+0x4ae>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002c90:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002c92:	11d2      	asrs	r2, r2, #7
 8002c94:	f002 0206 	and.w	r2, r2, #6
 8002c98:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002c9c:	611a      	str	r2, [r3, #16]
 8002c9e:	e7ba      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca0:	06cf      	lsls	r7, r1, #27
 8002ca2:	d47b      	bmi.n	8002d9c <HAL_I2C_EV_IRQHandler+0x1e4>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ca4:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8002ca8:	2a21      	cmp	r2, #33	; 0x21
 8002caa:	f000 80f4 	beq.w	8002e96 <HAL_I2C_EV_IRQHandler+0x2de>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cae:	064e      	lsls	r6, r1, #25
 8002cb0:	f140 8131 	bpl.w	8002f16 <HAL_I2C_EV_IRQHandler+0x35e>
 8002cb4:	0545      	lsls	r5, r0, #21
 8002cb6:	f140 812e 	bpl.w	8002f16 <HAL_I2C_EV_IRQHandler+0x35e>
 8002cba:	0749      	lsls	r1, r1, #29
 8002cbc:	f100 812e 	bmi.w	8002f1c <HAL_I2C_EV_IRQHandler+0x364>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cc0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002cc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cc6:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	2a00      	cmp	r2, #0
 8002ccc:	d0a3      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cd2:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002cd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002cd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002ce0:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ce2:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8002ce4:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d195      	bne.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8002cea:	292a      	cmp	r1, #42	; 0x2a
 8002cec:	d193      	bne.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cee:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cf0:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cf2:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cf4:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cf6:	6853      	ldr	r3, [r2, #4]
 8002cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cfc:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cfe:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d00:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d04:	f7ff fd18 	bl	8002738 <HAL_I2C_SlaveRxCpltCallback>
 8002d08:	e785      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d0a:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d0c:	6959      	ldr	r1, [r3, #20]
 8002d0e:	e769      	b.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d10:	078e      	lsls	r6, r1, #30
 8002d12:	d515      	bpl.n	8002d40 <HAL_I2C_EV_IRQHandler+0x188>
 8002d14:	0586      	lsls	r6, r0, #22
 8002d16:	d513      	bpl.n	8002d40 <HAL_I2C_EV_IRQHandler+0x188>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d18:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d1e:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d20:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d24:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d26:	2922      	cmp	r1, #34	; 0x22
 8002d28:	f000 81b2 	beq.w	8003090 <HAL_I2C_EV_IRQHandler+0x4d8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	920a      	str	r2, [sp, #40]	; 0x28
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	920a      	str	r2, [sp, #40]	; 0x28
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	930a      	str	r3, [sp, #40]	; 0x28
 8002d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d3a:	e76c      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3c:	070e      	lsls	r6, r1, #28
 8002d3e:	d5e7      	bpl.n	8002d10 <HAL_I2C_EV_IRQHandler+0x158>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002d40:	077f      	lsls	r7, r7, #29
 8002d42:	f140 80f4 	bpl.w	8002f2e <HAL_I2C_EV_IRQHandler+0x376>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d46:	685e      	ldr	r6, [r3, #4]
 8002d48:	0536      	lsls	r6, r6, #20
 8002d4a:	f53f af64 	bmi.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d4e:	060f      	lsls	r7, r1, #24
 8002d50:	f140 8114 	bpl.w	8002f7c <HAL_I2C_EV_IRQHandler+0x3c4>
 8002d54:	0546      	lsls	r6, r0, #21
 8002d56:	f140 8111 	bpl.w	8002f7c <HAL_I2C_EV_IRQHandler+0x3c4>
 8002d5a:	074f      	lsls	r7, r1, #29
 8002d5c:	f100 8111 	bmi.w	8002f82 <HAL_I2C_EV_IRQHandler+0x3ca>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d60:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d64:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d66:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d6a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d6c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d6e:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d70:	2800      	cmp	r0, #0
 8002d72:	f040 823a 	bne.w	80031ea <HAL_I2C_EV_IRQHandler+0x632>
 8002d76:	2a21      	cmp	r2, #33	; 0x21
 8002d78:	f000 8341 	beq.w	80033fe <HAL_I2C_EV_IRQHandler+0x846>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d7c:	2940      	cmp	r1, #64	; 0x40
 8002d7e:	f47f af4a 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d82:	2a22      	cmp	r2, #34	; 0x22
 8002d84:	f47f af47 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount == 0U)
 8002d88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d8a:	b292      	uxth	r2, r2
 8002d8c:	2a00      	cmp	r2, #0
 8002d8e:	f040 82c1 	bne.w	8003314 <HAL_I2C_EV_IRQHandler+0x75c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	e73c      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d9c:	0585      	lsls	r5, r0, #22
 8002d9e:	d581      	bpl.n	8002ca4 <HAL_I2C_EV_IRQHandler+0xec>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002da0:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da4:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002da6:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dac:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002dae:	960d      	str	r6, [sp, #52]	; 0x34
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	920d      	str	r2, [sp, #52]	; 0x34
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc4:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	0511      	lsls	r1, r2, #20
 8002dca:	d521      	bpl.n	8002e10 <HAL_I2C_EV_IRQHandler+0x258>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dcc:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002dd0:	2a22      	cmp	r2, #34	; 0x22
 8002dd2:	f000 817a 	beq.w	80030ca <HAL_I2C_EV_IRQHandler+0x512>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002dd6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002dd8:	6802      	ldr	r2, [r0, #0]
 8002dda:	6852      	ldr	r2, [r2, #4]
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002de0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002de2:	b292      	uxth	r2, r2
 8002de4:	b11a      	cbz	r2, 8002dee <HAL_I2C_EV_IRQHandler+0x236>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002de6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002de8:	f042 0204 	orr.w	r2, r2, #4
 8002dec:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002df6:	f7ff f821 	bl	8001e3c <HAL_DMA_GetState>
 8002dfa:	2801      	cmp	r0, #1
 8002dfc:	d008      	beq.n	8002e10 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002dfe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e00:	4ba2      	ldr	r3, [pc, #648]	; (800308c <HAL_I2C_EV_IRQHandler+0x4d4>)
 8002e02:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e04:	f7fe ff3c 	bl	8001c80 <HAL_DMA_Abort_IT>
 8002e08:	b110      	cbz	r0, 8002e10 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e0a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e0e:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8002e10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b313      	cbz	r3, 8002e5c <HAL_I2C_EV_IRQHandler+0x2a4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	0752      	lsls	r2, r2, #29
 8002e1c:	d50a      	bpl.n	8002e34 <HAL_I2C_EV_IRQHandler+0x27c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e22:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002e24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002e28:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8002e2a:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002e32:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	0657      	lsls	r7, r2, #25
 8002e38:	d509      	bpl.n	8002e4e <HAL_I2C_EV_IRQHandler+0x296>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e3e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002e40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002e42:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002e48:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8002e4a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002e4c:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8002e4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b11b      	cbz	r3, 8002e5c <HAL_I2C_EV_IRQHandler+0x2a4>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e56:	f043 0304 	orr.w	r3, r3, #4
 8002e5a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 80dd 	bne.w	800301e <HAL_I2C_EV_IRQHandler+0x466>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e64:	2d2a      	cmp	r5, #42	; 0x2a
 8002e66:	f000 8151 	beq.w	800310c <HAL_I2C_EV_IRQHandler+0x554>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e6a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002e6e:	2b28      	cmp	r3, #40	; 0x28
 8002e70:	f000 8154 	beq.w	800311c <HAL_I2C_EV_IRQHandler+0x564>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e76:	2b22      	cmp	r3, #34	; 0x22
 8002e78:	d002      	beq.n	8002e80 <HAL_I2C_EV_IRQHandler+0x2c8>
 8002e7a:	2d22      	cmp	r5, #34	; 0x22
 8002e7c:	f47f aecb 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e80:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e84:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e86:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e90:	f7ff fc52 	bl	8002738 <HAL_I2C_SlaveRxCpltCallback>
 8002e94:	e6bf      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e96:	060e      	lsls	r6, r1, #24
 8002e98:	d528      	bpl.n	8002eec <HAL_I2C_EV_IRQHandler+0x334>
 8002e9a:	0545      	lsls	r5, r0, #21
 8002e9c:	d526      	bpl.n	8002eec <HAL_I2C_EV_IRQHandler+0x334>
 8002e9e:	0749      	lsls	r1, r1, #29
 8002ea0:	d427      	bmi.n	8002ef2 <HAL_I2C_EV_IRQHandler+0x33a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ea2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002ea6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ea8:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8002eaa:	b289      	uxth	r1, r1
 8002eac:	2900      	cmp	r1, #0
 8002eae:	f43f aeb2 	beq.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002eb4:	f815 1b01 	ldrb.w	r1, [r5], #1
 8002eb8:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8002eba:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002ebc:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002ebe:	3901      	subs	r1, #1
 8002ec0:	b289      	uxth	r1, r1
 8002ec2:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ec4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002ec6:	b289      	uxth	r1, r1
 8002ec8:	2900      	cmp	r1, #0
 8002eca:	f47f aea4 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8002ece:	2829      	cmp	r0, #41	; 0x29
 8002ed0:	f47f aea1 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ed4:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ed6:	6859      	ldr	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ed8:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eda:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002ede:	6059      	str	r1, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ee0:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ee2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ee6:	f7ff fc25 	bl	8002734 <HAL_I2C_SlaveTxCpltCallback>
 8002eea:	e694      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eec:	074a      	lsls	r2, r1, #29
 8002eee:	f57f ae92 	bpl.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8002ef2:	0587      	lsls	r7, r0, #22
 8002ef4:	f57f ae8f 	bpl.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8002ef8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002efa:	b292      	uxth	r2, r2
 8002efc:	2a00      	cmp	r2, #0
 8002efe:	f43f ae8a 	beq.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f04:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002f08:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8002f0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002f0c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002f14:	e67f      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f16:	074a      	lsls	r2, r1, #29
 8002f18:	f57f ae7d 	bpl.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8002f1c:	0587      	lsls	r7, r0, #22
 8002f1e:	f57f ae7a 	bpl.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8002f22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002f24:	b292      	uxth	r2, r2
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	f43f ae75 	beq.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8002f2c:	e01b      	b.n	8002f66 <HAL_I2C_EV_IRQHandler+0x3ae>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	0512      	lsls	r2, r2, #20
 8002f32:	f53f ae70 	bmi.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f36:	064f      	lsls	r7, r1, #25
 8002f38:	d432      	bmi.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x3e8>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f3a:	0749      	lsls	r1, r1, #29
 8002f3c:	f57f ae6b 	bpl.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8002f40:	0582      	lsls	r2, r0, #22
 8002f42:	f57f ae68 	bpl.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8002f48:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	2a04      	cmp	r2, #4
 8002f4e:	f000 8119 	beq.w	8003184 <HAL_I2C_EV_IRQHandler+0x5cc>
  else if (hi2c->XferCount == 3U)
 8002f52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002f54:	b292      	uxth	r2, r2
 8002f56:	2a03      	cmp	r2, #3
 8002f58:	f000 8159 	beq.w	800320e <HAL_I2C_EV_IRQHandler+0x656>
  else if (hi2c->XferCount == 2U)
 8002f5c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	2a02      	cmp	r2, #2
 8002f62:	f000 8185 	beq.w	8003270 <HAL_I2C_EV_IRQHandler+0x6b8>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f6a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002f6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002f6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8002f74:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8002f76:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002f78:	6262      	str	r2, [r4, #36]	; 0x24
      }
 8002f7a:	e64c      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f7c:	074e      	lsls	r6, r1, #29
 8002f7e:	f57f ae4a 	bpl.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8002f82:	0581      	lsls	r1, r0, #22
 8002f84:	f57f ae47 	bpl.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f88:	2a21      	cmp	r2, #33	; 0x21
 8002f8a:	f000 8103 	beq.w	8003194 <HAL_I2C_EV_IRQHandler+0x5dc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f8e:	2d40      	cmp	r5, #64	; 0x40
 8002f90:	f47f ae41 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f94:	4620      	mov	r0, r4
}
 8002f96:	b00f      	add	sp, #60	; 0x3c
 8002f98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f9c:	f7ff bbd4 	b.w	8002748 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fa0:	0546      	lsls	r6, r0, #21
 8002fa2:	d5ca      	bpl.n	8002f3a <HAL_I2C_EV_IRQHandler+0x382>
 8002fa4:	074d      	lsls	r5, r1, #29
 8002fa6:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8002faa:	d4c9      	bmi.n	8002f40 <HAL_I2C_EV_IRQHandler+0x388>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fac:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002fb0:	2922      	cmp	r1, #34	; 0x22
 8002fb2:	f47f ae30 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    tmp = hi2c->XferCount;
 8002fb6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002fb8:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8002fba:	2903      	cmp	r1, #3
 8002fbc:	f240 81b0 	bls.w	8003320 <HAL_I2C_EV_IRQHandler+0x768>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fc4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002fc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002fc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002fd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002fd2:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8002fd8:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8002fda:	f47f ae1c 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	6853      	ldr	r3, [r2, #4]
 8002fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fe6:	6053      	str	r3, [r2, #4]
 8002fe8:	e615      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fea:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002fee:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ff0:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ff2:	bf16      	itet	ne
 8002ff4:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ff8:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ffc:	b2d2      	uxtbne	r2, r2
 8002ffe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003000:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003002:	b11a      	cbz	r2, 800300c <HAL_I2C_EV_IRQHandler+0x454>
 8003004:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003006:	2a00      	cmp	r2, #0
 8003008:	f47f ae22 	bne.w	8002c50 <HAL_I2C_EV_IRQHandler+0x98>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800300c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800300e:	2a00      	cmp	r2, #0
 8003010:	f43f ae01 	beq.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8003014:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003016:	2a00      	cmp	r2, #0
 8003018:	f47f ae1a 	bne.w	8002c50 <HAL_I2C_EV_IRQHandler+0x98>
 800301c:	e5fb      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    I2C_ITError(hi2c);
 800301e:	4620      	mov	r0, r4
}
 8003020:	b00f      	add	sp, #60	; 0x3c
 8003022:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003026:	f7ff bd11 	b.w	8002a4c <I2C_ITError>
    if (hi2c->EventCount == 0U)
 800302a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800302c:	bb3a      	cbnz	r2, 800307e <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800302e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003034:	611a      	str	r2, [r3, #16]
 8003036:	e5ee      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003038:	2201      	movs	r2, #1
 800303a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800303c:	e61a      	b.n	8002c74 <HAL_I2C_EV_IRQHandler+0xbc>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800303e:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003040:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003048:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800304a:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 800304c:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003050:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003052:	bf54      	ite	pl
 8003054:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003056:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003058:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 800305c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003060:	f7ff fb6c 	bl	800273c <HAL_I2C_AddrCallback>
 8003064:	e5d7      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8003066:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003068:	2a01      	cmp	r2, #1
 800306a:	f47f add4 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800306e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003070:	11d2      	asrs	r2, r2, #7
 8003072:	f002 0206 	and.w	r2, r2, #6
 8003076:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 800307a:	611a      	str	r2, [r3, #16]
 800307c:	e5cb      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800307e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	611a      	str	r2, [r3, #16]
 8003088:	e5c5      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 800308a:	bf00      	nop
 800308c:	08002959 	.word	0x08002959
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003090:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003092:	b911      	cbnz	r1, 800309a <HAL_I2C_EV_IRQHandler+0x4e2>
 8003094:	2a40      	cmp	r2, #64	; 0x40
 8003096:	f000 80a1 	beq.w	80031dc <HAL_I2C_EV_IRQHandler+0x624>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800309a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800309c:	b922      	cbnz	r2, 80030a8 <HAL_I2C_EV_IRQHandler+0x4f0>
 800309e:	6921      	ldr	r1, [r4, #16]
 80030a0:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 80030a4:	f000 80a5 	beq.w	80031f2 <HAL_I2C_EV_IRQHandler+0x63a>
      if (hi2c->XferCount == 0U)
 80030a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80030aa:	b292      	uxth	r2, r2
 80030ac:	2a00      	cmp	r2, #0
 80030ae:	d142      	bne.n	8003136 <HAL_I2C_EV_IRQHandler+0x57e>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b0:	9202      	str	r2, [sp, #8]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	9202      	str	r2, [sp, #8]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	9202      	str	r2, [sp, #8]
 80030ba:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	6523      	str	r3, [r4, #80]	; 0x50
 80030c8:	e5a5      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80030ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80030cc:	6802      	ldr	r2, [r0, #0]
 80030ce:	6852      	ldr	r2, [r2, #4]
 80030d0:	b292      	uxth	r2, r2
 80030d2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80030d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80030d6:	b292      	uxth	r2, r2
 80030d8:	b11a      	cbz	r2, 80030e2 <HAL_I2C_EV_IRQHandler+0x52a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030dc:	f042 0204 	orr.w	r2, r2, #4
 80030e0:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ea:	f7fe fea7 	bl	8001e3c <HAL_DMA_GetState>
 80030ee:	2801      	cmp	r0, #1
 80030f0:	f43f ae8e 	beq.w	8002e10 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80030f6:	4ba6      	ldr	r3, [pc, #664]	; (8003390 <HAL_I2C_EV_IRQHandler+0x7d8>)
 80030f8:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030fa:	f7fe fdc1 	bl	8001c80 <HAL_DMA_Abort_IT>
 80030fe:	2800      	cmp	r0, #0
 8003100:	f43f ae86 	beq.w	8002e10 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003104:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003106:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003108:	4798      	blx	r3
 800310a:	e681      	b.n	8002e10 <HAL_I2C_EV_IRQHandler+0x258>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800310c:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 800310e:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003110:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003112:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003116:	f7ff fb0f 	bl	8002738 <HAL_I2C_SlaveRxCpltCallback>
 800311a:	e6a6      	b.n	8002e6a <HAL_I2C_EV_IRQHandler+0x2b2>
      hi2c->PreviousState = I2C_STATE_NONE;
 800311c:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800311e:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003120:	499c      	ldr	r1, [pc, #624]	; (8003394 <HAL_I2C_EV_IRQHandler+0x7dc>)
      HAL_I2C_ListenCpltCallback(hi2c);
 8003122:	4620      	mov	r0, r4
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003124:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003126:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003128:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003130:	f7ff fb06 	bl	8002740 <HAL_I2C_ListenCpltCallback>
 8003134:	e56f      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->XferCount == 1U)
 8003136:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003138:	b292      	uxth	r2, r2
 800313a:	2a01      	cmp	r2, #1
 800313c:	d076      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x674>
      else if (hi2c->XferCount == 2U)
 800313e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003140:	b292      	uxth	r2, r2
 8003142:	2a02      	cmp	r2, #2
 8003144:	f000 812e 	beq.w	80033a4 <HAL_I2C_EV_IRQHandler+0x7ec>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800314e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	0511      	lsls	r1, r2, #20
 8003154:	d50e      	bpl.n	8003174 <HAL_I2C_EV_IRQHandler+0x5bc>
 8003156:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800315a:	d007      	beq.n	800316c <HAL_I2C_EV_IRQHandler+0x5b4>
 800315c:	3801      	subs	r0, #1
 800315e:	281f      	cmp	r0, #31
 8003160:	d808      	bhi.n	8003174 <HAL_I2C_EV_IRQHandler+0x5bc>
 8003162:	4a8d      	ldr	r2, [pc, #564]	; (8003398 <HAL_I2C_EV_IRQHandler+0x7e0>)
 8003164:	fa22 f000 	lsr.w	r0, r2, r0
 8003168:	07c2      	lsls	r2, r0, #31
 800316a:	d503      	bpl.n	8003174 <HAL_I2C_EV_IRQHandler+0x5bc>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003172:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003174:	2200      	movs	r2, #0
 8003176:	9209      	str	r2, [sp, #36]	; 0x24
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	9209      	str	r2, [sp, #36]	; 0x24
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	9309      	str	r3, [sp, #36]	; 0x24
 8003180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003182:	e79f      	b.n	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003184:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003192:	e6eb      	b.n	8002f6c <HAL_I2C_EV_IRQHandler+0x3b4>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003194:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003196:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800319a:	2a21      	cmp	r2, #33	; 0x21
 800319c:	f47f ad3b 	bne.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount != 0U)
 80031a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031a2:	b292      	uxth	r2, r2
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	f47f aeac 	bne.w	8002f02 <HAL_I2C_EV_IRQHandler+0x34a>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031aa:	2908      	cmp	r1, #8
 80031ac:	f000 809a 	beq.w	80032e4 <HAL_I2C_EV_IRQHandler+0x72c>
 80031b0:	2920      	cmp	r1, #32
 80031b2:	f000 8097 	beq.w	80032e4 <HAL_I2C_EV_IRQHandler+0x72c>
 80031b6:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80031ba:	f000 8093 	beq.w	80032e4 <HAL_I2C_EV_IRQHandler+0x72c>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031be:	2611      	movs	r6, #17
        hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	2520      	movs	r5, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031c2:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80031ca:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031cc:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ce:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031d6:	f7ff faa9 	bl	800272c <HAL_I2C_MasterTxCpltCallback>
 80031da:	e51c      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031dc:	9100      	str	r1, [sp, #0]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	9200      	str	r2, [sp, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	9b00      	ldr	r3, [sp, #0]
 80031e8:	e515      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80031ea:	2a21      	cmp	r2, #33	; 0x21
 80031ec:	f43f adcc 	beq.w	8002d88 <HAL_I2C_EV_IRQHandler+0x1d0>
 80031f0:	e5c4      	b.n	8002d7c <HAL_I2C_EV_IRQHandler+0x1c4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f2:	9201      	str	r2, [sp, #4]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	9201      	str	r2, [sp, #4]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	9201      	str	r2, [sp, #4]
 80031fc:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003204:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003206:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003208:	3301      	adds	r3, #1
 800320a:	6523      	str	r3, [r4, #80]	; 0x50
 800320c:	e503      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800320e:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003210:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003216:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003218:	f43f aea5 	beq.w	8002f66 <HAL_I2C_EV_IRQHandler+0x3ae>
 800321c:	2902      	cmp	r1, #2
 800321e:	f43f aea2 	beq.w	8002f66 <HAL_I2C_EV_IRQHandler+0x3ae>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e69c      	b.n	8002f66 <HAL_I2C_EV_IRQHandler+0x3ae>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800322c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003230:	f000 8104 	beq.w	800343c <HAL_I2C_EV_IRQHandler+0x884>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003234:	2808      	cmp	r0, #8
 8003236:	f000 80d2 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x826>
 800323a:	2820      	cmp	r0, #32
 800323c:	f000 80cf 	beq.w	80033de <HAL_I2C_EV_IRQHandler+0x826>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003240:	2d12      	cmp	r5, #18
 8003242:	f000 8145 	beq.w	80034d0 <HAL_I2C_EV_IRQHandler+0x918>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003246:	2810      	cmp	r0, #16
 8003248:	f200 8144 	bhi.w	80034d4 <HAL_I2C_EV_IRQHandler+0x91c>
 800324c:	4a53      	ldr	r2, [pc, #332]	; (800339c <HAL_I2C_EV_IRQHandler+0x7e4>)
 800324e:	fa22 f000 	lsr.w	r0, r2, r0
 8003252:	07c7      	lsls	r7, r0, #31
 8003254:	f140 813e 	bpl.w	80034d4 <HAL_I2C_EV_IRQHandler+0x91c>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800325e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003260:	2200      	movs	r2, #0
 8003262:	9205      	str	r2, [sp, #20]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	9205      	str	r2, [sp, #20]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	9305      	str	r3, [sp, #20]
 800326c:	9b05      	ldr	r3, [sp, #20]
 800326e:	e729      	b.n	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003270:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003272:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003274:	f000 80de 	beq.w	8003434 <HAL_I2C_EV_IRQHandler+0x87c>
 8003278:	2910      	cmp	r1, #16
 800327a:	f000 80db 	beq.w	8003434 <HAL_I2C_EV_IRQHandler+0x87c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800327e:	2904      	cmp	r1, #4
 8003280:	f000 8117 	beq.w	80034b2 <HAL_I2C_EV_IRQHandler+0x8fa>
 8003284:	2902      	cmp	r1, #2
 8003286:	f000 8114 	beq.w	80034b2 <HAL_I2C_EV_IRQHandler+0x8fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	2020      	movs	r0, #32
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003296:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003298:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount--;
 800329c:	3b01      	subs	r3, #1
 800329e:	b29b      	uxth	r3, r3
 80032a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80032a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	6912      	ldr	r2, [r2, #16]
    hi2c->pBuffPtr++;
 80032a6:	1c59      	adds	r1, r3, #1
 80032a8:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032aa:	705a      	strb	r2, [r3, #1]
    hi2c->XferCount--;
 80032ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032ae:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032b6:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 80032b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->pBuffPtr++;
 80032be:	3201      	adds	r2, #1
 80032c0:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032c2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032c8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	f000 80c9 	beq.w	8003464 <HAL_I2C_EV_IRQHandler+0x8ac>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d2:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032d4:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032da:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032dc:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032de:	f7ff fa27 	bl	8002730 <HAL_I2C_MasterRxCpltCallback>
 80032e2:	e498      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 80032e4:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	2020      	movs	r0, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80032ee:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	6819      	ldr	r1, [r3, #0]
 80032f2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80032f6:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80032f8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032fe:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003302:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003304:	2b40      	cmp	r3, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003306:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800330a:	f47f af64 	bne.w	80031d6 <HAL_I2C_EV_IRQHandler+0x61e>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800330e:	f7ff fa19 	bl	8002744 <HAL_I2C_MemTxCpltCallback>
 8003312:	e480      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003314:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003318:	2a40      	cmp	r2, #64	; 0x40
 800331a:	f47f adf2 	bne.w	8002f02 <HAL_I2C_EV_IRQHandler+0x34a>
 800331e:	e639      	b.n	8002f94 <HAL_I2C_EV_IRQHandler+0x3dc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003320:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003322:	2802      	cmp	r0, #2
 8003324:	f43f ac77 	beq.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8003328:	2901      	cmp	r1, #1
 800332a:	f63f ac74 	bhi.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800332e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003332:	481b      	ldr	r0, [pc, #108]	; (80033a0 <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 8003334:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003336:	6802      	ldr	r2, [r0, #0]
 8003338:	fbb2 f2f1 	udiv	r2, r2, r1
 800333c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003340:	920b      	str	r2, [sp, #44]	; 0x2c
 8003342:	e004      	b.n	800334e <HAL_I2C_EV_IRQHandler+0x796>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 800334a:	f000 80c8 	beq.w	80034de <HAL_I2C_EV_IRQHandler+0x926>
    count--;
 800334e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003350:	3a01      	subs	r2, #1
 8003352:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8003354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003356:	2900      	cmp	r1, #0
 8003358:	d1f4      	bne.n	8003344 <HAL_I2C_EV_IRQHandler+0x78c>
        hi2c->State = HAL_I2C_STATE_READY;
 800335a:	2520      	movs	r5, #32
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335e:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003360:	432a      	orrs	r2, r5
 8003362:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003364:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_ErrorCallback(hi2c);
 8003366:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003368:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800336c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	7033      	strb	r3, [r6, #0]
        hi2c->XferCount--;
 8003372:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003374:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003376:	3b01      	subs	r3, #1
 8003378:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800337a:	3201      	adds	r2, #1
        hi2c->XferCount--;
 800337c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800337e:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003380:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003384:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003388:	f7ff fa3c 	bl	8002804 <HAL_I2C_ErrorCallback>
 800338c:	e443      	b.n	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 800338e:	bf00      	nop
 8003390:	08002959 	.word	0x08002959
 8003394:	ffff0000 	.word	0xffff0000
 8003398:	80008081 	.word	0x80008081
 800339c:	00010014 	.word	0x00010014
 80033a0:	20000000 	.word	0x20000000
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033a4:	2810      	cmp	r0, #16
 80033a6:	d966      	bls.n	8003476 <HAL_I2C_EV_IRQHandler+0x8be>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a8:	2100      	movs	r1, #0
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b2:	9107      	str	r1, [sp, #28]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	9207      	str	r2, [sp, #28]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	9207      	str	r2, [sp, #28]
 80033bc:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c4:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	0516      	lsls	r6, r2, #20
 80033ca:	f57f ae7b 	bpl.w	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
 80033ce:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80033d2:	d164      	bne.n	800349e <HAL_I2C_EV_IRQHandler+0x8e6>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	e672      	b.n	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e6:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e8:	9106      	str	r1, [sp, #24]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	9206      	str	r2, [sp, #24]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	9206      	str	r2, [sp, #24]
 80033f2:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e662      	b.n	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033fe:	2d08      	cmp	r5, #8
 8003400:	f43f af70 	beq.w	80032e4 <HAL_I2C_EV_IRQHandler+0x72c>
 8003404:	2d20      	cmp	r5, #32
 8003406:	f43f af6d 	beq.w	80032e4 <HAL_I2C_EV_IRQHandler+0x72c>
 800340a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 800340e:	f43f af69 	beq.w	80032e4 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003412:	2611      	movs	r6, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003416:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003418:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800341a:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800341c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003420:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003422:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003428:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800342c:	f7ff f97e 	bl	800272c <HAL_I2C_MasterTxCpltCallback>
 8003430:	f7ff bbf1 	b.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e729      	b.n	8003290 <HAL_I2C_EV_IRQHandler+0x6d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800344a:	d036      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x902>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344c:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003454:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003456:	9103      	str	r1, [sp, #12]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	9203      	str	r2, [sp, #12]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	9303      	str	r3, [sp, #12]
 8003460:	9b03      	ldr	r3, [sp, #12]
 8003462:	e62f      	b.n	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	2300      	movs	r3, #0
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003466:	4620      	mov	r0, r4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003468:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800346c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800346e:	f7ff f9c7 	bl	8002800 <HAL_I2C_MemRxCpltCallback>
 8003472:	f7ff bbd0 	b.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003476:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <HAL_I2C_EV_IRQHandler+0x96c>)
 8003478:	40c2      	lsrs	r2, r0
 800347a:	43d2      	mvns	r2, r2
 800347c:	f012 0201 	ands.w	r2, r2, #1
 8003480:	d192      	bne.n	80033a8 <HAL_I2C_EV_IRQHandler+0x7f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003488:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348a:	9208      	str	r2, [sp, #32]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	9208      	str	r2, [sp, #32]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	9208      	str	r2, [sp, #32]
 8003494:	9a08      	ldr	r2, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	0515      	lsls	r5, r2, #20
 800349a:	f57f ae13 	bpl.w	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
 800349e:	3801      	subs	r0, #1
 80034a0:	281f      	cmp	r0, #31
 80034a2:	f63f ae0f 	bhi.w	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
 80034a6:	4a20      	ldr	r2, [pc, #128]	; (8003528 <HAL_I2C_EV_IRQHandler+0x970>)
 80034a8:	40c2      	lsrs	r2, r0
 80034aa:	07d0      	lsls	r0, r2, #31
 80034ac:	f57f ae0a 	bpl.w	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
 80034b0:	e790      	b.n	80033d4 <HAL_I2C_EV_IRQHandler+0x81c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e6ea      	b.n	8003290 <HAL_I2C_EV_IRQHandler+0x6d8>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	9204      	str	r2, [sp, #16]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	9204      	str	r2, [sp, #16]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	9204      	str	r2, [sp, #16]
 80034c4:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e5f9      	b.n	80030c4 <HAL_I2C_EV_IRQHandler+0x50c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80034d0:	2801      	cmp	r0, #1
 80034d2:	d184      	bne.n	80033de <HAL_I2C_EV_IRQHandler+0x826>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e6c0      	b.n	8003260 <HAL_I2C_EV_IRQHandler+0x6a8>
        hi2c->State = HAL_I2C_STATE_READY;
 80034de:	2020      	movs	r0, #32
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e0:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80034e8:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80034f0:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	702b      	strb	r3, [r5, #0]
        hi2c->XferCount--;
 80034f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80034f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003500:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003504:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8003508:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800350a:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 800350c:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800350e:	f47f aee1 	bne.w	80032d4 <HAL_I2C_EV_IRQHandler+0x71c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003512:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003516:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8003518:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800351a:	f7ff f971 	bl	8002800 <HAL_I2C_MemRxCpltCallback>
 800351e:	f7ff bb7a 	b.w	8002c16 <HAL_I2C_EV_IRQHandler+0x5e>
 8003522:	bf00      	nop
 8003524:	00010014 	.word	0x00010014
 8003528:	80008081 	.word	0x80008081

0800352c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800352c:	2800      	cmp	r0, #0
 800352e:	f000 81c3 	beq.w	80038b8 <HAL_RCC_OscConfig+0x38c>
{
 8003532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	4604      	mov	r4, r0
 800353a:	07dd      	lsls	r5, r3, #31
{
 800353c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	d535      	bpl.n	80035ac <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003540:	49a6      	ldr	r1, [pc, #664]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 8003542:	684a      	ldr	r2, [r1, #4]
 8003544:	f002 020c 	and.w	r2, r2, #12
 8003548:	2a04      	cmp	r2, #4
 800354a:	f000 80ef 	beq.w	800372c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800354e:	684a      	ldr	r2, [r1, #4]
 8003550:	f002 020c 	and.w	r2, r2, #12
 8003554:	2a08      	cmp	r2, #8
 8003556:	f000 80e5 	beq.w	8003724 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355a:	6863      	ldr	r3, [r4, #4]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d010      	beq.n	8003584 <HAL_RCC_OscConfig+0x58>
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 810d 	beq.w	8003782 <HAL_RCC_OscConfig+0x256>
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356c:	f000 818f 	beq.w	800388e <HAL_RCC_OscConfig+0x362>
 8003570:	4b9a      	ldr	r3, [pc, #616]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e004      	b.n	800358e <HAL_RCC_OscConfig+0x62>
 8003584:	4a95      	ldr	r2, [pc, #596]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 8003586:	6813      	ldr	r3, [r2, #0]
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358e:	f7fe fa59 	bl	8001a44 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4e92      	ldr	r6, [pc, #584]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8003594:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e005      	b.n	80035a4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fe fa54 	bl	8001a44 <HAL_GetTick>
 800359c:	1b40      	subs	r0, r0, r5
 800359e:	2864      	cmp	r0, #100	; 0x64
 80035a0:	f200 80eb 	bhi.w	800377a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a4:	6833      	ldr	r3, [r6, #0]
 80035a6:	039a      	lsls	r2, r3, #14
 80035a8:	d5f6      	bpl.n	8003598 <HAL_RCC_OscConfig+0x6c>
 80035aa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ac:	079f      	lsls	r7, r3, #30
 80035ae:	d528      	bpl.n	8003602 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b0:	4a8a      	ldr	r2, [pc, #552]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 80035b2:	6851      	ldr	r1, [r2, #4]
 80035b4:	f011 0f0c 	tst.w	r1, #12
 80035b8:	f000 808e 	beq.w	80036d8 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035bc:	6851      	ldr	r1, [r2, #4]
 80035be:	f001 010c 	and.w	r1, r1, #12
 80035c2:	2908      	cmp	r1, #8
 80035c4:	f000 8084 	beq.w	80036d0 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c8:	6923      	ldr	r3, [r4, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8125 	beq.w	800381a <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d0:	2201      	movs	r2, #1
 80035d2:	4b83      	ldr	r3, [pc, #524]	; (80037e0 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d4:	4e81      	ldr	r6, [pc, #516]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 80035d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035d8:	f7fe fa34 	bl	8001a44 <HAL_GetTick>
 80035dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	e005      	b.n	80035ec <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e0:	f7fe fa30 	bl	8001a44 <HAL_GetTick>
 80035e4:	1b40      	subs	r0, r0, r5
 80035e6:	2802      	cmp	r0, #2
 80035e8:	f200 80c7 	bhi.w	800377a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	6833      	ldr	r3, [r6, #0]
 80035ee:	0798      	lsls	r0, r3, #30
 80035f0:	d5f6      	bpl.n	80035e0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	6833      	ldr	r3, [r6, #0]
 80035f4:	6962      	ldr	r2, [r4, #20]
 80035f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80035fe:	6033      	str	r3, [r6, #0]
 8003600:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003602:	071a      	lsls	r2, r3, #28
 8003604:	d41f      	bmi.n	8003646 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003606:	075d      	lsls	r5, r3, #29
 8003608:	d541      	bpl.n	800368e <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360a:	4b74      	ldr	r3, [pc, #464]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	00d0      	lsls	r0, r2, #3
 8003610:	d57d      	bpl.n	800370e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	4b73      	ldr	r3, [pc, #460]	; (80037e4 <HAL_RCC_OscConfig+0x2b8>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	05d1      	lsls	r1, r2, #23
 800361a:	f140 809d 	bpl.w	8003758 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361e:	68e3      	ldr	r3, [r4, #12]
 8003620:	2b01      	cmp	r3, #1
 8003622:	f000 810b 	beq.w	800383c <HAL_RCC_OscConfig+0x310>
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80c5 	beq.w	80037b6 <HAL_RCC_OscConfig+0x28a>
 800362c:	2b05      	cmp	r3, #5
 800362e:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	f000 8139 	beq.w	80038a8 <HAL_RCC_OscConfig+0x37c>
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	621a      	str	r2, [r3, #32]
 800363c:	6a1a      	ldr	r2, [r3, #32]
 800363e:	f022 0204 	bic.w	r2, r2, #4
 8003642:	621a      	str	r2, [r3, #32]
 8003644:	e0ff      	b.n	8003846 <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003646:	69a3      	ldr	r3, [r4, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d050      	beq.n	80036ee <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 800364c:	2201      	movs	r2, #1
 800364e:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003650:	4e62      	ldr	r6, [pc, #392]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8003652:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003654:	f7fe f9f6 	bl	8001a44 <HAL_GetTick>
 8003658:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	e005      	b.n	8003668 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365c:	f7fe f9f2 	bl	8001a44 <HAL_GetTick>
 8003660:	1b40      	subs	r0, r0, r5
 8003662:	2802      	cmp	r0, #2
 8003664:	f200 8089 	bhi.w	800377a <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003668:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800366a:	079b      	lsls	r3, r3, #30
 800366c:	d5f6      	bpl.n	800365c <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800366e:	4b5f      	ldr	r3, [pc, #380]	; (80037ec <HAL_RCC_OscConfig+0x2c0>)
 8003670:	4a5f      	ldr	r2, [pc, #380]	; (80037f0 <HAL_RCC_OscConfig+0x2c4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	0a5b      	lsrs	r3, r3, #9
 800367a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800367c:	bf00      	nop
  }
  while (Delay --);
 800367e:	9b01      	ldr	r3, [sp, #4]
 8003680:	1e5a      	subs	r2, r3, #1
 8003682:	9201      	str	r2, [sp, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f9      	bne.n	800367c <HAL_RCC_OscConfig+0x150>
 8003688:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368a:	075d      	lsls	r5, r3, #29
 800368c:	d4bd      	bmi.n	800360a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368e:	69e0      	ldr	r0, [r4, #28]
 8003690:	b1d0      	cbz	r0, 80036c8 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003692:	4d52      	ldr	r5, [pc, #328]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 8003694:	686a      	ldr	r2, [r5, #4]
 8003696:	f002 020c 	and.w	r2, r2, #12
 800369a:	2a08      	cmp	r2, #8
 800369c:	f000 80e6 	beq.w	800386c <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	4a53      	ldr	r2, [pc, #332]	; (80037f4 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a8:	f000 8108 	beq.w	80038bc <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 80036ac:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80036ae:	f7fe f9c9 	bl	8001a44 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80036b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b6:	e004      	b.n	80036c2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe f9c4 	bl	8001a44 <HAL_GetTick>
 80036bc:	1b40      	subs	r0, r0, r5
 80036be:	2802      	cmp	r0, #2
 80036c0:	d85b      	bhi.n	800377a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	019b      	lsls	r3, r3, #6
 80036c6:	d4f7      	bmi.n	80036b8 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 80036c8:	2000      	movs	r0, #0
}
 80036ca:	b002      	add	sp, #8
 80036cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036d0:	6852      	ldr	r2, [r2, #4]
 80036d2:	03d6      	lsls	r6, r2, #15
 80036d4:	f53f af78 	bmi.w	80035c8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d8:	4a40      	ldr	r2, [pc, #256]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	0795      	lsls	r5, r2, #30
 80036de:	d52f      	bpl.n	8003740 <HAL_RCC_OscConfig+0x214>
 80036e0:	6922      	ldr	r2, [r4, #16]
 80036e2:	2a01      	cmp	r2, #1
 80036e4:	d02c      	beq.n	8003740 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80036e6:	2001      	movs	r0, #1
}
 80036e8:	b002      	add	sp, #8
 80036ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80036ee:	4a3e      	ldr	r2, [pc, #248]	; (80037e8 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	4e3a      	ldr	r6, [pc, #232]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 80036f2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80036f4:	f7fe f9a6 	bl	8001a44 <HAL_GetTick>
 80036f8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fa:	e004      	b.n	8003706 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fe f9a2 	bl	8001a44 <HAL_GetTick>
 8003700:	1b40      	subs	r0, r0, r5
 8003702:	2802      	cmp	r0, #2
 8003704:	d839      	bhi.n	800377a <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003706:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003708:	079f      	lsls	r7, r3, #30
 800370a:	d4f7      	bmi.n	80036fc <HAL_RCC_OscConfig+0x1d0>
 800370c:	e7bc      	b.n	8003688 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8003710:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003716:	61da      	str	r2, [r3, #28]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003722:	e777      	b.n	8003614 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003724:	684a      	ldr	r2, [r1, #4]
 8003726:	03d0      	lsls	r0, r2, #15
 8003728:	f57f af17 	bpl.w	800355a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	0391      	lsls	r1, r2, #14
 8003732:	f57f af3b 	bpl.w	80035ac <HAL_RCC_OscConfig+0x80>
 8003736:	6862      	ldr	r2, [r4, #4]
 8003738:	2a00      	cmp	r2, #0
 800373a:	f47f af37 	bne.w	80035ac <HAL_RCC_OscConfig+0x80>
 800373e:	e7d2      	b.n	80036e6 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003740:	4926      	ldr	r1, [pc, #152]	; (80037dc <HAL_RCC_OscConfig+0x2b0>)
 8003742:	6960      	ldr	r0, [r4, #20]
 8003744:	680a      	ldr	r2, [r1, #0]
 8003746:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800374a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800374e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003750:	071a      	lsls	r2, r3, #28
 8003752:	f57f af58 	bpl.w	8003606 <HAL_RCC_OscConfig+0xda>
 8003756:	e776      	b.n	8003646 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003758:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003762:	f7fe f96f 	bl	8001a44 <HAL_GetTick>
 8003766:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	05da      	lsls	r2, r3, #23
 800376c:	f53f af57 	bmi.w	800361e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003770:	f7fe f968 	bl	8001a44 <HAL_GetTick>
 8003774:	1b80      	subs	r0, r0, r6
 8003776:	2864      	cmp	r0, #100	; 0x64
 8003778:	d9f6      	bls.n	8003768 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 800377a:	2003      	movs	r0, #3
}
 800377c:	b002      	add	sp, #8
 800377e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003786:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800378a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378c:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800379a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800379c:	f7fe f952 	bl	8001a44 <HAL_GetTick>
 80037a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	e004      	b.n	80037ae <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a4:	f7fe f94e 	bl	8001a44 <HAL_GetTick>
 80037a8:	1b40      	subs	r0, r0, r5
 80037aa:	2864      	cmp	r0, #100	; 0x64
 80037ac:	d8e5      	bhi.n	800377a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	6833      	ldr	r3, [r6, #0]
 80037b0:	039b      	lsls	r3, r3, #14
 80037b2:	d4f7      	bmi.n	80037a4 <HAL_RCC_OscConfig+0x278>
 80037b4:	e6f9      	b.n	80035aa <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80037be:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c0:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	621a      	str	r2, [r3, #32]
 80037c8:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ce:	f022 0204 	bic.w	r2, r2, #4
 80037d2:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80037d4:	f7fe f936 	bl	8001a44 <HAL_GetTick>
 80037d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037da:	e012      	b.n	8003802 <HAL_RCC_OscConfig+0x2d6>
 80037dc:	40021000 	.word	0x40021000
 80037e0:	42420000 	.word	0x42420000
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42420480 	.word	0x42420480
 80037ec:	20000000 	.word	0x20000000
 80037f0:	10624dd3 	.word	0x10624dd3
 80037f4:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fe f924 	bl	8001a44 <HAL_GetTick>
 80037fc:	1b80      	subs	r0, r0, r6
 80037fe:	4540      	cmp	r0, r8
 8003800:	d8bb      	bhi.n	800377a <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	0798      	lsls	r0, r3, #30
 8003806:	d4f7      	bmi.n	80037f8 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8003808:	2d00      	cmp	r5, #0
 800380a:	f43f af40 	beq.w	800368e <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 800380e:	4a44      	ldr	r2, [pc, #272]	; (8003920 <HAL_RCC_OscConfig+0x3f4>)
 8003810:	69d3      	ldr	r3, [r2, #28]
 8003812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003816:	61d3      	str	r3, [r2, #28]
 8003818:	e739      	b.n	800368e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800381a:	4a42      	ldr	r2, [pc, #264]	; (8003924 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381c:	4e40      	ldr	r6, [pc, #256]	; (8003920 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 800381e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003820:	f7fe f910 	bl	8001a44 <HAL_GetTick>
 8003824:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e004      	b.n	8003832 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003828:	f7fe f90c 	bl	8001a44 <HAL_GetTick>
 800382c:	1b40      	subs	r0, r0, r5
 800382e:	2802      	cmp	r0, #2
 8003830:	d8a3      	bhi.n	800377a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	6833      	ldr	r3, [r6, #0]
 8003834:	0799      	lsls	r1, r3, #30
 8003836:	d4f7      	bmi.n	8003828 <HAL_RCC_OscConfig+0x2fc>
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	e6e2      	b.n	8003602 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383c:	4a38      	ldr	r2, [pc, #224]	; (8003920 <HAL_RCC_OscConfig+0x3f4>)
 800383e:	6a13      	ldr	r3, [r2, #32]
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003846:	f7fe f8fd 	bl	8001a44 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800384e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003850:	4f33      	ldr	r7, [pc, #204]	; (8003920 <HAL_RCC_OscConfig+0x3f4>)
 8003852:	e004      	b.n	800385e <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fe f8f6 	bl	8001a44 <HAL_GetTick>
 8003858:	1b80      	subs	r0, r0, r6
 800385a:	4540      	cmp	r0, r8
 800385c:	d88d      	bhi.n	800377a <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	079b      	lsls	r3, r3, #30
 8003862:	d5f7      	bpl.n	8003854 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8003864:	2d00      	cmp	r5, #0
 8003866:	f43f af12 	beq.w	800368e <HAL_RCC_OscConfig+0x162>
 800386a:	e7d0      	b.n	800380e <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800386c:	2801      	cmp	r0, #1
 800386e:	f43f af2c 	beq.w	80036ca <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8003872:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	6a22      	ldr	r2, [r4, #32]
 8003876:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800387a:	4291      	cmp	r1, r2
 800387c:	f47f af33 	bne.w	80036e6 <HAL_RCC_OscConfig+0x1ba>
 8003880:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003882:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003886:	1a18      	subs	r0, r3, r0
 8003888:	bf18      	it	ne
 800388a:	2001      	movne	r0, #1
 800388c:	e71d      	b.n	80036ca <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003892:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e672      	b.n	800358e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a8:	f042 0204 	orr.w	r2, r2, #4
 80038ac:	621a      	str	r2, [r3, #32]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	621a      	str	r2, [r3, #32]
 80038b6:	e7c6      	b.n	8003846 <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 80038b8:	2001      	movs	r0, #1
}
 80038ba:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 80038bc:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80038be:	f7fe f8c1 	bl	8001a44 <HAL_GetTick>
 80038c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c4:	e005      	b.n	80038d2 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c6:	f7fe f8bd 	bl	8001a44 <HAL_GetTick>
 80038ca:	1b80      	subs	r0, r0, r6
 80038cc:	2802      	cmp	r0, #2
 80038ce:	f63f af54 	bhi.w	800377a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d2:	682b      	ldr	r3, [r5, #0]
 80038d4:	0199      	lsls	r1, r3, #6
 80038d6:	d4f6      	bmi.n	80038c6 <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038d8:	6a23      	ldr	r3, [r4, #32]
 80038da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038de:	d105      	bne.n	80038ec <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e0:	686a      	ldr	r2, [r5, #4]
 80038e2:	68a1      	ldr	r1, [r4, #8]
 80038e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80038e8:	430a      	orrs	r2, r1
 80038ea:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80038ec:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ee:	4d0c      	ldr	r5, [pc, #48]	; (8003920 <HAL_RCC_OscConfig+0x3f4>)
 80038f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80038f2:	686a      	ldr	r2, [r5, #4]
 80038f4:	430b      	orrs	r3, r1
 80038f6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80038fa:	490b      	ldr	r1, [pc, #44]	; (8003928 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038fc:	4313      	orrs	r3, r2
 80038fe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003900:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8003902:	f7fe f89f 	bl	8001a44 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003906:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003908:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800390a:	e005      	b.n	8003918 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7fe f89a 	bl	8001a44 <HAL_GetTick>
 8003910:	1b40      	subs	r0, r0, r5
 8003912:	2802      	cmp	r0, #2
 8003914:	f63f af31 	bhi.w	800377a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	019a      	lsls	r2, r3, #6
 800391c:	d5f6      	bpl.n	800390c <HAL_RCC_OscConfig+0x3e0>
 800391e:	e6d3      	b.n	80036c8 <HAL_RCC_OscConfig+0x19c>
 8003920:	40021000 	.word	0x40021000
 8003924:	42420000 	.word	0x42420000
 8003928:	42420060 	.word	0x42420060

0800392c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800392c:	2800      	cmp	r0, #0
 800392e:	f000 80af 	beq.w	8003a90 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003932:	4a5d      	ldr	r2, [pc, #372]	; (8003aa8 <HAL_RCC_ClockConfig+0x17c>)
{
 8003934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	6813      	ldr	r3, [r2, #0]
 800393a:	4604      	mov	r4, r0
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	428b      	cmp	r3, r1
 8003942:	460d      	mov	r5, r1
{
 8003944:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003946:	d20d      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	f023 0307 	bic.w	r3, r3, #7
 800394e:	430b      	orrs	r3, r1
 8003950:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	428b      	cmp	r3, r1
 800395a:	d003      	beq.n	8003964 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 800395c:	2001      	movs	r0, #1
}
 800395e:	b006      	add	sp, #24
 8003960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	0798      	lsls	r0, r3, #30
 8003968:	d514      	bpl.n	8003994 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396a:	0759      	lsls	r1, r3, #29
 800396c:	d504      	bpl.n	8003978 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800396e:	494f      	ldr	r1, [pc, #316]	; (8003aac <HAL_RCC_ClockConfig+0x180>)
 8003970:	684a      	ldr	r2, [r1, #4]
 8003972:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003976:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	071a      	lsls	r2, r3, #28
 800397a:	d504      	bpl.n	8003986 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800397c:	494b      	ldr	r1, [pc, #300]	; (8003aac <HAL_RCC_ClockConfig+0x180>)
 800397e:	684a      	ldr	r2, [r1, #4]
 8003980:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003984:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003986:	4949      	ldr	r1, [pc, #292]	; (8003aac <HAL_RCC_ClockConfig+0x180>)
 8003988:	68a0      	ldr	r0, [r4, #8]
 800398a:	684a      	ldr	r2, [r1, #4]
 800398c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003990:	4302      	orrs	r2, r0
 8003992:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003994:	07db      	lsls	r3, r3, #31
 8003996:	d520      	bpl.n	80039da <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003998:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b44      	ldr	r3, [pc, #272]	; (8003aac <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a0:	d078      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a2:	2a02      	cmp	r2, #2
 80039a4:	d071      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	0798      	lsls	r0, r3, #30
 80039a8:	d5d8      	bpl.n	800395c <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039aa:	4e40      	ldr	r6, [pc, #256]	; (8003aac <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b0:	6873      	ldr	r3, [r6, #4]
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	4313      	orrs	r3, r2
 80039b8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80039ba:	f7fe f843 	bl	8001a44 <HAL_GetTick>
 80039be:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c0:	e004      	b.n	80039cc <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c2:	f7fe f83f 	bl	8001a44 <HAL_GetTick>
 80039c6:	1bc0      	subs	r0, r0, r7
 80039c8:	4540      	cmp	r0, r8
 80039ca:	d866      	bhi.n	8003a9a <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039cc:	6873      	ldr	r3, [r6, #4]
 80039ce:	6862      	ldr	r2, [r4, #4]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80039d8:	d1f3      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039da:	4a33      	ldr	r2, [pc, #204]	; (8003aa8 <HAL_RCC_ClockConfig+0x17c>)
 80039dc:	6813      	ldr	r3, [r2, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	42ab      	cmp	r3, r5
 80039e4:	d909      	bls.n	80039fa <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	6813      	ldr	r3, [r2, #0]
 80039e8:	f023 0307 	bic.w	r3, r3, #7
 80039ec:	432b      	orrs	r3, r5
 80039ee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f0:	6813      	ldr	r3, [r2, #0]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	42ab      	cmp	r3, r5
 80039f8:	d1b0      	bne.n	800395c <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	0759      	lsls	r1, r3, #29
 80039fe:	d506      	bpl.n	8003a0e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	492a      	ldr	r1, [pc, #168]	; (8003aac <HAL_RCC_ClockConfig+0x180>)
 8003a02:	68e0      	ldr	r0, [r4, #12]
 8003a04:	684a      	ldr	r2, [r1, #4]
 8003a06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a0a:	4302      	orrs	r2, r0
 8003a0c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	071a      	lsls	r2, r3, #28
 8003a10:	d507      	bpl.n	8003a22 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a12:	4a26      	ldr	r2, [pc, #152]	; (8003aac <HAL_RCC_ClockConfig+0x180>)
 8003a14:	6921      	ldr	r1, [r4, #16]
 8003a16:	6853      	ldr	r3, [r2, #4]
 8003a18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003a1c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a20:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a22:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_RCC_ClockConfig+0x184>)
 8003a28:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a2a:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a30:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8003a34:	491d      	ldr	r1, [pc, #116]	; (8003aac <HAL_RCC_ClockConfig+0x180>)
 8003a36:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003a38:	f002 030c 	and.w	r3, r2, #12
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d011      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <HAL_RCC_ClockConfig+0x180>)
 8003a44:	481c      	ldr	r0, [pc, #112]	; (8003ab8 <HAL_RCC_ClockConfig+0x18c>)
 8003a46:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003a48:	491c      	ldr	r1, [pc, #112]	; (8003abc <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a4a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003a4e:	5c80      	ldrb	r0, [r0, r2]
 8003a50:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <HAL_RCC_ClockConfig+0x194>)
 8003a52:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8003a54:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a56:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003a58:	f7fd ffb2 	bl	80019c0 <HAL_InitTick>
  return HAL_OK;
 8003a5c:	2000      	movs	r0, #0
}
 8003a5e:	b006      	add	sp, #24
 8003a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a64:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003a68:	4423      	add	r3, r4
 8003a6a:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a6e:	03d3      	lsls	r3, r2, #15
 8003a70:	d515      	bpl.n	8003a9e <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a72:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a76:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a7a:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a7e:	4422      	add	r2, r4
 8003a80:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a88:	e7db      	b.n	8003a42 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	019e      	lsls	r6, r3, #6
 8003a8c:	d48d      	bmi.n	80039aa <HAL_RCC_ClockConfig+0x7e>
 8003a8e:	e765      	b.n	800395c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8003a90:	2001      	movs	r0, #1
}
 8003a92:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a94:	039f      	lsls	r7, r3, #14
 8003a96:	d488      	bmi.n	80039aa <HAL_RCC_ClockConfig+0x7e>
 8003a98:	e760      	b.n	800395c <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8003a9a:	2003      	movs	r0, #3
 8003a9c:	e75f      	b.n	800395e <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_ClockConfig+0x198>)
 8003aa0:	fb03 f300 	mul.w	r3, r3, r0
 8003aa4:	e7cd      	b.n	8003a42 <HAL_RCC_ClockConfig+0x116>
 8003aa6:	bf00      	nop
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	080049b8 	.word	0x080049b8
 8003ab4:	007a1200 	.word	0x007a1200
 8003ab8:	08004660 	.word	0x08004660
 8003abc:	2000009c 	.word	0x2000009c
 8003ac0:	20000000 	.word	0x20000000
 8003ac4:	003d0900 	.word	0x003d0900

08003ac8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x14>)
 8003aca:	4905      	ldr	r1, [pc, #20]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003acc:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8003ace:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003ad4:	5ccb      	ldrb	r3, [r1, r3]
 8003ad6:	6810      	ldr	r0, [r2, #0]
}
 8003ad8:	40d8      	lsrs	r0, r3
 8003ada:	4770      	bx	lr
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	08004670 	.word	0x08004670
 8003ae4:	20000000 	.word	0x20000000

08003ae8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x14>)
 8003aea:	4905      	ldr	r1, [pc, #20]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003aec:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8003aee:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003af0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	6810      	ldr	r0, [r2, #0]
}
 8003af8:	40d8      	lsrs	r0, r3
 8003afa:	4770      	bx	lr
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08004670 	.word	0x08004670
 8003b04:	20000000 	.word	0x20000000

08003b08 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	d055      	beq.n	8003bb8 <HAL_SPI_Init+0xb0>
{
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b10:	4604      	mov	r4, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d041      	beq.n	8003b9a <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b16:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b18:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1c:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b1e:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b22:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b24:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8003b28:	2900      	cmp	r1, #0
 8003b2a:	d03c      	beq.n	8003ba6 <HAL_SPI_Init+0x9e>
 8003b2c:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b2e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003b32:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8003b34:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b36:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b38:	68e1      	ldr	r1, [r4, #12]
 8003b3a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003b3e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003b42:	4303      	orrs	r3, r0
 8003b44:	6920      	ldr	r0, [r4, #16]
 8003b46:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8003b4a:	4038      	ands	r0, r7
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6961      	ldr	r1, [r4, #20]
 8003b50:	4303      	orrs	r3, r0
 8003b52:	69a0      	ldr	r0, [r4, #24]
 8003b54:	4031      	ands	r1, r6
 8003b56:	430b      	orrs	r3, r1
 8003b58:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003b60:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b64:	6a27      	ldr	r7, [r4, #32]
 8003b66:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8003b70:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b72:	433b      	orrs	r3, r7
 8003b74:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8003b76:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b78:	0c00      	lsrs	r0, r0, #16
 8003b7a:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b82:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b84:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b86:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b88:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 8003b8a:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b90:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b92:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b94:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8003b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b9a:	6842      	ldr	r2, [r0, #4]
 8003b9c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003ba0:	d0bc      	beq.n	8003b1c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ba2:	61c3      	str	r3, [r0, #28]
 8003ba4:	e7ba      	b.n	8003b1c <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8003ba6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7fc fd98 	bl	80006e0 <HAL_SPI_MspInit>
 8003bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bb6:	e7ba      	b.n	8003b2e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
}
 8003bba:	4770      	bx	lr

08003bbc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d05d      	beq.n	8003c7c <HAL_TIM_Base_Init+0xc0>
{
 8003bc0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d03c      	beq.n	8003c4a <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd0:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd4:	492a      	ldr	r1, [pc, #168]	; (8003c80 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bda:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003bdc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bde:	d039      	beq.n	8003c54 <HAL_TIM_Base_Init+0x98>
 8003be0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003be4:	d028      	beq.n	8003c38 <HAL_TIM_Base_Init+0x7c>
 8003be6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003bea:	428a      	cmp	r2, r1
 8003bec:	d024      	beq.n	8003c38 <HAL_TIM_Base_Init+0x7c>
 8003bee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003bf2:	428a      	cmp	r2, r1
 8003bf4:	d020      	beq.n	8003c38 <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf6:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf8:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfa:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c00:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003c02:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c04:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c06:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c14:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003c34:	2000      	movs	r0, #0
}
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003c38:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c3e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c40:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c46:	430b      	orrs	r3, r1
 8003c48:	e7d5      	b.n	8003bf6 <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 8003c4a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003c4e:	f7fc fd7b 	bl	8000748 <HAL_TIM_Base_MspInit>
 8003c52:	e7bd      	b.n	8003bd0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003c54:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c5a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c62:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	69a1      	ldr	r1, [r4, #24]
 8003c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c6a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003c6c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6e:	68e3      	ldr	r3, [r4, #12]
 8003c70:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c72:	6863      	ldr	r3, [r4, #4]
 8003c74:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003c76:	6963      	ldr	r3, [r4, #20]
 8003c78:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7a:	e7c5      	b.n	8003c08 <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 8003c7c:	2001      	movs	r0, #1
}
 8003c7e:	4770      	bx	lr
 8003c80:	40012c00 	.word	0x40012c00

08003c84 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003c84:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d11f      	bne.n	8003ccc <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c8e:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c94:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	490f      	ldr	r1, [pc, #60]	; (8003cd4 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c98:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c9e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca0:	d009      	beq.n	8003cb6 <HAL_TIM_Base_Start_IT+0x32>
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d006      	beq.n	8003cb6 <HAL_TIM_Base_Start_IT+0x32>
 8003ca8:	4a0b      	ldr	r2, [pc, #44]	; (8003cd8 <HAL_TIM_Base_Start_IT+0x54>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <HAL_TIM_Base_Start_IT+0x32>
 8003cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d104      	bne.n	8003cc0 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbc:	2a06      	cmp	r2, #6
 8003cbe:	d007      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8003cc0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003cc2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	4770      	bx	lr
    return HAL_ERROR;
 8003ccc:	2001      	movs	r0, #1
 8003cce:	4770      	bx	lr
  return HAL_OK;
 8003cd0:	2000      	movs	r0, #0
}
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40000400 	.word	0x40000400

08003cdc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003cdc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d074      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xf2>
{
 8003ce4:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce6:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003ce8:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 8003cea:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8003cec:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003cf4:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003cf6:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8003cfc:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8003d00:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003d02:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003d04:	d065      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0xf6>
 8003d06:	d831      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x90>
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d048      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xc2>
 8003d0c:	d921      	bls.n	8003d52 <HAL_TIM_ConfigClockSource+0x76>
 8003d0e:	2b50      	cmp	r3, #80	; 0x50
 8003d10:	d116      	bne.n	8003d40 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d12:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d14:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d18:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d20:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d22:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d2a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003d2e:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d30:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003d32:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d34:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d3a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3e:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8003d40:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d42:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8003d44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8003d4c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003d4e:	4618      	mov	r0, r3
}
 8003d50:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d002      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0x80>
 8003d56:	d91e      	bls.n	8003d96 <HAL_TIM_ConfigClockSource+0xba>
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d1f1      	bne.n	8003d40 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8003d5c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d62:	430b      	orrs	r3, r1
 8003d64:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003d68:	6093      	str	r3, [r2, #8]
}
 8003d6a:	e7e9      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d049      	beq.n	8003e04 <HAL_TIM_ConfigClockSource+0x128>
 8003d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d74:	d1e4      	bne.n	8003d40 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d76:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003d7a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003d7c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d7e:	432b      	orrs	r3, r5
 8003d80:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d88:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d8a:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8c:	6893      	ldr	r3, [r2, #8]
 8003d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d92:	6093      	str	r3, [r2, #8]
      break;
 8003d94:	e7d4      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003d96:	f033 0110 	bics.w	r1, r3, #16
 8003d9a:	d1d1      	bne.n	8003d40 <HAL_TIM_ConfigClockSource+0x64>
 8003d9c:	e7de      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8003d9e:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da0:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da4:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da8:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003daa:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dac:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003dba:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003dbc:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003dbe:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003dc0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dc6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003dca:	6093      	str	r3, [r2, #8]
}
 8003dcc:	e7b8      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8003dce:	2002      	movs	r0, #2
}
 8003dd0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd2:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dd4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd6:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dda:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ddc:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dde:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8003de0:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003de2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dee:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003df2:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003df4:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003df6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dfc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003e00:	6093      	str	r3, [r2, #8]
}
 8003e02:	e79d      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e04:	68cc      	ldr	r4, [r1, #12]
 8003e06:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003e0a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e0c:	432b      	orrs	r3, r5
 8003e0e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e12:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e16:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003e18:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003e1a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003e20:	6093      	str	r3, [r2, #8]
      break;
 8003e22:	e78d      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x64>

08003e24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d026      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e2e:	6803      	ldr	r3, [r0, #0]
{
 8003e30:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003e32:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003e36:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e38:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3a:	4d11      	ldr	r5, [pc, #68]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e40:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e42:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8003e44:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8003e46:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	d009      	beq.n	8003e5e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8003e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4e:	d006      	beq.n	8003e5e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8003e50:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8003e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d104      	bne.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e5e:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e60:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e64:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e66:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003e68:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8003e6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8003e74:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8003e76:	4618      	mov	r0, r3
}
 8003e78:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003e7a:	2002      	movs	r0, #2
}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40000400 	.word	0x40000400

08003e88 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d061      	beq.n	8003f50 <HAL_UART_Init+0xc8>
{
 8003e8c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e92:	4604      	mov	r4, r0
 8003e94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d051      	beq.n	8003f40 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e9c:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e9e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003ea0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003ea4:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea6:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8003ea8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eac:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eae:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eb0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003eb6:	4301      	orrs	r1, r0
 8003eb8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003eba:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ebc:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003ec0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ec4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8003ec6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8003ed4:	491f      	ldr	r1, [pc, #124]	; (8003f54 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eda:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8003edc:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ede:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8003ee0:	d033      	beq.n	8003f4a <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ee2:	f7ff fdf1 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee6:	6863      	ldr	r3, [r4, #4]
 8003ee8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003eec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8003efa:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003efc:	4816      	ldr	r0, [pc, #88]	; (8003f58 <HAL_UART_Init+0xd0>)
 8003efe:	fba0 c103 	umull	ip, r1, r0, r3
 8003f02:	0949      	lsrs	r1, r1, #5
 8003f04:	fb02 3311 	mls	r3, r2, r1, r3
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	fba0 2303 	umull	r2, r3, r0, r3
 8003f10:	0109      	lsls	r1, r1, #4
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8003f18:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1a:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8003f1c:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003f22:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f24:	6953      	ldr	r3, [r2, #20]
 8003f26:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003f2a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003f2c:	68d3      	ldr	r3, [r2, #12]
 8003f2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f32:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f36:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8003f40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003f44:	f7fc fc1c 	bl	8000780 <HAL_UART_MspInit>
 8003f48:	e7a8      	b.n	8003e9c <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f4a:	f7ff fdcd 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8003f4e:	e7ca      	b.n	8003ee6 <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 8003f50:	2001      	movs	r0, #1
}
 8003f52:	4770      	bx	lr
 8003f54:	40013800 	.word	0x40013800
 8003f58:	51eb851f 	.word	0x51eb851f

08003f5c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f5c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d123      	bne.n	8003fac <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8003f64:	b301      	cbz	r1, 8003fa8 <HAL_UART_Receive_IT+0x4c>
 8003f66:	b1fa      	cbz	r2, 8003fa8 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8003f68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d01d      	beq.n	8003fac <HAL_UART_Receive_IT+0x50>
{
 8003f70:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f74:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f76:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f78:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8003f7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8003f7e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f82:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f86:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 8003f88:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f8a:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8003f8e:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f90:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f92:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8003f94:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f9c:	68e3      	ldr	r3, [r4, #12]
 8003f9e:	f043 0320 	orr.w	r3, r3, #32
 8003fa2:	60e3      	str	r3, [r4, #12]
}
 8003fa4:	bc30      	pop	{r4, r5}
 8003fa6:	4770      	bx	lr
      return HAL_ERROR;
 8003fa8:	2001      	movs	r0, #1
 8003faa:	4770      	bx	lr
    return HAL_BUSY;
 8003fac:	2002      	movs	r0, #2
}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UART_TxCpltCallback>:
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop

08003fb4 <HAL_UART_ErrorCallback>:
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop

08003fb8 <UART_DMAAbortOnError>:
{
 8003fb8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003fba:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003fbe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fc0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003fc2:	f7ff fff7 	bl	8003fb4 <HAL_UART_ErrorCallback>
}
 8003fc6:	bd08      	pop	{r3, pc}

08003fc8 <HAL_UARTEx_RxEventCallback>:
}
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop

08003fcc <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fcc:	6883      	ldr	r3, [r0, #8]
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	d03b      	beq.n	800404c <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fd4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02f      	beq.n	800403a <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fda:	6803      	ldr	r3, [r0, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003fe4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003fea:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003ff2:	bb4b      	cbnz	r3, 8004048 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003ff4:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ff8:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003ffa:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ffc:	68d1      	ldr	r1, [r2, #12]
 8003ffe:	f021 0120 	bic.w	r1, r1, #32
 8004002:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004004:	68d1      	ldr	r1, [r2, #12]
 8004006:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800400a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800400c:	6951      	ldr	r1, [r2, #20]
 800400e:	f021 0101 	bic.w	r1, r1, #1
 8004012:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004014:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004018:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800401a:	2901      	cmp	r1, #1
 800401c:	d121      	bne.n	8004062 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401e:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004020:	68d1      	ldr	r1, [r2, #12]
 8004022:	f021 0110 	bic.w	r1, r1, #16
 8004026:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004028:	6811      	ldr	r1, [r2, #0]
 800402a:	06c9      	lsls	r1, r1, #27
 800402c:	d423      	bmi.n	8004076 <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004030:	f7ff ffca 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
}
 8004034:	2000      	movs	r0, #0
 8004036:	b002      	add	sp, #8
 8004038:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800403a:	6903      	ldr	r3, [r0, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1cc      	bne.n	8003fda <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004040:	6803      	ldr	r3, [r0, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	7013      	strb	r3, [r2, #0]
 8004046:	e7cd      	b.n	8003fe4 <UART_Receive_IT.part.0+0x18>
}
 8004048:	2000      	movs	r0, #0
 800404a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404c:	6903      	ldr	r3, [r0, #16]
 800404e:	b96b      	cbnz	r3, 800406c <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004050:	6802      	ldr	r2, [r0, #0]
 8004052:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004054:	6852      	ldr	r2, [r2, #4]
 8004056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800405a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800405e:	6283      	str	r3, [r0, #40]	; 0x28
 8004060:	e7c3      	b.n	8003fea <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8004062:	f7fc f9f5 	bl	8000450 <HAL_UART_RxCpltCallback>
}
 8004066:	2000      	movs	r0, #0
 8004068:	b002      	add	sp, #8
 800406a:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800406c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800406e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	7013      	strb	r3, [r2, #0]
 8004074:	e7b6      	b.n	8003fe4 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	6813      	ldr	r3, [r2, #0]
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	6853      	ldr	r3, [r2, #4]
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	9b01      	ldr	r3, [sp, #4]
 8004082:	e7d4      	b.n	800402e <UART_Receive_IT.part.0+0x62>

08004084 <HAL_UART_IRQHandler>:
{
 8004084:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004086:	6803      	ldr	r3, [r0, #0]
{
 8004088:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800408a:	681a      	ldr	r2, [r3, #0]
{
 800408c:	b082      	sub	sp, #8
  if (errorflags == RESET)
 800408e:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004090:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004092:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004094:	d14e      	bne.n	8004134 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004096:	0696      	lsls	r6, r2, #26
 8004098:	d502      	bpl.n	80040a0 <HAL_UART_IRQHandler+0x1c>
 800409a:	068d      	lsls	r5, r1, #26
 800409c:	f100 8090 	bmi.w	80041c0 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80040a2:	2801      	cmp	r0, #1
 80040a4:	d00b      	beq.n	80040be <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040a6:	0616      	lsls	r6, r2, #24
 80040a8:	d502      	bpl.n	80040b0 <HAL_UART_IRQHandler+0x2c>
 80040aa:	060d      	lsls	r5, r1, #24
 80040ac:	f100 8092 	bmi.w	80041d4 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040b0:	0650      	lsls	r0, r2, #25
 80040b2:	d502      	bpl.n	80040ba <HAL_UART_IRQHandler+0x36>
 80040b4:	064a      	lsls	r2, r1, #25
 80040b6:	f100 80ab 	bmi.w	8004210 <HAL_UART_IRQHandler+0x18c>
}
 80040ba:	b002      	add	sp, #8
 80040bc:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 80040be:	06d5      	lsls	r5, r2, #27
 80040c0:	d5f1      	bpl.n	80040a6 <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80040c2:	06c8      	lsls	r0, r1, #27
 80040c4:	d5ef      	bpl.n	80040a6 <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040c6:	2100      	movs	r1, #0
 80040c8:	9101      	str	r1, [sp, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	9201      	str	r2, [sp, #4]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	9201      	str	r2, [sp, #4]
 80040d2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80040da:	f000 80d2 	beq.w	8004282 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80040e0:	6802      	ldr	r2, [r0, #0]
 80040e2:	6852      	ldr	r2, [r2, #4]
 80040e4:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	d0e7      	beq.n	80040ba <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80040ea:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80040ec:	4295      	cmp	r5, r2
 80040ee:	d9e4      	bls.n	80040ba <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f0:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 80040f2:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f4:	2e20      	cmp	r6, #32
 80040f6:	d016      	beq.n	8004126 <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 80040f8:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004100:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004112:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	f022 0210 	bic.w	r2, r2, #16
 800411e:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004120:	f7fd fd8c 	bl	8001c3c <HAL_DMA_Abort>
 8004124:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004126:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004128:	4620      	mov	r0, r4
 800412a:	1a69      	subs	r1, r5, r1
 800412c:	b289      	uxth	r1, r1
 800412e:	f7ff ff4b 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
 8004132:	e7c2      	b.n	80040ba <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004134:	f005 0501 	and.w	r5, r5, #1
 8004138:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800413c:	4328      	orrs	r0, r5
 800413e:	d0af      	beq.n	80040a0 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004140:	07d0      	lsls	r0, r2, #31
 8004142:	d505      	bpl.n	8004150 <HAL_UART_IRQHandler+0xcc>
 8004144:	05ce      	lsls	r6, r1, #23
 8004146:	d503      	bpl.n	8004150 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004148:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800414a:	f040 0001 	orr.w	r0, r0, #1
 800414e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004150:	0750      	lsls	r0, r2, #29
 8004152:	d52c      	bpl.n	80041ae <HAL_UART_IRQHandler+0x12a>
 8004154:	b12d      	cbz	r5, 8004162 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004156:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004158:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800415a:	f040 0002 	orr.w	r0, r0, #2
 800415e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004160:	d429      	bmi.n	80041b6 <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004162:	0716      	lsls	r6, r2, #28
 8004164:	d507      	bpl.n	8004176 <HAL_UART_IRQHandler+0xf2>
 8004166:	f001 0020 	and.w	r0, r1, #32
 800416a:	4328      	orrs	r0, r5
 800416c:	d003      	beq.n	8004176 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800416e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004170:	f040 0008 	orr.w	r0, r0, #8
 8004174:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004176:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004178:	2800      	cmp	r0, #0
 800417a:	d09e      	beq.n	80040ba <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800417c:	0690      	lsls	r0, r2, #26
 800417e:	d509      	bpl.n	8004194 <HAL_UART_IRQHandler+0x110>
 8004180:	068a      	lsls	r2, r1, #26
 8004182:	d507      	bpl.n	8004194 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004184:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004188:	2a22      	cmp	r2, #34	; 0x22
 800418a:	d103      	bne.n	8004194 <HAL_UART_IRQHandler+0x110>
 800418c:	4620      	mov	r0, r4
 800418e:	f7ff ff1d 	bl	8003fcc <UART_Receive_IT.part.0>
 8004192:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004194:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004196:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004198:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800419c:	f005 0508 	and.w	r5, r5, #8
 80041a0:	4315      	orrs	r5, r2
 80041a2:	d140      	bne.n	8004226 <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7ff ff05 	bl	8003fb4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041aa:	6425      	str	r5, [r4, #64]	; 0x40
 80041ac:	e785      	b.n	80040ba <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ae:	0790      	lsls	r0, r2, #30
 80041b0:	d5d7      	bpl.n	8004162 <HAL_UART_IRQHandler+0xde>
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	d0d5      	beq.n	8004162 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80041b8:	f040 0004 	orr.w	r0, r0, #4
 80041bc:	6420      	str	r0, [r4, #64]	; 0x40
 80041be:	e7d0      	b.n	8004162 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80041c4:	2b22      	cmp	r3, #34	; 0x22
 80041c6:	f47f af78 	bne.w	80040ba <HAL_UART_IRQHandler+0x36>
}
 80041ca:	b002      	add	sp, #8
 80041cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80041d0:	f7ff befc 	b.w	8003fcc <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041d4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80041d8:	2a21      	cmp	r2, #33	; 0x21
 80041da:	f47f af6e 	bne.w	80040ba <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	68a2      	ldr	r2, [r4, #8]
 80041e0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80041e4:	d06e      	beq.n	80042c4 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041e6:	6a22      	ldr	r2, [r4, #32]
 80041e8:	1c51      	adds	r1, r2, #1
 80041ea:	6221      	str	r1, [r4, #32]
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80041f0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80041f2:	3a01      	subs	r2, #1
 80041f4:	b292      	uxth	r2, r2
 80041f6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80041f8:	2a00      	cmp	r2, #0
 80041fa:	f47f af5e 	bne.w	80040ba <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004204:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	e754      	b.n	80040ba <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8004210:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004212:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004214:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800421c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004220:	f7ff fec6 	bl	8003fb0 <HAL_UART_TxCpltCallback>
    return;
 8004224:	e749      	b.n	80040ba <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800422c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004236:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004238:	2a01      	cmp	r2, #1
 800423a:	d103      	bne.n	8004244 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	f022 0210 	bic.w	r2, r2, #16
 8004242:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004244:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004246:	2120      	movs	r1, #32
 8004248:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424c:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	0656      	lsls	r6, r2, #25
 8004252:	d512      	bpl.n	800427a <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004254:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004256:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800425e:	b160      	cbz	r0, 800427a <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <HAL_UART_IRQHandler+0x258>)
 8004262:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004264:	f7fd fd0c 	bl	8001c80 <HAL_DMA_Abort_IT>
 8004268:	2800      	cmp	r0, #0
 800426a:	f43f af26 	beq.w	80040ba <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800426e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004270:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004272:	b002      	add	sp, #8
 8004274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004278:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800427a:	4620      	mov	r0, r4
 800427c:	f7ff fe9a 	bl	8003fb4 <HAL_UART_ErrorCallback>
 8004280:	e71b      	b.n	80040ba <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004282:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8004284:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004286:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8004288:	b289      	uxth	r1, r1
 800428a:	2900      	cmp	r1, #0
 800428c:	f43f af15 	beq.w	80040ba <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004290:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004292:	1a08      	subs	r0, r1, r0
 8004294:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8004296:	2900      	cmp	r1, #0
 8004298:	f43f af0f 	beq.w	80040ba <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 800429c:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429e:	68d8      	ldr	r0, [r3, #12]
 80042a0:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 80042a4:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	6958      	ldr	r0, [r3, #20]
 80042a8:	f020 0001 	bic.w	r0, r0, #1
 80042ac:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80042ae:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b4:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042b6:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	f022 0210 	bic.w	r2, r2, #16
 80042bc:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042be:	f7ff fe83 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
 80042c2:	e6fa      	b.n	80040ba <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c4:	6922      	ldr	r2, [r4, #16]
 80042c6:	2a00      	cmp	r2, #0
 80042c8:	d18d      	bne.n	80041e6 <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042ca:	6a22      	ldr	r2, [r4, #32]
 80042cc:	f832 1b02 	ldrh.w	r1, [r2], #2
 80042d0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80042d4:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042d6:	6222      	str	r2, [r4, #32]
 80042d8:	e78a      	b.n	80041f0 <HAL_UART_IRQHandler+0x16c>
 80042da:	bf00      	nop
 80042dc:	08003fb9 	.word	0x08003fb9

080042e0 <__libc_init_array>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	2600      	movs	r6, #0
 80042e4:	4d0c      	ldr	r5, [pc, #48]	; (8004318 <__libc_init_array+0x38>)
 80042e6:	4c0d      	ldr	r4, [pc, #52]	; (800431c <__libc_init_array+0x3c>)
 80042e8:	1b64      	subs	r4, r4, r5
 80042ea:	10a4      	asrs	r4, r4, #2
 80042ec:	42a6      	cmp	r6, r4
 80042ee:	d109      	bne.n	8004304 <__libc_init_array+0x24>
 80042f0:	f000 f822 	bl	8004338 <_init>
 80042f4:	2600      	movs	r6, #0
 80042f6:	4d0a      	ldr	r5, [pc, #40]	; (8004320 <__libc_init_array+0x40>)
 80042f8:	4c0a      	ldr	r4, [pc, #40]	; (8004324 <__libc_init_array+0x44>)
 80042fa:	1b64      	subs	r4, r4, r5
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	42a6      	cmp	r6, r4
 8004300:	d105      	bne.n	800430e <__libc_init_array+0x2e>
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	f855 3b04 	ldr.w	r3, [r5], #4
 8004308:	4798      	blx	r3
 800430a:	3601      	adds	r6, #1
 800430c:	e7ee      	b.n	80042ec <__libc_init_array+0xc>
 800430e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004312:	4798      	blx	r3
 8004314:	3601      	adds	r6, #1
 8004316:	e7f2      	b.n	80042fe <__libc_init_array+0x1e>
 8004318:	080049cc 	.word	0x080049cc
 800431c:	080049cc 	.word	0x080049cc
 8004320:	080049cc 	.word	0x080049cc
 8004324:	080049d0 	.word	0x080049d0

08004328 <memset>:
 8004328:	4603      	mov	r3, r0
 800432a:	4402      	add	r2, r0
 800432c:	4293      	cmp	r3, r2
 800432e:	d100      	bne.n	8004332 <memset+0xa>
 8004330:	4770      	bx	lr
 8004332:	f803 1b01 	strb.w	r1, [r3], #1
 8004336:	e7f9      	b.n	800432c <memset+0x4>

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
