
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d4  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006568  08006568  000208a8  2**0
                  CONTENTS
  4 .ARM          00000000  08006568  08006568  000208a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006568  08006568  000208a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800656c  0800656c  0001656c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008a8  20000000  08006570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c3c  200008a8  08006e18  000208a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014e4  08006e18  000214e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000208a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed53  00000000  00000000  000208d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be7  00000000  00000000  0003f624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001721c  00000000  00000000  0004320b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  0005a428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003c98  00000000  00000000  0005b300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c33  00000000  00000000  0005ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000217f6  00000000  00000000  00077bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e918  00000000  00000000  000993c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127cd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000395c  00000000  00000000  00127d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200008a8 	.word	0x200008a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f7c 	.word	0x08004f7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200008ac 	.word	0x200008ac
 8000148:	08004f7c 	.word	0x08004f7c

0800014c <init_audio_out>:
 */

#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	audio_spi = hspi->Instance;
 800014c:	6803      	ldr	r3, [r0, #0]
void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
 800014e:	b510      	push	{r4, lr}
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000150:	681a      	ldr	r2, [r3, #0]
	audio_spi = hspi->Instance;
 8000152:	4c06      	ldr	r4, [pc, #24]	; (800016c <init_audio_out+0x20>)
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	audio_spi = hspi->Instance;
 8000158:	6023      	str	r3, [r4, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015a:	4608      	mov	r0, r1
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 800015c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015e:	f004 fb93 	bl	8004888 <HAL_TIM_Base_Start_IT>
	output_volume = 0x3800;
 8000162:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000166:	4b02      	ldr	r3, [pc, #8]	; (8000170 <init_audio_out+0x24>)
 8000168:	801a      	strh	r2, [r3, #0]
}
 800016a:	bd10      	pop	{r4, pc}
 800016c:	20000a9c 	.word	0x20000a9c
 8000170:	20000ac0 	.word	0x20000ac0

08000174 <update_volume>:

void update_volume() {
	AUDIO_GPIO->BSRR = (AUDIO_SPI_CS_PIN << 16);	//pull CS pin low
 8000174:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
void update_volume() {
 8000178:	b538      	push	{r3, r4, r5, lr}
	AUDIO_GPIO->BSRR = (AUDIO_SPI_CS_PIN << 16);	//pull CS pin low
 800017a:	4c07      	ldr	r4, [pc, #28]	; (8000198 <update_volume+0x24>)
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 800017c:	4d07      	ldr	r5, [pc, #28]	; (800019c <update_volume+0x28>)
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <update_volume+0x2c>)
	AUDIO_GPIO->BSRR = (AUDIO_SPI_CS_PIN << 16);	//pull CS pin low
 8000180:	6122      	str	r2, [r4, #16]
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	882a      	ldrh	r2, [r5, #0]
 8000186:	60da      	str	r2, [r3, #12]
	output_volume = synth_sample();
 8000188:	f001 f8f6 	bl	8001378 <synth_sample>
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 800018c:	2310      	movs	r3, #16
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 800018e:	f440 5040 	orr.w	r0, r0, #12288	; 0x3000
 8000192:	8028      	strh	r0, [r5, #0]
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 8000194:	6123      	str	r3, [r4, #16]
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	40010800 	.word	0x40010800
 800019c:	20000ac0 	.word	0x20000ac0
 80001a0:	20000a9c 	.word	0x20000a9c

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a8:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2601      	movs	r6, #1
 80001ae:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b0:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001b4:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ca:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001cc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d0:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001d4:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f003 ffab 	bl	8004130 <HAL_RCC_OscConfig>
 80001da:	b108      	cbz	r0, 80001e0 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001de:	e7fe      	b.n	80001de <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	f04f 080f 	mov.w	r8, #15
 80001e6:	f04f 0902 	mov.w	r9, #2
 80001ea:	2600      	movs	r6, #0
 80001ec:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f0:	4621      	mov	r1, r4
 80001f2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	e9cd 8900 	strd	r8, r9, [sp]
 80001f8:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fe:	f004 f997 	bl	8004530 <HAL_RCC_ClockConfig>
 8000202:	b108      	cbz	r0, 8000208 <SystemClock_Config+0x64>
 8000204:	b672      	cpsid	i
  while (1)
 8000206:	e7fe      	b.n	8000206 <SystemClock_Config+0x62>
}
 8000208:	b010      	add	sp, #64	; 0x40
 800020a:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800020e:	bf00      	nop

08000210 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000210:	2500      	movs	r5, #0
{
 8000212:	b580      	push	{r7, lr}
 8000214:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8000216:	f002 fa03 	bl	8002620 <HAL_Init>
  SystemClock_Config();
 800021a:	f7ff ffc3 	bl	80001a4 <SystemClock_Config>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000220:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8000224:	e9cd 5508 	strd	r5, r5, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000228:	4c7b      	ldr	r4, [pc, #492]	; (8000418 <main+0x208>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800022a:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022c:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800022e:	487b      	ldr	r0, [pc, #492]	; (800041c <main+0x20c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	61a3      	str	r3, [r4, #24]
 8000236:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000238:	4616      	mov	r6, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000242:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000244:	f04f 0810 	mov.w	r8, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	61a3      	str	r3, [r4, #24]
 800024e:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000250:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000254:	f003 0308 	and.w	r3, r3, #8
 8000258:	9303      	str	r3, [sp, #12]
 800025a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800025c:	f002 fd0a 	bl	8002c74 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000260:	2200      	movs	r2, #0
 8000262:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000264:	486d      	ldr	r0, [pc, #436]	; (800041c <main+0x20c>)
 8000266:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000268:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800026c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000270:	f002 fbf4 	bl	8002a5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_5;
 8000274:	f245 0228 	movw	r2, #20520	; 0x5028
 8000278:	4b69      	ldr	r3, [pc, #420]	; (8000420 <main+0x210>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027a:	486a      	ldr	r0, [pc, #424]	; (8000424 <main+0x214>)
 800027c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_5;
 800027e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000282:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000284:	f002 fbea 	bl	8002a5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6;
 8000288:	f24a 0250 	movw	r2, #41040	; 0xa050
 800028c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028e:	4865      	ldr	r0, [pc, #404]	; (8000424 <main+0x214>)
 8000290:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6;
 8000292:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000296:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000298:	f002 fbe0 	bl	8002a5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800029c:	f44f 7260 	mov.w	r2, #896	; 0x380
 80002a0:	4b61      	ldr	r3, [pc, #388]	; (8000428 <main+0x218>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a2:	4860      	ldr	r0, [pc, #384]	; (8000424 <main+0x214>)
 80002a4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80002a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ac:	f002 fbd6 	bl	8002a5c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80002b0:	462a      	mov	r2, r5
 80002b2:	4631      	mov	r1, r6
 80002b4:	2009      	movs	r0, #9
 80002b6:	f002 f9fb 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80002ba:	2009      	movs	r0, #9
 80002bc:	f002 fa30 	bl	8002720 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80002c0:	462a      	mov	r2, r5
 80002c2:	4631      	mov	r1, r6
 80002c4:	2017      	movs	r0, #23
 80002c6:	f002 f9f3 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002ca:	2017      	movs	r0, #23
 80002cc:	f002 fa28 	bl	8002720 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80002d0:	462a      	mov	r2, r5
 80002d2:	4631      	mov	r1, r6
 80002d4:	2028      	movs	r0, #40	; 0x28
 80002d6:	f002 f9eb 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002da:	2028      	movs	r0, #40	; 0x28
 80002dc:	f002 fa20 	bl	8002720 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002e0:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002e2:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002e4:	4333      	orrs	r3, r6
 80002e6:	6163      	str	r3, [r4, #20]
 80002e8:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002ea:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ec:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002ee:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002f4:	f002 f9dc 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002f8:	200e      	movs	r0, #14
 80002fa:	f002 fa11 	bl	8002720 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 31250;
 80002fe:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 8000302:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 8000304:	4c49      	ldr	r4, [pc, #292]	; (800042c <main+0x21c>)
 8000306:	494a      	ldr	r1, [pc, #296]	; (8000430 <main+0x220>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000308:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 800030a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800030e:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart1.Init.BaudRate = 31250;
 8000312:	e9c4 1200 	strd	r1, r2, [r4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000316:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000318:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031a:	f004 fbb7 	bl	8004a8c <HAL_UART_Init>
 800031e:	b108      	cbz	r0, 8000324 <main+0x114>
 8000320:	b672      	cpsid	i
  while (1)
 8000322:	e7fe      	b.n	8000322 <main+0x112>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000324:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 8000326:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1451-1;
 800032a:	f240 52aa 	movw	r2, #1450	; 0x5aa
  htim2.Instance = TIM2;
 800032e:	4f41      	ldr	r7, [pc, #260]	; (8000434 <main+0x224>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000330:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8000334:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000338:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800033a:	4638      	mov	r0, r7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	e9c7 3301 	strd	r3, r3, [r7, #4]
  htim2.Instance = TIM2;
 8000340:	6039      	str	r1, [r7, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	613b      	str	r3, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000344:	61bb      	str	r3, [r7, #24]
  htim2.Init.Period = 1451-1;
 8000346:	60fa      	str	r2, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000348:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034a:	f004 fa39 	bl	80047c0 <HAL_TIM_Base_Init>
 800034e:	b108      	cbz	r0, 8000354 <main+0x144>
 8000350:	b672      	cpsid	i
  while (1)
 8000352:	e7fe      	b.n	8000352 <main+0x142>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000358:	4638      	mov	r0, r7
 800035a:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800035e:	f004 fabf 	bl	80048e0 <HAL_TIM_ConfigClockSource>
 8000362:	b108      	cbz	r0, 8000368 <main+0x158>
 8000364:	b672      	cpsid	i
  while (1)
 8000366:	e7fe      	b.n	8000366 <main+0x156>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000368:	2300      	movs	r3, #0
 800036a:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036c:	4638      	mov	r0, r7
 800036e:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000374:	f004 fb58 	bl	8004a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000378:	4603      	mov	r3, r0
 800037a:	b9e0      	cbnz	r0, 80003b6 <main+0x1a6>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037c:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000380:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000384:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 8000386:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000388:	f44f 6600 	mov.w	r6, #2048	; 0x800
  hspi1.Instance = SPI1;
 800038c:	4d2a      	ldr	r5, [pc, #168]	; (8000438 <main+0x228>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800038e:	e9c5 c301 	strd	ip, r3, [r5, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000392:	e9c5 3304 	strd	r3, r3, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000396:	e9c5 3308 	strd	r3, r3, [r5, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800039a:	62ab      	str	r3, [r5, #40]	; 0x28
  hspi1.Instance = SPI1;
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <main+0x22c>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039e:	61a8      	str	r0, [r5, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a0:	4628      	mov	r0, r5
  hspi1.Instance = SPI1;
 80003a2:	602b      	str	r3, [r5, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003a4:	60ee      	str	r6, [r5, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003a6:	61e9      	str	r1, [r5, #28]
  hspi1.Init.CRCPolynomial = 10;
 80003a8:	62ea      	str	r2, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003aa:	f004 f9af 	bl	800470c <HAL_SPI_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	b118      	cbz	r0, 80003ba <main+0x1aa>
 80003b2:	b672      	cpsid	i
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <main+0x1a4>
 80003b6:	b672      	cpsid	i
 80003b8:	e7fe      	b.n	80003b8 <main+0x1a8>
  hi2c2.Init.ClockSpeed = 10000;
 80003ba:	f242 7010 	movw	r0, #10000	; 0x2710
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Instance = I2C2;
 80003c2:	4e1f      	ldr	r6, [pc, #124]	; (8000440 <main+0x230>)
 80003c4:	491f      	ldr	r1, [pc, #124]	; (8000444 <main+0x234>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003c6:	e9c6 0301 	strd	r0, r3, [r6, #4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003ca:	4630      	mov	r0, r6
  hi2c2.Init.OwnAddress2 = 0;
 80003cc:	e9c6 3305 	strd	r3, r3, [r6, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d0:	e9c6 3307 	strd	r3, r3, [r6, #28]
  hi2c2.Init.OwnAddress1 = 0;
 80003d4:	60f3      	str	r3, [r6, #12]
  hi2c2.Instance = I2C2;
 80003d6:	6031      	str	r1, [r6, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d8:	6132      	str	r2, [r6, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003da:	f002 fce7 	bl	8002dac <HAL_I2C_Init>
 80003de:	b108      	cbz	r0, 80003e4 <main+0x1d4>
 80003e0:	b672      	cpsid	i
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <main+0x1d2>
  init_midi(&huart1);
 80003e4:	4620      	mov	r0, r4
 80003e6:	f000 f8ad 	bl	8000544 <init_midi>
  init_synth();
 80003ea:	f000 fcd9 	bl	8000da0 <init_synth>
  init_audio_out(&hspi1, &htim2);
 80003ee:	4628      	mov	r0, r5
 80003f0:	4639      	mov	r1, r7
 80003f2:	f7ff feab 	bl	800014c <init_audio_out>
  init_ui(&hi2c2);
 80003f6:	4630      	mov	r0, r6
 80003f8:	f001 fe74 	bl	80020e4 <init_ui>
 80003fc:	4e12      	ldr	r6, [pc, #72]	; (8000448 <main+0x238>)
 80003fe:	4d13      	ldr	r5, [pc, #76]	; (800044c <main+0x23c>)
	if (midi_buffer_read != midi_buffer_write) {
 8000400:	7832      	ldrb	r2, [r6, #0]
 8000402:	782b      	ldrb	r3, [r5, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d0fb      	beq.n	8000400 <main+0x1f0>
		process_midi_byte(&huart1);
 8000408:	4620      	mov	r0, r4
 800040a:	f000 f8bd 	bl	8000588 <process_midi_byte>
	if (midi_buffer_read != midi_buffer_write) {
 800040e:	7832      	ldrb	r2, [r6, #0]
 8000410:	782b      	ldrb	r3, [r5, #0]
 8000412:	429a      	cmp	r2, r3
 8000414:	d0f4      	beq.n	8000400 <main+0x1f0>
 8000416:	e7f7      	b.n	8000408 <main+0x1f8>
 8000418:	40021000 	.word	0x40021000
 800041c:	40010800 	.word	0x40010800
 8000420:	10210000 	.word	0x10210000
 8000424:	40010c00 	.word	0x40010c00
 8000428:	10110000 	.word	0x10110000
 800042c:	20000f74 	.word	0x20000f74
 8000430:	40013800 	.word	0x40013800
 8000434:	200012f8 	.word	0x200012f8
 8000438:	200012a0 	.word	0x200012a0
 800043c:	40013000 	.word	0x40013000
 8000440:	20000acc 	.word	0x20000acc
 8000444:	40005800 	.word	0x40005800
 8000448:	20001340 	.word	0x20001340
 800044c:	20000bf8 	.word	0x20000bf8

08000450 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin) {
 8000450:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8000454:	d038      	beq.n	80004c8 <HAL_GPIO_EXTI_Callback+0x78>
 8000456:	d806      	bhi.n	8000466 <HAL_GPIO_EXTI_Callback+0x16>
 8000458:	2820      	cmp	r0, #32
 800045a:	d038      	beq.n	80004ce <HAL_GPIO_EXTI_Callback+0x7e>
 800045c:	2880      	cmp	r0, #128	; 0x80
 800045e:	d119      	bne.n	8000494 <HAL_GPIO_EXTI_Callback+0x44>
		fsm(pb_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f001 be93 	b.w	800218c <fsm>
	switch (GPIO_Pin) {
 8000466:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800046a:	d03e      	beq.n	80004ea <HAL_GPIO_EXTI_Callback+0x9a>
 800046c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000470:	d122      	bne.n	80004b8 <HAL_GPIO_EXTI_Callback+0x68>
uint8_t inc_dec;
uint8_t temp[MAX_PARAMS];

void init_ui(I2C_HandleTypeDef* hi2c);
void fsm(input key);
static inline void fsm_change_op(uint8_t op) { fsm_op = op; };
 8000472:	2101      	movs	r1, #1
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT1_A | UI_ROT1_B)) == (UI_ROT1_A | UI_ROT1_B)
 8000476:	4a25      	ldr	r2, [pc, #148]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000478:	7019      	strb	r1, [r3, #0]
 800047a:	6893      	ldr	r3, [r2, #8]
 800047c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000480:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000484:	d003      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT1_A | UI_ROT1_B))) {
 8000486:	6893      	ldr	r3, [r2, #8]
 8000488:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800048c:	d111      	bne.n	80004b2 <HAL_GPIO_EXTI_Callback+0x62>
			fsm(rot_dec);
 800048e:	2004      	movs	r0, #4
 8000490:	f001 be7c 	b.w	800218c <fsm>
	switch (GPIO_Pin) {
 8000494:	2808      	cmp	r0, #8
 8000496:	d115      	bne.n	80004c4 <HAL_GPIO_EXTI_Callback+0x74>
 8000498:	2102      	movs	r1, #2
 800049a:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT2_A | UI_ROT2_B)) == (UI_ROT2_A | UI_ROT2_B)
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 800049e:	7019      	strb	r1, [r3, #0]
 80004a0:	6893      	ldr	r3, [r2, #8]
 80004a2:	f003 0318 	and.w	r3, r3, #24
 80004a6:	2b18      	cmp	r3, #24
 80004a8:	d0f1      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT2_A | UI_ROT2_B))) {
 80004aa:	6893      	ldr	r3, [r2, #8]
 80004ac:	f013 0f18 	tst.w	r3, #24
 80004b0:	d0ed      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			fsm(rot_inc);
 80004b2:	2003      	movs	r0, #3
 80004b4:	f001 be6a 	b.w	800218c <fsm>
	switch (GPIO_Pin) {
 80004b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80004bc:	d103      	bne.n	80004c6 <HAL_GPIO_EXTI_Callback+0x76>
		fsm(pb_2);
 80004be:	2002      	movs	r0, #2
 80004c0:	f001 be64 	b.w	800218c <fsm>
 80004c4:	4770      	bx	lr
 80004c6:	4770      	bx	lr
		fsm(pb_1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f001 be5f 	b.w	800218c <fsm>
 80004ce:	2103      	movs	r1, #3
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT3_A | UI_ROT3_B)) == (UI_ROT3_A | UI_ROT3_B)
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 80004d4:	7019      	strb	r1, [r3, #0]
 80004d6:	6893      	ldr	r3, [r2, #8]
 80004d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80004dc:	2b60      	cmp	r3, #96	; 0x60
 80004de:	d0d6      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT3_A | UI_ROT3_B))) {
 80004e0:	6893      	ldr	r3, [r2, #8]
 80004e2:	f013 0f60 	tst.w	r3, #96	; 0x60
 80004e6:	d0d2      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
 80004e8:	e7e3      	b.n	80004b2 <HAL_GPIO_EXTI_Callback+0x62>
 80004ea:	2100      	movs	r1, #0
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT0_A | UI_ROT0_B)) == (UI_ROT0_A | UI_ROT0_B)
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 80004f0:	7019      	strb	r1, [r3, #0]
 80004f2:	6893      	ldr	r3, [r2, #8]
 80004f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80004f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80004fc:	d0c7      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT0_A | UI_ROT0_B))) {
 80004fe:	6893      	ldr	r3, [r2, #8]
 8000500:	f413 5f40 	tst.w	r3, #12288	; 0x3000
 8000504:	d0c3      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
 8000506:	e7d4      	b.n	80004b2 <HAL_GPIO_EXTI_Callback+0x62>
 8000508:	20000ac8 	.word	0x20000ac8
 800050c:	40010c00 	.word	0x40010c00

08000510 <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000510:	2201      	movs	r2, #1
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000512:	b410      	push	{r4}
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000514:	4c05      	ldr	r4, [pc, #20]	; (800052c <HAL_UART_RxCpltCallback+0x1c>)
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000516:	4906      	ldr	r1, [pc, #24]	; (8000530 <HAL_UART_RxCpltCallback+0x20>)
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000518:	7823      	ldrb	r3, [r4, #0]
 800051a:	4413      	add	r3, r2
 800051c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000520:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000522:	7823      	ldrb	r3, [r4, #0]
}
 8000524:	bc10      	pop	{r4}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000526:	4419      	add	r1, r3
 8000528:	f004 bb1a 	b.w	8004b60 <HAL_UART_Receive_IT>
 800052c:	20000bf8 	.word	0x20000bf8
 8000530:	20000fb8 	.word	0x20000fb8

08000534 <sample>:
	TIM2->SR = 0;
 8000534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
	update_volume();
 800053c:	f7ff be1a 	b.w	8000174 <update_volume>

08000540 <Error_Handler>:
 8000540:	b672      	cpsid	i
  while (1)
 8000542:	e7fe      	b.n	8000542 <Error_Handler+0x2>

08000544 <init_midi>:
 */

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
	data[0] = -1;
 8000544:	21ff      	movs	r1, #255	; 0xff
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <init_midi+0x34>)
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <init_midi+0x38>)
void init_midi(UART_HandleTypeDef* huart) {
 800054a:	b510      	push	{r4, lr}
 800054c:	4604      	mov	r4, r0
	data[0] = -1;
 800054e:	7011      	strb	r1, [r2, #0]
	data[1] = -1;
 8000550:	7051      	strb	r1, [r2, #1]
	for (uint8_t i = 0; i < RING_BUFFER_SIZE; i++) {
 8000552:	4618      	mov	r0, r3
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	f004 fce9 	bl	8004f2c <memset>
		midi_buffer[i] = -1;
	}
	midi_buffer_read = 0;
 800055a:	2100      	movs	r1, #0
 800055c:	4603      	mov	r3, r0
	midi_buffer_write = 0;
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <init_midi+0x3c>)
	midi_buffer_read = 0;
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <init_midi+0x40>)
 8000562:	7001      	strb	r1, [r0, #0]
	midi_buffer_write = 0;
 8000564:	7011      	strb	r1, [r2, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000566:	7811      	ldrb	r1, [r2, #0]
 8000568:	4620      	mov	r0, r4
}
 800056a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 800056e:	2201      	movs	r2, #1
 8000570:	4419      	add	r1, r3
 8000572:	f004 baf5 	b.w	8004b60 <HAL_UART_Receive_IT>
 8000576:	bf00      	nop
 8000578:	20000fb8 	.word	0x20000fb8
 800057c:	20001104 	.word	0x20001104
 8000580:	20000bf8 	.word	0x20000bf8
 8000584:	20001340 	.word	0x20001340

08000588 <process_midi_byte>:

void process_midi_byte() {
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 800058a:	4c40      	ldr	r4, [pc, #256]	; (800068c <process_midi_byte+0x104>)
 800058c:	4a40      	ldr	r2, [pc, #256]	; (8000690 <process_midi_byte+0x108>)
 800058e:	7823      	ldrb	r3, [r4, #0]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 8000590:	56d1      	ldrsb	r1, [r2, r3]
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 8000592:	5cd2      	ldrb	r2, [r2, r3]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 8000594:	2900      	cmp	r1, #0
 8000596:	db34      	blt.n	8000602 <process_midi_byte+0x7a>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {													//if byte received was data byte
		switch (status & 0xF0) {
 8000598:	4b3e      	ldr	r3, [pc, #248]	; (8000694 <process_midi_byte+0x10c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005a0:	2bc0      	cmp	r3, #192	; 0xc0
 80005a2:	d01e      	beq.n	80005e2 <process_midi_byte+0x5a>
 80005a4:	d81b      	bhi.n	80005de <process_midi_byte+0x56>
 80005a6:	2ba0      	cmp	r3, #160	; 0xa0
 80005a8:	d002      	beq.n	80005b0 <process_midi_byte+0x28>
 80005aa:	d907      	bls.n	80005bc <process_midi_byte+0x34>
 80005ac:	2bb0      	cmp	r3, #176	; 0xb0
 80005ae:	d118      	bne.n	80005e2 <process_midi_byte+0x5a>
				data[1] = midi_in;
				polyphonic_pressure();
			}
			break;
		case 0xB0:												//control change (unimplemented)
			if (data[0] == (uint8_t)-1) {
 80005b0:	4b39      	ldr	r3, [pc, #228]	; (8000698 <process_midi_byte+0x110>)
 80005b2:	7819      	ldrb	r1, [r3, #0]
 80005b4:	29ff      	cmp	r1, #255	; 0xff
 80005b6:	d158      	bne.n	800066a <process_midi_byte+0xe2>
				data[0] = midi_in;
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	e01c      	b.n	80005f6 <process_midi_byte+0x6e>
		switch (status & 0xF0) {
 80005bc:	2b80      	cmp	r3, #128	; 0x80
 80005be:	d02c      	beq.n	800061a <process_midi_byte+0x92>
 80005c0:	2b90      	cmp	r3, #144	; 0x90
 80005c2:	d10e      	bne.n	80005e2 <process_midi_byte+0x5a>
			if (data[0] == (uint8_t)-1) {
 80005c4:	4d34      	ldr	r5, [pc, #208]	; (8000698 <process_midi_byte+0x110>)
 80005c6:	7828      	ldrb	r0, [r5, #0]
 80005c8:	28ff      	cmp	r0, #255	; 0xff
 80005ca:	d02a      	beq.n	8000622 <process_midi_byte+0x9a>
				data[1] = midi_in;
 80005cc:	706a      	strb	r2, [r5, #1]
				if (data[1] == 0) {
 80005ce:	2a00      	cmp	r2, #0
 80005d0:	d156      	bne.n	8000680 <process_midi_byte+0xf8>
	midi_buffer_write = 0;
	clear_voices();
}

void note_off() {
	release_voice(data[0]);
 80005d2:	f000 fe93 	bl	80012fc <release_voice>
	data[0] = -1;
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80005da:	706b      	strb	r3, [r5, #1]
}
 80005dc:	e00b      	b.n	80005f6 <process_midi_byte+0x6e>
		switch (status & 0xF0) {
 80005de:	2be0      	cmp	r3, #224	; 0xe0
 80005e0:	d021      	beq.n	8000626 <process_midi_byte+0x9e>
	midi_buffer_read = 0;
 80005e2:	2100      	movs	r1, #0
	data[0] = -1;
 80005e4:	22ff      	movs	r2, #255	; 0xff
	midi_buffer_write = 0;
 80005e6:	482d      	ldr	r0, [pc, #180]	; (800069c <process_midi_byte+0x114>)
	data[0] = -1;
 80005e8:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <process_midi_byte+0x110>)
	midi_buffer_read = 0;
 80005ea:	7021      	strb	r1, [r4, #0]
	data[0] = -1;
 80005ec:	701a      	strb	r2, [r3, #0]
	midi_buffer_write = 0;
 80005ee:	7001      	strb	r1, [r0, #0]
	data[1] = -1;
 80005f0:	705a      	strb	r2, [r3, #1]
	clear_voices();
 80005f2:	f000 fd73 	bl	80010dc <clear_voices>
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 80005f6:	7823      	ldrb	r3, [r4, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005fe:	7023      	strb	r3, [r4, #0]
}
 8000600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data[0] = -1;
 8000602:	21ff      	movs	r1, #255	; 0xff
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <process_midi_byte+0x110>)
		status = midi_in;
 8000606:	4823      	ldr	r0, [pc, #140]	; (8000694 <process_midi_byte+0x10c>)
		data[0] = -1;
 8000608:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 800060a:	7059      	strb	r1, [r3, #1]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800060c:	7823      	ldrb	r3, [r4, #0]
		status = midi_in;
 800060e:	7002      	strb	r2, [r0, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 8000610:	3301      	adds	r3, #1
 8000612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000616:	7023      	strb	r3, [r4, #0]
}
 8000618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (data[0] == (uint8_t)-1) {
 800061a:	4d1f      	ldr	r5, [pc, #124]	; (8000698 <process_midi_byte+0x110>)
 800061c:	7828      	ldrb	r0, [r5, #0]
 800061e:	28ff      	cmp	r0, #255	; 0xff
 8000620:	d127      	bne.n	8000672 <process_midi_byte+0xea>
				data[0] = midi_in;
 8000622:	702a      	strb	r2, [r5, #0]
 8000624:	e7e7      	b.n	80005f6 <process_midi_byte+0x6e>
			if (data[0] == (uint8_t)-1) {
 8000626:	4d1c      	ldr	r5, [pc, #112]	; (8000698 <process_midi_byte+0x110>)
 8000628:	782b      	ldrb	r3, [r5, #0]
 800062a:	2bff      	cmp	r3, #255	; 0xff
 800062c:	d0f9      	beq.n	8000622 <process_midi_byte+0x9a>
void pitch_bend() {
	int16_t pitch = ((int16_t)data[1] << 7) | data[0];
	pitch -= MIDI_PITCH_ZERO;
	pitch >>= 7;
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 800062e:	4f1c      	ldr	r7, [pc, #112]	; (80006a0 <process_midi_byte+0x118>)
	int16_t pitch = ((int16_t)data[1] << 7) | data[0];
 8000630:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 8000634:	783e      	ldrb	r6, [r7, #0]
 8000636:	7878      	ldrb	r0, [r7, #1]
 8000638:	78b9      	ldrb	r1, [r7, #2]
	pitch -= MIDI_PITCH_ZERO;
 800063a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 800063e:	78ff      	ldrb	r7, [r7, #3]
 8000640:	f343 13c8 	sbfx	r3, r3, #7, #9
 8000644:	fb03 f606 	mul.w	r6, r3, r6
 8000648:	fb03 f000 	mul.w	r0, r3, r0
 800064c:	fb03 f101 	mul.w	r1, r3, r1
 8000650:	fb03 f307 	mul.w	r3, r3, r7
				data[1] = midi_in;
 8000654:	706a      	strb	r2, [r5, #1]
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <process_midi_byte+0x11c>)
 8000658:	1136      	asrs	r6, r6, #4
 800065a:	1100      	asrs	r0, r0, #4
 800065c:	1109      	asrs	r1, r1, #4
 800065e:	111b      	asrs	r3, r3, #4
 8000660:	7016      	strb	r6, [r2, #0]
 8000662:	7050      	strb	r0, [r2, #1]
 8000664:	7091      	strb	r1, [r2, #2]
 8000666:	70d3      	strb	r3, [r2, #3]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000668:	e7c5      	b.n	80005f6 <process_midi_byte+0x6e>
	midi_buffer_read = 0;
 800066a:	2100      	movs	r1, #0
	data[0] = -1;
 800066c:	22ff      	movs	r2, #255	; 0xff
	midi_buffer_write = 0;
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <process_midi_byte+0x114>)
 8000670:	e7bb      	b.n	80005ea <process_midi_byte+0x62>
				data[1] = midi_in;
 8000672:	706a      	strb	r2, [r5, #1]
	release_voice(data[0]);
 8000674:	f000 fe42 	bl	80012fc <release_voice>
	data[0] = -1;
 8000678:	23ff      	movs	r3, #255	; 0xff
 800067a:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 800067c:	706b      	strb	r3, [r5, #1]
}
 800067e:	e7ba      	b.n	80005f6 <process_midi_byte+0x6e>
	add_voice(data[0]);
 8000680:	f000 fd3e 	bl	8001100 <add_voice>
	data[0] = -1;
 8000684:	23ff      	movs	r3, #255	; 0xff
 8000686:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 8000688:	706b      	strb	r3, [r5, #1]
}
 800068a:	e7b4      	b.n	80005f6 <process_midi_byte+0x6e>
 800068c:	20001340 	.word	0x20001340
 8000690:	20000fb8 	.word	0x20000fb8
 8000694:	200014dc 	.word	0x200014dc
 8000698:	20001104 	.word	0x20001104
 800069c:	20000bf8 	.word	0x20000bf8
 80006a0:	20000ac4 	.word	0x20000ac4
 80006a4:	20000ab8 	.word	0x20000ab8

080006a8 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 80006a8:	4b01      	ldr	r3, [pc, #4]	; (80006b0 <note_to_freq+0x8>)
}
 80006aa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80006ae:	4770      	bx	lr
 80006b0:	08004fa4 	.word	0x08004fa4

080006b4 <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 80006b6:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 80006b8:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 80006bc:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	be37c63b 	.word	0xbe37c63b

080006c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <HAL_MspInit+0x3c>)
{
 80006ca:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80006cc:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ce:	490e      	ldr	r1, [pc, #56]	; (8000708 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d0:	f042 0201 	orr.w	r2, r2, #1
 80006d4:	619a      	str	r2, [r3, #24]
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	f002 0201 	and.w	r2, r2, #1
 80006dc:	9200      	str	r2, [sp, #0]
 80006de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	69da      	ldr	r2, [r3, #28]
 80006e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006e6:	61da      	str	r2, [r3, #28]
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006f2:	684b      	ldr	r3, [r1, #4]
 80006f4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006fc:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	b002      	add	sp, #8
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000
 8000708:	40010000 	.word	0x40010000

0800070c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800070c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C2)
 8000712:	6802      	ldr	r2, [r0, #0]
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <HAL_I2C_MspInit+0xa0>)
{
 8000716:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 8000718:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800071e:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hi2c->Instance==I2C2)
 8000722:	d002      	beq.n	800072a <HAL_I2C_MspInit+0x1e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000724:	b007      	add	sp, #28
 8000726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072a:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800072c:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 8000730:	f04f 0912 	mov.w	r9, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	4f1e      	ldr	r7, [pc, #120]	; (80007b0 <HAL_I2C_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	4605      	mov	r5, r0
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	481b      	ldr	r0, [pc, #108]	; (80007b4 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000750:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f002 f982 	bl	8002a5c <HAL_GPIO_Init>
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000758:	f04f 0c10 	mov.w	ip, #16
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800075c:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C2_CLK_ENABLE();
 800075e:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000760:	4e15      	ldr	r6, [pc, #84]	; (80007b8 <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800076a:	4914      	ldr	r1, [pc, #80]	; (80007bc <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 800076c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000770:	9301      	str	r3, [sp, #4]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000772:	4630      	mov	r0, r6
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000774:	e9c6 c401 	strd	ip, r4, [r6, #4]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000778:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800077c:	e9c6 4406 	strd	r4, r4, [r6, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000780:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000782:	6031      	str	r1, [r6, #0]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000784:	60f2      	str	r2, [r6, #12]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000786:	f001 fff1 	bl	800276c <HAL_DMA_Init>
 800078a:	b960      	cbnz	r0, 80007a6 <HAL_I2C_MspInit+0x9a>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2101      	movs	r1, #1
 8000790:	2021      	movs	r0, #33	; 0x21
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000792:	636e      	str	r6, [r5, #52]	; 0x34
 8000794:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8000796:	f001 ff8b 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800079a:	2021      	movs	r0, #33	; 0x21
 800079c:	f001 ffc0 	bl	8002720 <HAL_NVIC_EnableIRQ>
}
 80007a0:	b007      	add	sp, #28
 80007a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 80007a6:	f7ff fecb 	bl	8000540 <Error_Handler>
 80007aa:	e7ef      	b.n	800078c <HAL_I2C_MspInit+0x80>
 80007ac:	40005800 	.word	0x40005800
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010c00 	.word	0x40010c00
 80007b8:	20000ccc 	.word	0x20000ccc
 80007bc:	40020044 	.word	0x40020044

080007c0 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	2300      	movs	r3, #0
{
 80007c2:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 80007c4:	6801      	ldr	r1, [r0, #0]
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <HAL_SPI_MspInit+0x60>)
{
 80007c8:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 80007ca:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80007d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI1)
 80007d4:	d001      	beq.n	80007da <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007d6:	b006      	add	sp, #24
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007da:	24a0      	movs	r4, #160	; 0xa0
 80007dc:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007de:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80007e8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80007f0:	619a      	str	r2, [r3, #24]
 80007f2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80007fa:	9200      	str	r2, [sp, #0]
 80007fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	699a      	ldr	r2, [r3, #24]
 8000800:	f042 0204 	orr.w	r2, r2, #4
 8000804:	619a      	str	r2, [r3, #24]
 8000806:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000808:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000814:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f002 f921 	bl	8002a5c <HAL_GPIO_Init>
}
 800081a:	b006      	add	sp, #24
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	bf00      	nop
 8000820:	40013000 	.word	0x40013000
 8000824:	40010800 	.word	0x40010800

08000828 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000828:	6803      	ldr	r3, [r0, #0]
 800082a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800082e:	d000      	beq.n	8000832 <HAL_TIM_Base_MspInit+0xa>
 8000830:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000832:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000836:	69d8      	ldr	r0, [r3, #28]
{
 8000838:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800083a:	f040 0001 	orr.w	r0, r0, #1
 800083e:	61d8      	str	r0, [r3, #28]
 8000840:	69db      	ldr	r3, [r3, #28]
{
 8000842:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2102      	movs	r1, #2
 800084e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000850:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000852:	f001 ff2d 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000856:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000858:	b003      	add	sp, #12
 800085a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800085e:	f001 bf5f 	b.w	8002720 <HAL_NVIC_EnableIRQ>
 8000862:	bf00      	nop

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8000868:	6802      	ldr	r2, [r0, #0]
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <HAL_UART_MspInit+0x88>)
{
 800086c:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 800086e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000874:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8000878:	d001      	beq.n	800087e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800087a:	b007      	add	sp, #28
 800087c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800087e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000882:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000884:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8000886:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000890:	619a      	str	r2, [r3, #24]
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000898:	9200      	str	r2, [sp, #0]
 800089a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	699a      	ldr	r2, [r3, #24]
 800089e:	f042 0204 	orr.w	r2, r2, #4
 80008a2:	619a      	str	r2, [r3, #24]
 80008a4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	a902      	add	r1, sp, #8
 80008b6:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008bc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f002 f8cd 	bl	8002a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	a902      	add	r1, sp, #8
 80008ca:	4809      	ldr	r0, [pc, #36]	; (80008f0 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f002 f8c3 	bl	8002a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d6:	4622      	mov	r2, r4
 80008d8:	4621      	mov	r1, r4
 80008da:	2025      	movs	r0, #37	; 0x25
 80008dc:	f001 fee8 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e0:	2025      	movs	r0, #37	; 0x25
 80008e2:	f001 ff1d 	bl	8002720 <HAL_NVIC_EnableIRQ>
}
 80008e6:	b007      	add	sp, #28
 80008e8:	bd30      	pop	{r4, r5, pc}
 80008ea:	bf00      	nop
 80008ec:	40013800 	.word	0x40013800
 80008f0:	40010800 	.word	0x40010800

080008f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler>
 80008f6:	bf00      	nop

080008f8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <HardFault_Handler>
 80008fa:	bf00      	nop

080008fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler>
 80008fe:	bf00      	nop

08000900 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <BusFault_Handler>
 8000902:	bf00      	nop

08000904 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler>
 8000906:	bf00      	nop

08000908 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <DebugMon_Handler>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <PendSV_Handler>:
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop

08000914 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f001 be96 	b.w	8002644 <HAL_IncTick>

08000918 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000918:	2008      	movs	r0, #8
 800091a:	f002 b9af 	b.w	8002c7c <HAL_GPIO_EXTI_IRQHandler>
 800091e:	bf00      	nop

08000920 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000920:	4801      	ldr	r0, [pc, #4]	; (8000928 <DMA1_Channel4_IRQHandler+0x8>)
 8000922:	f002 b803 	b.w	800292c <HAL_DMA_IRQHandler>
 8000926:	bf00      	nop
 8000928:	20000ccc 	.word	0x20000ccc

0800092c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800092c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800092e:	2020      	movs	r0, #32
 8000930:	f002 f9a4 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000934:	2080      	movs	r0, #128	; 0x80
 8000936:	f002 f9a1 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800093a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800093e:	f002 f99d 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000946:	f44f 7000 	mov.w	r0, #512	; 0x200
 800094a:	f002 b997 	b.w	8002c7c <HAL_GPIO_EXTI_IRQHandler>
 800094e:	bf00      	nop

08000950 <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 8000950:	f7ff bdf0 	b.w	8000534 <sample>

08000954 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000954:	4801      	ldr	r0, [pc, #4]	; (800095c <I2C2_EV_IRQHandler+0x8>)
 8000956:	f002 bf31 	b.w	80037bc <HAL_I2C_EV_IRQHandler>
 800095a:	bf00      	nop
 800095c:	20000acc 	.word	0x20000acc

08000960 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000960:	4801      	ldr	r0, [pc, #4]	; (8000968 <USART1_IRQHandler+0x8>)
 8000962:	f004 b991 	b.w	8004c88 <HAL_UART_IRQHandler>
 8000966:	bf00      	nop
 8000968:	20000f74 	.word	0x20000f74

0800096c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800096c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800096e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000972:	f002 f983 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800097a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800097e:	f002 b97d 	b.w	8002c7c <HAL_GPIO_EXTI_IRQHandler>
 8000982:	bf00      	nop

08000984 <modulate>:
		}
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
	}
}

static inline int8_t modulate(uint8_t voice_index) {
 8000984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {			//loop through all operators of voice
		/*update phase of active operator*/
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta + op_pitch_bend[op_index], op[op_index][voice_index].phase);
 8000988:	4ec2      	ldr	r6, [pc, #776]	; (8000c94 <modulate+0x310>)
 800098a:	4fc3      	ldr	r7, [pc, #780]	; (8000c98 <modulate+0x314>)
 800098c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8000990:	eb06 0343 	add.w	r3, r6, r3, lsl #1
	-27, -25, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9,  -7,  -5,  -3,  -2,
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 8000994:	f8b3 1078 	ldrh.w	r1, [r3, #120]	; 0x78
 8000998:	891d      	ldrh	r5, [r3, #8]
 800099a:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 800099e:	f8b3 4076 	ldrh.w	r4, [r3, #118]	; 0x76
 80009a2:	f997 e002 	ldrsb.w	lr, [r7, #2]
 80009a6:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	; 0xe6
 80009aa:	4465      	add	r5, ip
 80009ac:	4472      	add	r2, lr
 80009ae:	eb04 0c01 	add.w	ip, r4, r1
 80009b2:	f8b3 e158 	ldrh.w	lr, [r3, #344]	; 0x158
 80009b6:	f8b3 1156 	ldrh.w	r1, [r3, #342]	; 0x156
 80009ba:	f997 4001 	ldrsb.w	r4, [r7, #1]
 80009be:	f997 8000 	ldrsb.w	r8, [r7]
 80009c2:	4471      	add	r1, lr
 80009c4:	f997 7003 	ldrsb.w	r7, [r7, #3]
 80009c8:	f8b3 e0e8 	ldrh.w	lr, [r3, #232]	; 0xe8
 80009cc:	4464      	add	r4, ip
	}

	switch (algo) {
 80009ce:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 8000ca4 <modulate+0x320>
 80009d2:	4439      	add	r1, r7
 80009d4:	4445      	add	r5, r8
 80009d6:	4472      	add	r2, lr
 80009d8:	f89c 7000 	ldrb.w	r7, [ip]
 80009dc:	b2ad      	uxth	r5, r5
 80009de:	b2a4      	uxth	r4, r4
 80009e0:	b292      	uxth	r2, r2
 80009e2:	b289      	uxth	r1, r1
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta + op_pitch_bend[op_index], op[op_index][voice_index].phase);
 80009e4:	811d      	strh	r5, [r3, #8]
 80009e6:	f8a3 4078 	strh.w	r4, [r3, #120]	; 0x78
 80009ea:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
 80009ee:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
 80009f2:	00c3      	lsls	r3, r0, #3
 80009f4:	2f0b      	cmp	r7, #11
 80009f6:	f200 81cb 	bhi.w	8000d90 <modulate+0x40c>
 80009fa:	e8df f017 	tbh	[pc, r7, lsl #1]
 80009fe:	0038      	.short	0x0038
 8000a00:	00770061 	.word	0x00770061
 8000a04:	00c1009f 	.word	0x00c1009f
 8000a08:	010a00df 	.word	0x010a00df
 8000a0c:	0155012b 	.word	0x0155012b
 8000a10:	01b00189 	.word	0x01b00189
 8000a14:	000c      	.short	0x000c
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000a16:	4fa1      	ldr	r7, [pc, #644]	; (8000c9c <modulate+0x318>)
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
		return ((int16_t)op2 + op1 + op0) / 3;
		break;
	case 0x0B:
		op3 = get_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a18:	1a1b      	subs	r3, r3, r0
 8000a1a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000a1e:	0a09      	lsrs	r1, r1, #8
 8000a20:	0a12      	lsrs	r2, r2, #8
		op2 = get_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a22:	56bb      	ldrsb	r3, [r7, r2]
		op3 = get_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a24:	f917 e001 	ldrsb.w	lr, [r7, r1]
 8000a28:	0a24      	lsrs	r4, r4, #8
 8000a2a:	f896 0154 	ldrb.w	r0, [r6, #340]	; 0x154
		op2 = get_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a2e:	f896 10e4 	ldrb.w	r1, [r6, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a32:	f917 c004 	ldrsb.w	ip, [r7, r4]
 8000a36:	f896 2074 	ldrb.w	r2, [r6, #116]	; 0x74
 8000a3a:	0a2d      	lsrs	r5, r5, #8
		op2 = get_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a3c:	fb01 f103 	mul.w	r1, r1, r3
		op3 = get_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a40:	fb00 f00e 	mul.w	r0, r0, lr
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a44:	577c      	ldrsb	r4, [r7, r5]
 8000a46:	7933      	ldrb	r3, [r6, #4]
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a48:	fb02 f20c 	mul.w	r2, r2, ip
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a4c:	fb03 f304 	mul.w	r3, r3, r4
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 8000a50:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000a54:	f341 11c7 	sbfx	r1, r1, #7, #8
 8000a58:	4408      	add	r0, r1
 8000a5a:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000a5e:	4410      	add	r0, r2
 8000a60:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000a64:	4418      	add	r0, r3
 8000a66:	f340 0087 	sbfx	r0, r0, #2, #8
		break;
	default:
		break;
	}
	return 0;
}
 8000a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a6e:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000a70:	488b      	ldr	r0, [pc, #556]	; (8000ca0 <modulate+0x31c>)
 8000a72:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000a76:	0a09      	lsrs	r1, r1, #8
 8000a78:	5641      	ldrsb	r1, [r0, r1]
 8000a7a:	f896 7154 	ldrb.w	r7, [r6, #340]	; 0x154
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a7e:	0a13      	lsrs	r3, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a80:	fb07 f201 	mul.w	r2, r7, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a84:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	56c1      	ldrsb	r1, [r0, r3]
 8000a8c:	f896 20e4 	ldrb.w	r2, [r6, #228]	; 0xe4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a90:	0a23      	lsrs	r3, r4, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a92:	fb02 f201 	mul.w	r2, r2, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a96:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000a9a:	b2db      	uxtb	r3, r3
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a9c:	56c1      	ldrsb	r1, [r0, r3]
 8000a9e:	f896 2074 	ldrb.w	r2, [r6, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000aa2:	0a2b      	lsrs	r3, r5, #8
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000aa4:	fb02 f201 	mul.w	r2, r2, r1
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000aa8:	497c      	ldr	r1, [pc, #496]	; (8000c9c <modulate+0x318>)
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000aaa:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7930      	ldrb	r0, [r6, #4]
 8000ab2:	56cb      	ldrsb	r3, [r1, r3]
 8000ab4:	fb00 f003 	mul.w	r0, r0, r3
 8000ab8:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac0:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000ac2:	4877      	ldr	r0, [pc, #476]	; (8000ca0 <modulate+0x31c>)
 8000ac4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000ac8:	0a12      	lsrs	r2, r2, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000aca:	5687      	ldrsb	r7, [r0, r2]
 8000acc:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
 8000ad0:	0a09      	lsrs	r1, r1, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ad2:	5641      	ldrsb	r1, [r0, r1]
 8000ad4:	f896 2154 	ldrb.w	r2, [r6, #340]	; 0x154
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ad8:	fb03 f307 	mul.w	r3, r3, r7
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000adc:	fb02 f201 	mul.w	r2, r2, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ae0:	11db      	asrs	r3, r3, #7
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ae2:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000ae6:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8000aea:	e7d6      	b.n	8000a9a <modulate+0x116>
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000aec:	1a1b      	subs	r3, r3, r0
 8000aee:	486c      	ldr	r0, [pc, #432]	; (8000ca0 <modulate+0x31c>)
 8000af0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000af4:	0a13      	lsrs	r3, r2, #8
 8000af6:	56c7      	ldrsb	r7, [r0, r3]
 8000af8:	f896 20e4 	ldrb.w	r2, [r6, #228]	; 0xe4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000afc:	0a23      	lsrs	r3, r4, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000afe:	fb02 f207 	mul.w	r2, r2, r7
 8000b02:	0a09      	lsrs	r1, r1, #8
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b04:	eb03 13e2 	add.w	r3, r3, r2, asr #7
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b08:	5644      	ldrsb	r4, [r0, r1]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f896 1154 	ldrb.w	r1, [r6, #340]	; 0x154
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b10:	56c2      	ldrsb	r2, [r0, r3]
 8000b12:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b16:	fb01 f104 	mul.w	r1, r1, r4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b1a:	fb03 f202 	mul.w	r2, r3, r2
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b1e:	0a2b      	lsrs	r3, r5, #8
 8000b20:	eb03 13e1 	add.w	r3, r3, r1, asr #7
 8000b24:	eb03 13e2 	add.w	r3, r3, r2, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000b28:	4a5c      	ldr	r2, [pc, #368]	; (8000c9c <modulate+0x318>)
 8000b2a:	b2db      	uxtb	r3, r3
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b2c:	7930      	ldrb	r0, [r6, #4]
 8000b2e:	56d3      	ldrsb	r3, [r2, r3]
 8000b30:	fb00 f003 	mul.w	r0, r0, r3
 8000b34:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b3c:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b3e:	4858      	ldr	r0, [pc, #352]	; (8000ca0 <modulate+0x31c>)
 8000b40:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000b44:	0a0b      	lsrs	r3, r1, #8
 8000b46:	56c7      	ldrsb	r7, [r0, r3]
 8000b48:	f896 1154 	ldrb.w	r1, [r6, #340]	; 0x154
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b4c:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b50:	fb01 f107 	mul.w	r1, r1, r7
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b54:	f3c1 11c7 	ubfx	r1, r1, #7, #8
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b58:	eb01 2414 	add.w	r4, r1, r4, lsr #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b5c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8000b60:	b2e4      	uxtb	r4, r4
 8000b62:	b2d2      	uxtb	r2, r2
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b64:	5704      	ldrsb	r4, [r0, r4]
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b66:	5681      	ldrsb	r1, [r0, r2]
 8000b68:	f896 20e4 	ldrb.w	r2, [r6, #228]	; 0xe4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b6c:	fb03 f304 	mul.w	r3, r3, r4
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b70:	fb02 f201 	mul.w	r2, r2, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b74:	11db      	asrs	r3, r3, #7
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b76:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000b7a:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8000b7e:	e7d3      	b.n	8000b28 <modulate+0x1a4>
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b80:	1a1b      	subs	r3, r3, r0
 8000b82:	4847      	ldr	r0, [pc, #284]	; (8000ca0 <modulate+0x31c>)
 8000b84:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000b88:	0a12      	lsrs	r2, r2, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b8a:	5687      	ldrsb	r7, [r0, r2]
 8000b8c:	0a09      	lsrs	r1, r1, #8
 8000b8e:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b92:	5642      	ldrsb	r2, [r0, r1]
 8000b94:	f896 1154 	ldrb.w	r1, [r6, #340]	; 0x154
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b98:	fb03 f307 	mul.w	r3, r3, r7
 8000b9c:	0a24      	lsrs	r4, r4, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b9e:	fb01 f102 	mul.w	r1, r1, r2
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba2:	5700      	ldrsb	r0, [r0, r4]
 8000ba4:	f896 2074 	ldrb.w	r2, [r6, #116]	; 0x74
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba8:	11db      	asrs	r3, r3, #7
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000baa:	fb02 f200 	mul.w	r2, r2, r0
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bae:	eb03 13e1 	add.w	r3, r3, r1, asr #7
 8000bb2:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8000bb6:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000bba:	e7b5      	b.n	8000b28 <modulate+0x1a4>
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bbc:	1a1b      	subs	r3, r3, r0
 8000bbe:	4f38      	ldr	r7, [pc, #224]	; (8000ca0 <modulate+0x31c>)
 8000bc0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000bc4:	0a09      	lsrs	r1, r1, #8
 8000bc6:	f896 0154 	ldrb.w	r0, [r6, #340]	; 0x154
 8000bca:	5679      	ldrsb	r1, [r7, r1]
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bcc:	0a13      	lsrs	r3, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bce:	fb00 f201 	mul.w	r2, r0, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bd2:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	56f9      	ldrsb	r1, [r7, r3]
 8000bda:	f896 20e4 	ldrb.w	r2, [r6, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bde:	0a23      	lsrs	r3, r4, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000be0:	fb02 f201 	mul.w	r2, r2, r1
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000be4:	492d      	ldr	r1, [pc, #180]	; (8000c9c <modulate+0x318>)
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000be6:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000bea:	0a2d      	lsrs	r5, r5, #8
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	56cc      	ldrsb	r4, [r1, r3]
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf0:	574a      	ldrsb	r2, [r1, r5]
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf2:	f896 0074 	ldrb.w	r0, [r6, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf6:	7933      	ldrb	r3, [r6, #4]
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf8:	fb00 f004 	mul.w	r0, r0, r4
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bfc:	fb03 f302 	mul.w	r3, r3, r2
		return ((int16_t)op2 + op0) >> 1;
 8000c00:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000c04:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000c08:	4418      	add	r0, r3
 8000c0a:	f340 0047 	sbfx	r0, r0, #1, #8
}
 8000c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c12:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c14:	4f22      	ldr	r7, [pc, #136]	; (8000ca0 <modulate+0x31c>)
 8000c16:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000c1a:	0a09      	lsrs	r1, r1, #8
 8000c1c:	f896 0154 	ldrb.w	r0, [r6, #340]	; 0x154
 8000c20:	5679      	ldrsb	r1, [r7, r1]
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c22:	0a13      	lsrs	r3, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c24:	fb00 f201 	mul.w	r2, r0, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c28:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	56fa      	ldrsb	r2, [r7, r3]
 8000c30:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000c34:	4919      	ldr	r1, [pc, #100]	; (8000c9c <modulate+0x318>)
 8000c36:	fb03 f302 	mul.w	r3, r3, r2
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c3a:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8000c3e:	eb03 2214 	add.w	r2, r3, r4, lsr #8
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c42:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	b2db      	uxtb	r3, r3
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c4a:	568c      	ldrsb	r4, [r1, r2]
 8000c4c:	f896 0074 	ldrb.w	r0, [r6, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c50:	56ca      	ldrsb	r2, [r1, r3]
 8000c52:	e7d0      	b.n	8000bf6 <modulate+0x272>
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c54:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c56:	4f12      	ldr	r7, [pc, #72]	; (8000ca0 <modulate+0x31c>)
 8000c58:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000c5c:	0a09      	lsrs	r1, r1, #8
 8000c5e:	0a24      	lsrs	r4, r4, #8
 8000c60:	f917 c001 	ldrsb.w	ip, [r7, r1]
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c64:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 8000c68:	5739      	ldrsb	r1, [r7, r4]
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c6a:	f896 0154 	ldrb.w	r0, [r6, #340]	; 0x154
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c6e:	fb03 f101 	mul.w	r1, r3, r1
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c72:	fb00 f00c 	mul.w	r0, r0, ip
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c76:	0a12      	lsrs	r2, r2, #8
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c78:	0a2b      	lsrs	r3, r5, #8
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c7a:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c7e:	eb03 13e1 	add.w	r3, r3, r1, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000c82:	4906      	ldr	r1, [pc, #24]	; (8000c9c <modulate+0x318>)
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	b2db      	uxtb	r3, r3
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c88:	568c      	ldrsb	r4, [r1, r2]
 8000c8a:	f896 00e4 	ldrb.w	r0, [r6, #228]	; 0xe4
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c8e:	56ca      	ldrsb	r2, [r1, r3]
 8000c90:	e7b1      	b.n	8000bf6 <modulate+0x272>
 8000c92:	bf00      	nop
 8000c94:	200008c4 	.word	0x200008c4
 8000c98:	20000ab8 	.word	0x20000ab8
 8000c9c:	080051a4 	.word	0x080051a4
 8000ca0:	080050a4 	.word	0x080050a4
 8000ca4:	20000a88 	.word	0x20000a88
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ca8:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000caa:	483a      	ldr	r0, [pc, #232]	; (8000d94 <modulate+0x410>)
 8000cac:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000cb0:	0a09      	lsrs	r1, r1, #8
 8000cb2:	5640      	ldrsb	r0, [r0, r1]
 8000cb4:	f896 3154 	ldrb.w	r3, [r6, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000cb8:	4937      	ldr	r1, [pc, #220]	; (8000d98 <modulate+0x414>)
 8000cba:	fb03 f300 	mul.w	r3, r3, r0
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000cbe:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8000cc2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
		op1 = get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000cc6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8000cca:	b2d0      	uxtb	r0, r2
 8000ccc:	b2e2      	uxtb	r2, r4
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000cce:	560f      	ldrsb	r7, [r1, r0]
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000cd0:	eb03 2315 	add.w	r3, r3, r5, lsr #8
		op1 = get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000cd4:	f896 0074 	ldrb.w	r0, [r6, #116]	; 0x74
 8000cd8:	568d      	ldrsb	r5, [r1, r2]
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000cda:	f896 20e4 	ldrb.w	r2, [r6, #228]	; 0xe4
 8000cde:	b2db      	uxtb	r3, r3
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ce0:	56cc      	ldrsb	r4, [r1, r3]
		op1 = get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ce2:	fb00 f005 	mul.w	r0, r0, r5
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ce6:	fb02 f307 	mul.w	r3, r2, r7
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000cea:	7931      	ldrb	r1, [r6, #4]
		return ((int16_t)op2 + op1 + op0) / 3;
 8000cec:	f343 13c7 	sbfx	r3, r3, #7, #8
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000cf0:	fb01 f204 	mul.w	r2, r1, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 8000cf4:	f340 11c7 	sbfx	r1, r0, #7, #8
		return ((int16_t)op2 + op1 + op0) / 3;
 8000cf8:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000cfc:	440b      	add	r3, r1
 8000cfe:	4827      	ldr	r0, [pc, #156]	; (8000d9c <modulate+0x418>)
 8000d00:	4413      	add	r3, r2
 8000d02:	fb80 2003 	smull	r2, r0, r0, r3
 8000d06:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000d0a:	b240      	sxtb	r0, r0
}
 8000d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000d10:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d12:	4820      	ldr	r0, [pc, #128]	; (8000d94 <modulate+0x410>)
 8000d14:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000d18:	0a09      	lsrs	r1, r1, #8
 8000d1a:	5641      	ldrsb	r1, [r0, r1]
 8000d1c:	f896 3154 	ldrb.w	r3, [r6, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d20:	481d      	ldr	r0, [pc, #116]	; (8000d98 <modulate+0x414>)
 8000d22:	fb03 f301 	mul.w	r3, r3, r1
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d26:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8000d2a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
		op1 = get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d2e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	0a2d      	lsrs	r5, r5, #8
 8000d38:	56c4      	ldrsb	r4, [r0, r3]
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d3a:	5687      	ldrsb	r7, [r0, r2]
 8000d3c:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d40:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d44:	5740      	ldrsb	r0, [r0, r5]
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d46:	fb03 f307 	mul.w	r3, r3, r7
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d4a:	fb01 f104 	mul.w	r1, r1, r4
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d4e:	7932      	ldrb	r2, [r6, #4]
		return ((int16_t)op2 + op1 + op0) / 3;
 8000d50:	f343 13c7 	sbfx	r3, r3, #7, #8
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d54:	fb02 f200 	mul.w	r2, r2, r0
		return ((int16_t)op2 + op1 + op0) / 3;
 8000d58:	f341 11c7 	sbfx	r1, r1, #7, #8
 8000d5c:	e7cc      	b.n	8000cf8 <modulate+0x374>
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000d5e:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <modulate+0x410>)
 8000d62:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8000d66:	0a09      	lsrs	r1, r1, #8
 8000d68:	5640      	ldrsb	r0, [r0, r1]
 8000d6a:	f896 1154 	ldrb.w	r1, [r6, #340]	; 0x154
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d6e:	0a13      	lsrs	r3, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000d70:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <modulate+0x414>)
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d76:	eb03 13e1 	add.w	r3, r3, r1, asr #7
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	0a24      	lsrs	r4, r4, #8
 8000d7e:	0a2d      	lsrs	r5, r5, #8
 8000d80:	56d7      	ldrsb	r7, [r2, r3]
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d82:	5714      	ldrsb	r4, [r2, r4]
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d84:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d88:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d8c:	5750      	ldrsb	r0, [r2, r5]
 8000d8e:	e7da      	b.n	8000d46 <modulate+0x3c2>
	switch (algo) {
 8000d90:	2000      	movs	r0, #0
 8000d92:	e66a      	b.n	8000a6a <modulate+0xe6>
 8000d94:	080050a4 	.word	0x080050a4
 8000d98:	080051a4 	.word	0x080051a4
 8000d9c:	55555556 	.word	0x55555556

08000da0 <init_synth>:
 *      Author: Tennyson Cheng
 */

#include "synth.h"

void init_synth() {
 8000da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		op_release[i] = ENV_MAX_RATE;				//default release 128
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
		op_release_inc[i] = calculate_env_inc(op_release[i]);
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000da4:	4cbe      	ldr	r4, [pc, #760]	; (80010a0 <init_synth+0x300>)
 8000da6:	4bbf      	ldr	r3, [pc, #764]	; (80010a4 <init_synth+0x304>)
 8000da8:	4625      	mov	r5, r4
 8000daa:	46a2      	mov	sl, r4
 8000dac:	cd07      	ldmia	r5!, {r0, r1, r2}
 8000dae:	882d      	ldrh	r5, [r5, #0]
void init_synth() {
 8000db0:	b099      	sub	sp, #100	; 0x64
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000db2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000db6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000dba:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000dbe:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000dc2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000dc6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000dca:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000dce:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8000dd2:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8000dd6:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8000dda:	9415      	str	r4, [sp, #84]	; 0x54
 8000ddc:	6018      	str	r0, [r3, #0]
 8000dde:	9416      	str	r4, [sp, #88]	; 0x58
 8000de0:	6059      	str	r1, [r3, #4]
 8000de2:	9417      	str	r4, [sp, #92]	; 0x5c
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	819d      	strh	r5, [r3, #12]
 8000de8:	835d      	strh	r5, [r3, #26]
 8000dea:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8000dee:	f8c3 1012 	str.w	r1, [r3, #18]
		algo = 0x00;								//default algorithm 0
 8000df2:	f04f 0100 	mov.w	r1, #0
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000df6:	f8c3 2016 	str.w	r2, [r3, #22]
		algo = 0x00;								//default algorithm 0
 8000dfa:	4aab      	ldr	r2, [pc, #684]	; (80010a8 <init_synth+0x308>)
 8000dfc:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
 8000e00:	7011      	strb	r1, [r2, #0]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 8000e02:	2100      	movs	r1, #0
 8000e04:	4aa9      	ldr	r2, [pc, #676]	; (80010ac <init_synth+0x30c>)
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000e06:	f04f 2680 	mov.w	r6, #2147516416	; 0x80008000
 8000e0a:	6011      	str	r1, [r2, #0]
 8000e0c:	4aa8      	ldr	r2, [pc, #672]	; (80010b0 <init_synth+0x310>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e0e:	46a2      	mov	sl, r4
 8000e10:	6011      	str	r1, [r2, #0]
 8000e12:	f04f 3110 	mov.w	r1, #269488144	; 0x10101010
 8000e16:	4aa7      	ldr	r2, [pc, #668]	; (80010b4 <init_synth+0x314>)
 8000e18:	46a0      	mov	r8, r4
 8000e1a:	f8c2 9000 	str.w	r9, [r2]
 8000e1e:	4aa6      	ldr	r2, [pc, #664]	; (80010b8 <init_synth+0x318>)
 8000e20:	46a6      	mov	lr, r4
 8000e22:	f8c2 9000 	str.w	r9, [r2]
 8000e26:	4aa5      	ldr	r2, [pc, #660]	; (80010bc <init_synth+0x31c>)
 8000e28:	46a4      	mov	ip, r4
 8000e2a:	f8c2 9000 	str.w	r9, [r2]
 8000e2e:	4aa4      	ldr	r2, [pc, #656]	; (80010c0 <init_synth+0x320>)
 8000e30:	4627      	mov	r7, r4
 8000e32:	f8c2 9000 	str.w	r9, [r2]
 8000e36:	4aa3      	ldr	r2, [pc, #652]	; (80010c4 <init_synth+0x324>)
 8000e38:	f8c3 000e 	str.w	r0, [r3, #14]
 8000e3c:	f8c2 9000 	str.w	r9, [r2]
	SILENT
} ADSR_STATES;

uint16_t env_period;

static inline uint16_t calculate_env_inc(uint8_t rate) { return (ENV_MAX_RATE << 8) / (uint16_t)(ENV_MAX_RATE - rate + 1); };
 8000e40:	4aa1      	ldr	r2, [pc, #644]	; (80010c8 <init_synth+0x328>)
 8000e42:	851d      	strh	r5, [r3, #40]	; 0x28
 8000e44:	6011      	str	r1, [r2, #0]
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000e46:	4aa1      	ldr	r2, [pc, #644]	; (80010cc <init_synth+0x32c>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e48:	86dd      	strh	r5, [r3, #54]	; 0x36
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000e4a:	6016      	str	r6, [r2, #0]
 8000e4c:	6056      	str	r6, [r2, #4]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000e4e:	4aa0      	ldr	r2, [pc, #640]	; (80010d0 <init_synth+0x330>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e50:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000e54:	6016      	str	r6, [r2, #0]
 8000e56:	6056      	str	r6, [r2, #4]
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000e58:	4a9e      	ldr	r2, [pc, #632]	; (80010d4 <init_synth+0x334>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e5a:	f8a3 5052 	strh.w	r5, [r3, #82]	; 0x52
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000e5e:	6016      	str	r6, [r2, #0]
 8000e60:	6056      	str	r6, [r2, #4]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e62:	4656      	mov	r6, sl
 8000e64:	46a3      	mov	fp, r4
 8000e66:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000e68:	61d8      	str	r0, [r3, #28]
 8000e6a:	6219      	str	r1, [r3, #32]
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e6e:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8000e72:	f8c3 002a 	str.w	r0, [r3, #42]	; 0x2a
 8000e76:	f8c3 102e 	str.w	r1, [r3, #46]	; 0x2e
 8000e7a:	f8c3 2032 	str.w	r2, [r3, #50]	; 0x32
 8000e7e:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8000e82:	6398      	str	r0, [r3, #56]	; 0x38
 8000e84:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
 8000e88:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8000e8c:	f8c3 0046 	str.w	r0, [r3, #70]	; 0x46
 8000e90:	f8c3 104a 	str.w	r1, [r3, #74]	; 0x4a
 8000e94:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
 8000e98:	cf07      	ldmia	r7!, {r0, r1, r2}
 8000e9a:	6558      	str	r0, [r3, #84]	; 0x54
 8000e9c:	6599      	str	r1, [r3, #88]	; 0x58
 8000e9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ea0:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ea2:	4656      	mov	r6, sl
 8000ea4:	f8a3 5060 	strh.w	r5, [r3, #96]	; 0x60
 8000ea8:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8000eac:	f8a3 507c 	strh.w	r5, [r3, #124]	; 0x7c
 8000eb0:	f8a3 508a 	strh.w	r5, [r3, #138]	; 0x8a
 8000eb4:	f8a3 5098 	strh.w	r5, [r3, #152]	; 0x98
 8000eb8:	f8c3 0062 	str.w	r0, [r3, #98]	; 0x62
 8000ebc:	f8c3 1066 	str.w	r1, [r3, #102]	; 0x66
 8000ec0:	f8c3 206a 	str.w	r2, [r3, #106]	; 0x6a
 8000ec4:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ec6:	4656      	mov	r6, sl
 8000ec8:	6718      	str	r0, [r3, #112]	; 0x70
 8000eca:	6759      	str	r1, [r3, #116]	; 0x74
 8000ecc:	679a      	str	r2, [r3, #120]	; 0x78
 8000ece:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ed0:	4656      	mov	r6, sl
 8000ed2:	f8c3 007e 	str.w	r0, [r3, #126]	; 0x7e
 8000ed6:	f8c3 1082 	str.w	r1, [r3, #130]	; 0x82
 8000eda:	f8c3 2086 	str.w	r2, [r3, #134]	; 0x86
 8000ede:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ee0:	4656      	mov	r6, sl
 8000ee2:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000ee6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8000eea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000eee:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ef0:	4656      	mov	r6, sl
 8000ef2:	f8a3 50a6 	strh.w	r5, [r3, #166]	; 0xa6
 8000ef6:	f8a3 50b4 	strh.w	r5, [r3, #180]	; 0xb4
 8000efa:	f8a3 50c2 	strh.w	r5, [r3, #194]	; 0xc2
 8000efe:	f8a3 50d0 	strh.w	r5, [r3, #208]	; 0xd0
 8000f02:	f8a3 50de 	strh.w	r5, [r3, #222]	; 0xde
 8000f06:	f8c3 009a 	str.w	r0, [r3, #154]	; 0x9a
 8000f0a:	f8c3 109e 	str.w	r1, [r3, #158]	; 0x9e
 8000f0e:	f8c3 20a2 	str.w	r2, [r3, #162]	; 0xa2
 8000f12:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f14:	4656      	mov	r6, sl
 8000f16:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 8000f1a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8000f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000f22:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f24:	4656      	mov	r6, sl
 8000f26:	f8c3 00b6 	str.w	r0, [r3, #182]	; 0xb6
 8000f2a:	f8c3 10ba 	str.w	r1, [r3, #186]	; 0xba
 8000f2e:	f8c3 20be 	str.w	r2, [r3, #190]	; 0xbe
 8000f32:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f34:	4656      	mov	r6, sl
 8000f36:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
 8000f3a:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8000f3e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000f42:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f44:	4656      	mov	r6, sl
 8000f46:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
 8000f4a:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
 8000f4e:	f8c3 20da 	str.w	r2, [r3, #218]	; 0xda
 8000f52:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f54:	4656      	mov	r6, sl
 8000f56:	f8a3 50ec 	strh.w	r5, [r3, #236]	; 0xec
 8000f5a:	f8a3 50fa 	strh.w	r5, [r3, #250]	; 0xfa
 8000f5e:	f8a3 5108 	strh.w	r5, [r3, #264]	; 0x108
 8000f62:	f8a3 5116 	strh.w	r5, [r3, #278]	; 0x116
 8000f66:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f6a:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8000f6e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000f72:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f74:	4656      	mov	r6, sl
 8000f76:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
 8000f7a:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
 8000f7e:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
 8000f82:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f84:	4656      	mov	r6, sl
 8000f86:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
 8000f8a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 8000f8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000f92:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f94:	4656      	mov	r6, sl
 8000f96:	f8c3 010a 	str.w	r0, [r3, #266]	; 0x10a
 8000f9a:	f8c3 110e 	str.w	r1, [r3, #270]	; 0x10e
 8000f9e:	f8c3 2112 	str.w	r2, [r3, #274]	; 0x112
 8000fa2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fa4:	4656      	mov	r6, sl
 8000fa6:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000faa:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
 8000fae:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8000fb2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fb4:	4656      	mov	r6, sl
 8000fb6:	f8a3 5124 	strh.w	r5, [r3, #292]	; 0x124
 8000fba:	f8a3 5132 	strh.w	r5, [r3, #306]	; 0x132
 8000fbe:	f8a3 5140 	strh.w	r5, [r3, #320]	; 0x140
 8000fc2:	f8a3 514e 	strh.w	r5, [r3, #334]	; 0x14e
 8000fc6:	f8a3 515c 	strh.w	r5, [r3, #348]	; 0x15c
 8000fca:	f8c3 0126 	str.w	r0, [r3, #294]	; 0x126
 8000fce:	f8c3 112a 	str.w	r1, [r3, #298]	; 0x12a
 8000fd2:	f8c3 212e 	str.w	r2, [r3, #302]	; 0x12e
 8000fd6:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fd8:	4656      	mov	r6, sl
 8000fda:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8000fde:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
 8000fe2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8000fe6:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fe8:	4656      	mov	r6, sl
 8000fea:	f8c3 0142 	str.w	r0, [r3, #322]	; 0x142
 8000fee:	f8c3 1146 	str.w	r1, [r3, #326]	; 0x146
 8000ff2:	f8c3 214a 	str.w	r2, [r3, #330]	; 0x14a
 8000ff6:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ff8:	4656      	mov	r6, sl
 8000ffa:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8000ffe:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
 8001002:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8001006:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001008:	4656      	mov	r6, sl
 800100a:	f8a3 516a 	strh.w	r5, [r3, #362]	; 0x16a
 800100e:	f8a3 5178 	strh.w	r5, [r3, #376]	; 0x178
 8001012:	f8a3 5186 	strh.w	r5, [r3, #390]	; 0x186
 8001016:	f8a3 5194 	strh.w	r5, [r3, #404]	; 0x194
 800101a:	f8a3 51a2 	strh.w	r5, [r3, #418]	; 0x1a2
 800101e:	f8c3 015e 	str.w	r0, [r3, #350]	; 0x15e
 8001022:	f8c3 1162 	str.w	r1, [r3, #354]	; 0x162
 8001026:	f8c3 2166 	str.w	r2, [r3, #358]	; 0x166
 800102a:	ce07      	ldmia	r6!, {r0, r1, r2}
 800102c:	4656      	mov	r6, sl
 800102e:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
 8001032:	f8c3 1170 	str.w	r1, [r3, #368]	; 0x170
 8001036:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 800103a:	4654      	mov	r4, sl
 800103c:	ce07      	ldmia	r6!, {r0, r1, r2}
 800103e:	4656      	mov	r6, sl
 8001040:	f8a3 51b0 	strh.w	r5, [r3, #432]	; 0x1b0
 8001044:	f8a3 51be 	strh.w	r5, [r3, #446]	; 0x1be
		}
	}
	env_period = ENV_MAX_PERIOD;
 8001048:	f240 5562 	movw	r5, #1378	; 0x562
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 800104c:	f8c3 017a 	str.w	r0, [r3, #378]	; 0x17a
 8001050:	f8c3 117e 	str.w	r1, [r3, #382]	; 0x17e
 8001054:	f8c3 2182 	str.w	r2, [r3, #386]	; 0x182
 8001058:	ce07      	ldmia	r6!, {r0, r1, r2}
 800105a:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 800105e:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8001062:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8001066:	cc07      	ldmia	r4!, {r0, r1, r2}
	env_period = ENV_MAX_PERIOD;
 8001068:	4c1b      	ldr	r4, [pc, #108]	; (80010d8 <init_synth+0x338>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 800106a:	f8c3 0196 	str.w	r0, [r3, #406]	; 0x196
 800106e:	f8c3 119a 	str.w	r1, [r3, #410]	; 0x19a
 8001072:	f8c3 219e 	str.w	r2, [r3, #414]	; 0x19e
 8001076:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 800107a:	f8c3 01a4 	str.w	r0, [r3, #420]	; 0x1a4
 800107e:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
 8001082:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8001086:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
	env_period = ENV_MAX_PERIOD;
 800108a:	8025      	strh	r5, [r4, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 800108c:	f8c3 01b2 	str.w	r0, [r3, #434]	; 0x1b2
 8001090:	f8c3 11b6 	str.w	r1, [r3, #438]	; 0x1b6
 8001094:	f8c3 21ba 	str.w	r2, [r3, #442]	; 0x1ba
}
 8001098:	b019      	add	sp, #100	; 0x64
 800109a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800109e:	bf00      	nop
 80010a0:	08004f94 	.word	0x08004f94
 80010a4:	200008c4 	.word	0x200008c4
 80010a8:	20000a88 	.word	0x20000a88
 80010ac:	20000aac 	.word	0x20000aac
 80010b0:	20000ab8 	.word	0x20000ab8
 80010b4:	20000aa0 	.word	0x20000aa0
 80010b8:	20000a90 	.word	0x20000a90
 80010bc:	20000abc 	.word	0x20000abc
 80010c0:	20000a84 	.word	0x20000a84
 80010c4:	20000a8c 	.word	0x20000a8c
 80010c8:	20000ac4 	.word	0x20000ac4
 80010cc:	20000ab0 	.word	0x20000ab0
 80010d0:	20000aa4 	.word	0x20000aa4
 80010d4:	20000a94 	.word	0x20000a94
 80010d8:	20000a8a 	.word	0x20000a8a

080010dc <clear_voices>:

void clear_voices() {
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		op[0][i].note_value = -1;
 80010dc:	22ff      	movs	r2, #255	; 0xff
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <clear_voices+0x20>)
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	739a      	strb	r2, [r3, #14]
 80010e4:	771a      	strb	r2, [r3, #28]
 80010e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80010ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80010ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80010f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80010f6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}
}
 80010fa:	4770      	bx	lr
 80010fc:	200008c4 	.word	0x200008c4

08001100 <add_voice>:

void add_voice(uint8_t note_value) {
 8001100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t voice_index, released_voice = (uint8_t)-1;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001104:	4c79      	ldr	r4, [pc, #484]	; (80012ec <add_voice+0x1ec>)
void add_voice(uint8_t note_value) {
 8001106:	4606      	mov	r6, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001108:	7823      	ldrb	r3, [r4, #0]
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	f000 80c5 	beq.w	800129a <add_voice+0x19a>
 8001110:	7ba2      	ldrb	r2, [r4, #14]
 8001112:	2aff      	cmp	r2, #255	; 0xff
 8001114:	f000 80c6 	beq.w	80012a4 <add_voice+0x1a4>
 8001118:	7f22      	ldrb	r2, [r4, #28]
 800111a:	2aff      	cmp	r2, #255	; 0xff
 800111c:	f000 80c7 	beq.w	80012ae <add_voice+0x1ae>
 8001120:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8001124:	2aff      	cmp	r2, #255	; 0xff
 8001126:	f000 80c7 	beq.w	80012b8 <add_voice+0x1b8>
 800112a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800112e:	2aff      	cmp	r2, #255	; 0xff
 8001130:	f000 80c7 	beq.w	80012c2 <add_voice+0x1c2>
 8001134:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8001138:	2aff      	cmp	r2, #255	; 0xff
 800113a:	f000 80c7 	beq.w	80012cc <add_voice+0x1cc>
 800113e:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8001142:	2aff      	cmp	r2, #255	; 0xff
 8001144:	f000 80c7 	beq.w	80012d6 <add_voice+0x1d6>
 8001148:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800114c:	2aff      	cmp	r2, #255	; 0xff
 800114e:	f000 80c9 	beq.w	80012e4 <add_voice+0x1e4>
 8001152:	2108      	movs	r1, #8
 8001154:	460d      	mov	r5, r1
			break;
		}
	}
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001156:	429e      	cmp	r6, r3
 8001158:	f000 80a2 	beq.w	80012a0 <add_voice+0x1a0>
			voice_index = i;
			break;
		}
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800115c:	7aa3      	ldrb	r3, [r4, #10]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800115e:	7ba2      	ldrb	r2, [r4, #14]
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001160:	2b03      	cmp	r3, #3
 8001162:	bf14      	ite	ne
 8001164:	23ff      	movne	r3, #255	; 0xff
 8001166:	2300      	moveq	r3, #0
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001168:	42b2      	cmp	r2, r6
 800116a:	f000 809e 	beq.w	80012aa <add_voice+0x1aa>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800116e:	7e20      	ldrb	r0, [r4, #24]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001170:	7f22      	ldrb	r2, [r4, #28]
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001172:	2803      	cmp	r0, #3
 8001174:	bf08      	it	eq
 8001176:	2301      	moveq	r3, #1
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001178:	42b2      	cmp	r2, r6
 800117a:	f000 809b 	beq.w	80012b4 <add_voice+0x1b4>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800117e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001182:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001186:	2803      	cmp	r0, #3
 8001188:	bf08      	it	eq
 800118a:	2302      	moveq	r3, #2
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800118c:	42b2      	cmp	r2, r6
 800118e:	f000 8096 	beq.w	80012be <add_voice+0x1be>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001192:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001196:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800119a:	2803      	cmp	r0, #3
 800119c:	bf08      	it	eq
 800119e:	2303      	moveq	r3, #3
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011a0:	42b2      	cmp	r2, r6
 80011a2:	f000 8091 	beq.w	80012c8 <add_voice+0x1c8>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011a6:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011aa:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80011ae:	2803      	cmp	r0, #3
 80011b0:	bf08      	it	eq
 80011b2:	2304      	moveq	r3, #4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011b4:	42b2      	cmp	r2, r6
 80011b6:	f000 808c 	beq.w	80012d2 <add_voice+0x1d2>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011ba:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011be:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80011c2:	2803      	cmp	r0, #3
 80011c4:	bf08      	it	eq
 80011c6:	2305      	moveq	r3, #5
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011c8:	42b2      	cmp	r2, r6
 80011ca:	f000 8087 	beq.w	80012dc <add_voice+0x1dc>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011ce:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011d2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80011d6:	2803      	cmp	r0, #3
 80011d8:	bf08      	it	eq
 80011da:	2306      	moveq	r3, #6
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011dc:	42b2      	cmp	r2, r6
 80011de:	d07f      	beq.n	80012e0 <add_voice+0x1e0>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011e0:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 80011e4:	2a03      	cmp	r2, #3
 80011e6:	d03f      	beq.n	8001268 <add_voice+0x168>
			released_voice = i;
		}
	}
	if (voice_index == MAX_VOICES) {
 80011e8:	2d08      	cmp	r5, #8
 80011ea:	d102      	bne.n	80011f2 <add_voice+0xf2>
		if (released_voice == (uint8_t)-1) {
 80011ec:	2bff      	cmp	r3, #255	; 0xff
 80011ee:	d03f      	beq.n	8001270 <add_voice+0x170>
 80011f0:	4619      	mov	r1, r3
		}
		else {
			voice_index = released_voice;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 80011f2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80011f6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
			op[op_index][voice_index].delta = (op_ratio[op_index] * 								//multiply delta based off of ratio of carrier
				(op[0][voice_index].delta - (int16_t)op_detune[op_index])) >> 4;
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
		}
		else {
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 80011fa:	4627      	mov	r7, r4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011fc:	2500      	movs	r5, #0
 80011fe:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80012f4 <add_voice+0x1f4>
 8001202:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 80012f8 <add_voice+0x1f8>
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8001206:	f04f 0a00 	mov.w	sl, #0
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 800120a:	4630      	mov	r0, r6
		op[op_index][voice_index].note_value = note_value;										//store note
 800120c:	7026      	strb	r6, [r4, #0]
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 800120e:	f8a4 a008 	strh.w	sl, [r4, #8]
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8001212:	f819 8b01 	ldrb.w	r8, [r9], #1
 8001216:	f7ff fa47 	bl	80006a8 <note_to_freq>
 800121a:	fb00 f308 	mul.w	r3, r0, r8
 800121e:	111b      	asrs	r3, r3, #4
 8001220:	8063      	strh	r3, [r4, #2]
		if (op_index != 0)	{
 8001222:	b2e8      	uxtb	r0, r5
 8001224:	b335      	cbz	r5, 8001274 <add_voice+0x174>
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
		}
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001226:	f8bb 1000 	ldrh.w	r1, [fp]
				(op[0][voice_index].delta - (int16_t)op_detune[op_index])) >> 4;
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <add_voice+0x1f0>)
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 800122c:	f5a1 4c00 	sub.w	ip, r1, #32768	; 0x8000
 8001230:	fabc fc8c 	clz	ip, ip
				(op[0][voice_index].delta - (int16_t)op_detune[op_index])) >> 4;
 8001234:	f8b7 e006 	ldrh.w	lr, [r7, #6]
 8001238:	575b      	ldrsb	r3, [r3, r5]
			op[op_index][voice_index].delta = (op_ratio[op_index] * 								//multiply delta based off of ratio of carrier
 800123a:	f819 2c01 	ldrb.w	r2, [r9, #-1]
				(op[0][voice_index].delta - (int16_t)op_detune[op_index])) >> 4;
 800123e:	ebae 0e03 	sub.w	lr, lr, r3
			op[op_index][voice_index].delta = (op_ratio[op_index] * 								//multiply delta based off of ratio of carrier
 8001242:	fb02 f20e 	mul.w	r2, r2, lr
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001246:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 800124a:	eb03 1322 	add.w	r3, r3, r2, asr #4
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 800124e:	2803      	cmp	r0, #3
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8001250:	f884 a004 	strb.w	sl, [r4, #4]
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001254:	80e3      	strh	r3, [r4, #6]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001256:	81a1      	strh	r1, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001258:	f884 c00a 	strb.w	ip, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 800125c:	d008      	beq.n	8001270 <add_voice+0x170>
 800125e:	3501      	adds	r5, #1
 8001260:	3470      	adds	r4, #112	; 0x70
 8001262:	f10b 0b02 	add.w	fp, fp, #2
 8001266:	e7ce      	b.n	8001206 <add_voice+0x106>
	if (voice_index == MAX_VOICES) {
 8001268:	2d08      	cmp	r5, #8
 800126a:	d1c2      	bne.n	80011f2 <add_voice+0xf2>
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800126c:	2307      	movs	r3, #7
 800126e:	e7bf      	b.n	80011f0 <add_voice+0xf0>
		}
		else {
			op[op_index][voice_index].adsr_state = ATTACK;											//else, start on attack state
		}
	}
}
 8001270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8001274:	8878      	ldrh	r0, [r7, #2]
 8001276:	f7ff fa1d 	bl	80006b4 <calculate_delta>
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 800127a:	f8bb 3000 	ldrh.w	r3, [fp]
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <add_voice+0x1f0>)
 8001280:	f992 1000 	ldrsb.w	r1, [r2]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001284:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 8001288:	fab2 f282 	clz	r2, r2
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 800128c:	4408      	add	r0, r1
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 800128e:	0952      	lsrs	r2, r2, #5
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001290:	80f8      	strh	r0, [r7, #6]
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8001292:	7125      	strb	r5, [r4, #4]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001294:	81a3      	strh	r3, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001296:	72a2      	strb	r2, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001298:	e7e1      	b.n	800125e <add_voice+0x15e>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800129a:	2100      	movs	r1, #0
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 800129c:	460d      	mov	r5, r1
 800129e:	e75a      	b.n	8001156 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012a0:	2100      	movs	r1, #0
 80012a2:	e7a6      	b.n	80011f2 <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012a4:	2101      	movs	r1, #1
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012a6:	460d      	mov	r5, r1
 80012a8:	e755      	b.n	8001156 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012aa:	2101      	movs	r1, #1
 80012ac:	e7a1      	b.n	80011f2 <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012ae:	2102      	movs	r1, #2
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012b0:	460d      	mov	r5, r1
 80012b2:	e750      	b.n	8001156 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012b4:	2102      	movs	r1, #2
 80012b6:	e79c      	b.n	80011f2 <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012b8:	2103      	movs	r1, #3
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012ba:	460d      	mov	r5, r1
 80012bc:	e74b      	b.n	8001156 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012be:	2103      	movs	r1, #3
 80012c0:	e797      	b.n	80011f2 <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012c2:	2104      	movs	r1, #4
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012c4:	460d      	mov	r5, r1
 80012c6:	e746      	b.n	8001156 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012c8:	2104      	movs	r1, #4
 80012ca:	e792      	b.n	80011f2 <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012cc:	2105      	movs	r1, #5
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012ce:	460d      	mov	r5, r1
 80012d0:	e741      	b.n	8001156 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012d2:	2105      	movs	r1, #5
 80012d4:	e78d      	b.n	80011f2 <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012d6:	2106      	movs	r1, #6
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012d8:	460d      	mov	r5, r1
 80012da:	e73c      	b.n	8001156 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012dc:	2106      	movs	r1, #6
 80012de:	e788      	b.n	80011f2 <add_voice+0xf2>
 80012e0:	2107      	movs	r1, #7
 80012e2:	e786      	b.n	80011f2 <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012e4:	2107      	movs	r1, #7
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012e6:	460d      	mov	r5, r1
 80012e8:	e735      	b.n	8001156 <add_voice+0x56>
 80012ea:	bf00      	nop
 80012ec:	200008c4 	.word	0x200008c4
 80012f0:	20000aac 	.word	0x20000aac
 80012f4:	20000ac4 	.word	0x20000ac4
 80012f8:	20000ab0 	.word	0x20000ab0

080012fc <release_voice>:

void release_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <release_voice+0x78>)
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	4282      	cmp	r2, r0
 8001302:	d01a      	beq.n	800133a <release_voice+0x3e>
 8001304:	7b9a      	ldrb	r2, [r3, #14]
 8001306:	4282      	cmp	r2, r0
 8001308:	d025      	beq.n	8001356 <release_voice+0x5a>
 800130a:	7f1a      	ldrb	r2, [r3, #28]
 800130c:	4282      	cmp	r2, r0
 800130e:	d024      	beq.n	800135a <release_voice+0x5e>
 8001310:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8001314:	4282      	cmp	r2, r0
 8001316:	d022      	beq.n	800135e <release_voice+0x62>
 8001318:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800131c:	4282      	cmp	r2, r0
 800131e:	d020      	beq.n	8001362 <release_voice+0x66>
 8001320:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8001324:	4282      	cmp	r2, r0
 8001326:	d01e      	beq.n	8001366 <release_voice+0x6a>
 8001328:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800132c:	4282      	cmp	r2, r0
 800132e:	d01c      	beq.n	800136a <release_voice+0x6e>
 8001330:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8001334:	4282      	cmp	r2, r0
 8001336:	d01a      	beq.n	800136e <release_voice+0x72>
		return;
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op[op_index][voice_index].adsr_state = RELEASE;
	}
}
 8001338:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 800133a:	2100      	movs	r1, #0
		op[op_index][voice_index].adsr_state = RELEASE;
 800133c:	2203      	movs	r2, #3
 800133e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001342:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8001346:	729a      	strb	r2, [r3, #10]
 8001348:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800134c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8001350:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
}
 8001354:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 8001356:	2101      	movs	r1, #1
 8001358:	e7f0      	b.n	800133c <release_voice+0x40>
 800135a:	2102      	movs	r1, #2
 800135c:	e7ee      	b.n	800133c <release_voice+0x40>
 800135e:	2103      	movs	r1, #3
 8001360:	e7ec      	b.n	800133c <release_voice+0x40>
 8001362:	2104      	movs	r1, #4
 8001364:	e7ea      	b.n	800133c <release_voice+0x40>
 8001366:	2105      	movs	r1, #5
 8001368:	e7e8      	b.n	800133c <release_voice+0x40>
 800136a:	2106      	movs	r1, #6
 800136c:	e7e6      	b.n	800133c <release_voice+0x40>
 800136e:	2107      	movs	r1, #7
 8001370:	e7e4      	b.n	800133c <release_voice+0x40>
 8001372:	bf00      	nop
 8001374:	200008c4 	.word	0x200008c4

08001378 <synth_sample>:

int16_t synth_sample() {
 8001378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t output_volume = 0x0800;											//default output volume 2048
	if (--env_period == 0x00) {												//decrement and check envelope period
 800137c:	4bc3      	ldr	r3, [pc, #780]	; (800168c <synth_sample+0x314>)
 800137e:	881d      	ldrh	r5, [r3, #0]
 8001380:	3d01      	subs	r5, #1
 8001382:	b2ad      	uxth	r5, r5
 8001384:	bb2d      	cbnz	r5, 80013d2 <synth_sample+0x5a>
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 8001386:	f240 5262 	movw	r2, #1378	; 0x562
	int16_t output_volume = 0x0800;											//default output volume 2048
 800138a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800138e:	4cc0      	ldr	r4, [pc, #768]	; (8001690 <synth_sample+0x318>)
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001390:	f8df 930c 	ldr.w	r9, [pc, #780]	; 80016a0 <synth_sample+0x328>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 8001394:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80016a4 <synth_sample+0x32c>
 8001398:	4fbe      	ldr	r7, [pc, #760]	; (8001694 <synth_sample+0x31c>)
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 800139a:	801a      	strh	r2, [r3, #0]
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800139c:	7823      	ldrb	r3, [r4, #0]
 800139e:	b2e8      	uxtb	r0, r5
 80013a0:	2bff      	cmp	r3, #255	; 0xff
 80013a2:	d00e      	beq.n	80013c2 <synth_sample+0x4a>
		switch (op[op_index][voice_index].adsr_state) {
 80013a4:	7aa3      	ldrb	r3, [r4, #10]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	f200 808d 	bhi.w	80014c6 <synth_sample+0x14e>
 80013ac:	e8df f003 	tbb	[pc, r3]
 80013b0:	588b6375 	.word	0x588b6375
 80013b4:	03          	.byte	0x03
 80013b5:	00          	.byte	0x00
static inline void delete_voice(uint8_t voice_index) { op[0][voice_index].note_value = -1; };
 80013b6:	23ff      	movs	r3, #255	; 0xff
 80013b8:	7023      	strb	r3, [r4, #0]
				cycle_envelope(voice_index);
				output_volume += modulate(voice_index);
 80013ba:	f7ff fae3 	bl	8000984 <modulate>
 80013be:	4406      	add	r6, r0
 80013c0:	b236      	sxth	r6, r6
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
 80013c2:	3501      	adds	r5, #1
 80013c4:	2d08      	cmp	r5, #8
 80013c6:	f104 040e 	add.w	r4, r4, #14
 80013ca:	d1e7      	bne.n	800139c <synth_sample+0x24>
				output_volume += modulate(voice_index);
			}
		}
	}
	return output_volume;
}
 80013cc:	4630      	mov	r0, r6
 80013ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80013d2:	4caf      	ldr	r4, [pc, #700]	; (8001690 <synth_sample+0x318>)
	if (--env_period == 0x00) {												//decrement and check envelope period
 80013d4:	801d      	strh	r5, [r3, #0]
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80013d6:	7823      	ldrb	r3, [r4, #0]
 80013d8:	2bff      	cmp	r3, #255	; 0xff
 80013da:	d16d      	bne.n	80014b8 <synth_sample+0x140>
	int16_t output_volume = 0x0800;											//default output volume 2048
 80013dc:	f44f 6600 	mov.w	r6, #2048	; 0x800
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80013e0:	7ba3      	ldrb	r3, [r4, #14]
 80013e2:	2bff      	cmp	r3, #255	; 0xff
 80013e4:	d004      	beq.n	80013f0 <synth_sample+0x78>
				output_volume += modulate(voice_index);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff facc 	bl	8000984 <modulate>
 80013ec:	4406      	add	r6, r0
 80013ee:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80013f0:	7f23      	ldrb	r3, [r4, #28]
 80013f2:	2bff      	cmp	r3, #255	; 0xff
 80013f4:	d004      	beq.n	8001400 <synth_sample+0x88>
				output_volume += modulate(voice_index);
 80013f6:	2002      	movs	r0, #2
 80013f8:	f7ff fac4 	bl	8000984 <modulate>
 80013fc:	4406      	add	r6, r0
 80013fe:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001400:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001404:	2bff      	cmp	r3, #255	; 0xff
 8001406:	d004      	beq.n	8001412 <synth_sample+0x9a>
				output_volume += modulate(voice_index);
 8001408:	2003      	movs	r0, #3
 800140a:	f7ff fabb 	bl	8000984 <modulate>
 800140e:	4406      	add	r6, r0
 8001410:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001412:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d004      	beq.n	8001424 <synth_sample+0xac>
				output_volume += modulate(voice_index);
 800141a:	2004      	movs	r0, #4
 800141c:	f7ff fab2 	bl	8000984 <modulate>
 8001420:	4406      	add	r6, r0
 8001422:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001424:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001428:	2bff      	cmp	r3, #255	; 0xff
 800142a:	d004      	beq.n	8001436 <synth_sample+0xbe>
				output_volume += modulate(voice_index);
 800142c:	2005      	movs	r0, #5
 800142e:	f7ff faa9 	bl	8000984 <modulate>
 8001432:	4406      	add	r6, r0
 8001434:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001436:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800143a:	2bff      	cmp	r3, #255	; 0xff
 800143c:	d004      	beq.n	8001448 <synth_sample+0xd0>
				output_volume += modulate(voice_index);
 800143e:	2006      	movs	r0, #6
 8001440:	f7ff faa0 	bl	8000984 <modulate>
 8001444:	4406      	add	r6, r0
 8001446:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001448:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 800144c:	2bff      	cmp	r3, #255	; 0xff
 800144e:	d0bd      	beq.n	80013cc <synth_sample+0x54>
				output_volume += modulate(voice_index);
 8001450:	2007      	movs	r0, #7
 8001452:	f7ff fa97 	bl	8000984 <modulate>
 8001456:	4406      	add	r6, r0
 8001458:	b236      	sxth	r6, r6
}
 800145a:	4630      	mov	r0, r6
 800145c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001460:	4a8d      	ldr	r2, [pc, #564]	; (8001698 <synth_sample+0x320>)
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	8812      	ldrh	r2, [r2, #0]
 8001466:	4293      	cmp	r3, r2
 8001468:	f080 8136 	bcs.w	80016d8 <synth_sample+0x360>
				op[op_index][voice_index].env_amp = 0;
 800146c:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 800146e:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001470:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SILENT;
 8001472:	72a2      	strb	r2, [r4, #10]
 8001474:	e028      	b.n	80014c8 <synth_sample+0x150>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 8001476:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 800147a:	f8b8 1000 	ldrh.w	r1, [r8]
 800147e:	783a      	ldrb	r2, [r7, #0]
 8001480:	ebac 0e01 	sub.w	lr, ip, r1
 8001484:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001488:	ea4f 2302 	mov.w	r3, r2, lsl #8
 800148c:	dd5f      	ble.n	800154e <synth_sample+0x1d6>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 800148e:	458c      	cmp	ip, r1
 8001490:	d35d      	bcc.n	800154e <synth_sample+0x1d6>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001492:	fa1f f38e 	uxth.w	r3, lr
 8001496:	81a3      	strh	r3, [r4, #12]
 8001498:	e016      	b.n	80014c8 <synth_sample+0x150>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 800149a:	4a80      	ldr	r2, [pc, #512]	; (800169c <synth_sample+0x324>)
 800149c:	89a3      	ldrh	r3, [r4, #12]
 800149e:	8812      	ldrh	r2, [r2, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014a6:	f2c0 8114 	blt.w	80016d2 <synth_sample+0x35a>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 80014ae:	2101      	movs	r1, #1
 80014b0:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014b2:	81a2      	strh	r2, [r4, #12]
				op[op_index][voice_index].adsr_state = DECAY;
 80014b4:	72a1      	strb	r1, [r4, #10]
 80014b6:	e007      	b.n	80014c8 <synth_sample+0x150>
				output_volume += modulate(voice_index);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff fa63 	bl	8000984 <modulate>
 80014be:	f500 6600 	add.w	r6, r0, #2048	; 0x800
 80014c2:	b236      	sxth	r6, r6
 80014c4:	e78c      	b.n	80013e0 <synth_sample+0x68>
 80014c6:	89a3      	ldrh	r3, [r4, #12]
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014c8:	f899 2000 	ldrb.w	r2, [r9]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 80014d2:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014d6:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 80014d8:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014da:	7123      	strb	r3, [r4, #4]
		switch (op[op_index][voice_index].adsr_state) {
 80014dc:	d05f      	beq.n	800159e <synth_sample+0x226>
 80014de:	2a03      	cmp	r2, #3
 80014e0:	d04f      	beq.n	8001582 <synth_sample+0x20a>
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d03b      	beq.n	800155e <synth_sample+0x1e6>
 80014e6:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014ea:	f899 2001 	ldrb.w	r2, [r9, #1]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 80014f4:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014f8:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 80014fa:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014fc:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		switch (op[op_index][voice_index].adsr_state) {
 8001500:	d06a      	beq.n	80015d8 <synth_sample+0x260>
 8001502:	2a03      	cmp	r2, #3
 8001504:	f000 8096 	beq.w	8001634 <synth_sample+0x2bc>
 8001508:	2a00      	cmp	r2, #0
 800150a:	f000 8082 	beq.w	8001612 <synth_sample+0x29a>
 800150e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001512:	f899 2002 	ldrb.w	r2, [r9, #2]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 800151c:	f894 215a 	ldrb.w	r2, [r4, #346]	; 0x15a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001520:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8001522:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001524:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
		switch (op[op_index][voice_index].adsr_state) {
 8001528:	f000 80be 	beq.w	80016a8 <synth_sample+0x330>
 800152c:	2a03      	cmp	r2, #3
 800152e:	f000 809f 	beq.w	8001670 <synth_sample+0x2f8>
 8001532:	2a00      	cmp	r2, #0
 8001534:	f000 808b 	beq.w	800164e <synth_sample+0x2d6>
 8001538:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800153c:	f899 2003 	ldrb.w	r2, [r9, #3]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	11db      	asrs	r3, r3, #7
 8001548:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 800154c:	e735      	b.n	80013ba <synth_sample+0x42>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 800154e:	b29b      	uxth	r3, r3
 8001550:	81a3      	strh	r3, [r4, #12]
				if (op_sustain[op_index] == 0x00) {
 8001552:	2a00      	cmp	r2, #0
 8001554:	f040 80cd 	bne.w	80016f2 <synth_sample+0x37a>
					op[op_index][voice_index].adsr_state = SILENT;
 8001558:	2204      	movs	r2, #4
 800155a:	72a2      	strb	r2, [r4, #10]
 800155c:	e7b4      	b.n	80014c8 <synth_sample+0x150>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 800155e:	4a4f      	ldr	r2, [pc, #316]	; (800169c <synth_sample+0x324>)
 8001560:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8001564:	8852      	ldrh	r2, [r2, #2]
 8001566:	4413      	add	r3, r2
 8001568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800156c:	f2c0 80bd 	blt.w	80016ea <synth_sample+0x372>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001570:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001574:	2101      	movs	r1, #1
 8001576:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001578:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = DECAY;
 800157c:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
 8001580:	e7b3      	b.n	80014ea <synth_sample+0x172>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001582:	4a45      	ldr	r2, [pc, #276]	; (8001698 <synth_sample+0x320>)
 8001584:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8001588:	8852      	ldrh	r2, [r2, #2]
 800158a:	4293      	cmp	r3, r2
 800158c:	f080 80a8 	bcs.w	80016e0 <synth_sample+0x368>
				op[op_index][voice_index].env_amp = 0;
 8001590:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001592:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001594:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SILENT;
 8001598:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 800159c:	e7a5      	b.n	80014ea <synth_sample+0x172>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 800159e:	f8b4 c07c 	ldrh.w	ip, [r4, #124]	; 0x7c
 80015a2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80015a6:	787a      	ldrb	r2, [r7, #1]
 80015a8:	ebac 0e01 	sub.w	lr, ip, r1
 80015ac:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80015b0:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80015b4:	dd06      	ble.n	80015c4 <synth_sample+0x24c>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80015b6:	458c      	cmp	ip, r1
 80015b8:	d304      	bcc.n	80015c4 <synth_sample+0x24c>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80015ba:	fa1f f38e 	uxth.w	r3, lr
 80015be:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80015c2:	e792      	b.n	80014ea <synth_sample+0x172>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				if (op_sustain[op_index] == 0x00) {
 80015ca:	2a00      	cmp	r2, #0
 80015cc:	f040 809d 	bne.w	800170a <synth_sample+0x392>
					op[op_index][voice_index].adsr_state = SILENT;
 80015d0:	2204      	movs	r2, #4
 80015d2:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 80015d6:	e788      	b.n	80014ea <synth_sample+0x172>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80015d8:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	; 0xec
 80015dc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80015e0:	78ba      	ldrb	r2, [r7, #2]
 80015e2:	ebac 0e01 	sub.w	lr, ip, r1
 80015e6:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80015ea:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80015ee:	dd06      	ble.n	80015fe <synth_sample+0x286>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80015f0:	458c      	cmp	ip, r1
 80015f2:	d304      	bcc.n	80015fe <synth_sample+0x286>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80015f4:	fa1f f38e 	uxth.w	r3, lr
 80015f8:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 80015fc:	e789      	b.n	8001512 <synth_sample+0x19a>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				if (op_sustain[op_index] == 0x00) {
 8001604:	2a00      	cmp	r2, #0
 8001606:	f040 8094 	bne.w	8001732 <synth_sample+0x3ba>
					op[op_index][voice_index].adsr_state = SILENT;
 800160a:	2204      	movs	r2, #4
 800160c:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001610:	e77f      	b.n	8001512 <synth_sample+0x19a>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001612:	4a22      	ldr	r2, [pc, #136]	; (800169c <synth_sample+0x324>)
 8001614:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8001618:	8892      	ldrh	r2, [r2, #4]
 800161a:	4413      	add	r3, r2
 800161c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001620:	db6f      	blt.n	8001702 <synth_sample+0x38a>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001622:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001626:	2101      	movs	r1, #1
 8001628:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800162a:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = DECAY;
 800162e:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
 8001632:	e76e      	b.n	8001512 <synth_sample+0x19a>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001634:	4a18      	ldr	r2, [pc, #96]	; (8001698 <synth_sample+0x320>)
 8001636:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800163a:	8892      	ldrh	r2, [r2, #4]
 800163c:	4293      	cmp	r3, r2
 800163e:	d25b      	bcs.n	80016f8 <synth_sample+0x380>
				op[op_index][voice_index].env_amp = 0;
 8001640:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001642:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001644:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SILENT;
 8001648:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 800164c:	e761      	b.n	8001512 <synth_sample+0x19a>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <synth_sample+0x324>)
 8001650:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 8001654:	88d2      	ldrh	r2, [r2, #6]
 8001656:	4413      	add	r3, r2
 8001658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800165c:	db65      	blt.n	800172a <synth_sample+0x3b2>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001662:	2101      	movs	r1, #1
 8001664:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001666:	f8a4 215c 	strh.w	r2, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = DECAY;
 800166a:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
 800166e:	e765      	b.n	800153c <synth_sample+0x1c4>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001670:	4a09      	ldr	r2, [pc, #36]	; (8001698 <synth_sample+0x320>)
 8001672:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 8001676:	88d2      	ldrh	r2, [r2, #6]
 8001678:	4293      	cmp	r3, r2
 800167a:	d251      	bcs.n	8001720 <synth_sample+0x3a8>
				op[op_index][voice_index].env_amp = 0;
 800167c:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 800167e:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001680:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SILENT;
 8001684:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 8001688:	e758      	b.n	800153c <synth_sample+0x1c4>
 800168a:	bf00      	nop
 800168c:	20000a8a 	.word	0x20000a8a
 8001690:	200008c4 	.word	0x200008c4
 8001694:	20000a84 	.word	0x20000a84
 8001698:	20000a94 	.word	0x20000a94
 800169c:	20000ab0 	.word	0x20000ab0
 80016a0:	20000aa0 	.word	0x20000aa0
 80016a4:	20000aa4 	.word	0x20000aa4
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80016a8:	f8b4 c15c 	ldrh.w	ip, [r4, #348]	; 0x15c
 80016ac:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	ebac 0e01 	sub.w	lr, ip, r1
 80016b6:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80016ba:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80016be:	dc28      	bgt.n	8001712 <synth_sample+0x39a>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				if (op_sustain[op_index] == 0x00) {
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d037      	beq.n	800173a <synth_sample+0x3c2>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 80016ca:	2202      	movs	r2, #2
 80016cc:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 80016d0:	e734      	b.n	800153c <synth_sample+0x1c4>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	81a3      	strh	r3, [r4, #12]
 80016d6:	e6f7      	b.n	80014c8 <synth_sample+0x150>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	81a3      	strh	r3, [r4, #12]
 80016de:	e6f3      	b.n	80014c8 <synth_sample+0x150>
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80016e8:	e6ff      	b.n	80014ea <synth_sample+0x172>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80016f0:	e6fb      	b.n	80014ea <synth_sample+0x172>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 80016f2:	2202      	movs	r2, #2
 80016f4:	72a2      	strb	r2, [r4, #10]
 80016f6:	e6e7      	b.n	80014c8 <synth_sample+0x150>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001700:	e707      	b.n	8001512 <synth_sample+0x19a>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001702:	b29b      	uxth	r3, r3
 8001704:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001708:	e703      	b.n	8001512 <synth_sample+0x19a>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 800170a:	2202      	movs	r2, #2
 800170c:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 8001710:	e6eb      	b.n	80014ea <synth_sample+0x172>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001712:	458c      	cmp	ip, r1
 8001714:	d3d4      	bcc.n	80016c0 <synth_sample+0x348>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001716:	fa1f f38e 	uxth.w	r3, lr
 800171a:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 800171e:	e70d      	b.n	800153c <synth_sample+0x1c4>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	b29b      	uxth	r3, r3
 8001724:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001728:	e708      	b.n	800153c <synth_sample+0x1c4>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 800172a:	b29b      	uxth	r3, r3
 800172c:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001730:	e704      	b.n	800153c <synth_sample+0x1c4>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 8001732:	2202      	movs	r2, #2
 8001734:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001738:	e6eb      	b.n	8001512 <synth_sample+0x19a>
					op[op_index][voice_index].adsr_state = SILENT;
 800173a:	2204      	movs	r2, #4
 800173c:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 8001740:	e6fc      	b.n	800153c <synth_sample+0x1c4>
 8001742:	bf00      	nop

08001744 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop

08001748 <display_send_command>:
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
	//turn on display
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
}

void display_send_command(uint8_t cmd) {
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
	display_i2c_write(data_LSB | DISPLAY_BIT_E);	//pull enable bit HIGH
	display_i2c_write(data_LSB);					//pull enable bit LOW
}

void display_i2c_write(uint8_t byte) {
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800174a:	26ff      	movs	r6, #255	; 0xff
 800174c:	4d27      	ldr	r5, [pc, #156]	; (80017ec <display_send_command+0xa4>)
void display_send_command(uint8_t cmd) {
 800174e:	b085      	sub	sp, #20
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 8001750:	f020 070f 	bic.w	r7, r0, #15
 8001754:	f047 0708 	orr.w	r7, r7, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001758:	f10d 020f 	add.w	r2, sp, #15
 800175c:	2301      	movs	r3, #1
 800175e:	214e      	movs	r1, #78	; 0x4e
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001760:	0104      	lsls	r4, r0, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001762:	9600      	str	r6, [sp, #0]
 8001764:	6828      	ldr	r0, [r5, #0]
 8001766:	f88d 700f 	strb.w	r7, [sp, #15]
 800176a:	f001 fbe3 	bl	8002f34 <HAL_I2C_Master_Transmit>
	display_i2c_write(cmd_MSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 800176e:	f047 0c04 	orr.w	ip, r7, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001772:	f10d 020f 	add.w	r2, sp, #15
 8001776:	2301      	movs	r3, #1
 8001778:	214e      	movs	r1, #78	; 0x4e
 800177a:	6828      	ldr	r0, [r5, #0]
 800177c:	9600      	str	r6, [sp, #0]
 800177e:	f88d c00f 	strb.w	ip, [sp, #15]
 8001782:	f001 fbd7 	bl	8002f34 <HAL_I2C_Master_Transmit>
 8001786:	f10d 020f 	add.w	r2, sp, #15
 800178a:	2301      	movs	r3, #1
 800178c:	214e      	movs	r1, #78	; 0x4e
 800178e:	6828      	ldr	r0, [r5, #0]
 8001790:	9600      	str	r6, [sp, #0]
 8001792:	f88d 700f 	strb.w	r7, [sp, #15]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001796:	f044 0408 	orr.w	r4, r4, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800179a:	f001 fbcb 	bl	8002f34 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);									//wait 5 ms
 800179e:	2005      	movs	r0, #5
 80017a0:	f000 ff62 	bl	8002668 <HAL_Delay>
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80017a4:	b2e4      	uxtb	r4, r4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80017a6:	f10d 020f 	add.w	r2, sp, #15
 80017aa:	2301      	movs	r3, #1
 80017ac:	214e      	movs	r1, #78	; 0x4e
 80017ae:	6828      	ldr	r0, [r5, #0]
 80017b0:	9600      	str	r6, [sp, #0]
 80017b2:	f88d 400f 	strb.w	r4, [sp, #15]
	display_i2c_write(cmd_LSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 80017b6:	f044 0704 	orr.w	r7, r4, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80017ba:	f001 fbbb 	bl	8002f34 <HAL_I2C_Master_Transmit>
 80017be:	f10d 020f 	add.w	r2, sp, #15
 80017c2:	2301      	movs	r3, #1
 80017c4:	214e      	movs	r1, #78	; 0x4e
 80017c6:	6828      	ldr	r0, [r5, #0]
 80017c8:	9600      	str	r6, [sp, #0]
 80017ca:	f88d 700f 	strb.w	r7, [sp, #15]
 80017ce:	f001 fbb1 	bl	8002f34 <HAL_I2C_Master_Transmit>
 80017d2:	2301      	movs	r3, #1
 80017d4:	214e      	movs	r1, #78	; 0x4e
 80017d6:	6828      	ldr	r0, [r5, #0]
 80017d8:	9600      	str	r6, [sp, #0]
 80017da:	f10d 020f 	add.w	r2, sp, #15
 80017de:	f88d 400f 	strb.w	r4, [sp, #15]
 80017e2:	f001 fba7 	bl	8002f34 <HAL_I2C_Master_Transmit>
}
 80017e6:	b005      	add	sp, #20
 80017e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000b24 	.word	0x20000b24

080017f0 <init_display>:
void init_display(I2C_HandleTypeDef* hi2c) {
 80017f0:	4602      	mov	r2, r0
 80017f2:	b508      	push	{r3, lr}
	display_i2c = hi2c;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <init_display+0x30>)
	display_send_command(init_4_bit_cmd);
 80017f6:	2033      	movs	r0, #51	; 0x33
	display_i2c = hi2c;
 80017f8:	601a      	str	r2, [r3, #0]
	display_send_command(init_4_bit_cmd);
 80017fa:	f7ff ffa5 	bl	8001748 <display_send_command>
	display_send_command(init_4_bit_cmd);
 80017fe:	2032      	movs	r0, #50	; 0x32
 8001800:	f7ff ffa2 	bl	8001748 <display_send_command>
	display_send_command(DISPLAY_CMD_FUNC |  DISPLAY_BIT_FUNC_DOUBLE);
 8001804:	2028      	movs	r0, #40	; 0x28
 8001806:	f7ff ff9f 	bl	8001748 <display_send_command>
	display_send_command(DISPLAY_CMD_CLEAR);
 800180a:	2001      	movs	r0, #1
 800180c:	f7ff ff9c 	bl	8001748 <display_send_command>
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
 8001810:	2006      	movs	r0, #6
 8001812:	f7ff ff99 	bl	8001748 <display_send_command>
}
 8001816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
 800181a:	200e      	movs	r0, #14
 800181c:	f7ff bf94 	b.w	8001748 <display_send_command>
 8001820:	20000b24 	.word	0x20000b24

08001824 <display_i2c_dma_write>:
}

void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 8001824:	b410      	push	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 8001826:	4c04      	ldr	r4, [pc, #16]	; (8001838 <display_i2c_dma_write+0x14>)
void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 800182c:	6820      	ldr	r0, [r4, #0]
 800182e:	214e      	movs	r1, #78	; 0x4e
}
 8001830:	bc10      	pop	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 8001832:	f001 bccb 	b.w	80031cc <HAL_I2C_Master_Transmit_DMA>
 8001836:	bf00      	nop
 8001838:	20000b24 	.word	0x20000b24

0800183c <display_convert_cmd>:

void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = cmd_MSB;
 800183c:	7813      	ldrb	r3, [r2, #0]
void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
 800183e:	b470      	push	{r4, r5, r6}
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 8001840:	f020 040f 	bic.w	r4, r0, #15
 8001844:	f044 0408 	orr.w	r4, r4, #8
	*(buffer + (*pos)++) = cmd_MSB;
 8001848:	1c5d      	adds	r5, r3, #1
 800184a:	7015      	strb	r5, [r2, #0]
 800184c:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB | DISPLAY_BIT_E;
 800184e:	7813      	ldrb	r3, [r2, #0]
 8001850:	f044 0504 	orr.w	r5, r4, #4
 8001854:	1c5e      	adds	r6, r3, #1
 8001856:	7016      	strb	r6, [r2, #0]
 8001858:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB;
 800185a:	7815      	ldrb	r5, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 800185c:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = cmd_MSB;
 800185e:	1c68      	adds	r0, r5, #1
 8001860:	7010      	strb	r0, [r2, #0]
 8001862:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = cmd_LSB;
 8001864:	7810      	ldrb	r0, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = cmd_LSB;
 800186c:	1c44      	adds	r4, r0, #1
 800186e:	7014      	strb	r4, [r2, #0]
 8001870:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB | DISPLAY_BIT_E;
 8001872:	7810      	ldrb	r0, [r2, #0]
 8001874:	f043 0404 	orr.w	r4, r3, #4
 8001878:	1c45      	adds	r5, r0, #1
 800187a:	7015      	strb	r5, [r2, #0]
 800187c:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB;
 800187e:	7810      	ldrb	r0, [r2, #0]
 8001880:	1c44      	adds	r4, r0, #1
 8001882:	7014      	strb	r4, [r2, #0]
 8001884:	540b      	strb	r3, [r1, r0]
}
 8001886:	bc70      	pop	{r4, r5, r6}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop

0800188c <display_convert_data>:

void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = data_MSB;
 800188c:	7813      	ldrb	r3, [r2, #0]
void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
 800188e:	b470      	push	{r4, r5, r6}
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 8001890:	f020 040f 	bic.w	r4, r0, #15
 8001894:	f044 0409 	orr.w	r4, r4, #9
	*(buffer + (*pos)++) = data_MSB;
 8001898:	1c5d      	adds	r5, r3, #1
 800189a:	7015      	strb	r5, [r2, #0]
 800189c:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = data_MSB | DISPLAY_BIT_E;
 800189e:	7813      	ldrb	r3, [r2, #0]
 80018a0:	f044 0504 	orr.w	r5, r4, #4
 80018a4:	1c5e      	adds	r6, r3, #1
 80018a6:	7016      	strb	r6, [r2, #0]
 80018a8:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = data_MSB;
 80018aa:	7815      	ldrb	r5, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 80018ac:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = data_MSB;
 80018ae:	1c68      	adds	r0, r5, #1
 80018b0:	7010      	strb	r0, [r2, #0]
 80018b2:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = data_LSB;
 80018b4:	7810      	ldrb	r0, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 80018b6:	f043 0309 	orr.w	r3, r3, #9
 80018ba:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = data_LSB;
 80018bc:	1c44      	adds	r4, r0, #1
 80018be:	7014      	strb	r4, [r2, #0]
 80018c0:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = data_LSB | DISPLAY_BIT_E;
 80018c2:	7810      	ldrb	r0, [r2, #0]
 80018c4:	f043 0404 	orr.w	r4, r3, #4
 80018c8:	1c45      	adds	r5, r0, #1
 80018ca:	7015      	strb	r5, [r2, #0]
 80018cc:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = data_LSB;
 80018ce:	7810      	ldrb	r0, [r2, #0]
 80018d0:	1c44      	adds	r4, r0, #1
 80018d2:	7014      	strb	r4, [r2, #0]
 80018d4:	540b      	strb	r3, [r1, r0]
}
 80018d6:	bc70      	pop	{r4, r5, r6}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop

080018dc <input_invalid>:
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
}

void input_invalid() {
}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <change_inc_dec>:

void change_inc_dec() {
	if (inc_dec == INC_DEC_DEFAULT) {
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <change_inc_dec+0x10>)
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	2a01      	cmp	r2, #1
		inc_dec = INC_DEC_ALT;
	}
	else {
		inc_dec = INC_DEC_DEFAULT;
 80018e6:	bf0c      	ite	eq
 80018e8:	2208      	moveq	r2, #8
 80018ea:	2201      	movne	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
	}
}
 80018ee:	4770      	bx	lr
 80018f0:	20000b20 	.word	0x20000b20

080018f4 <temp_set_algo>:

	display_update_menu_env_op();
}

void temp_set_algo() {
	uint8_t temp2 = temp[0];
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <temp_set_algo+0x10>)
	temp[0] = algo;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <temp_set_algo+0x14>)
	uint8_t temp2 = temp[0];
 80018f8:	7818      	ldrb	r0, [r3, #0]
	temp[0] = algo;
 80018fa:	7811      	ldrb	r1, [r2, #0]
	algo = temp2;
 80018fc:	7010      	strb	r0, [r2, #0]
	temp[0] = algo;
 80018fe:	7019      	strb	r1, [r3, #0]
}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000bf4 	.word	0x20000bf4
 8001908:	20000a88 	.word	0x20000a88

0800190c <select_menu_amp>:
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 800190c:	21cc      	movs	r1, #204	; 0xcc
 800190e:	4801      	ldr	r0, [pc, #4]	; (8001914 <select_menu_amp+0x8>)
 8001910:	f7ff bf88 	b.w	8001824 <display_i2c_dma_write>
 8001914:	20000d10 	.word	0x20000d10

08001918 <select_menu_ratio>:
	display_i2c_dma_write(ui_menu_ratio_converted, UI_STRING_CONVERTED_SIZE);
 8001918:	21cc      	movs	r1, #204	; 0xcc
 800191a:	4801      	ldr	r0, [pc, #4]	; (8001920 <select_menu_ratio+0x8>)
 800191c:	f7ff bf82 	b.w	8001824 <display_i2c_dma_write>
 8001920:	200011d4 	.word	0x200011d4

08001924 <select_menu_detune>:
	display_i2c_dma_write(ui_menu_detune_converted, UI_STRING_CONVERTED_SIZE);
 8001924:	21cc      	movs	r1, #204	; 0xcc
 8001926:	4801      	ldr	r0, [pc, #4]	; (800192c <select_menu_detune+0x8>)
 8001928:	f7ff bf7c 	b.w	8001824 <display_i2c_dma_write>
 800192c:	20001344 	.word	0x20001344

08001930 <select_menu_env>:
	display_i2c_dma_write(ui_menu_env_converted, UI_STRING_CONVERTED_SIZE);
 8001930:	21cc      	movs	r1, #204	; 0xcc
 8001932:	4801      	ldr	r0, [pc, #4]	; (8001938 <select_menu_env+0x8>)
 8001934:	f7ff bf76 	b.w	8001824 <display_i2c_dma_write>
 8001938:	20000ddc 	.word	0x20000ddc

0800193c <select_menu_algo>:
	display_i2c_dma_write(ui_menu_algo_converted, UI_STRING_CONVERTED_SIZE);
 800193c:	21cc      	movs	r1, #204	; 0xcc
 800193e:	4801      	ldr	r0, [pc, #4]	; (8001944 <select_menu_algo+0x8>)
 8001940:	f7ff bf70 	b.w	8001824 <display_i2c_dma_write>
 8001944:	20000ea8 	.word	0x20000ea8

08001948 <select_menu_instr>:
	display_i2c_dma_write(ui_menu_instr_converted, UI_STRING_CONVERTED_SIZE);
 8001948:	21cc      	movs	r1, #204	; 0xcc
 800194a:	4801      	ldr	r0, [pc, #4]	; (8001950 <select_menu_instr+0x8>)
 800194c:	f7ff bf6a 	b.w	8001824 <display_i2c_dma_write>
 8001950:	20001038 	.word	0x20001038

08001954 <enter_menu_instr>:
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop

08001958 <inc_set_instr>:
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <dec_set_instr>:
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <temp_set_instr>:
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <enter_menu_env>:
	}
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
}

void display_update_menu_env() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001964:	2300      	movs	r3, #0
void enter_menu_env() {
 8001966:	b570      	push	{r4, r5, r6, lr}
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001968:	4911      	ldr	r1, [pc, #68]	; (80019b0 <enter_menu_env+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <enter_menu_env+0x50>)
 800196c:	7809      	ldrb	r1, [r1, #0]
void enter_menu_env() {
 800196e:	b086      	sub	sp, #24
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001970:	ad02      	add	r5, sp, #8
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001972:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001976:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001978:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800197c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001980:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001982:	f003 faf3 	bl	8004f6c <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001986:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < 4; i++) {
		display_convert_data(
 8001988:	4e0b      	ldr	r6, [pc, #44]	; (80019b8 <enter_menu_env+0x54>)
 800198a:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 800198c:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001990:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001994:	4631      	mov	r1, r6
 8001996:	f10d 0203 	add.w	r2, sp, #3
 800199a:	f7ff ff77 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 800199e:	42ac      	cmp	r4, r5
 80019a0:	d1f6      	bne.n	8001990 <enter_menu_env+0x2c>
			params[i], ui_menu_env_op_converted, &index
		);
	}
	display_i2c_dma_write(ui_menu_env_op_converted, UI_STRING_CONVERTED_SIZE);
 80019a2:	21cc      	movs	r1, #204	; 0xcc
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <enter_menu_env+0x54>)
 80019a6:	f7ff ff3d 	bl	8001824 <display_i2c_dma_write>
}
 80019aa:	b006      	add	sp, #24
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
 80019ae:	bf00      	nop
 80019b0:	20000bf9 	.word	0x20000bf9
 80019b4:	20000004 	.word	0x20000004
 80019b8:	20000b28 	.word	0x20000b28

080019bc <enter_menu_algo>:
	}
	display_i2c_dma_write(ui_set_env_converted, UI_STRING_CONVERTED_SIZE);
}

void display_update_menu_algo() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80019bc:	2300      	movs	r3, #0
void enter_menu_algo() {
 80019be:	b570      	push	{r4, r5, r6, lr}
	temp[0] = algo;
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <enter_menu_algo+0x50>)
 80019c2:	4813      	ldr	r0, [pc, #76]	; (8001a10 <enter_menu_algo+0x54>)
 80019c4:	7812      	ldrb	r2, [r2, #0]
	strcat(params, HEX_TO_STRING[algo]);
 80019c6:	4913      	ldr	r1, [pc, #76]	; (8001a14 <enter_menu_algo+0x58>)
void enter_menu_algo() {
 80019c8:	b086      	sub	sp, #24
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80019ca:	ad02      	add	r5, sp, #8
	temp[0] = algo;
 80019cc:	7002      	strb	r2, [r0, #0]
	strcat(params, HEX_TO_STRING[algo]);
 80019ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80019d2:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80019d4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80019d8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80019dc:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[algo]);
 80019de:	f003 fac5 	bl	8004f6c <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 80019e2:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < 4; i++) {
		display_convert_data(
 80019e4:	4e0c      	ldr	r6, [pc, #48]	; (8001a18 <enter_menu_algo+0x5c>)
 80019e6:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 80019e8:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 80019ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80019f0:	4631      	mov	r1, r6
 80019f2:	f10d 0203 	add.w	r2, sp, #3
 80019f6:	f7ff ff49 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 80019fa:	42ac      	cmp	r4, r5
 80019fc:	d1f6      	bne.n	80019ec <enter_menu_algo+0x30>
			params[i], ui_set_algo_converted, &index
		);
	}
	display_i2c_dma_write(ui_set_algo_converted, UI_STRING_CONVERTED_SIZE);
 80019fe:	21cc      	movs	r1, #204	; 0xcc
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <enter_menu_algo+0x5c>)
 8001a02:	f7ff ff0f 	bl	8001824 <display_i2c_dma_write>
}
 8001a06:	b006      	add	sp, #24
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000a88 	.word	0x20000a88
 8001a10:	20000bf4 	.word	0x20000bf4
 8001a14:	20000004 	.word	0x20000004
 8001a18:	20001108 	.word	0x20001108

08001a1c <inc_set_algo>:
void inc_set_algo() {
 8001a1c:	b570      	push	{r4, r5, r6, lr}
	if (++algo == MAX_ALGO) {
 8001a1e:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <inc_set_algo+0x5c>)
void inc_set_algo() {
 8001a20:	b086      	sub	sp, #24
	if (++algo == MAX_ALGO) {
 8001a22:	7813      	ldrb	r3, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a24:	ad02      	add	r5, sp, #8
	if (++algo == MAX_ALGO) {
 8001a26:	3301      	adds	r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b0b      	cmp	r3, #11
		algo = 0x00;
 8001a2c:	bf05      	ittet	eq
 8001a2e:	2100      	moveq	r1, #0
 8001a30:	460b      	moveq	r3, r1
	if (++algo == MAX_ALGO) {
 8001a32:	7013      	strbne	r3, [r2, #0]
		algo = 0x00;
 8001a34:	7011      	strbeq	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a36:	2200      	movs	r2, #0
	strcat(params, HEX_TO_STRING[algo]);
 8001a38:	4910      	ldr	r1, [pc, #64]	; (8001a7c <inc_set_algo+0x60>)
 8001a3a:	a801      	add	r0, sp, #4
 8001a3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a40:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8001a44:	e9c5 2201 	strd	r2, r2, [r5, #4]
 8001a48:	732a      	strb	r2, [r5, #12]
	strcat(params, HEX_TO_STRING[algo]);
 8001a4a:	f003 fa8f 	bl	8004f6c <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001a4e:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001a50:	4e0b      	ldr	r6, [pc, #44]	; (8001a80 <inc_set_algo+0x64>)
 8001a52:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001a54:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001a58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a5c:	4631      	mov	r1, r6
 8001a5e:	f10d 0203 	add.w	r2, sp, #3
 8001a62:	f7ff ff13 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001a66:	42ac      	cmp	r4, r5
 8001a68:	d1f6      	bne.n	8001a58 <inc_set_algo+0x3c>
	display_i2c_dma_write(ui_set_algo_converted, UI_STRING_CONVERTED_SIZE);
 8001a6a:	21cc      	movs	r1, #204	; 0xcc
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <inc_set_algo+0x64>)
 8001a6e:	f7ff fed9 	bl	8001824 <display_i2c_dma_write>
}
 8001a72:	b006      	add	sp, #24
 8001a74:	bd70      	pop	{r4, r5, r6, pc}
 8001a76:	bf00      	nop
 8001a78:	20000a88 	.word	0x20000a88
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	20001108 	.word	0x20001108

08001a84 <inc_menu_env_op>:
void inc_menu_env_op() {
 8001a84:	b570      	push	{r4, r5, r6, lr}
	if (++fsm_env_op == MAX_OPERATORS) {
 8001a86:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <inc_menu_env_op+0x5c>)
void inc_menu_env_op() {
 8001a88:	b086      	sub	sp, #24
	if (++fsm_env_op == MAX_OPERATORS) {
 8001a8a:	7813      	ldrb	r3, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a8c:	ad02      	add	r5, sp, #8
	if (++fsm_env_op == MAX_OPERATORS) {
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b04      	cmp	r3, #4
		fsm_env_op = 0x00;
 8001a94:	bf05      	ittet	eq
 8001a96:	2100      	moveq	r1, #0
 8001a98:	460b      	moveq	r3, r1
	if (++fsm_env_op == MAX_OPERATORS) {
 8001a9a:	7013      	strbne	r3, [r2, #0]
		fsm_env_op = 0x00;
 8001a9c:	7011      	strbeq	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a9e:	2200      	movs	r2, #0
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001aa0:	4910      	ldr	r1, [pc, #64]	; (8001ae4 <inc_menu_env_op+0x60>)
 8001aa2:	a801      	add	r0, sp, #4
 8001aa4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001aa8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8001aac:	e9c5 2201 	strd	r2, r2, [r5, #4]
 8001ab0:	732a      	strb	r2, [r5, #12]
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001ab2:	f003 fa5b 	bl	8004f6c <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001ab6:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001ab8:	4e0b      	ldr	r6, [pc, #44]	; (8001ae8 <inc_menu_env_op+0x64>)
 8001aba:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001abc:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001ac0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ac4:	4631      	mov	r1, r6
 8001ac6:	f10d 0203 	add.w	r2, sp, #3
 8001aca:	f7ff fedf 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001ace:	42ac      	cmp	r4, r5
 8001ad0:	d1f6      	bne.n	8001ac0 <inc_menu_env_op+0x3c>
	display_i2c_dma_write(ui_menu_env_op_converted, UI_STRING_CONVERTED_SIZE);
 8001ad2:	21cc      	movs	r1, #204	; 0xcc
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <inc_menu_env_op+0x64>)
 8001ad6:	f7ff fea5 	bl	8001824 <display_i2c_dma_write>
}
 8001ada:	b006      	add	sp, #24
 8001adc:	bd70      	pop	{r4, r5, r6, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000bf9 	.word	0x20000bf9
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	20000b28 	.word	0x20000b28

08001aec <enter_menu_amp>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001aec:	2300      	movs	r3, #0
		temp[i] = op_amp[i];
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <enter_menu_amp+0x60>)
void enter_menu_amp() {
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	4614      	mov	r4, r2
 8001af4:	b086      	sub	sp, #24
		temp[i] = op_amp[i];
 8001af6:	6811      	ldr	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001af8:	e9cd 3301 	strd	r3, r3, [sp, #4]
		temp[i] = op_amp[i];
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <enter_menu_amp+0x64>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001afe:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001b02:	4e14      	ldr	r6, [pc, #80]	; (8001b54 <enter_menu_amp+0x68>)
		temp[i] = op_amp[i];
 8001b04:	6011      	str	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b06:	1d25      	adds	r5, r4, #4
 8001b08:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001b0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001b10:	a801      	add	r0, sp, #4
 8001b12:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001b16:	f003 fa1a 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001b1a:	42a5      	cmp	r5, r4
 8001b1c:	d1f6      	bne.n	8001b0c <enter_menu_amp+0x20>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b1e:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001b20:	4e0d      	ldr	r6, [pc, #52]	; (8001b58 <enter_menu_amp+0x6c>)
 8001b22:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b26:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001b2a:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001b2e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001b32:	4631      	mov	r1, r6
 8001b34:	f10d 0203 	add.w	r2, sp, #3
 8001b38:	f7ff fea8 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001b3c:	42a5      	cmp	r5, r4
 8001b3e:	d1f6      	bne.n	8001b2e <enter_menu_amp+0x42>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001b40:	21cc      	movs	r1, #204	; 0xcc
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <enter_menu_amp+0x6c>)
 8001b44:	f7ff fe6e 	bl	8001824 <display_i2c_dma_write>
}
 8001b48:	b006      	add	sp, #24
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
 8001b4c:	20000aa0 	.word	0x20000aa0
 8001b50:	20000bf4 	.word	0x20000bf4
 8001b54:	20000004 	.word	0x20000004
 8001b58:	20000bfc 	.word	0x20000bfc

08001b5c <enter_menu_ratio>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b5c:	2300      	movs	r3, #0
		temp[i] = op_ratio[i];
 8001b5e:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <enter_menu_ratio+0x60>)
void enter_menu_ratio() {
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	4614      	mov	r4, r2
 8001b64:	b086      	sub	sp, #24
		temp[i] = op_ratio[i];
 8001b66:	6811      	ldr	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b68:	e9cd 3301 	strd	r3, r3, [sp, #4]
		temp[i] = op_ratio[i];
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <enter_menu_ratio+0x64>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b6e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001b72:	4e14      	ldr	r6, [pc, #80]	; (8001bc4 <enter_menu_ratio+0x68>)
		temp[i] = op_ratio[i];
 8001b74:	6011      	str	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b76:	1d25      	adds	r5, r4, #4
 8001b78:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 8001b7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001b80:	a801      	add	r0, sp, #4
 8001b82:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001b86:	f003 f9e2 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001b8a:	42a5      	cmp	r5, r4
 8001b8c:	d1f6      	bne.n	8001b7c <enter_menu_ratio+0x20>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b8e:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001b90:	4e0d      	ldr	r6, [pc, #52]	; (8001bc8 <enter_menu_ratio+0x6c>)
 8001b92:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b96:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001b9a:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001b9e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001ba2:	4631      	mov	r1, r6
 8001ba4:	f10d 0203 	add.w	r2, sp, #3
 8001ba8:	f7ff fe70 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001bac:	42a5      	cmp	r5, r4
 8001bae:	d1f6      	bne.n	8001b9e <enter_menu_ratio+0x42>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001bb0:	21cc      	movs	r1, #204	; 0xcc
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <enter_menu_ratio+0x6c>)
 8001bb4:	f7ff fe36 	bl	8001824 <display_i2c_dma_write>
}
 8001bb8:	b006      	add	sp, #24
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
 8001bbc:	20000ac4 	.word	0x20000ac4
 8001bc0:	20000bf4 	.word	0x20000bf4
 8001bc4:	20000608 	.word	0x20000608
 8001bc8:	20000bfc 	.word	0x20000bfc

08001bcc <enter_menu_detune>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001bcc:	2300      	movs	r3, #0
		temp[i] = op_detune[i];
 8001bce:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <enter_menu_detune+0x64>)
void enter_menu_detune() {
 8001bd0:	b570      	push	{r4, r5, r6, lr}
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	b086      	sub	sp, #24
		temp[i] = op_detune[i];
 8001bd6:	6811      	ldr	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001bd8:	e9cd 3301 	strd	r3, r3, [sp, #4]
		temp[i] = op_detune[i];
 8001bdc:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <enter_menu_detune+0x68>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001bde:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001be2:	4e15      	ldr	r6, [pc, #84]	; (8001c38 <enter_menu_detune+0x6c>)
		temp[i] = op_detune[i];
 8001be4:	6011      	str	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001be6:	1d25      	adds	r5, r4, #4
 8001be8:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001bec:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001bf0:	a801      	add	r0, sp, #4
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001bf8:	f003 f9a9 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001bfc:	42a5      	cmp	r5, r4
 8001bfe:	d1f5      	bne.n	8001bec <enter_menu_detune+0x20>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c00:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001c02:	4e0e      	ldr	r6, [pc, #56]	; (8001c3c <enter_menu_detune+0x70>)
 8001c04:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c08:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c0c:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001c10:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001c14:	4631      	mov	r1, r6
 8001c16:	f10d 0203 	add.w	r2, sp, #3
 8001c1a:	f7ff fe37 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c1e:	42ac      	cmp	r4, r5
 8001c20:	d1f6      	bne.n	8001c10 <enter_menu_detune+0x44>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001c22:	21cc      	movs	r1, #204	; 0xcc
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <enter_menu_detune+0x70>)
 8001c26:	f7ff fdfd 	bl	8001824 <display_i2c_dma_write>
}
 8001c2a:	b006      	add	sp, #24
 8001c2c:	bd70      	pop	{r4, r5, r6, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000aac 	.word	0x20000aac
 8001c34:	20000bf4 	.word	0x20000bf4
 8001c38:	20000208 	.word	0x20000208
 8001c3c:	20000bfc 	.word	0x20000bfc

08001c40 <temp_set_detune>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c40:	2300      	movs	r3, #0
		temp[i] = op_detune[i];
 8001c42:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <temp_set_detune+0x68>)
void temp_set_detune() {
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	4614      	mov	r4, r2
		uint8_t temp2 = temp[i];
 8001c48:	4918      	ldr	r1, [pc, #96]	; (8001cac <temp_set_detune+0x6c>)
void temp_set_detune() {
 8001c4a:	b086      	sub	sp, #24
		uint8_t temp2 = temp[i];
 8001c4c:	680d      	ldr	r5, [r1, #0]
		temp[i] = op_detune[i];
 8001c4e:	6810      	ldr	r0, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001c54:	4e16      	ldr	r6, [pc, #88]	; (8001cb0 <temp_set_detune+0x70>)
		op_detune[i] = temp2;
 8001c56:	6015      	str	r5, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c58:	9301      	str	r3, [sp, #4]
		temp[i] = op_detune[i];
 8001c5a:	6008      	str	r0, [r1, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c5c:	1d15      	adds	r5, r2, #4
 8001c5e:	9304      	str	r3, [sp, #16]
 8001c60:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001c64:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001c68:	a801      	add	r0, sp, #4
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001c70:	f003 f96d 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001c74:	42ac      	cmp	r4, r5
 8001c76:	d1f5      	bne.n	8001c64 <temp_set_detune+0x24>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c78:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001c7a:	4e0e      	ldr	r6, [pc, #56]	; (8001cb4 <temp_set_detune+0x74>)
 8001c7c:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c80:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c84:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001c88:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001c8c:	4631      	mov	r1, r6
 8001c8e:	f10d 0203 	add.w	r2, sp, #3
 8001c92:	f7ff fdfb 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c96:	42a5      	cmp	r5, r4
 8001c98:	d1f6      	bne.n	8001c88 <temp_set_detune+0x48>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001c9a:	21cc      	movs	r1, #204	; 0xcc
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <temp_set_detune+0x74>)
 8001c9e:	f7ff fdc1 	bl	8001824 <display_i2c_dma_write>
}
 8001ca2:	b006      	add	sp, #24
 8001ca4:	bd70      	pop	{r4, r5, r6, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000aac 	.word	0x20000aac
 8001cac:	20000bf4 	.word	0x20000bf4
 8001cb0:	20000208 	.word	0x20000208
 8001cb4:	20000bfc 	.word	0x20000bfc

08001cb8 <temp_set_amp>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cb8:	2300      	movs	r3, #0
		temp[i] = op_amp[i];
 8001cba:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <temp_set_amp+0x64>)
void temp_set_amp() {
 8001cbc:	b570      	push	{r4, r5, r6, lr}
 8001cbe:	4614      	mov	r4, r2
		uint8_t temp2 = temp[i];
 8001cc0:	4917      	ldr	r1, [pc, #92]	; (8001d20 <temp_set_amp+0x68>)
void temp_set_amp() {
 8001cc2:	b086      	sub	sp, #24
		uint8_t temp2 = temp[i];
 8001cc4:	680d      	ldr	r5, [r1, #0]
		temp[i] = op_amp[i];
 8001cc6:	6810      	ldr	r0, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001ccc:	4e15      	ldr	r6, [pc, #84]	; (8001d24 <temp_set_amp+0x6c>)
		op_amp[i] = temp2;
 8001cce:	6015      	str	r5, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cd0:	9301      	str	r3, [sp, #4]
		temp[i] = op_amp[i];
 8001cd2:	6008      	str	r0, [r1, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cd4:	1d15      	adds	r5, r2, #4
 8001cd6:	9304      	str	r3, [sp, #16]
 8001cd8:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001cdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ce0:	a801      	add	r0, sp, #4
 8001ce2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001ce6:	f003 f932 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001cea:	42ac      	cmp	r4, r5
 8001cec:	d1f6      	bne.n	8001cdc <temp_set_amp+0x24>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001cee:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001cf0:	4e0d      	ldr	r6, [pc, #52]	; (8001d28 <temp_set_amp+0x70>)
 8001cf2:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001cf6:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001cfa:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001cfe:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001d02:	4631      	mov	r1, r6
 8001d04:	f10d 0203 	add.w	r2, sp, #3
 8001d08:	f7ff fdc0 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001d0c:	42a5      	cmp	r5, r4
 8001d0e:	d1f6      	bne.n	8001cfe <temp_set_amp+0x46>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001d10:	21cc      	movs	r1, #204	; 0xcc
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <temp_set_amp+0x70>)
 8001d14:	f7ff fd86 	bl	8001824 <display_i2c_dma_write>
}
 8001d18:	b006      	add	sp, #24
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	20000aa0 	.word	0x20000aa0
 8001d20:	20000bf4 	.word	0x20000bf4
 8001d24:	20000004 	.word	0x20000004
 8001d28:	20000bfc 	.word	0x20000bfc

08001d2c <temp_set_ratio>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d2c:	2300      	movs	r3, #0
		temp[i] = op_ratio[i];
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <temp_set_ratio+0x64>)
void temp_set_ratio() {
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	4614      	mov	r4, r2
		uint8_t temp2 = temp[i];
 8001d34:	4917      	ldr	r1, [pc, #92]	; (8001d94 <temp_set_ratio+0x68>)
void temp_set_ratio() {
 8001d36:	b086      	sub	sp, #24
		uint8_t temp2 = temp[i];
 8001d38:	680d      	ldr	r5, [r1, #0]
		temp[i] = op_ratio[i];
 8001d3a:	6810      	ldr	r0, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001d40:	4e15      	ldr	r6, [pc, #84]	; (8001d98 <temp_set_ratio+0x6c>)
		op_ratio[i] = temp2;
 8001d42:	6015      	str	r5, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d44:	9301      	str	r3, [sp, #4]
		temp[i] = op_ratio[i];
 8001d46:	6008      	str	r0, [r1, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d48:	1d15      	adds	r5, r2, #4
 8001d4a:	9304      	str	r3, [sp, #16]
 8001d4c:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 8001d50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001d54:	a801      	add	r0, sp, #4
 8001d56:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001d5a:	f003 f8f8 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001d5e:	42ac      	cmp	r4, r5
 8001d60:	d1f6      	bne.n	8001d50 <temp_set_ratio+0x24>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001d62:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001d64:	4e0d      	ldr	r6, [pc, #52]	; (8001d9c <temp_set_ratio+0x70>)
 8001d66:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001d6a:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001d6e:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001d72:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001d76:	4631      	mov	r1, r6
 8001d78:	f10d 0203 	add.w	r2, sp, #3
 8001d7c:	f7ff fd86 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001d80:	42a5      	cmp	r5, r4
 8001d82:	d1f6      	bne.n	8001d72 <temp_set_ratio+0x46>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001d84:	21cc      	movs	r1, #204	; 0xcc
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <temp_set_ratio+0x70>)
 8001d88:	f7ff fd4c 	bl	8001824 <display_i2c_dma_write>
}
 8001d8c:	b006      	add	sp, #24
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
 8001d90:	20000ac4 	.word	0x20000ac4
 8001d94:	20000bf4 	.word	0x20000bf4
 8001d98:	20000608 	.word	0x20000608
 8001d9c:	20000bfc 	.word	0x20000bfc

08001da0 <inc_set_amp>:
void inc_set_amp() {
 8001da0:	b570      	push	{r4, r5, r6, lr}
	op_amp[fsm_op] += inc_dec;
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <inc_set_amp+0x70>)
 8001da4:	491b      	ldr	r1, [pc, #108]	; (8001e14 <inc_set_amp+0x74>)
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	481b      	ldr	r0, [pc, #108]	; (8001e18 <inc_set_amp+0x78>)
 8001daa:	5c8b      	ldrb	r3, [r1, r2]
 8001dac:	7800      	ldrb	r0, [r0, #0]
void inc_set_amp() {
 8001dae:	b086      	sub	sp, #24
	op_amp[fsm_op] += inc_dec;
 8001db0:	4403      	add	r3, r0
 8001db2:	b2db      	uxtb	r3, r3
	if (op_amp[fsm_op] > MAX_VOLUME) {
 8001db4:	2b80      	cmp	r3, #128	; 0x80
		op_amp[fsm_op] = MAX_VOLUME;
 8001db6:	bf88      	it	hi
 8001db8:	2380      	movhi	r3, #128	; 0x80
 8001dba:	548b      	strb	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	4c15      	ldr	r4, [pc, #84]	; (8001e14 <inc_set_amp+0x74>)
 8001dc0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001dc4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001dc8:	4e14      	ldr	r6, [pc, #80]	; (8001e1c <inc_set_amp+0x7c>)
 8001dca:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001dce:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001dd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001dd4:	a801      	add	r0, sp, #4
 8001dd6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001dda:	f003 f8b8 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001dde:	42ac      	cmp	r4, r5
 8001de0:	d1f6      	bne.n	8001dd0 <inc_set_amp+0x30>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001de2:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001de4:	4e0e      	ldr	r6, [pc, #56]	; (8001e20 <inc_set_amp+0x80>)
 8001de6:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001dea:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001dee:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001df2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001df6:	4631      	mov	r1, r6
 8001df8:	f10d 0203 	add.w	r2, sp, #3
 8001dfc:	f7ff fd46 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001e00:	42a5      	cmp	r5, r4
 8001e02:	d1f6      	bne.n	8001df2 <inc_set_amp+0x52>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001e04:	21cc      	movs	r1, #204	; 0xcc
 8001e06:	4806      	ldr	r0, [pc, #24]	; (8001e20 <inc_set_amp+0x80>)
 8001e08:	f7ff fd0c 	bl	8001824 <display_i2c_dma_write>
}
 8001e0c:	b006      	add	sp, #24
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
 8001e10:	20000ac8 	.word	0x20000ac8
 8001e14:	20000aa0 	.word	0x20000aa0
 8001e18:	20000b20 	.word	0x20000b20
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	20000bfc 	.word	0x20000bfc

08001e24 <dec_set_amp>:
void dec_set_amp() {
 8001e24:	b570      	push	{r4, r5, r6, lr}
	op_amp[fsm_op] -= inc_dec;
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <dec_set_amp+0x70>)
 8001e28:	491b      	ldr	r1, [pc, #108]	; (8001e98 <dec_set_amp+0x74>)
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	481b      	ldr	r0, [pc, #108]	; (8001e9c <dec_set_amp+0x78>)
 8001e2e:	5c8b      	ldrb	r3, [r1, r2]
 8001e30:	7800      	ldrb	r0, [r0, #0]
void dec_set_amp() {
 8001e32:	b086      	sub	sp, #24
	op_amp[fsm_op] -= inc_dec;
 8001e34:	1a1b      	subs	r3, r3, r0
 8001e36:	b2db      	uxtb	r3, r3
	if (op_amp[fsm_op] > MAX_VOLUME) {
 8001e38:	2b80      	cmp	r3, #128	; 0x80
		op_amp[fsm_op] = 0x00;
 8001e3a:	bf88      	it	hi
 8001e3c:	2300      	movhi	r3, #0
 8001e3e:	548b      	strb	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001e40:	2300      	movs	r3, #0
 8001e42:	4c15      	ldr	r4, [pc, #84]	; (8001e98 <dec_set_amp+0x74>)
 8001e44:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001e48:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001e4c:	4e14      	ldr	r6, [pc, #80]	; (8001ea0 <dec_set_amp+0x7c>)
 8001e4e:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001e52:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001e54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001e58:	a801      	add	r0, sp, #4
 8001e5a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001e5e:	f003 f876 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001e62:	42ac      	cmp	r4, r5
 8001e64:	d1f6      	bne.n	8001e54 <dec_set_amp+0x30>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001e66:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001e68:	4e0e      	ldr	r6, [pc, #56]	; (8001ea4 <dec_set_amp+0x80>)
 8001e6a:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001e6e:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001e72:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001e76:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001e7a:	4631      	mov	r1, r6
 8001e7c:	f10d 0203 	add.w	r2, sp, #3
 8001e80:	f7ff fd04 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001e84:	42a5      	cmp	r5, r4
 8001e86:	d1f6      	bne.n	8001e76 <dec_set_amp+0x52>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001e88:	21cc      	movs	r1, #204	; 0xcc
 8001e8a:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <dec_set_amp+0x80>)
 8001e8c:	f7ff fcca 	bl	8001824 <display_i2c_dma_write>
}
 8001e90:	b006      	add	sp, #24
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
 8001e94:	20000ac8 	.word	0x20000ac8
 8001e98:	20000aa0 	.word	0x20000aa0
 8001e9c:	20000b20 	.word	0x20000b20
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	20000bfc 	.word	0x20000bfc

08001ea8 <dec_set_detune>:
void dec_set_detune() {
 8001ea8:	b570      	push	{r4, r5, r6, lr}
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <dec_set_detune+0x78>)
 8001eac:	491d      	ldr	r1, [pc, #116]	; (8001f24 <dec_set_detune+0x7c>)
 8001eae:	781a      	ldrb	r2, [r3, #0]
		op_detune[fsm_op] -= inc_dec;
 8001eb0:	481d      	ldr	r0, [pc, #116]	; (8001f28 <dec_set_detune+0x80>)
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8001eb2:	568b      	ldrsb	r3, [r1, r2]
		op_detune[fsm_op] -= inc_dec;
 8001eb4:	7800      	ldrb	r0, [r0, #0]
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8001eb6:	2b00      	cmp	r3, #0
void dec_set_detune() {
 8001eb8:	b086      	sub	sp, #24
		op_detune[fsm_op] -= inc_dec;
 8001eba:	eba3 0300 	sub.w	r3, r3, r0
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8001ebe:	da03      	bge.n	8001ec8 <dec_set_detune+0x20>
		op_detune[fsm_op] -= inc_dec;
 8001ec0:	b25b      	sxtb	r3, r3
		if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {
 8001ec2:	2b00      	cmp	r3, #0
			op_detune[fsm_op] = MAX_NEG_DETUNE;
 8001ec4:	bfa8      	it	ge
 8001ec6:	2380      	movge	r3, #128	; 0x80
 8001ec8:	548b      	strb	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001eca:	2300      	movs	r3, #0
 8001ecc:	4c15      	ldr	r4, [pc, #84]	; (8001f24 <dec_set_detune+0x7c>)
 8001ece:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001ed2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001ed6:	4e15      	ldr	r6, [pc, #84]	; (8001f2c <dec_set_detune+0x84>)
 8001ed8:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001edc:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001ede:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001ee2:	a801      	add	r0, sp, #4
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001eea:	f003 f830 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001eee:	42a5      	cmp	r5, r4
 8001ef0:	d1f5      	bne.n	8001ede <dec_set_detune+0x36>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001ef2:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001ef4:	4e0e      	ldr	r6, [pc, #56]	; (8001f30 <dec_set_detune+0x88>)
 8001ef6:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001efa:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001efe:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001f02:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001f06:	4631      	mov	r1, r6
 8001f08:	f10d 0203 	add.w	r2, sp, #3
 8001f0c:	f7ff fcbe 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001f10:	42a5      	cmp	r5, r4
 8001f12:	d1f6      	bne.n	8001f02 <dec_set_detune+0x5a>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001f14:	21cc      	movs	r1, #204	; 0xcc
 8001f16:	4806      	ldr	r0, [pc, #24]	; (8001f30 <dec_set_detune+0x88>)
 8001f18:	f7ff fc84 	bl	8001824 <display_i2c_dma_write>
}
 8001f1c:	b006      	add	sp, #24
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
 8001f20:	20000ac8 	.word	0x20000ac8
 8001f24:	20000aac 	.word	0x20000aac
 8001f28:	20000b20 	.word	0x20000b20
 8001f2c:	20000208 	.word	0x20000208
 8001f30:	20000bfc 	.word	0x20000bfc

08001f34 <inc_set_detune>:
void inc_set_detune() {
 8001f34:	b570      	push	{r4, r5, r6, lr}
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <inc_set_detune+0x78>)
 8001f38:	481d      	ldr	r0, [pc, #116]	; (8001fb0 <inc_set_detune+0x7c>)
 8001f3a:	7819      	ldrb	r1, [r3, #0]
		op_detune[fsm_op] += inc_dec;
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <inc_set_detune+0x80>)
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8001f3e:	5642      	ldrsb	r2, [r0, r1]
		op_detune[fsm_op] += inc_dec;
 8001f40:	781b      	ldrb	r3, [r3, #0]
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8001f42:	2a00      	cmp	r2, #0
void inc_set_detune() {
 8001f44:	b086      	sub	sp, #24
		op_detune[fsm_op] += inc_dec;
 8001f46:	4413      	add	r3, r2
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8001f48:	db03      	blt.n	8001f52 <inc_set_detune+0x1e>
		op_detune[fsm_op] += inc_dec;
 8001f4a:	b25b      	sxtb	r3, r3
		if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {
 8001f4c:	2b00      	cmp	r3, #0
			op_detune[fsm_op] = MAX_POS_DETUNE;
 8001f4e:	bfb8      	it	lt
 8001f50:	237f      	movlt	r3, #127	; 0x7f
 8001f52:	5443      	strb	r3, [r0, r1]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001f54:	2300      	movs	r3, #0
 8001f56:	4c16      	ldr	r4, [pc, #88]	; (8001fb0 <inc_set_detune+0x7c>)
 8001f58:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001f5c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001f60:	4e15      	ldr	r6, [pc, #84]	; (8001fb8 <inc_set_detune+0x84>)
 8001f62:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001f66:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001f68:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001f6c:	a801      	add	r0, sp, #4
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001f74:	f002 ffeb 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001f78:	42a5      	cmp	r5, r4
 8001f7a:	d1f5      	bne.n	8001f68 <inc_set_detune+0x34>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001f7c:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001f7e:	4e0f      	ldr	r6, [pc, #60]	; (8001fbc <inc_set_detune+0x88>)
 8001f80:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001f84:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001f88:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001f8c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001f90:	4631      	mov	r1, r6
 8001f92:	f10d 0203 	add.w	r2, sp, #3
 8001f96:	f7ff fc79 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001f9a:	42a5      	cmp	r5, r4
 8001f9c:	d1f6      	bne.n	8001f8c <inc_set_detune+0x58>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001f9e:	21cc      	movs	r1, #204	; 0xcc
 8001fa0:	4806      	ldr	r0, [pc, #24]	; (8001fbc <inc_set_detune+0x88>)
 8001fa2:	f7ff fc3f 	bl	8001824 <display_i2c_dma_write>
}
 8001fa6:	b006      	add	sp, #24
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	bf00      	nop
 8001fac:	20000ac8 	.word	0x20000ac8
 8001fb0:	20000aac 	.word	0x20000aac
 8001fb4:	20000b20 	.word	0x20000b20
 8001fb8:	20000208 	.word	0x20000208
 8001fbc:	20000bfc 	.word	0x20000bfc

08001fc0 <inc_set_ratio>:
void inc_set_ratio() {
 8001fc0:	b570      	push	{r4, r5, r6, lr}
	if (inc_dec == INC_DEC_DEFAULT) {
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <inc_set_ratio+0x7c>)
		op_ratio[fsm_op] += 0x01;
 8001fc4:	491e      	ldr	r1, [pc, #120]	; (8002040 <inc_set_ratio+0x80>)
	if (inc_dec == INC_DEC_DEFAULT) {
 8001fc6:	781b      	ldrb	r3, [r3, #0]
void inc_set_ratio() {
 8001fc8:	b086      	sub	sp, #24
	if (inc_dec == INC_DEC_DEFAULT) {
 8001fca:	2b01      	cmp	r3, #1
		op_ratio[fsm_op] += 0x01;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <inc_set_ratio+0x84>)
 8001fce:	4c1c      	ldr	r4, [pc, #112]	; (8002040 <inc_set_ratio+0x80>)
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	4e1d      	ldr	r6, [pc, #116]	; (8002048 <inc_set_ratio+0x88>)
 8001fd4:	5c8b      	ldrb	r3, [r1, r2]
 8001fd6:	f104 0504 	add.w	r5, r4, #4
 8001fda:	bf0c      	ite	eq
 8001fdc:	3301      	addeq	r3, #1
		op_ratio[fsm_op] += 0x10;
 8001fde:	3310      	addne	r3, #16
 8001fe0:	b2db      	uxtb	r3, r3
	if (op_ratio[fsm_op] > MAX_RATIO) {
 8001fe2:	2b80      	cmp	r3, #128	; 0x80
		op_ratio[fsm_op] += 0x10;
 8001fe4:	548b      	strb	r3, [r1, r2]
		op_ratio[fsm_op] = MAX_RATIO;
 8001fe6:	bf84      	itt	hi
 8001fe8:	2380      	movhi	r3, #128	; 0x80
 8001fea:	548b      	strbhi	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001fec:	2300      	movs	r3, #0
 8001fee:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001ff2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001ff6:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 8001ffa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ffe:	a801      	add	r0, sp, #4
 8002000:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8002004:	f002 ffa3 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8002008:	42ac      	cmp	r4, r5
 800200a:	d1f6      	bne.n	8001ffa <inc_set_ratio+0x3a>
	uint8_t index = SECOND_LINE_START_INDEX;
 800200c:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 800200e:	4e0f      	ldr	r6, [pc, #60]	; (800204c <inc_set_ratio+0x8c>)
 8002010:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8002014:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002018:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 800201c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002020:	4631      	mov	r1, r6
 8002022:	f10d 0203 	add.w	r2, sp, #3
 8002026:	f7ff fc31 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 800202a:	42a5      	cmp	r5, r4
 800202c:	d1f6      	bne.n	800201c <inc_set_ratio+0x5c>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 800202e:	21cc      	movs	r1, #204	; 0xcc
 8002030:	4806      	ldr	r0, [pc, #24]	; (800204c <inc_set_ratio+0x8c>)
 8002032:	f7ff fbf7 	bl	8001824 <display_i2c_dma_write>
}
 8002036:	b006      	add	sp, #24
 8002038:	bd70      	pop	{r4, r5, r6, pc}
 800203a:	bf00      	nop
 800203c:	20000b20 	.word	0x20000b20
 8002040:	20000ac4 	.word	0x20000ac4
 8002044:	20000ac8 	.word	0x20000ac8
 8002048:	20000608 	.word	0x20000608
 800204c:	20000bfc 	.word	0x20000bfc

08002050 <dec_set_ratio>:
void dec_set_ratio() {
 8002050:	b570      	push	{r4, r5, r6, lr}
	if (inc_dec == INC_DEC_DEFAULT) {
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <dec_set_ratio+0x80>)
		op_ratio[fsm_op] -= 0x01;
 8002054:	491f      	ldr	r1, [pc, #124]	; (80020d4 <dec_set_ratio+0x84>)
	if (inc_dec == INC_DEC_DEFAULT) {
 8002056:	781b      	ldrb	r3, [r3, #0]
void dec_set_ratio() {
 8002058:	b086      	sub	sp, #24
	if (inc_dec == INC_DEC_DEFAULT) {
 800205a:	2b01      	cmp	r3, #1
		op_ratio[fsm_op] -= 0x01;
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <dec_set_ratio+0x88>)
 800205e:	4c1d      	ldr	r4, [pc, #116]	; (80020d4 <dec_set_ratio+0x84>)
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	4e1e      	ldr	r6, [pc, #120]	; (80020dc <dec_set_ratio+0x8c>)
 8002064:	5c8b      	ldrb	r3, [r1, r2]
 8002066:	f104 0504 	add.w	r5, r4, #4
 800206a:	bf0c      	ite	eq
 800206c:	f103 33ff 	addeq.w	r3, r3, #4294967295
		op_ratio[fsm_op] -= 0x10;
 8002070:	3b10      	subne	r3, #16
 8002072:	b2db      	uxtb	r3, r3
 8002074:	548b      	strb	r3, [r1, r2]
	if (op_ratio[fsm_op] > MAX_RATIO || op_ratio[fsm_op] == 0x00) {
 8002076:	3b01      	subs	r3, #1
 8002078:	061b      	lsls	r3, r3, #24
		op_ratio[fsm_op] = 0x01;
 800207a:	bf44      	itt	mi
 800207c:	2301      	movmi	r3, #1
 800207e:	548b      	strbmi	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002080:	2300      	movs	r3, #0
 8002082:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002086:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800208a:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 800208e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002092:	a801      	add	r0, sp, #4
 8002094:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8002098:	f002 ff59 	bl	8004f4e <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 800209c:	42a5      	cmp	r5, r4
 800209e:	d1f6      	bne.n	800208e <dec_set_ratio+0x3e>
	uint8_t index = SECOND_LINE_START_INDEX;
 80020a0:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 80020a2:	4e0f      	ldr	r6, [pc, #60]	; (80020e0 <dec_set_ratio+0x90>)
 80020a4:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 80020a8:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80020ac:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 80020b0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80020b4:	4631      	mov	r1, r6
 80020b6:	f10d 0203 	add.w	r2, sp, #3
 80020ba:	f7ff fbe7 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80020be:	42a5      	cmp	r5, r4
 80020c0:	d1f6      	bne.n	80020b0 <dec_set_ratio+0x60>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 80020c2:	21cc      	movs	r1, #204	; 0xcc
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <dec_set_ratio+0x90>)
 80020c6:	f7ff fbad 	bl	8001824 <display_i2c_dma_write>
}
 80020ca:	b006      	add	sp, #24
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
 80020ce:	bf00      	nop
 80020d0:	20000b20 	.word	0x20000b20
 80020d4:	20000ac4 	.word	0x20000ac4
 80020d8:	20000ac8 	.word	0x20000ac8
 80020dc:	20000608 	.word	0x20000608
 80020e0:	20000bfc 	.word	0x20000bfc

080020e4 <init_ui>:
void init_ui(I2C_HandleTypeDef* hi2c) {
 80020e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e8:	b082      	sub	sp, #8
	init_display(hi2c);
 80020ea:	f7ff fb81 	bl	80017f0 <init_display>
		uint8_t index = 0;
 80020ee:	f04f 0800 	mov.w	r8, #0
 80020f2:	4d1f      	ldr	r5, [pc, #124]	; (8002170 <init_ui+0x8c>)
 80020f4:	4e1f      	ldr	r6, [pc, #124]	; (8002174 <init_ui+0x90>)
 80020f6:	f105 0730 	add.w	r7, r5, #48	; 0x30
		display_convert_cmd(							//start DDRAM address at beginning of first line
 80020fa:	2080      	movs	r0, #128	; 0x80
 80020fc:	f855 1b04 	ldr.w	r1, [r5], #4
 8002100:	f10d 0207 	add.w	r2, sp, #7
 8002104:	2400      	movs	r4, #0
		uint8_t index = 0;
 8002106:	f88d 8007 	strb.w	r8, [sp, #7]
		display_convert_cmd(							//start DDRAM address at beginning of first line
 800210a:	f7ff fb97 	bl	800183c <display_convert_cmd>
			display_convert_data(						//convert chars to 4-bit bus data for 1602 LCD
 800210e:	6833      	ldr	r3, [r6, #0]
 8002110:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8002114:	5d18      	ldrb	r0, [r3, r4]
 8002116:	f10d 0207 	add.w	r2, sp, #7
 800211a:	3401      	adds	r4, #1
 800211c:	f7ff fbb6 	bl	800188c <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 8002120:	2c10      	cmp	r4, #16
 8002122:	d1f4      	bne.n	800210e <init_ui+0x2a>
		display_convert_cmd(							//move DDRAM address at beginning of second line
 8002124:	20c0      	movs	r0, #192	; 0xc0
 8002126:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800212a:	f10d 0207 	add.w	r2, sp, #7
 800212e:	f7ff fb85 	bl	800183c <display_convert_cmd>
			display_convert_data(						//write spaces for second line
 8002132:	2020      	movs	r0, #32
 8002134:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8002138:	f10d 0207 	add.w	r2, sp, #7
 800213c:	3c01      	subs	r4, #1
 800213e:	f7ff fba5 	bl	800188c <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 8002142:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002146:	d1f4      	bne.n	8002132 <init_ui+0x4e>
	for (uint8_t i = 0; i < NUM_OF_UI_STRINGS; i++) {	//loop through all UI strings to convert
 8002148:	42bd      	cmp	r5, r7
 800214a:	f106 0604 	add.w	r6, r6, #4
 800214e:	d1d4      	bne.n	80020fa <init_ui+0x16>
	fsm_op = 0;
 8002150:	4a09      	ldr	r2, [pc, #36]	; (8002178 <init_ui+0x94>)
	fsm_env_op = 0;
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <init_ui+0x98>)
	present_state = menu_amp;				//set state to menu_amp
 8002154:	4d0a      	ldr	r5, [pc, #40]	; (8002180 <init_ui+0x9c>)
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 8002156:	21cc      	movs	r1, #204	; 0xcc
 8002158:	480a      	ldr	r0, [pc, #40]	; (8002184 <init_ui+0xa0>)
	fsm_op = 0;
 800215a:	7014      	strb	r4, [r2, #0]
	fsm_env_op = 0;
 800215c:	701c      	strb	r4, [r3, #0]
	present_state = menu_amp;				//set state to menu_amp
 800215e:	702c      	strb	r4, [r5, #0]
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 8002160:	f7ff fb60 	bl	8001824 <display_i2c_dma_write>
	inc_dec = 0x01;
 8002164:	2201      	movs	r2, #1
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <init_ui+0xa4>)
 8002168:	701a      	strb	r2, [r3, #0]
}
 800216a:	b002      	add	sp, #8
 800216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002170:	20000870 	.word	0x20000870
 8002174:	20000840 	.word	0x20000840
 8002178:	20000ac8 	.word	0x20000ac8
 800217c:	20000bf9 	.word	0x20000bf9
 8002180:	20000cc8 	.word	0x20000cc8
 8002184:	20000d10 	.word	0x20000d10
 8002188:	20000b20 	.word	0x20000b20

0800218c <fsm>:
void fsm(input key) {
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 800218e:	4e11      	ldr	r6, [pc, #68]	; (80021d4 <fsm+0x48>)
 8002190:	4f11      	ldr	r7, [pc, #68]	; (80021d8 <fsm+0x4c>)
 8002192:	7833      	ldrb	r3, [r6, #0]
 8002194:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8002198:	780a      	ldrb	r2, [r1, #0]
 800219a:	4290      	cmp	r0, r2
 800219c:	d017      	beq.n	80021ce <fsm+0x42>
 800219e:	2300      	movs	r3, #0
 80021a0:	460d      	mov	r5, r1
 80021a2:	461c      	mov	r4, r3
 80021a4:	e006      	b.n	80021b4 <fsm+0x28>
 80021a6:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
 80021aa:	00dc      	lsls	r4, r3, #3
 80021ac:	4282      	cmp	r2, r0
 80021ae:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
 80021b2:	d003      	beq.n	80021bc <fsm+0x30>
		fsm_transition_table[present_state][i].key != invalid; i++);	//point i to the correct transition
 80021b4:	3301      	adds	r3, #1
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 80021b6:	2a05      	cmp	r2, #5
		fsm_transition_table[present_state][i].key != invalid; i++);	//point i to the correct transition
 80021b8:	b2db      	uxtb	r3, r3
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 80021ba:	d1f4      	bne.n	80021a6 <fsm+0x1a>
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
 80021bc:	686b      	ldr	r3, [r5, #4]
 80021be:	4798      	blx	r3
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
 80021c0:	7833      	ldrb	r3, [r6, #0]
 80021c2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80021c6:	441c      	add	r4, r3
 80021c8:	7863      	ldrb	r3, [r4, #1]
 80021ca:	7033      	strb	r3, [r6, #0]
}
 80021cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 80021ce:	460d      	mov	r5, r1
 80021d0:	2400      	movs	r4, #0
 80021d2:	e7f3      	b.n	80021bc <fsm+0x30>
 80021d4:	20000cc8 	.word	0x20000cc8
 80021d8:	2000080c 	.word	0x2000080c

080021dc <display_update_menu_env_op>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80021dc:	2300      	movs	r3, #0
void display_update_menu_env_op() {
 80021de:	b570      	push	{r4, r5, r6, lr}
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 80021e0:	491c      	ldr	r1, [pc, #112]	; (8002254 <display_update_menu_env_op+0x78>)
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <display_update_menu_env_op+0x7c>)
 80021e4:	780e      	ldrb	r6, [r1, #0]
 80021e6:	4d1d      	ldr	r5, [pc, #116]	; (800225c <display_update_menu_env_op+0x80>)
 80021e8:	5d92      	ldrb	r2, [r2, r6]
void display_update_menu_env_op() {
 80021ea:	b086      	sub	sp, #24
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 80021ec:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80021f0:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80021f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80021f6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80021fa:	f88d 3014 	strb.w	r3, [sp, #20]
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 80021fe:	f002 fe9d 	bl	8004f3c <stpcpy>
	strcat(params, HEX_TO_STRING[op_decay[fsm_env_op]]);
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <display_update_menu_env_op+0x84>)
 8002204:	f10d 0403 	add.w	r4, sp, #3
 8002208:	5d9b      	ldrb	r3, [r3, r6]
 800220a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800220e:	f002 fe95 	bl	8004f3c <stpcpy>
	strcat(params, HEX_TO_STRING[op_sustain[fsm_env_op]]);
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <display_update_menu_env_op+0x88>)
 8002214:	5d9b      	ldrb	r3, [r3, r6]
 8002216:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800221a:	f002 fe8f 	bl	8004f3c <stpcpy>
	strcat(params, HEX_TO_STRING[op_release[fsm_env_op]]);
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <display_update_menu_env_op+0x8c>)
 8002220:	5d9b      	ldrb	r3, [r3, r6]
		display_convert_data(
 8002222:	4e12      	ldr	r6, [pc, #72]	; (800226c <display_update_menu_env_op+0x90>)
	strcat(params, HEX_TO_STRING[op_release[fsm_env_op]]);
 8002224:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8002228:	f002 fea0 	bl	8004f6c <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 800222c:	236c      	movs	r3, #108	; 0x6c
 800222e:	f10d 0513 	add.w	r5, sp, #19
 8002232:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8002236:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800223a:	4631      	mov	r1, r6
 800223c:	f10d 0203 	add.w	r2, sp, #3
 8002240:	f7ff fb24 	bl	800188c <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002244:	42ac      	cmp	r4, r5
 8002246:	d1f6      	bne.n	8002236 <display_update_menu_env_op+0x5a>
	display_i2c_dma_write(ui_set_env_converted, UI_STRING_CONVERTED_SIZE);
 8002248:	21cc      	movs	r1, #204	; 0xcc
 800224a:	4808      	ldr	r0, [pc, #32]	; (800226c <display_update_menu_env_op+0x90>)
 800224c:	f7ff faea 	bl	8001824 <display_i2c_dma_write>
}
 8002250:	b006      	add	sp, #24
 8002252:	bd70      	pop	{r4, r5, r6, pc}
 8002254:	20000bf9 	.word	0x20000bf9
 8002258:	20000a90 	.word	0x20000a90
 800225c:	20000004 	.word	0x20000004
 8002260:	20000abc 	.word	0x20000abc
 8002264:	20000a84 	.word	0x20000a84
 8002268:	20000a8c 	.word	0x20000a8c
 800226c:	20001410 	.word	0x20001410

08002270 <enter_menu_env_op>:
	temp[0] = op_attack[fsm_env_op];
 8002270:	2300      	movs	r3, #0
void enter_menu_env_op() {
 8002272:	b430      	push	{r4, r5}
	temp[0] = op_attack[fsm_env_op];
 8002274:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <enter_menu_env_op+0x34>)
 8002276:	480c      	ldr	r0, [pc, #48]	; (80022a8 <enter_menu_env_op+0x38>)
 8002278:	7812      	ldrb	r2, [r2, #0]
	temp[1] = op_decay[fsm_env_op];
 800227a:	490c      	ldr	r1, [pc, #48]	; (80022ac <enter_menu_env_op+0x3c>)
	temp[0] = op_attack[fsm_env_op];
 800227c:	5c85      	ldrb	r5, [r0, r2]
	temp[2] = op_sustain[fsm_env_op];
 800227e:	480c      	ldr	r0, [pc, #48]	; (80022b0 <enter_menu_env_op+0x40>)
	temp[0] = op_attack[fsm_env_op];
 8002280:	5c8c      	ldrb	r4, [r1, r2]
	temp[3] = op_release[fsm_env_op];
 8002282:	490c      	ldr	r1, [pc, #48]	; (80022b4 <enter_menu_env_op+0x44>)
	temp[0] = op_attack[fsm_env_op];
 8002284:	5c80      	ldrb	r0, [r0, r2]
 8002286:	f365 0307 	bfi	r3, r5, #0, #8
 800228a:	5c89      	ldrb	r1, [r1, r2]
 800228c:	f364 230f 	bfi	r3, r4, #8, #8
 8002290:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <enter_menu_env_op+0x48>)
 8002292:	f360 4317 	bfi	r3, r0, #16, #8
 8002296:	f361 631f 	bfi	r3, r1, #24, #8
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bc30      	pop	{r4, r5}
	display_update_menu_env_op();
 800229e:	f7ff bf9d 	b.w	80021dc <display_update_menu_env_op>
 80022a2:	bf00      	nop
 80022a4:	20000bf9 	.word	0x20000bf9
 80022a8:	20000a90 	.word	0x20000a90
 80022ac:	20000abc 	.word	0x20000abc
 80022b0:	20000a84 	.word	0x20000a84
 80022b4:	20000a8c 	.word	0x20000a8c
 80022b8:	20000bf4 	.word	0x20000bf4

080022bc <inc_set_env>:
void inc_set_env() {
 80022bc:	b410      	push	{r4}
	switch (fsm_op) {
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <inc_set_env+0xe0>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d818      	bhi.n	80022f8 <inc_set_env+0x3c>
 80022c6:	e8df f003 	tbb	[pc, r3]
 80022ca:	4102      	.short	0x4102
 80022cc:	1a32      	.short	0x1a32
		op_attack[fsm_env_op] += inc_dec;
 80022ce:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <inc_set_env+0xe4>)
 80022d0:	4834      	ldr	r0, [pc, #208]	; (80023a4 <inc_set_env+0xe8>)
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	4934      	ldr	r1, [pc, #208]	; (80023a8 <inc_set_env+0xec>)
 80022d6:	5c83      	ldrb	r3, [r0, r2]
 80022d8:	7809      	ldrb	r1, [r1, #0]
 80022da:	440b      	add	r3, r1
 80022dc:	b2db      	uxtb	r3, r3
		if (op_attack[fsm_env_op] > ENV_MAX_RATE) {
 80022de:	2b80      	cmp	r3, #128	; 0x80
 80022e0:	d84c      	bhi.n	800237c <inc_set_env+0xc0>
 80022e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022e6:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 80022ea:	b2a4      	uxth	r4, r4
		op_attack[fsm_env_op] += inc_dec;
 80022ec:	5483      	strb	r3, [r0, r2]
 80022ee:	fbb1 f3f4 	udiv	r3, r1, r4
		op_attack_inc[fsm_env_op] = calculate_env_inc(op_attack[fsm_env_op]);
 80022f2:	492e      	ldr	r1, [pc, #184]	; (80023ac <inc_set_env+0xf0>)
 80022f4:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
 80022f8:	bc10      	pop	{r4}
	display_update_menu_env_op();
 80022fa:	f7ff bf6f 	b.w	80021dc <display_update_menu_env_op>
		op_release[fsm_env_op] += inc_dec;
 80022fe:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <inc_set_env+0xe4>)
 8002300:	482b      	ldr	r0, [pc, #172]	; (80023b0 <inc_set_env+0xf4>)
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	4928      	ldr	r1, [pc, #160]	; (80023a8 <inc_set_env+0xec>)
 8002306:	5c83      	ldrb	r3, [r0, r2]
 8002308:	7809      	ldrb	r1, [r1, #0]
 800230a:	440b      	add	r3, r1
 800230c:	b2db      	uxtb	r3, r3
		if (op_release[fsm_env_op] > ENV_MAX_RATE) {
 800230e:	2b80      	cmp	r3, #128	; 0x80
 8002310:	d83e      	bhi.n	8002390 <inc_set_env+0xd4>
 8002312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002316:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 800231a:	b2a4      	uxth	r4, r4
		op_release[fsm_env_op] += inc_dec;
 800231c:	5483      	strb	r3, [r0, r2]
 800231e:	fbb1 f3f4 	udiv	r3, r1, r4
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 8002322:	4924      	ldr	r1, [pc, #144]	; (80023b4 <inc_set_env+0xf8>)
}
 8002324:	bc10      	pop	{r4}
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 8002326:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 800232a:	f7ff bf57 	b.w	80021dc <display_update_menu_env_op>
		op_sustain[fsm_env_op] += inc_dec;
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <inc_set_env+0xe4>)
 8002330:	4921      	ldr	r1, [pc, #132]	; (80023b8 <inc_set_env+0xfc>)
 8002332:	781a      	ldrb	r2, [r3, #0]
 8002334:	481c      	ldr	r0, [pc, #112]	; (80023a8 <inc_set_env+0xec>)
 8002336:	5c8b      	ldrb	r3, [r1, r2]
 8002338:	7800      	ldrb	r0, [r0, #0]
 800233a:	4403      	add	r3, r0
 800233c:	b2db      	uxtb	r3, r3
		if (op_sustain[fsm_env_op] > MAX_VOLUME) {
 800233e:	2b80      	cmp	r3, #128	; 0x80
			op_sustain[fsm_env_op] = MAX_VOLUME;
 8002340:	bf88      	it	hi
 8002342:	2380      	movhi	r3, #128	; 0x80
 8002344:	548b      	strb	r3, [r1, r2]
}
 8002346:	bc10      	pop	{r4}
	display_update_menu_env_op();
 8002348:	f7ff bf48 	b.w	80021dc <display_update_menu_env_op>
		op_decay[fsm_env_op] += inc_dec;
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <inc_set_env+0xe4>)
 800234e:	481b      	ldr	r0, [pc, #108]	; (80023bc <inc_set_env+0x100>)
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	4915      	ldr	r1, [pc, #84]	; (80023a8 <inc_set_env+0xec>)
 8002354:	5c83      	ldrb	r3, [r0, r2]
 8002356:	7809      	ldrb	r1, [r1, #0]
 8002358:	440b      	add	r3, r1
 800235a:	b2db      	uxtb	r3, r3
		if (op_decay[fsm_env_op] > ENV_MAX_RATE) {
 800235c:	2b80      	cmp	r3, #128	; 0x80
 800235e:	d812      	bhi.n	8002386 <inc_set_env+0xca>
 8002360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002364:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 8002368:	b2a4      	uxth	r4, r4
		op_decay[fsm_env_op] += inc_dec;
 800236a:	5483      	strb	r3, [r0, r2]
 800236c:	fbb1 f3f4 	udiv	r3, r1, r4
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 8002370:	4913      	ldr	r1, [pc, #76]	; (80023c0 <inc_set_env+0x104>)
}
 8002372:	bc10      	pop	{r4}
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 8002374:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 8002378:	f7ff bf30 	b.w	80021dc <display_update_menu_env_op>
			op_attack[fsm_env_op] = ENV_MAX_RATE;
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002382:	5481      	strb	r1, [r0, r2]
 8002384:	e7b5      	b.n	80022f2 <inc_set_env+0x36>
			op_decay[fsm_env_op] = ENV_MAX_RATE;
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800238c:	5481      	strb	r1, [r0, r2]
 800238e:	e7ef      	b.n	8002370 <inc_set_env+0xb4>
			op_release[fsm_env_op] = ENV_MAX_RATE;
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002396:	5481      	strb	r1, [r0, r2]
 8002398:	e7c3      	b.n	8002322 <inc_set_env+0x66>
 800239a:	bf00      	nop
 800239c:	20000ac8 	.word	0x20000ac8
 80023a0:	20000bf9 	.word	0x20000bf9
 80023a4:	20000a90 	.word	0x20000a90
 80023a8:	20000b20 	.word	0x20000b20
 80023ac:	20000ab0 	.word	0x20000ab0
 80023b0:	20000a8c 	.word	0x20000a8c
 80023b4:	20000a94 	.word	0x20000a94
 80023b8:	20000a84 	.word	0x20000a84
 80023bc:	20000abc 	.word	0x20000abc
 80023c0:	20000aa4 	.word	0x20000aa4

080023c4 <dec_set_env>:
void dec_set_env() {
 80023c4:	b410      	push	{r4}
	switch (fsm_op) {
 80023c6:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <dec_set_env+0xe4>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d819      	bhi.n	8002402 <dec_set_env+0x3e>
 80023ce:	e8df f003 	tbb	[pc, r3]
 80023d2:	4302      	.short	0x4302
 80023d4:	1b34      	.short	0x1b34
		op_attack[fsm_env_op] -= inc_dec;
 80023d6:	4b35      	ldr	r3, [pc, #212]	; (80024ac <dec_set_env+0xe8>)
 80023d8:	4835      	ldr	r0, [pc, #212]	; (80024b0 <dec_set_env+0xec>)
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	4935      	ldr	r1, [pc, #212]	; (80024b4 <dec_set_env+0xf0>)
 80023de:	5c83      	ldrb	r3, [r0, r2]
 80023e0:	7809      	ldrb	r1, [r1, #0]
 80023e2:	1a5b      	subs	r3, r3, r1
 80023e4:	b2db      	uxtb	r3, r3
		if (op_attack[fsm_env_op] > ENV_MAX_RATE || op_attack[fsm_env_op] == 0x00) {
 80023e6:	1e59      	subs	r1, r3, #1
 80023e8:	0609      	lsls	r1, r1, #24
 80023ea:	d453      	bmi.n	8002494 <dec_set_env+0xd0>
 80023ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f0:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 80023f4:	b2a4      	uxth	r4, r4
		op_attack[fsm_env_op] -= inc_dec;
 80023f6:	5483      	strb	r3, [r0, r2]
 80023f8:	fbb1 f3f4 	udiv	r3, r1, r4
		op_attack_inc[fsm_env_op] = calculate_env_inc(op_attack[fsm_env_op]);
 80023fc:	492e      	ldr	r1, [pc, #184]	; (80024b8 <dec_set_env+0xf4>)
 80023fe:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
 8002402:	bc10      	pop	{r4}
	display_update_menu_env_op();
 8002404:	f7ff beea 	b.w	80021dc <display_update_menu_env_op>
		op_release[fsm_env_op] -= inc_dec;
 8002408:	4b28      	ldr	r3, [pc, #160]	; (80024ac <dec_set_env+0xe8>)
 800240a:	482c      	ldr	r0, [pc, #176]	; (80024bc <dec_set_env+0xf8>)
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	4929      	ldr	r1, [pc, #164]	; (80024b4 <dec_set_env+0xf0>)
 8002410:	5c83      	ldrb	r3, [r0, r2]
 8002412:	7809      	ldrb	r1, [r1, #0]
 8002414:	1a5b      	subs	r3, r3, r1
 8002416:	b2db      	uxtb	r3, r3
		if (op_release[fsm_env_op] > ENV_MAX_RATE || op_release[fsm_env_op] == 0x00) {
 8002418:	1e59      	subs	r1, r3, #1
 800241a:	0609      	lsls	r1, r1, #24
 800241c:	d435      	bmi.n	800248a <dec_set_env+0xc6>
 800241e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002422:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 8002426:	b2a4      	uxth	r4, r4
		op_release[fsm_env_op] -= inc_dec;
 8002428:	5483      	strb	r3, [r0, r2]
 800242a:	fbb1 f3f4 	udiv	r3, r1, r4
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 800242e:	4924      	ldr	r1, [pc, #144]	; (80024c0 <dec_set_env+0xfc>)
}
 8002430:	bc10      	pop	{r4}
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 8002432:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 8002436:	f7ff bed1 	b.w	80021dc <display_update_menu_env_op>
		op_sustain[fsm_env_op] -= inc_dec;
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <dec_set_env+0xe8>)
 800243c:	4921      	ldr	r1, [pc, #132]	; (80024c4 <dec_set_env+0x100>)
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	481c      	ldr	r0, [pc, #112]	; (80024b4 <dec_set_env+0xf0>)
 8002442:	5c8b      	ldrb	r3, [r1, r2]
 8002444:	7800      	ldrb	r0, [r0, #0]
 8002446:	1a1b      	subs	r3, r3, r0
 8002448:	b2db      	uxtb	r3, r3
		if (op_sustain[fsm_env_op] > MAX_VOLUME) {
 800244a:	2b80      	cmp	r3, #128	; 0x80
			op_sustain[fsm_env_op] = 0x00;
 800244c:	bf88      	it	hi
 800244e:	2300      	movhi	r3, #0
 8002450:	548b      	strb	r3, [r1, r2]
}
 8002452:	bc10      	pop	{r4}
	display_update_menu_env_op();
 8002454:	f7ff bec2 	b.w	80021dc <display_update_menu_env_op>
		op_decay[fsm_env_op] -= inc_dec;
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <dec_set_env+0xe8>)
 800245a:	481b      	ldr	r0, [pc, #108]	; (80024c8 <dec_set_env+0x104>)
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	4915      	ldr	r1, [pc, #84]	; (80024b4 <dec_set_env+0xf0>)
 8002460:	5c83      	ldrb	r3, [r0, r2]
 8002462:	7809      	ldrb	r1, [r1, #0]
 8002464:	1a5b      	subs	r3, r3, r1
 8002466:	b2db      	uxtb	r3, r3
		if (op_decay[fsm_env_op] > ENV_MAX_RATE || op_decay[fsm_env_op] == 0x00) {
 8002468:	1e59      	subs	r1, r3, #1
 800246a:	060c      	lsls	r4, r1, #24
 800246c:	d417      	bmi.n	800249e <dec_set_env+0xda>
 800246e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002472:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 8002476:	b2a4      	uxth	r4, r4
		op_decay[fsm_env_op] -= inc_dec;
 8002478:	5483      	strb	r3, [r0, r2]
 800247a:	fbb1 f3f4 	udiv	r3, r1, r4
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 800247e:	4913      	ldr	r1, [pc, #76]	; (80024cc <dec_set_env+0x108>)
}
 8002480:	bc10      	pop	{r4}
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 8002482:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 8002486:	f7ff bea9 	b.w	80021dc <display_update_menu_env_op>
			op_release[fsm_env_op] = 0x01;
 800248a:	2101      	movs	r1, #1
 800248c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002490:	5481      	strb	r1, [r0, r2]
 8002492:	e7cc      	b.n	800242e <dec_set_env+0x6a>
			op_attack[fsm_env_op] = 0x01;
 8002494:	2101      	movs	r1, #1
 8002496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800249a:	5481      	strb	r1, [r0, r2]
 800249c:	e7ae      	b.n	80023fc <dec_set_env+0x38>
			op_decay[fsm_env_op] = 0x01;
 800249e:	2101      	movs	r1, #1
 80024a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a4:	5481      	strb	r1, [r0, r2]
 80024a6:	e7ea      	b.n	800247e <dec_set_env+0xba>
 80024a8:	20000ac8 	.word	0x20000ac8
 80024ac:	20000bf9 	.word	0x20000bf9
 80024b0:	20000a90 	.word	0x20000a90
 80024b4:	20000b20 	.word	0x20000b20
 80024b8:	20000ab0 	.word	0x20000ab0
 80024bc:	20000a8c 	.word	0x20000a8c
 80024c0:	20000a94 	.word	0x20000a94
 80024c4:	20000a84 	.word	0x20000a84
 80024c8:	20000abc 	.word	0x20000abc
 80024cc:	20000aa4 	.word	0x20000aa4

080024d0 <temp_set_env>:
 80024d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
void temp_set_env() {
 80024d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	temp2 = temp[0];
 80024d8:	4823      	ldr	r0, [pc, #140]	; (8002568 <temp_set_env+0x98>)
	temp[0] = op_attack[fsm_env_op];
 80024da:	2400      	movs	r4, #0
	temp2 = temp[0];
 80024dc:	f890 c000 	ldrb.w	ip, [r0]
	temp2 = temp[1];
 80024e0:	7847      	ldrb	r7, [r0, #1]
 80024e2:	f1cc 0581 	rsb	r5, ip, #129	; 0x81
 80024e6:	b2ad      	uxth	r5, r5
 80024e8:	fbb2 f5f5 	udiv	r5, r2, r5
	temp2 = temp[3];
 80024ec:	78c6      	ldrb	r6, [r0, #3]
 80024ee:	f1c7 0181 	rsb	r1, r7, #129	; 0x81
 80024f2:	f1c6 0381 	rsb	r3, r6, #129	; 0x81
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b289      	uxth	r1, r1
 80024fa:	fbb2 f1f1 	udiv	r1, r2, r1
 80024fe:	fbb2 f2f3 	udiv	r2, r2, r3
	temp[0] = op_attack[fsm_env_op];
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <temp_set_env+0x9c>)
 8002504:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800257c <temp_set_env+0xac>
 8002508:	781b      	ldrb	r3, [r3, #0]
	temp[1] = op_decay[fsm_env_op];
 800250a:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002580 <temp_set_env+0xb0>
	op_attack_inc[fsm_env_op] = calculate_env_inc(op_attack[fsm_env_op]);
 800250e:	f8df a074 	ldr.w	sl, [pc, #116]	; 8002584 <temp_set_env+0xb4>
	temp[0] = op_attack[fsm_env_op];
 8002512:	f818 9003 	ldrb.w	r9, [r8, r3]
 8002516:	f82a 5013 	strh.w	r5, [sl, r3, lsl #1]
	op_attack[fsm_env_op] = temp2;
 800251a:	f808 c003 	strb.w	ip, [r8, r3]
	temp[2] = op_sustain[fsm_env_op];
 800251e:	4d14      	ldr	r5, [pc, #80]	; (8002570 <temp_set_env+0xa0>)
	temp[1] = op_decay[fsm_env_op];
 8002520:	f81e 8003 	ldrb.w	r8, [lr, r3]
	temp[3] = op_release[fsm_env_op];
 8002524:	f8df c060 	ldr.w	ip, [pc, #96]	; 8002588 <temp_set_env+0xb8>
	temp[0] = op_attack[fsm_env_op];
 8002528:	f369 0407 	bfi	r4, r9, #0, #8
 800252c:	f368 240f 	bfi	r4, r8, #8, #8
	temp[2] = op_sustain[fsm_env_op];
 8002530:	f815 8003 	ldrb.w	r8, [r5, r3]
	op_decay[fsm_env_op] = temp2;
 8002534:	f80e 7003 	strb.w	r7, [lr, r3]
	temp[0] = op_attack[fsm_env_op];
 8002538:	f81c e003 	ldrb.w	lr, [ip, r3]
 800253c:	f368 4417 	bfi	r4, r8, #16, #8
	op_release[fsm_env_op] = temp2;
 8002540:	f80c 6003 	strb.w	r6, [ip, r3]
	op_sustain[fsm_env_op] = temp2;
 8002544:	f890 c002 	ldrb.w	ip, [r0, #2]
	op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 8002548:	4f0a      	ldr	r7, [pc, #40]	; (8002574 <temp_set_env+0xa4>)
	op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 800254a:	4e0b      	ldr	r6, [pc, #44]	; (8002578 <temp_set_env+0xa8>)
	temp[0] = op_attack[fsm_env_op];
 800254c:	f36e 641f 	bfi	r4, lr, #24, #8
 8002550:	6004      	str	r4, [r0, #0]
	op_sustain[fsm_env_op] = temp2;
 8002552:	f805 c003 	strb.w	ip, [r5, r3]
 8002556:	f827 1013 	strh.w	r1, [r7, r3, lsl #1]
 800255a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
}
 800255e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	display_update_menu_env_op();
 8002562:	f7ff be3b 	b.w	80021dc <display_update_menu_env_op>
 8002566:	bf00      	nop
 8002568:	20000bf4 	.word	0x20000bf4
 800256c:	20000bf9 	.word	0x20000bf9
 8002570:	20000a84 	.word	0x20000a84
 8002574:	20000aa4 	.word	0x20000aa4
 8002578:	20000a94 	.word	0x20000a94
 800257c:	20000a90 	.word	0x20000a90
 8002580:	20000abc 	.word	0x20000abc
 8002584:	20000ab0 	.word	0x20000ab0
 8002588:	20000a8c 	.word	0x20000a8c

0800258c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800258c:	480c      	ldr	r0, [pc, #48]	; (80025c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800258e:	490d      	ldr	r1, [pc, #52]	; (80025c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025a4:	4c0a      	ldr	r4, [pc, #40]	; (80025d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025b2:	f7ff f8c7 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025b6:	f002 fc95 	bl	8004ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ba:	f7fd fe29 	bl	8000210 <main>
  bx lr
 80025be:	4770      	bx	lr
  ldr r0, =_sdata
 80025c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c4:	200008a8 	.word	0x200008a8
  ldr r2, =_sidata
 80025c8:	08006570 	.word	0x08006570
  ldr r2, =_sbss
 80025cc:	200008a8 	.word	0x200008a8
  ldr r4, =_ebss
 80025d0:	200014e4 	.word	0x200014e4

080025d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <ADC1_2_IRQHandler>
	...

080025d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025de:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <HAL_InitTick+0x3c>)
{
 80025e0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e2:	7811      	ldrb	r1, [r2, #0]
 80025e4:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <HAL_InitTick+0x40>)
 80025e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	fbb2 f0f3 	udiv	r0, r2, r3
 80025f0:	f000 f8a4 	bl	800273c <HAL_SYSTICK_Config>
 80025f4:	b908      	cbnz	r0, 80025fa <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	2d0f      	cmp	r5, #15
 80025f8:	d901      	bls.n	80025fe <HAL_InitTick+0x26>
    return HAL_ERROR;
 80025fa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80025fc:	bd38      	pop	{r3, r4, r5, pc}
 80025fe:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002600:	4602      	mov	r2, r0
 8002602:	4629      	mov	r1, r5
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f000 f852 	bl	80026b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_InitTick+0x44>)
 800260e:	4620      	mov	r0, r4
 8002610:	601d      	str	r5, [r3, #0]
}
 8002612:	bd38      	pop	{r3, r4, r5, pc}
 8002614:	200008a0 	.word	0x200008a0
 8002618:	20000000 	.word	0x20000000
 800261c:	200008a4 	.word	0x200008a4

08002620 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x20>)
{
 8002622:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002624:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002626:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002628:	f043 0310 	orr.w	r3, r3, #16
 800262c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262e:	f000 f82d 	bl	800268c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002632:	2000      	movs	r0, #0
 8002634:	f7ff ffd0 	bl	80025d8 <HAL_InitTick>
  HAL_MspInit();
 8002638:	f7fe f846 	bl	80006c8 <HAL_MspInit>
}
 800263c:	2000      	movs	r0, #0
 800263e:	bd08      	pop	{r3, pc}
 8002640:	40022000 	.word	0x40022000

08002644 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002644:	4a03      	ldr	r2, [pc, #12]	; (8002654 <HAL_IncTick+0x10>)
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <HAL_IncTick+0x14>)
 8002648:	6811      	ldr	r1, [r2, #0]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	440b      	add	r3, r1
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200014e0 	.word	0x200014e0
 8002658:	200008a0 	.word	0x200008a0

0800265c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800265c:	4b01      	ldr	r3, [pc, #4]	; (8002664 <HAL_GetTick+0x8>)
 800265e:	6818      	ldr	r0, [r3, #0]
}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	200014e0 	.word	0x200014e0

08002668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800266c:	f7ff fff6 	bl	800265c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002670:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002672:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002674:	d002      	beq.n	800267c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_Delay+0x20>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267c:	f7ff ffee 	bl	800265c <HAL_GetTick>
 8002680:	1b40      	subs	r0, r0, r5
 8002682:	42a0      	cmp	r0, r4
 8002684:	d3fa      	bcc.n	800267c <HAL_Delay+0x14>
  {
  }
}
 8002686:	bd38      	pop	{r3, r4, r5, pc}
 8002688:	200008a0 	.word	0x200008a0

0800268c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4a06      	ldr	r2, [pc, #24]	; (80026ac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002692:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800269e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80026a6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b2:	b430      	push	{r4, r5}
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ba:	f1c3 0507 	rsb	r5, r3, #7
 80026be:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	bf28      	it	cs
 80026c6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c8:	2c06      	cmp	r4, #6
 80026ca:	d919      	bls.n	8002700 <HAL_NVIC_SetPriority+0x50>
 80026cc:	f04f 34ff 	mov.w	r4, #4294967295
 80026d0:	3b03      	subs	r3, #3
 80026d2:	409c      	lsls	r4, r3
 80026d4:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	f04f 34ff 	mov.w	r4, #4294967295
 80026dc:	40ac      	lsls	r4, r5
 80026de:	ea21 0104 	bic.w	r1, r1, r4
 80026e2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80026e4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80026ea:	db0c      	blt.n	8002706 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	0109      	lsls	r1, r1, #4
 80026ee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80026f2:	b2c9      	uxtb	r1, r1
 80026f4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80026f8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026fc:	bc30      	pop	{r4, r5}
 80026fe:	4770      	bx	lr
 8002700:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	4613      	mov	r3, r2
 8002704:	e7e8      	b.n	80026d8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_NVIC_SetPriority+0x6c>)
 8002708:	f000 000f 	and.w	r0, r0, #15
 800270c:	0109      	lsls	r1, r1, #4
 800270e:	b2c9      	uxtb	r1, r1
 8002710:	4403      	add	r3, r0
 8002712:	7619      	strb	r1, [r3, #24]
 8002714:	bc30      	pop	{r4, r5}
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00
 800271c:	e000ecfc 	.word	0xe000ecfc

08002720 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002720:	2800      	cmp	r0, #0
 8002722:	db07      	blt.n	8002734 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002724:	2301      	movs	r3, #1
 8002726:	f000 011f 	and.w	r1, r0, #31
 800272a:	4a03      	ldr	r2, [pc, #12]	; (8002738 <HAL_NVIC_EnableIRQ+0x18>)
 800272c:	408b      	lsls	r3, r1
 800272e:	0940      	lsrs	r0, r0, #5
 8002730:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100

0800273c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	3801      	subs	r0, #1
 800273e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002742:	d20d      	bcs.n	8002760 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002744:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274a:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274e:	4c06      	ldr	r4, [pc, #24]	; (8002768 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002750:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002756:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8002758:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275c:	6019      	str	r1, [r3, #0]
 800275e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002760:	2001      	movs	r0, #1
 8002762:	4770      	bx	lr
 8002764:	e000e010 	.word	0xe000e010
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800276c:	b340      	cbz	r0, 80027c0 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800276e:	4603      	mov	r3, r0
{
 8002770:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002772:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002776:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277a:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 800277c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277e:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002780:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002784:	490f      	ldr	r1, [pc, #60]	; (80027c4 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002788:	4f0f      	ldr	r7, [pc, #60]	; (80027c8 <HAL_DMA_Init+0x5c>)
 800278a:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278c:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002790:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002794:	4332      	orrs	r2, r6
 8002796:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8002798:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279a:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 800279c:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800279e:	0909      	lsrs	r1, r1, #4
 80027a0:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027a2:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a6:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027a8:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ac:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027ae:	4907      	ldr	r1, [pc, #28]	; (80027cc <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 80027b0:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 80027b2:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 80027b4:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 80027b6:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 80027b8:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ba:	639c      	str	r4, [r3, #56]	; 0x38
}
 80027bc:	bcf0      	pop	{r4, r5, r6, r7}
 80027be:	4770      	bx	lr
    return HAL_ERROR;
 80027c0:	2001      	movs	r0, #1
}
 80027c2:	4770      	bx	lr
 80027c4:	bffdfff8 	.word	0xbffdfff8
 80027c8:	cccccccd 	.word	0xcccccccd
 80027cc:	40020000 	.word	0x40020000

080027d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d0:	b4f0      	push	{r4, r5, r6, r7}
 80027d2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027d4:	f890 0020 	ldrb.w	r0, [r0, #32]
 80027d8:	2801      	cmp	r0, #1
 80027da:	d038      	beq.n	800284e <HAL_DMA_Start_IT+0x7e>
 80027dc:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027de:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 80027e2:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80027e6:	42a8      	cmp	r0, r5
 80027e8:	d005      	beq.n	80027f6 <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027ea:	2300      	movs	r3, #0
 80027ec:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027f0:	2002      	movs	r0, #2
  }    
  return status;
}
 80027f2:	bcf0      	pop	{r4, r5, r6, r7}
 80027f4:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80027f6:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f8:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 80027fa:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fc:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002800:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002802:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002804:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002806:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 8002808:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800280c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800280e:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002810:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002812:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002814:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8002816:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002818:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800281a:	bf0b      	itete	eq
 800281c:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800281e:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002820:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002822:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002824:	b153      	cbz	r3, 800283c <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	f043 030e 	orr.w	r3, r3, #14
 800282c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800282e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002830:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	602b      	str	r3, [r5, #0]
}
 8002838:	bcf0      	pop	{r4, r5, r6, r7}
 800283a:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800283c:	682b      	ldr	r3, [r5, #0]
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	f043 030a 	orr.w	r3, r3, #10
 800284a:	602b      	str	r3, [r5, #0]
 800284c:	e7ef      	b.n	800282e <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 800284e:	2002      	movs	r0, #2
}
 8002850:	bcf0      	pop	{r4, r5, r6, r7}
 8002852:	4770      	bx	lr

08002854 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002854:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8002858:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800285a:	2a02      	cmp	r2, #2
 800285c:	d006      	beq.n	800286c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285e:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8002860:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002862:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002864:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8002868:	2001      	movs	r0, #1
}
 800286a:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800286c:	2101      	movs	r1, #1
{
 800286e:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8002870:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002874:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002876:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002878:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800287a:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800287c:	f024 040e 	bic.w	r4, r4, #14
 8002880:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002882:	6814      	ldr	r4, [r2, #0]
  return status; 
 8002884:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002886:	f024 0401 	bic.w	r4, r4, #1
 800288a:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800288c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800288e:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8002890:	841d      	strh	r5, [r3, #32]
}
 8002892:	bc70      	pop	{r4, r5, r6}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop

08002898 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002898:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 800289c:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800289e:	2a02      	cmp	r2, #2
 80028a0:	d003      	beq.n	80028aa <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a2:	2204      	movs	r2, #4
    status = HAL_ERROR;
 80028a4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80028a8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028aa:	6802      	ldr	r2, [r0, #0]
{  
 80028ac:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ae:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028b0:	481b      	ldr	r0, [pc, #108]	; (8002920 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b2:	f021 010e 	bic.w	r1, r1, #14
 80028b6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80028b8:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028ba:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 80028bc:	f021 0101 	bic.w	r1, r1, #1
 80028c0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028c2:	d021      	beq.n	8002908 <HAL_DMA_Abort_IT+0x70>
 80028c4:	4917      	ldr	r1, [pc, #92]	; (8002924 <HAL_DMA_Abort_IT+0x8c>)
 80028c6:	428a      	cmp	r2, r1
 80028c8:	d01a      	beq.n	8002900 <HAL_DMA_Abort_IT+0x68>
 80028ca:	3114      	adds	r1, #20
 80028cc:	428a      	cmp	r2, r1
 80028ce:	d01d      	beq.n	800290c <HAL_DMA_Abort_IT+0x74>
 80028d0:	3114      	adds	r1, #20
 80028d2:	428a      	cmp	r2, r1
 80028d4:	d01d      	beq.n	8002912 <HAL_DMA_Abort_IT+0x7a>
 80028d6:	3114      	adds	r1, #20
 80028d8:	428a      	cmp	r2, r1
 80028da:	d01d      	beq.n	8002918 <HAL_DMA_Abort_IT+0x80>
 80028dc:	3114      	adds	r1, #20
 80028de:	428a      	cmp	r2, r1
 80028e0:	bf0c      	ite	eq
 80028e2:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80028e6:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 80028ea:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028ee:	4c0e      	ldr	r4, [pc, #56]	; (8002928 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 80028f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028f2:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80028f4:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 80028f6:	b129      	cbz	r1, 8002904 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 80028f8:	4618      	mov	r0, r3
 80028fa:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	2000      	movs	r0, #0
}
 80028fe:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002900:	2210      	movs	r2, #16
 8002902:	e7f2      	b.n	80028ea <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8002904:	4608      	mov	r0, r1
}
 8002906:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002908:	2201      	movs	r2, #1
 800290a:	e7ee      	b.n	80028ea <HAL_DMA_Abort_IT+0x52>
 800290c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002910:	e7eb      	b.n	80028ea <HAL_DMA_Abort_IT+0x52>
 8002912:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002916:	e7e8      	b.n	80028ea <HAL_DMA_Abort_IT+0x52>
 8002918:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800291c:	e7e5      	b.n	80028ea <HAL_DMA_Abort_IT+0x52>
 800291e:	bf00      	nop
 8002920:	40020008 	.word	0x40020008
 8002924:	4002001c 	.word	0x4002001c
 8002928:	40020000 	.word	0x40020000

0800292c <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800292c:	2204      	movs	r2, #4
{
 800292e:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002930:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002934:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002936:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002938:	408a      	lsls	r2, r1
 800293a:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 800293c:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800293e:	d01f      	beq.n	8002980 <HAL_DMA_IRQHandler+0x54>
 8002940:	076a      	lsls	r2, r5, #29
 8002942:	d51d      	bpl.n	8002980 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	0691      	lsls	r1, r2, #26
 8002948:	d403      	bmi.n	8002952 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f022 0204 	bic.w	r2, r2, #4
 8002950:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002952:	4a3e      	ldr	r2, [pc, #248]	; (8002a4c <HAL_DMA_IRQHandler+0x120>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d05a      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xe2>
 8002958:	3214      	adds	r2, #20
 800295a:	4293      	cmp	r3, r2
 800295c:	d05f      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xf2>
 800295e:	3214      	adds	r2, #20
 8002960:	4293      	cmp	r3, r2
 8002962:	d066      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x106>
 8002964:	3214      	adds	r2, #20
 8002966:	4293      	cmp	r3, r2
 8002968:	d069      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x112>
 800296a:	3214      	adds	r2, #20
 800296c:	4293      	cmp	r3, r2
 800296e:	d05b      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xfc>
 8002970:	3214      	adds	r2, #20
 8002972:	4293      	cmp	r3, r2
 8002974:	bf0c      	ite	eq
 8002976:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800297a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800297e:	e047      	b.n	8002a10 <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002980:	2202      	movs	r2, #2
 8002982:	408a      	lsls	r2, r1
 8002984:	4222      	tst	r2, r4
 8002986:	d022      	beq.n	80029ce <HAL_DMA_IRQHandler+0xa2>
 8002988:	07aa      	lsls	r2, r5, #30
 800298a:	d520      	bpl.n	80029ce <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	0691      	lsls	r1, r2, #26
 8002990:	d406      	bmi.n	80029a0 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8002992:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	f022 020a 	bic.w	r2, r2, #10
 800299a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800299c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029a0:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <HAL_DMA_IRQHandler+0x120>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d029      	beq.n	80029fa <HAL_DMA_IRQHandler+0xce>
 80029a6:	3214      	adds	r2, #20
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d040      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x102>
 80029ac:	3214      	adds	r2, #20
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d042      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x10c>
 80029b2:	3214      	adds	r2, #20
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d034      	beq.n	8002a22 <HAL_DMA_IRQHandler+0xf6>
 80029b8:	3214      	adds	r2, #20
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d042      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x118>
 80029be:	3214      	adds	r2, #20
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bf0c      	ite	eq
 80029c4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80029c8:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80029cc:	e016      	b.n	80029fc <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029ce:	2208      	movs	r2, #8
 80029d0:	408a      	lsls	r2, r1
 80029d2:	4222      	tst	r2, r4
 80029d4:	d019      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xde>
 80029d6:	072a      	lsls	r2, r5, #28
 80029d8:	d517      	bpl.n	8002a0a <HAL_DMA_IRQHandler+0xde>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029da:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 80029dc:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e0:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029e2:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e6:	f022 020e 	bic.w	r2, r2, #14
 80029ea:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 80029ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ee:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029f0:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80029f2:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80029f4:	b14b      	cbz	r3, 8002a0a <HAL_DMA_IRQHandler+0xde>
}
 80029f6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80029f8:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029fa:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80029fc:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029fe:	4c14      	ldr	r4, [pc, #80]	; (8002a50 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8002a00:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a02:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002a04:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002a08:	b93a      	cbnz	r2, 8002a1a <HAL_DMA_IRQHandler+0xee>
}
 8002a0a:	bc70      	pop	{r4, r5, r6}
 8002a0c:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a0e:	2304      	movs	r3, #4
 8002a10:	490f      	ldr	r1, [pc, #60]	; (8002a50 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8002a12:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a14:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002a16:	2a00      	cmp	r2, #0
 8002a18:	d0f7      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xde>
}
 8002a1a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002a1c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a1e:	2340      	movs	r3, #64	; 0x40
 8002a20:	e7f6      	b.n	8002a10 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a26:	e7e9      	b.n	80029fc <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a2c:	e7f0      	b.n	8002a10 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e7e4      	b.n	80029fc <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a36:	e7eb      	b.n	8002a10 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a3c:	e7de      	b.n	80029fc <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a42:	e7e5      	b.n	8002a10 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a48:	e7d8      	b.n	80029fc <HAL_DMA_IRQHandler+0xd0>
 8002a4a:	bf00      	nop
 8002a4c:	40020008 	.word	0x40020008
 8002a50:	40020000 	.word	0x40020000

08002a54 <HAL_DMA_GetState>:
}
 8002a54:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a60:	680c      	ldr	r4, [r1, #0]
{
 8002a62:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a64:	2c00      	cmp	r4, #0
 8002a66:	f000 809e 	beq.w	8002ba6 <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 8002a6a:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a6c:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8002c64 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 8002a70:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a72:	4f77      	ldr	r7, [pc, #476]	; (8002c50 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 8002a74:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8002c68 <HAL_GPIO_Init+0x20c>
 8002a78:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8002c6c <HAL_GPIO_Init+0x210>
 8002a7c:	9000      	str	r0, [sp, #0]
 8002a7e:	e004      	b.n	8002a8a <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8002a80:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a82:	fa34 f203 	lsrs.w	r2, r4, r3
 8002a86:	f000 808e 	beq.w	8002ba6 <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 8002a8e:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8002a96:	d1f3      	bne.n	8002a80 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8002a98:	684c      	ldr	r4, [r1, #4]
 8002a9a:	2c12      	cmp	r4, #18
 8002a9c:	f200 8086 	bhi.w	8002bac <HAL_GPIO_Init+0x150>
 8002aa0:	2c12      	cmp	r4, #18
 8002aa2:	d80c      	bhi.n	8002abe <HAL_GPIO_Init+0x62>
 8002aa4:	e8df f004 	tbb	[pc, r4]
 8002aa8:	0abcbf8a 	.word	0x0abcbf8a
 8002aac:	0b0b0b0b 	.word	0x0b0b0b0b
 8002ab0:	0b0b0b0b 	.word	0x0b0b0b0b
 8002ab4:	0b0b0b0b 	.word	0x0b0b0b0b
 8002ab8:	b90b      	.short	0xb90b
 8002aba:	b6          	.byte	0xb6
 8002abb:	00          	.byte	0x00
 8002abc:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002abe:	2dff      	cmp	r5, #255	; 0xff
 8002ac0:	f200 8083 	bhi.w	8002bca <HAL_GPIO_Init+0x16e>
 8002ac4:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ac8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002acc:	240f      	movs	r4, #15
 8002ace:	f8d9 2000 	ldr.w	r2, [r9]
 8002ad2:	fa04 fb0a 	lsl.w	fp, r4, sl
 8002ad6:	ea22 020b 	bic.w	r2, r2, fp
 8002ada:	fa06 fa0a 	lsl.w	sl, r6, sl
 8002ade:	ea42 020a 	orr.w	r2, r2, sl
 8002ae2:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ae6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002aea:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8002aee:	f000 808f 	beq.w	8002c10 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002af2:	f8dc a018 	ldr.w	sl, [ip, #24]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	f04a 0a01 	orr.w	sl, sl, #1
 8002afe:	f8cc a018 	str.w	sl, [ip, #24]
 8002b02:	f8dc a018 	ldr.w	sl, [ip, #24]
 8002b06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002b0a:	f00a 0a01 	and.w	sl, sl, #1
 8002b0e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002b12:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b16:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b1a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b1e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002b22:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b26:	fa04 f40a 	lsl.w	r4, r4, sl
 8002b2a:	ea2b 0004 	bic.w	r0, fp, r4
 8002b2e:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b30:	9c00      	ldr	r4, [sp, #0]
 8002b32:	4848      	ldr	r0, [pc, #288]	; (8002c54 <HAL_GPIO_Init+0x1f8>)
 8002b34:	4284      	cmp	r4, r0
 8002b36:	d013      	beq.n	8002b60 <HAL_GPIO_Init+0x104>
 8002b38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002b3c:	4284      	cmp	r4, r0
 8002b3e:	d07d      	beq.n	8002c3c <HAL_GPIO_Init+0x1e0>
 8002b40:	4845      	ldr	r0, [pc, #276]	; (8002c58 <HAL_GPIO_Init+0x1fc>)
 8002b42:	4284      	cmp	r4, r0
 8002b44:	d071      	beq.n	8002c2a <HAL_GPIO_Init+0x1ce>
 8002b46:	4845      	ldr	r0, [pc, #276]	; (8002c5c <HAL_GPIO_Init+0x200>)
 8002b48:	4284      	cmp	r4, r0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	f04f 0b03 	moveq.w	fp, #3
 8002b50:	f04f 0b04 	movne.w	fp, #4
 8002b54:	9801      	ldr	r0, [sp, #4]
 8002b56:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002b5a:	ea40 000a 	orr.w	r0, r0, sl
 8002b5e:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b60:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b62:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8002b66:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	bf14      	ite	ne
 8002b6c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b6e:	43aa      	biceq	r2, r5
 8002b70:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002b72:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b74:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002b78:	bf14      	ite	ne
 8002b7a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b7c:	43aa      	biceq	r2, r5
 8002b7e:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b80:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b82:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b86:	bf14      	ite	ne
 8002b88:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b8a:	43aa      	biceq	r2, r5
 8002b8c:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b8e:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b92:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b94:	d039      	beq.n	8002c0a <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b96:	4315      	orrs	r5, r2
 8002b98:	60fd      	str	r5, [r7, #12]
 8002b9a:	680c      	ldr	r4, [r1, #0]
	position++;
 8002b9c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9e:	fa34 f203 	lsrs.w	r2, r4, r3
 8002ba2:	f47f af72 	bne.w	8002a8a <HAL_GPIO_Init+0x2e>
  }
}
 8002ba6:	b005      	add	sp, #20
 8002ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8002bac:	4544      	cmp	r4, r8
 8002bae:	d005      	beq.n	8002bbc <HAL_GPIO_Init+0x160>
 8002bb0:	d913      	bls.n	8002bda <HAL_GPIO_Init+0x17e>
 8002bb2:	4574      	cmp	r4, lr
 8002bb4:	d002      	beq.n	8002bbc <HAL_GPIO_Init+0x160>
 8002bb6:	482a      	ldr	r0, [pc, #168]	; (8002c60 <HAL_GPIO_Init+0x204>)
 8002bb8:	4284      	cmp	r4, r0
 8002bba:	d180      	bne.n	8002abe <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bbc:	688c      	ldr	r4, [r1, #8]
 8002bbe:	b9e4      	cbnz	r4, 8002bfa <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc0:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bc2:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc6:	f67f af7d 	bls.w	8002ac4 <HAL_GPIO_Init+0x68>
 8002bca:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bcc:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8002bd0:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bd4:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bd8:	e778      	b.n	8002acc <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 8002bda:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002c70 <HAL_GPIO_Init+0x214>
 8002bde:	454c      	cmp	r4, r9
 8002be0:	d0ec      	beq.n	8002bbc <HAL_GPIO_Init+0x160>
 8002be2:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002be6:	454c      	cmp	r4, r9
 8002be8:	d0e8      	beq.n	8002bbc <HAL_GPIO_Init+0x160>
 8002bea:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002bee:	454c      	cmp	r4, r9
 8002bf0:	f47f af65 	bne.w	8002abe <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bf4:	688c      	ldr	r4, [r1, #8]
 8002bf6:	2c00      	cmp	r4, #0
 8002bf8:	d0e2      	beq.n	8002bc0 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 8002bfa:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bfc:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bfe:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8002c02:	bf0c      	ite	eq
 8002c04:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8002c06:	6142      	strne	r2, [r0, #20]
 8002c08:	e759      	b.n	8002abe <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c0a:	ea22 0505 	bic.w	r5, r2, r5
 8002c0e:	60fd      	str	r5, [r7, #12]
 8002c10:	680c      	ldr	r4, [r1, #0]
 8002c12:	e735      	b.n	8002a80 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c14:	68ce      	ldr	r6, [r1, #12]
 8002c16:	360c      	adds	r6, #12
          break;
 8002c18:	e751      	b.n	8002abe <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c1a:	68ce      	ldr	r6, [r1, #12]
 8002c1c:	3604      	adds	r6, #4
          break;
 8002c1e:	e74e      	b.n	8002abe <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c20:	68ce      	ldr	r6, [r1, #12]
 8002c22:	3608      	adds	r6, #8
          break;
 8002c24:	e74b      	b.n	8002abe <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c26:	68ce      	ldr	r6, [r1, #12]
          break;
 8002c28:	e749      	b.n	8002abe <HAL_GPIO_Init+0x62>
 8002c2a:	f04f 0b02 	mov.w	fp, #2
 8002c2e:	9801      	ldr	r0, [sp, #4]
 8002c30:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002c34:	ea40 000a 	orr.w	r0, r0, sl
 8002c38:	9001      	str	r0, [sp, #4]
 8002c3a:	e791      	b.n	8002b60 <HAL_GPIO_Init+0x104>
 8002c3c:	f04f 0b01 	mov.w	fp, #1
 8002c40:	9801      	ldr	r0, [sp, #4]
 8002c42:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002c46:	ea40 000a 	orr.w	r0, r0, sl
 8002c4a:	9001      	str	r0, [sp, #4]
 8002c4c:	e788      	b.n	8002b60 <HAL_GPIO_Init+0x104>
 8002c4e:	bf00      	nop
 8002c50:	40010400 	.word	0x40010400
 8002c54:	40010800 	.word	0x40010800
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	40011400 	.word	0x40011400
 8002c60:	10320000 	.word	0x10320000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	10220000 	.word	0x10220000
 8002c6c:	10310000 	.word	0x10310000
 8002c70:	10120000 	.word	0x10120000

08002c74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c74:	b902      	cbnz	r2, 8002c78 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c76:	0409      	lsls	r1, r1, #16
 8002c78:	6101      	str	r1, [r0, #16]
  }
}
 8002c7a:	4770      	bx	lr

08002c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002c7e:	6951      	ldr	r1, [r2, #20]
 8002c80:	4201      	tst	r1, r0
 8002c82:	d100      	bne.n	8002c86 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002c84:	4770      	bx	lr
{
 8002c86:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c88:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c8a:	f7fd fbe1 	bl	8000450 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c8e:	bd08      	pop	{r3, pc}
 8002c90:	40010400 	.word	0x40010400

08002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	4605      	mov	r5, r0
 8002c98:	460e      	mov	r6, r1
 8002c9a:	4617      	mov	r7, r2
 8002c9c:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c9e:	682c      	ldr	r4, [r5, #0]
 8002ca0:	d003      	beq.n	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 8002ca2:	e009      	b.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ca4:	6963      	ldr	r3, [r4, #20]
 8002ca6:	055b      	lsls	r3, r3, #21
 8002ca8:	d424      	bmi.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002caa:	6963      	ldr	r3, [r4, #20]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	f013 0308 	ands.w	r3, r3, #8
 8002cb2:	d1f7      	bne.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002cb4:	4618      	mov	r0, r3
}
 8002cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb8:	6963      	ldr	r3, [r4, #20]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	f013 0308 	ands.w	r3, r3, #8
 8002cc0:	d0f8      	beq.n	8002cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc2:	6963      	ldr	r3, [r4, #20]
 8002cc4:	0559      	lsls	r1, r3, #21
 8002cc6:	d415      	bmi.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc8:	f7ff fcc8 	bl	800265c <HAL_GetTick>
 8002ccc:	1bc0      	subs	r0, r0, r7
 8002cce:	4286      	cmp	r6, r0
 8002cd0:	d301      	bcc.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 8002cd2:	2e00      	cmp	r6, #0
 8002cd4:	d1e2      	bne.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd6:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cda:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cdc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ce6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cea:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8002cee:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf0:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf4:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf6:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cfa:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d02:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d04:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d06:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d08:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d10:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002d12:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d16:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002d1a:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d1c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	4605      	mov	r5, r0
 8002d24:	460e      	mov	r6, r1
 8002d26:	4617      	mov	r7, r2
 8002d28:	1c72      	adds	r2, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d2a:	682c      	ldr	r4, [r5, #0]
 8002d2c:	d003      	beq.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 8002d2e:	e009      	b.n	8002d44 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d30:	6963      	ldr	r3, [r4, #20]
 8002d32:	055b      	lsls	r3, r3, #21
 8002d34:	d424      	bmi.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d36:	6963      	ldr	r3, [r4, #20]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	f013 0302 	ands.w	r3, r3, #2
 8002d3e:	d1f7      	bne.n	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 8002d40:	4618      	mov	r0, r3
}
 8002d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d44:	6963      	ldr	r3, [r4, #20]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	f013 0302 	ands.w	r3, r3, #2
 8002d4c:	d0f8      	beq.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d4e:	6963      	ldr	r3, [r4, #20]
 8002d50:	0559      	lsls	r1, r3, #21
 8002d52:	d415      	bmi.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7ff fc82 	bl	800265c <HAL_GetTick>
 8002d58:	1bc0      	subs	r0, r0, r7
 8002d5a:	4286      	cmp	r6, r0
 8002d5c:	d301      	bcc.n	8002d62 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 8002d5e:	2e00      	cmp	r6, #0
 8002d60:	d1e2      	bne.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d66:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d70:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d72:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d76:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d80:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d82:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d86:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d90:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d92:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d94:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d9c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002d9e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da2:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002da6:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da8:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002dac <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002dac:	2800      	cmp	r0, #0
 8002dae:	f000 80b5 	beq.w	8002f1c <HAL_I2C_Init+0x170>
{
 8002db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002db8:	4604      	mov	r4, r0
 8002dba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8094 	beq.w	8002eec <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc4:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002dc6:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de4:	f001 fc72 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002de8:	6865      	ldr	r5, [r4, #4]
 8002dea:	4b4d      	ldr	r3, [pc, #308]	; (8002f20 <HAL_I2C_Init+0x174>)
 8002dec:	429d      	cmp	r5, r3
 8002dee:	d84c      	bhi.n	8002e8a <HAL_I2C_Init+0xde>
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_I2C_Init+0x178>)
 8002df2:	4298      	cmp	r0, r3
 8002df4:	d978      	bls.n	8002ee8 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002df6:	1e42      	subs	r2, r0, #1
 8002df8:	006d      	lsls	r5, r5, #1
 8002dfa:	fbb2 f2f5 	udiv	r2, r2, r5
 8002dfe:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 8002e02:	4949      	ldr	r1, [pc, #292]	; (8002f28 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e04:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002e06:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0a:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e0c:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002e12:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 8002e16:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e18:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002e1a:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002e20:	3001      	adds	r0, #1
 8002e22:	4308      	orrs	r0, r1
 8002e24:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e26:	69d9      	ldr	r1, [r3, #28]
 8002e28:	4232      	tst	r2, r6
 8002e2a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002e2e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e32:	d160      	bne.n	8002ef6 <HAL_I2C_Init+0x14a>
 8002e34:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e36:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002e38:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8002e44:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002e48:	4302      	orrs	r2, r0
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8002e54:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002e58:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e5c:	4302      	orrs	r2, r0
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e62:	68d9      	ldr	r1, [r3, #12]
 8002e64:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8002e68:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e6c:	4302      	orrs	r2, r0
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002e72:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002e74:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e82:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8002e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e8a:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <HAL_I2C_Init+0x180>)
 8002e8c:	4298      	cmp	r0, r3
 8002e8e:	d92b      	bls.n	8002ee8 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e90:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002e94:	4e24      	ldr	r6, [pc, #144]	; (8002f28 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e96:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002e98:	fba6 2600 	umull	r2, r6, r6, r0
 8002e9c:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e9e:	fb01 f102 	mul.w	r1, r1, r2
 8002ea2:	4f23      	ldr	r7, [pc, #140]	; (8002f30 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea4:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ea6:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eaa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002eae:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8002eb2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	0989      	lsrs	r1, r1, #6
 8002eb8:	3101      	adds	r1, #1
 8002eba:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ec2:	69d9      	ldr	r1, [r3, #28]
 8002ec4:	68a6      	ldr	r6, [r4, #8]
 8002ec6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002eca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ece:	b9ae      	cbnz	r6, 8002efc <HAL_I2C_Init+0x150>
 8002ed0:	3801      	subs	r0, #1
 8002ed2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8002ed6:	fbb0 f2f2 	udiv	r2, r0, r2
 8002eda:	3201      	adds	r2, #1
 8002edc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002ee0:	b1d2      	cbz	r2, 8002f18 <HAL_I2C_Init+0x16c>
 8002ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee6:	e7a6      	b.n	8002e36 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8002ee8:	2001      	movs	r0, #1
}
 8002eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002eec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002ef0:	f7fd fc0c 	bl	800070c <HAL_I2C_MspInit>
 8002ef4:	e766      	b.n	8002dc4 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ef6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002efa:	e79c      	b.n	8002e36 <HAL_I2C_Init+0x8a>
 8002efc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002f00:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8002f04:	1e42      	subs	r2, r0, #1
 8002f06:	fbb2 f2f5 	udiv	r2, r2, r5
 8002f0a:	3201      	adds	r2, #1
 8002f0c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002f10:	b112      	cbz	r2, 8002f18 <HAL_I2C_Init+0x16c>
 8002f12:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f16:	e78e      	b.n	8002e36 <HAL_I2C_Init+0x8a>
 8002f18:	2201      	movs	r2, #1
 8002f1a:	e78c      	b.n	8002e36 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8002f1c:	2001      	movs	r0, #1
}
 8002f1e:	4770      	bx	lr
 8002f20:	000186a0 	.word	0x000186a0
 8002f24:	001e847f 	.word	0x001e847f
 8002f28:	431bde83 	.word	0x431bde83
 8002f2c:	003d08ff 	.word	0x003d08ff
 8002f30:	10624dd3 	.word	0x10624dd3

08002f34 <HAL_I2C_Master_Transmit>:
{
 8002f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f38:	4604      	mov	r4, r0
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	469a      	mov	sl, r3
 8002f3e:	4688      	mov	r8, r1
 8002f40:	4691      	mov	r9, r2
 8002f42:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff fb8a 	bl	800265c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f48:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d005      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 8002f50:	f04f 0802 	mov.w	r8, #2
}
 8002f54:	4640      	mov	r0, r8
 8002f56:	b002      	add	sp, #8
 8002f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f5c:	4607      	mov	r7, r0
 8002f5e:	e005      	b.n	8002f6c <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7ff fb7c 	bl	800265c <HAL_GetTick>
 8002f64:	1bc0      	subs	r0, r0, r7
 8002f66:	2819      	cmp	r0, #25
 8002f68:	f200 80f3 	bhi.w	8003152 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	699d      	ldr	r5, [r3, #24]
 8002f70:	43ed      	mvns	r5, r5
 8002f72:	f015 0502 	ands.w	r5, r5, #2
 8002f76:	d0f3      	beq.n	8002f60 <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 8002f78:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002f7c:	2a01      	cmp	r2, #1
 8002f7e:	d0e7      	beq.n	8002f50 <HAL_I2C_Master_Transmit+0x1c>
 8002f80:	2201      	movs	r2, #1
 8002f82:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	07d2      	lsls	r2, r2, #31
 8002f8a:	d570      	bpl.n	800306e <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f8c:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f8e:	2521      	movs	r5, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f90:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f98:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f9a:	4a8b      	ldr	r2, [pc, #556]	; (80031c8 <HAL_I2C_Master_Transmit+0x294>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f9c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fa0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fa4:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002fa6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002faa:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fac:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002fb0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fb4:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8002fb6:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fb8:	d007      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x96>
 8002fba:	2a01      	cmp	r2, #1
 8002fbc:	d005      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x96>
 8002fbe:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002fc2:	d002      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fc6:	2a12      	cmp	r2, #18
 8002fc8:	d103      	bne.n	8002fd2 <HAL_I2C_Master_Transmit+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	1c75      	adds	r5, r6, #1
 8002fd4:	d13d      	bne.n	8003052 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	07d0      	lsls	r0, r2, #31
 8002fda:	d5fc      	bpl.n	8002fd6 <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fdc:	6922      	ldr	r2, [r4, #16]
 8002fde:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002fe2:	d149      	bne.n	8003078 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fe4:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8002fe8:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fea:	463a      	mov	r2, r7
 8002fec:	4631      	mov	r1, r6
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff fe96 	bl	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8002ff4:	4680      	mov	r8, r0
 8002ff6:	bb30      	cbnz	r0, 8003046 <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	9001      	str	r0, [sp, #4]
 8002ffc:	6959      	ldr	r1, [r3, #20]
    while (hi2c->XferSize > 0U)
 8002ffe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003000:	9101      	str	r1, [sp, #4]
 8003002:	6999      	ldr	r1, [r3, #24]
 8003004:	9101      	str	r1, [sp, #4]
 8003006:	9901      	ldr	r1, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003008:	2a00      	cmp	r2, #0
 800300a:	d076      	beq.n	80030fa <HAL_I2C_Master_Transmit+0x1c6>
 800300c:	1c75      	adds	r5, r6, #1
 800300e:	f040 8081 	bne.w	8003114 <HAL_I2C_Master_Transmit+0x1e0>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	0610      	lsls	r0, r2, #24
 8003016:	d442      	bmi.n	800309e <HAL_I2C_Master_Transmit+0x16a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	0551      	lsls	r1, r2, #21
 800301c:	d5f9      	bpl.n	8003012 <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800301e:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003020:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003024:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003026:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003028:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800302a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003032:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003034:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003040:	2b04      	cmp	r3, #4
 8003042:	f000 80ab 	beq.w	800319c <HAL_I2C_Master_Transmit+0x268>
      return HAL_ERROR;
 8003046:	f04f 0801 	mov.w	r8, #1
}
 800304a:	4640      	mov	r0, r8
 800304c:	b002      	add	sp, #8
 800304e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	07d1      	lsls	r1, r2, #31
 8003056:	d4c1      	bmi.n	8002fdc <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7ff fb00 	bl	800265c <HAL_GetTick>
 800305c:	1bc0      	subs	r0, r0, r7
 800305e:	4286      	cmp	r6, r0
 8003060:	f0c0 8084 	bcc.w	800316c <HAL_I2C_Master_Transmit+0x238>
 8003064:	2e00      	cmp	r6, #0
 8003066:	f000 8081 	beq.w	800316c <HAL_I2C_Master_Transmit+0x238>
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	e7b1      	b.n	8002fd2 <HAL_I2C_Master_Transmit+0x9e>
      __HAL_I2C_ENABLE(hi2c);
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e789      	b.n	8002f8c <HAL_I2C_Master_Transmit+0x58>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003078:	ea4f 12e8 	mov.w	r2, r8, asr #7
 800307c:	f002 0206 	and.w	r2, r2, #6
 8003080:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003084:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003086:	4631      	mov	r1, r6
 8003088:	463a      	mov	r2, r7
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff fe02 	bl	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8003090:	2800      	cmp	r0, #0
 8003092:	d1d8      	bne.n	8003046 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	fa5f f188 	uxtb.w	r1, r8
 800309a:	6119      	str	r1, [r3, #16]
 800309c:	e7a5      	b.n	8002fea <HAL_I2C_Master_Transmit+0xb6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800309e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80030a0:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a4:	4605      	mov	r5, r0
 80030a6:	f815 2b01 	ldrb.w	r2, [r5], #1
      hi2c->XferSize--;
 80030aa:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ae:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80030b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030b2:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 80030b4:	3a01      	subs	r2, #1
 80030b6:	b292      	uxth	r2, r2
 80030b8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ba:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 80030bc:	6265      	str	r5, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030be:	0755      	lsls	r5, r2, #29
      hi2c->XferSize--;
 80030c0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030c2:	d50c      	bpl.n	80030de <HAL_I2C_Master_Transmit+0x1aa>
 80030c4:	b159      	cbz	r1, 80030de <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c6:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 80030c8:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030cc:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80030ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80030d0:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80030d2:	3a01      	subs	r2, #1
 80030d4:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80030d6:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80030da:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80030dc:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80030de:	1c75      	adds	r5, r6, #1
 80030e0:	d128      	bne.n	8003134 <HAL_I2C_Master_Transmit+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	0750      	lsls	r0, r2, #29
 80030e6:	d405      	bmi.n	80030f4 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	0551      	lsls	r1, r2, #21
 80030ec:	d497      	bmi.n	800301e <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	0750      	lsls	r0, r2, #29
 80030f2:	d5f9      	bpl.n	80030e8 <HAL_I2C_Master_Transmit+0x1b4>
    while (hi2c->XferSize > 0U)
 80030f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80030f6:	2a00      	cmp	r2, #0
 80030f8:	d188      	bne.n	800300c <HAL_I2C_Master_Transmit+0xd8>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fa:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80030fc:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003104:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800310a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800310e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8003112:	e71f      	b.n	8002f54 <HAL_I2C_Master_Transmit+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	0612      	lsls	r2, r2, #24
 8003118:	d4c1      	bmi.n	800309e <HAL_I2C_Master_Transmit+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	0552      	lsls	r2, r2, #21
 800311e:	f53f af7e 	bmi.w	800301e <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7ff fa9b 	bl	800265c <HAL_GetTick>
 8003126:	1bc0      	subs	r0, r0, r7
 8003128:	4286      	cmp	r6, r0
 800312a:	d33f      	bcc.n	80031ac <HAL_I2C_Master_Transmit+0x278>
 800312c:	2e00      	cmp	r6, #0
 800312e:	d03d      	beq.n	80031ac <HAL_I2C_Master_Transmit+0x278>
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	e76b      	b.n	800300c <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	0752      	lsls	r2, r2, #29
 8003138:	d4dc      	bmi.n	80030f4 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	0552      	lsls	r2, r2, #21
 800313e:	f53f af6e 	bmi.w	800301e <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7ff fa8b 	bl	800265c <HAL_GetTick>
 8003146:	1bc0      	subs	r0, r0, r7
 8003148:	4286      	cmp	r6, r0
 800314a:	d32f      	bcc.n	80031ac <HAL_I2C_Master_Transmit+0x278>
 800314c:	b376      	cbz	r6, 80031ac <HAL_I2C_Master_Transmit+0x278>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	e7c5      	b.n	80030de <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003152:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003154:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003156:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003160:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	f043 0320 	orr.w	r3, r3, #32
 8003168:	6423      	str	r3, [r4, #64]	; 0x40
 800316a:	e6f1      	b.n	8002f50 <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800316c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800316e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003170:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003176:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800317a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800317c:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800317e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003182:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003186:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003188:	680b      	ldr	r3, [r1, #0]
 800318a:	05de      	lsls	r6, r3, #23
 800318c:	f57f af5b 	bpl.w	8003046 <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003190:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8003194:	f04f 0801 	mov.w	r8, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003198:	6423      	str	r3, [r4, #64]	; 0x40
 800319a:	e6db      	b.n	8002f54 <HAL_I2C_Master_Transmit+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 800319e:	f04f 0801 	mov.w	r8, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	6813      	ldr	r3, [r2, #0]
 80031a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e6d3      	b.n	8002f54 <HAL_I2C_Master_Transmit+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031ac:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ae:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031b0:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80031bc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031c0:	f043 0320 	orr.w	r3, r3, #32
 80031c4:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80031c6:	e73a      	b.n	800303e <HAL_I2C_Master_Transmit+0x10a>
 80031c8:	ffff0000 	.word	0xffff0000

080031cc <HAL_I2C_Master_Transmit_DMA>:
{
 80031cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80031ce:	2400      	movs	r4, #0
{
 80031d0:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80031d2:	9401      	str	r4, [sp, #4]
{
 80031d4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80031da:	2820      	cmp	r0, #32
 80031dc:	d126      	bne.n	800322c <HAL_I2C_Master_Transmit_DMA+0x60>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80031de:	484f      	ldr	r0, [pc, #316]	; (800331c <HAL_I2C_Master_Transmit_DMA+0x150>)
 80031e0:	4616      	mov	r6, r2
 80031e2:	6800      	ldr	r0, [r0, #0]
 80031e4:	4a4e      	ldr	r2, [pc, #312]	; (8003320 <HAL_I2C_Master_Transmit_DMA+0x154>)
 80031e6:	08c0      	lsrs	r0, r0, #3
 80031e8:	fba2 2000 	umull	r2, r0, r2, r0
 80031ec:	0a00      	lsrs	r0, r0, #8
 80031ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031f6:	9001      	str	r0, [sp, #4]
 80031f8:	e003      	b.n	8003202 <HAL_I2C_Master_Transmit_DMA+0x36>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80031fa:	682c      	ldr	r4, [r5, #0]
 80031fc:	69a0      	ldr	r0, [r4, #24]
 80031fe:	0780      	lsls	r0, r0, #30
 8003200:	d517      	bpl.n	8003232 <HAL_I2C_Master_Transmit_DMA+0x66>
      count--;
 8003202:	9c01      	ldr	r4, [sp, #4]
 8003204:	3c01      	subs	r4, #1
 8003206:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8003208:	9801      	ldr	r0, [sp, #4]
 800320a:	2800      	cmp	r0, #0
 800320c:	d1f5      	bne.n	80031fa <HAL_I2C_Master_Transmit_DMA+0x2e>
        hi2c->State               = HAL_I2C_STATE_READY;
 800320e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003210:	6328      	str	r0, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8003212:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321a:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        return HAL_ERROR;
 800321e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003220:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003222:	f043 0320 	orr.w	r3, r3, #32
 8003226:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003228:	b003      	add	sp, #12
 800322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800322c:	2002      	movs	r0, #2
}
 800322e:	b003      	add	sp, #12
 8003230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003232:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 8003236:	2a01      	cmp	r2, #1
 8003238:	d0f8      	beq.n	800322c <HAL_I2C_Master_Transmit_DMA+0x60>
 800323a:	2201      	movs	r2, #1
 800323c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003240:	6822      	ldr	r2, [r4, #0]
 8003242:	07d2      	lsls	r2, r2, #31
 8003244:	d403      	bmi.n	800324e <HAL_I2C_Master_Transmit_DMA+0x82>
      __HAL_I2C_ENABLE(hi2c);
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800324e:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003252:	2010      	movs	r0, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003254:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325c:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800325e:	f885 c03d 	strb.w	ip, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003262:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003266:	642f      	str	r7, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003268:	856b      	strh	r3, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800326a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800326c:	4a2d      	ldr	r2, [pc, #180]	; (8003324 <HAL_I2C_Master_Transmit_DMA+0x158>)
    hi2c->XferSize    = hi2c->XferCount;
 800326e:	b29b      	uxth	r3, r3
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003270:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8003272:	626e      	str	r6, [r5, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003274:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8003276:	6469      	str	r1, [r5, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 8003278:	b333      	cbz	r3, 80032c8 <HAL_I2C_Master_Transmit_DMA+0xfc>
      if (hi2c->hdmatx != NULL)
 800327a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800327c:	2800      	cmp	r0, #0
 800327e:	d040      	beq.n	8003302 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003280:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8003328 <HAL_I2C_Master_Transmit_DMA+0x15c>
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003284:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800332c <HAL_I2C_Master_Transmit_DMA+0x160>
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003288:	4631      	mov	r1, r6
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800328a:	62c7      	str	r7, [r0, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 800328c:	6347      	str	r7, [r0, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800328e:	f104 0210 	add.w	r2, r4, #16
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003292:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003296:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800329a:	f7ff fa99 	bl	80027d0 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800329e:	bb18      	cbnz	r0, 80032e8 <HAL_I2C_Master_Transmit_DMA+0x11c>
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032a0:	682b      	ldr	r3, [r5, #0]
        __HAL_UNLOCK(hi2c);
 80032a2:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032ac:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032bc:	601a      	str	r2, [r3, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e7af      	b.n	8003228 <HAL_I2C_Master_Transmit_DMA+0x5c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c8:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80032ca:	4618      	mov	r0, r3
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032d0:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d8:	6022      	str	r2, [r4, #0]
      __HAL_UNLOCK(hi2c);
 80032da:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032de:	6863      	ldr	r3, [r4, #4]
 80032e0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032e4:	6063      	str	r3, [r4, #4]
 80032e6:	e79f      	b.n	8003228 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80032e8:	2320      	movs	r3, #32
 80032ea:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032ee:	f885 703e 	strb.w	r7, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80032f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80032f4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80032f6:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hi2c);
 80032fa:	f885 703c 	strb.w	r7, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80032fe:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003300:	e792      	b.n	8003228 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003302:	2320      	movs	r3, #32
 8003304:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003308:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800330c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800330e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        return HAL_ERROR;
 8003316:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003318:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800331a:	e785      	b.n	8003228 <HAL_I2C_Master_Transmit_DMA+0x5c>
 800331c:	20000000 	.word	0x20000000
 8003320:	14f8b589 	.word	0x14f8b589
 8003324:	ffff0000 	.word	0xffff0000
 8003328:	08003449 	.word	0x08003449
 800332c:	0800340d 	.word	0x0800340d

08003330 <HAL_I2C_MasterTxCpltCallback>:
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop

08003334 <HAL_I2C_MasterRxCpltCallback>:
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop

08003338 <HAL_I2C_SlaveTxCpltCallback>:
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <HAL_I2C_SlaveRxCpltCallback>:
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <HAL_I2C_AddrCallback>:
}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop

08003344 <HAL_I2C_ListenCpltCallback>:
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop

08003348 <HAL_I2C_MemTxCpltCallback>:
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop

0800334c <I2C_MemoryTransmit_TXE_BTF>:
{
 800334c:	b538      	push	{r3, r4, r5, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800334e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8003352:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003354:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8003356:	b959      	cbnz	r1, 8003370 <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003358:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800335a:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800335c:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800335e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003360:	d032      	beq.n	80033c8 <I2C_MemoryTransmit_TXE_BTF+0x7c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003362:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003366:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8003368:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800336a:	3201      	adds	r2, #1
 800336c:	6502      	str	r2, [r0, #80]	; 0x50
}
 800336e:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 8003370:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003372:	2901      	cmp	r1, #1
 8003374:	d020      	beq.n	80033b8 <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 8003376:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003378:	2902      	cmp	r1, #2
 800337a:	d1f8      	bne.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x22>
 800337c:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800337e:	2a22      	cmp	r2, #34	; 0x22
 8003380:	d02c      	beq.n	80033dc <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003382:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8003384:	b289      	uxth	r1, r1
 8003386:	bb29      	cbnz	r1, 80033d4 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003388:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800338a:	b289      	uxth	r1, r1
 800338c:	2900      	cmp	r1, #0
 800338e:	d1ee      	bne.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x22>
 8003390:	2a21      	cmp	r2, #33	; 0x21
 8003392:	d1ec      	bne.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->State = HAL_I2C_STATE_READY;
 8003394:	2520      	movs	r5, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003396:	6802      	ldr	r2, [r0, #0]
 8003398:	6854      	ldr	r4, [r2, #4]
 800339a:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800339e:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	6814      	ldr	r4, [r2, #0]
 80033a2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80033a6:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033a8:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ae:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033b2:	f7ff ffc9 	bl	8003348 <HAL_I2C_MemTxCpltCallback>
}
 80033b6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033b8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80033ba:	6801      	ldr	r1, [r0, #0]
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 80033c0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80033c2:	3201      	adds	r2, #1
 80033c4:	6502      	str	r2, [r0, #80]	; 0x50
}
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80033cc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80033ce:	3202      	adds	r2, #2
 80033d0:	6502      	str	r2, [r0, #80]	; 0x50
}
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033d4:	2a21      	cmp	r2, #33	; 0x21
 80033d6:	d00a      	beq.n	80033ee <I2C_MemoryTransmit_TXE_BTF+0xa2>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 80033da:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80033dc:	6801      	ldr	r1, [r0, #0]
 80033de:	680a      	ldr	r2, [r1, #0]
 80033e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e4:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 80033e6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80033e8:	3201      	adds	r2, #1
 80033ea:	6502      	str	r2, [r0, #80]	; 0x50
}
 80033ec:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80033f0:	6802      	ldr	r2, [r0, #0]
 80033f2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80033f6:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 80033f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80033fa:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80033fc:	3a01      	subs	r2, #1
 80033fe:	b292      	uxth	r2, r2
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003402:	bd38      	pop	{r3, r4, r5, pc}

08003404 <HAL_I2C_MemRxCpltCallback>:
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <HAL_I2C_ErrorCallback>:
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop

0800340c <I2C_DMAError>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800340c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800340e:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8003410:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003412:	b10b      	cbz	r3, 8003418 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003414:	2200      	movs	r2, #0
 8003416:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003418:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800341a:	b10b      	cbz	r3, 8003420 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800341c:	2200      	movs	r2, #0
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->XferCount       = 0U;
 8003420:	2200      	movs	r2, #0
  hi2c->State           = HAL_I2C_STATE_READY;
 8003422:	2420      	movs	r4, #32
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003424:	6801      	ldr	r1, [r0, #0]
 8003426:	680b      	ldr	r3, [r1, #0]
 8003428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342c:	600b      	str	r3, [r1, #0]
  hi2c->XferCount       = 0U;
 800342e:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003430:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8003434:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003438:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800343a:	f043 0310 	orr.w	r3, r3, #16
 800343e:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 8003440:	f7ff ffe2 	bl	8003408 <HAL_I2C_ErrorCallback>
}
 8003444:	bd10      	pop	{r4, pc}
 8003446:	bf00      	nop

08003448 <I2C_DMAXferCplt>:
{
 8003448:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800344a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800344c:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800344e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003452:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003458:	6859      	ldr	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 800345a:	6b65      	ldr	r5, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800345c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003460:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003462:	b2c0      	uxtb	r0, r0
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003464:	6059      	str	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8003466:	b10d      	cbz	r5, 800346c <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003468:	2100      	movs	r1, #0
 800346a:	62a9      	str	r1, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 800346c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800346e:	b109      	cbz	r1, 8003474 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003470:	2500      	movs	r5, #0
 8003472:	628d      	str	r5, [r1, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003474:	f002 0121 	and.w	r1, r2, #33	; 0x21
 8003478:	2921      	cmp	r1, #33	; 0x21
 800347a:	d039      	beq.n	80034f0 <I2C_DMAXferCplt+0xa8>
 800347c:	f002 0122 	and.w	r1, r2, #34	; 0x22
 8003480:	2922      	cmp	r1, #34	; 0x22
 8003482:	d033      	beq.n	80034ec <I2C_DMAXferCplt+0xa4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003484:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003488:	b37a      	cbz	r2, 80034ea <I2C_DMAXferCplt+0xa2>
    if (hi2c->XferCount == (uint16_t)1)
 800348a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800348c:	b292      	uxth	r2, r2
 800348e:	2a01      	cmp	r2, #1
 8003490:	d03d      	beq.n	800350e <I2C_DMAXferCplt+0xc6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003492:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003494:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003498:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800349c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800349e:	d006      	beq.n	80034ae <I2C_DMAXferCplt+0x66>
 80034a0:	2e08      	cmp	r6, #8
 80034a2:	d004      	beq.n	80034ae <I2C_DMAXferCplt+0x66>
 80034a4:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 80034a8:	d001      	beq.n	80034ae <I2C_DMAXferCplt+0x66>
 80034aa:	2e20      	cmp	r6, #32
 80034ac:	d103      	bne.n	80034b6 <I2C_DMAXferCplt+0x6e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b4:	601a      	str	r2, [r3, #0]
    hi2c->XferCount = 0U;
 80034b6:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034be:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c6:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80034c8:	8561      	strh	r1, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034cc:	bb23      	cbnz	r3, 8003518 <I2C_DMAXferCplt+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	2220      	movs	r2, #32
 80034d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034d4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80034d8:	2a40      	cmp	r2, #64	; 0x40
 80034da:	d035      	beq.n	8003548 <I2C_DMAXferCplt+0x100>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034dc:	2212      	movs	r2, #18
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e2:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034e4:	6322      	str	r2, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e6:	f7ff ff25 	bl	8003334 <HAL_I2C_MasterRxCpltCallback>
}
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80034ec:	2820      	cmp	r0, #32
 80034ee:	d1c9      	bne.n	8003484 <I2C_DMAXferCplt+0x3c>
    hi2c->XferCount = 0U;
 80034f0:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034f2:	6859      	ldr	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034f4:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034f6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80034fa:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 80034fc:	8560      	strh	r0, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034fe:	d00f      	beq.n	8003520 <I2C_DMAXferCplt+0xd8>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003500:	2a2a      	cmp	r2, #42	; 0x2a
 8003502:	d017      	beq.n	8003534 <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800350a:	605a      	str	r2, [r3, #4]
}
 800350c:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e7bc      	b.n	8003492 <I2C_DMAXferCplt+0x4a>
      HAL_I2C_ErrorCallback(hi2c);
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff ff75 	bl	8003408 <HAL_I2C_ErrorCallback>
}
 800351e:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003520:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003522:	2221      	movs	r2, #33	; 0x21
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003524:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003526:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003528:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800352c:	f7ff ff04 	bl	8003338 <HAL_I2C_SlaveTxCpltCallback>
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	e7e7      	b.n	8003504 <I2C_DMAXferCplt+0xbc>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003534:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003536:	2222      	movs	r2, #34	; 0x22
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003538:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800353a:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800353c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003540:	f7ff fefc 	bl	800333c <HAL_I2C_SlaveRxCpltCallback>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	e7dd      	b.n	8003504 <I2C_DMAXferCplt+0xbc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 800354c:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 800354e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003550:	f7ff ff58 	bl	8003404 <HAL_I2C_MemRxCpltCallback>
}
 8003554:	bd70      	pop	{r4, r5, r6, pc}
 8003556:	bf00      	nop

08003558 <HAL_I2C_AbortCpltCallback>:
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop

0800355c <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 800355c:	2200      	movs	r2, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <I2C_DMAAbort+0xec>)
{
 8003560:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4939      	ldr	r1, [pc, #228]	; (800364c <I2C_DMAAbort+0xf0>)
 8003566:	08db      	lsrs	r3, r3, #3
 8003568:	fba1 1303 	umull	r1, r3, r1, r3
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800356c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800356e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003570:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003572:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003574:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800357c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003580:	6802      	ldr	r2, [r0, #0]
 8003582:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003584:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003586:	e005      	b.n	8003594 <I2C_DMAAbort+0x38>
    count--;
 8003588:	9b01      	ldr	r3, [sp, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	059b      	lsls	r3, r3, #22
 8003592:	d506      	bpl.n	80035a2 <I2C_DMAAbort+0x46>
    if (count == 0U)
 8003594:	9b01      	ldr	r3, [sp, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f6      	bne.n	8003588 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800359c:	f043 0320 	orr.w	r3, r3, #32
 80035a0:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 80035a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80035a4:	b34c      	cbz	r4, 80035fa <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035a6:	2500      	movs	r5, #0
  if (hi2c->hdmarx != NULL)
 80035a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035aa:	62a5      	str	r5, [r4, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 80035ac:	b1f3      	cbz	r3, 80035ec <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ae:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80035b0:	629d      	str	r5, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b2:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 80035b6:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 80035b8:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035ba:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035bc:	2400      	movs	r4, #0
 80035be:	635c      	str	r4, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 80035c0:	6813      	ldr	r3, [r2, #0]
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035cc:	2b60      	cmp	r3, #96	; 0x60
 80035ce:	d02a      	beq.n	8003626 <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035d0:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80035d4:	2928      	cmp	r1, #40	; 0x28
 80035d6:	d019      	beq.n	800360c <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035da:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035e4:	f7ff ff10 	bl	8003408 <HAL_I2C_ErrorCallback>
}
 80035e8:	b002      	add	sp, #8
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ec:	6815      	ldr	r5, [r2, #0]
 80035ee:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80035f2:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80035f4:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035f6:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 80035f8:	e7e2      	b.n	80035c0 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 80035fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80035fc:	b1f3      	cbz	r3, 800363c <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003600:	629c      	str	r4, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003602:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003606:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003608:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800360a:	e7d7      	b.n	80035bc <I2C_DMAAbort+0x60>
      hi2c->PreviousState = I2C_STATE_NONE;
 800360c:	2400      	movs	r4, #0
      __HAL_I2C_ENABLE(hi2c);
 800360e:	6813      	ldr	r3, [r2, #0]
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800361c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800361e:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003620:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8003624:	e7de      	b.n	80035e4 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003626:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003628:	2220      	movs	r2, #32
 800362a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800362e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003632:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003634:	f7ff ff90 	bl	8003558 <HAL_I2C_AbortCpltCallback>
}
 8003638:	b002      	add	sp, #8
 800363a:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363c:	6814      	ldr	r4, [r2, #0]
 800363e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8003642:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8003644:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003646:	e7bb      	b.n	80035c0 <I2C_DMAAbort+0x64>
 8003648:	20000000 	.word	0x20000000
 800364c:	14f8b589 	.word	0x14f8b589

08003650 <I2C_ITError>:
{
 8003650:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003652:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003656:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 800365a:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800365c:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800365e:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003660:	d039      	beq.n	80036d6 <I2C_ITError+0x86>
 8003662:	b2d9      	uxtb	r1, r3
 8003664:	2940      	cmp	r1, #64	; 0x40
 8003666:	d036      	beq.n	80036d6 <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003668:	f002 0128 	and.w	r1, r2, #40	; 0x28
 800366c:	2928      	cmp	r1, #40	; 0x28
 800366e:	d03d      	beq.n	80036ec <I2C_ITError+0x9c>
 8003670:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	0508      	lsls	r0, r1, #20
 8003676:	d407      	bmi.n	8003688 <I2C_ITError+0x38>
 8003678:	2a60      	cmp	r2, #96	; 0x60
 800367a:	d005      	beq.n	8003688 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 800367c:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800367e:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003680:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003688:	2200      	movs	r2, #0
 800368a:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003692:	d134      	bne.n	80036fe <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003694:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003698:	2960      	cmp	r1, #96	; 0x60
 800369a:	d075      	beq.n	8003788 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	0650      	lsls	r0, r2, #25
 80036a0:	d505      	bpl.n	80036ae <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036a6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80036a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036aa:	3301      	adds	r3, #1
 80036ac:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80036ae:	4620      	mov	r0, r4
 80036b0:	f7ff feaa 	bl	8003408 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 80036b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036b6:	0719      	lsls	r1, r3, #28
 80036b8:	d004      	beq.n	80036c4 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	6853      	ldr	r3, [r2, #4]
 80036be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036c2:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80036c4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 80036ca:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036cc:	0752      	lsls	r2, r2, #29
 80036ce:	d501      	bpl.n	80036d4 <I2C_ITError+0x84>
 80036d0:	2b28      	cmp	r3, #40	; 0x28
 80036d2:	d02f      	beq.n	8003734 <I2C_ITError+0xe4>
}
 80036d4:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80036d6:	2a22      	cmp	r2, #34	; 0x22
 80036d8:	d1c6      	bne.n	8003668 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e2:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	0512      	lsls	r2, r2, #20
 80036e8:	d5c8      	bpl.n	800367c <I2C_ITError+0x2c>
 80036ea:	e7cd      	b.n	8003688 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 80036ec:	2200      	movs	r2, #0
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80036f2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80036fc:	d0ca      	beq.n	8003694 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80036fe:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003700:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003706:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003708:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800370c:	2b01      	cmp	r3, #1
 800370e:	d01e      	beq.n	800374e <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <I2C_ITError+0x164>)
 8003712:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003714:	f7ff f8c0 	bl	8002898 <HAL_DMA_Abort_IT>
 8003718:	2800      	cmp	r0, #0
 800371a:	d0cb      	beq.n	80036b4 <I2C_ITError+0x64>
        hi2c->State = HAL_I2C_STATE_READY;
 800371c:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 800371e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003720:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800372a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800372e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003730:	4798      	blx	r3
 8003732:	e7bf      	b.n	80036b4 <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003734:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003736:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003738:	491f      	ldr	r1, [pc, #124]	; (80037b8 <I2C_ITError+0x168>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800373a:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800373c:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800373e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003740:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003744:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003748:	f7ff fdfc 	bl	8003344 <HAL_I2C_ListenCpltCallback>
}
 800374c:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800374e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003750:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <I2C_ITError+0x164>)
 8003752:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003754:	f7ff f8a0 	bl	8002898 <HAL_DMA_Abort_IT>
 8003758:	2800      	cmp	r0, #0
 800375a:	d0ab      	beq.n	80036b4 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	0651      	lsls	r1, r2, #25
 8003762:	d506      	bpl.n	8003772 <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003768:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800376a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	3201      	adds	r2, #1
 8003770:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003772:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003774:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003776:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800377e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003782:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003784:	4798      	blx	r3
 8003786:	e795      	b.n	80036b4 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	2120      	movs	r1, #32
 800378a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378e:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	0652      	lsls	r2, r2, #25
 8003794:	d506      	bpl.n	80037a4 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800379a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800379c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	3201      	adds	r2, #1
 80037a2:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80037a4:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80037a6:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ae:	f7ff fed3 	bl	8003558 <HAL_I2C_AbortCpltCallback>
 80037b2:	e77f      	b.n	80036b4 <I2C_ITError+0x64>
 80037b4:	0800355d 	.word	0x0800355d
 80037b8:	ffff0000 	.word	0xffff0000

080037bc <HAL_I2C_EV_IRQHandler>:
{
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037be:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80037c0:	6803      	ldr	r3, [r0, #0]
{
 80037c2:	b08f      	sub	sp, #60	; 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80037c4:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037c8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037cc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037d0:	2910      	cmp	r1, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037d2:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037d4:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037d6:	d022      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x62>
 80037d8:	2d40      	cmp	r5, #64	; 0x40
 80037da:	d020      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80037de:	2900      	cmp	r1, #0
 80037e0:	f000 8095 	beq.w	800390e <HAL_I2C_EV_IRQHandler+0x152>
  uint32_t sr2itflags               = 0U;
 80037e4:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037e6:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037e8:	078f      	lsls	r7, r1, #30
 80037ea:	f3c1 0640 	ubfx	r6, r1, #1, #1
 80037ee:	d559      	bpl.n	80038a4 <HAL_I2C_EV_IRQHandler+0xe8>
 80037f0:	0586      	lsls	r6, r0, #22
 80037f2:	d559      	bpl.n	80038a8 <HAL_I2C_EV_IRQHandler+0xec>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037f6:	b102      	cbz	r2, 80037fa <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037f8:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037fa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80037fe:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003802:	2a28      	cmp	r2, #40	; 0x28
 8003804:	f000 821d 	beq.w	8003c42 <HAL_I2C_EV_IRQHandler+0x486>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003808:	2200      	movs	r2, #0
 800380a:	920c      	str	r2, [sp, #48]	; 0x30
 800380c:	6959      	ldr	r1, [r3, #20]
 800380e:	910c      	str	r1, [sp, #48]	; 0x30
 8003810:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 8003812:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003816:	930c      	str	r3, [sp, #48]	; 0x30
 8003818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 800381a:	b00f      	add	sp, #60	; 0x3c
 800381c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800381e:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003820:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003822:	f011 0f01 	tst.w	r1, #1
 8003826:	d11a      	bne.n	800385e <HAL_I2C_EV_IRQHandler+0xa2>
 8003828:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 800382c:	d0f5      	beq.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 800382e:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003832:	d0f2      	beq.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003834:	070e      	lsls	r6, r1, #28
 8003836:	d56d      	bpl.n	8003914 <HAL_I2C_EV_IRQHandler+0x158>
 8003838:	0586      	lsls	r6, r0, #22
 800383a:	f140 8083 	bpl.w	8003944 <HAL_I2C_EV_IRQHandler+0x188>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800383e:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003842:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003844:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003846:	2900      	cmp	r1, #0
 8003848:	f000 81e2 	beq.w	8003c10 <HAL_I2C_EV_IRQHandler+0x454>
 800384c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800384e:	2a00      	cmp	r2, #0
 8003850:	f000 81de 	beq.w	8003c10 <HAL_I2C_EV_IRQHandler+0x454>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	e7dd      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800385e:	0586      	lsls	r6, r0, #22
 8003860:	d56e      	bpl.n	8003940 <HAL_I2C_EV_IRQHandler+0x184>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003862:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003864:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8003868:	f000 81e8 	beq.w	8003c3c <HAL_I2C_EV_IRQHandler+0x480>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800386c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800386e:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003872:	bf04      	itt	eq
 8003874:	2208      	moveq	r2, #8
 8003876:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003878:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800387c:	2a40      	cmp	r2, #64	; 0x40
 800387e:	f000 81d6 	beq.w	8003c2e <HAL_I2C_EV_IRQHandler+0x472>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003882:	6922      	ldr	r2, [r4, #16]
 8003884:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003888:	f000 81b1 	beq.w	8003bee <HAL_I2C_EV_IRQHandler+0x432>
      if (hi2c->EventCount == 0U)
 800388c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800388e:	2a00      	cmp	r2, #0
 8003890:	f040 81eb 	bne.w	8003c6a <HAL_I2C_EV_IRQHandler+0x4ae>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003894:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003896:	11d2      	asrs	r2, r2, #7
 8003898:	f002 0206 	and.w	r2, r2, #6
 800389c:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80038a0:	611a      	str	r2, [r3, #16]
 80038a2:	e7ba      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038a4:	06cf      	lsls	r7, r1, #27
 80038a6:	d47b      	bmi.n	80039a0 <HAL_I2C_EV_IRQHandler+0x1e4>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038a8:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80038ac:	2a21      	cmp	r2, #33	; 0x21
 80038ae:	f000 80f4 	beq.w	8003a9a <HAL_I2C_EV_IRQHandler+0x2de>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038b2:	064e      	lsls	r6, r1, #25
 80038b4:	f140 8131 	bpl.w	8003b1a <HAL_I2C_EV_IRQHandler+0x35e>
 80038b8:	0545      	lsls	r5, r0, #21
 80038ba:	f140 812e 	bpl.w	8003b1a <HAL_I2C_EV_IRQHandler+0x35e>
 80038be:	0749      	lsls	r1, r1, #29
 80038c0:	f100 812e 	bmi.w	8003b20 <HAL_I2C_EV_IRQHandler+0x364>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038c4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80038c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038ca:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80038cc:	b292      	uxth	r2, r2
 80038ce:	2a00      	cmp	r2, #0
 80038d0:	d0a3      	beq.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038d6:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80038d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80038da:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29b      	uxth	r3, r3
 80038e0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80038e4:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038e6:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80038e8:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d195      	bne.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 80038ee:	292a      	cmp	r1, #42	; 0x2a
 80038f0:	d193      	bne.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038f2:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038f4:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038f6:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038f8:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038fa:	6853      	ldr	r3, [r2, #4]
 80038fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003900:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003902:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003904:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003908:	f7ff fd18 	bl	800333c <HAL_I2C_SlaveRxCpltCallback>
 800390c:	e785      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800390e:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003910:	6959      	ldr	r1, [r3, #20]
 8003912:	e769      	b.n	80037e8 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003914:	078e      	lsls	r6, r1, #30
 8003916:	d515      	bpl.n	8003944 <HAL_I2C_EV_IRQHandler+0x188>
 8003918:	0586      	lsls	r6, r0, #22
 800391a:	d513      	bpl.n	8003944 <HAL_I2C_EV_IRQHandler+0x188>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800391c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003920:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003922:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003924:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003928:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800392a:	2922      	cmp	r1, #34	; 0x22
 800392c:	f000 81b2 	beq.w	8003c94 <HAL_I2C_EV_IRQHandler+0x4d8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003930:	2200      	movs	r2, #0
 8003932:	920a      	str	r2, [sp, #40]	; 0x28
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	920a      	str	r2, [sp, #40]	; 0x28
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	930a      	str	r3, [sp, #40]	; 0x28
 800393c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800393e:	e76c      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003940:	070e      	lsls	r6, r1, #28
 8003942:	d5e7      	bpl.n	8003914 <HAL_I2C_EV_IRQHandler+0x158>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003944:	077f      	lsls	r7, r7, #29
 8003946:	f140 80f4 	bpl.w	8003b32 <HAL_I2C_EV_IRQHandler+0x376>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800394a:	685e      	ldr	r6, [r3, #4]
 800394c:	0536      	lsls	r6, r6, #20
 800394e:	f53f af64 	bmi.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003952:	060f      	lsls	r7, r1, #24
 8003954:	f140 8114 	bpl.w	8003b80 <HAL_I2C_EV_IRQHandler+0x3c4>
 8003958:	0546      	lsls	r6, r0, #21
 800395a:	f140 8111 	bpl.w	8003b80 <HAL_I2C_EV_IRQHandler+0x3c4>
 800395e:	074f      	lsls	r7, r1, #29
 8003960:	f100 8111 	bmi.w	8003b86 <HAL_I2C_EV_IRQHandler+0x3ca>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003964:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003968:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800396a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800396e:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003970:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003972:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003974:	2800      	cmp	r0, #0
 8003976:	f040 823a 	bne.w	8003dee <HAL_I2C_EV_IRQHandler+0x632>
 800397a:	2a21      	cmp	r2, #33	; 0x21
 800397c:	f000 8341 	beq.w	8004002 <HAL_I2C_EV_IRQHandler+0x846>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003980:	2940      	cmp	r1, #64	; 0x40
 8003982:	f47f af4a 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003986:	2a22      	cmp	r2, #34	; 0x22
 8003988:	f47f af47 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount == 0U)
 800398c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800398e:	b292      	uxth	r2, r2
 8003990:	2a00      	cmp	r2, #0
 8003992:	f040 82c1 	bne.w	8003f18 <HAL_I2C_EV_IRQHandler+0x75c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	e73c      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a0:	0585      	lsls	r5, r0, #22
 80039a2:	d581      	bpl.n	80038a8 <HAL_I2C_EV_IRQHandler+0xec>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a4:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a8:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039aa:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039b0:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80039b2:	960d      	str	r6, [sp, #52]	; 0x34
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	920d      	str	r2, [sp, #52]	; 0x34
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	0511      	lsls	r1, r2, #20
 80039ce:	d521      	bpl.n	8003a14 <HAL_I2C_EV_IRQHandler+0x258>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039d0:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80039d4:	2a22      	cmp	r2, #34	; 0x22
 80039d6:	f000 817a 	beq.w	8003cce <HAL_I2C_EV_IRQHandler+0x512>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80039da:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80039dc:	6802      	ldr	r2, [r0, #0]
 80039de:	6852      	ldr	r2, [r2, #4]
 80039e0:	b292      	uxth	r2, r2
 80039e2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80039e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039e6:	b292      	uxth	r2, r2
 80039e8:	b11a      	cbz	r2, 80039f2 <HAL_I2C_EV_IRQHandler+0x236>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039ec:	f042 0204 	orr.w	r2, r2, #4
 80039f0:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039fa:	f7ff f82b 	bl	8002a54 <HAL_DMA_GetState>
 80039fe:	2801      	cmp	r0, #1
 8003a00:	d008      	beq.n	8003a14 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a02:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003a04:	4ba2      	ldr	r3, [pc, #648]	; (8003c90 <HAL_I2C_EV_IRQHandler+0x4d4>)
 8003a06:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a08:	f7fe ff46 	bl	8002898 <HAL_DMA_Abort_IT>
 8003a0c:	b110      	cbz	r0, 8003a14 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a0e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003a10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a12:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8003a14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	b313      	cbz	r3, 8003a60 <HAL_I2C_EV_IRQHandler+0x2a4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	0752      	lsls	r2, r2, #29
 8003a20:	d50a      	bpl.n	8003a38 <HAL_I2C_EV_IRQHandler+0x27c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a26:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003a28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003a2c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003a2e:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 8003a30:	b292      	uxth	r2, r2
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a36:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	0657      	lsls	r7, r2, #25
 8003a3c:	d509      	bpl.n	8003a52 <HAL_I2C_EV_IRQHandler+0x296>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a42:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003a44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a46:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003a4c:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8003a4e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a50:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8003a52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	b11b      	cbz	r3, 8003a60 <HAL_I2C_EV_IRQHandler+0x2a4>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a5a:	f043 0304 	orr.w	r3, r3, #4
 8003a5e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 80dd 	bne.w	8003c22 <HAL_I2C_EV_IRQHandler+0x466>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a68:	2d2a      	cmp	r5, #42	; 0x2a
 8003a6a:	f000 8151 	beq.w	8003d10 <HAL_I2C_EV_IRQHandler+0x554>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a6e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003a72:	2b28      	cmp	r3, #40	; 0x28
 8003a74:	f000 8154 	beq.w	8003d20 <HAL_I2C_EV_IRQHandler+0x564>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a7a:	2b22      	cmp	r3, #34	; 0x22
 8003a7c:	d002      	beq.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2c8>
 8003a7e:	2d22      	cmp	r5, #34	; 0x22
 8003a80:	f47f aecb 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a84:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a88:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a8a:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003a8c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a94:	f7ff fc52 	bl	800333c <HAL_I2C_SlaveRxCpltCallback>
 8003a98:	e6bf      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a9a:	060e      	lsls	r6, r1, #24
 8003a9c:	d528      	bpl.n	8003af0 <HAL_I2C_EV_IRQHandler+0x334>
 8003a9e:	0545      	lsls	r5, r0, #21
 8003aa0:	d526      	bpl.n	8003af0 <HAL_I2C_EV_IRQHandler+0x334>
 8003aa2:	0749      	lsls	r1, r1, #29
 8003aa4:	d427      	bmi.n	8003af6 <HAL_I2C_EV_IRQHandler+0x33a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aa6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003aaa:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aac:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003aae:	b289      	uxth	r1, r1
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	f43f aeb2 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ab6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ab8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003abc:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8003abe:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003ac0:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003ac2:	3901      	subs	r1, #1
 8003ac4:	b289      	uxth	r1, r1
 8003ac6:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ac8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003aca:	b289      	uxth	r1, r1
 8003acc:	2900      	cmp	r1, #0
 8003ace:	f47f aea4 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003ad2:	2829      	cmp	r0, #41	; 0x29
 8003ad4:	f47f aea1 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ad8:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ada:	6859      	ldr	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003adc:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ade:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003ae2:	6059      	str	r1, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ae4:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ae6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003aea:	f7ff fc25 	bl	8003338 <HAL_I2C_SlaveTxCpltCallback>
 8003aee:	e694      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af0:	074a      	lsls	r2, r1, #29
 8003af2:	f57f ae92 	bpl.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003af6:	0587      	lsls	r7, r0, #22
 8003af8:	f57f ae8f 	bpl.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8003afc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003afe:	b292      	uxth	r2, r2
 8003b00:	2a00      	cmp	r2, #0
 8003b02:	f43f ae8a 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b08:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003b0c:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8003b0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003b10:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003b18:	e67f      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b1a:	074a      	lsls	r2, r1, #29
 8003b1c:	f57f ae7d 	bpl.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003b20:	0587      	lsls	r7, r0, #22
 8003b22:	f57f ae7a 	bpl.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8003b26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	2a00      	cmp	r2, #0
 8003b2c:	f43f ae75 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003b30:	e01b      	b.n	8003b6a <HAL_I2C_EV_IRQHandler+0x3ae>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	0512      	lsls	r2, r2, #20
 8003b36:	f53f ae70 	bmi.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b3a:	064f      	lsls	r7, r1, #25
 8003b3c:	d432      	bmi.n	8003ba4 <HAL_I2C_EV_IRQHandler+0x3e8>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b3e:	0749      	lsls	r1, r1, #29
 8003b40:	f57f ae6b 	bpl.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003b44:	0582      	lsls	r2, r0, #22
 8003b46:	f57f ae68 	bpl.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8003b4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b4e:	b292      	uxth	r2, r2
 8003b50:	2a04      	cmp	r2, #4
 8003b52:	f000 8119 	beq.w	8003d88 <HAL_I2C_EV_IRQHandler+0x5cc>
  else if (hi2c->XferCount == 3U)
 8003b56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b58:	b292      	uxth	r2, r2
 8003b5a:	2a03      	cmp	r2, #3
 8003b5c:	f000 8159 	beq.w	8003e12 <HAL_I2C_EV_IRQHandler+0x656>
  else if (hi2c->XferCount == 2U)
 8003b60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b62:	b292      	uxth	r2, r2
 8003b64:	2a02      	cmp	r2, #2
 8003b66:	f000 8185 	beq.w	8003e74 <HAL_I2C_EV_IRQHandler+0x6b8>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b6e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003b70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003b72:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003b78:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8003b7a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003b7c:	6262      	str	r2, [r4, #36]	; 0x24
      }
 8003b7e:	e64c      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b80:	074e      	lsls	r6, r1, #29
 8003b82:	f57f ae4a 	bpl.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003b86:	0581      	lsls	r1, r0, #22
 8003b88:	f57f ae47 	bpl.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b8c:	2a21      	cmp	r2, #33	; 0x21
 8003b8e:	f000 8103 	beq.w	8003d98 <HAL_I2C_EV_IRQHandler+0x5dc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b92:	2d40      	cmp	r5, #64	; 0x40
 8003b94:	f47f ae41 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b98:	4620      	mov	r0, r4
}
 8003b9a:	b00f      	add	sp, #60	; 0x3c
 8003b9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ba0:	f7ff bbd4 	b.w	800334c <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ba4:	0546      	lsls	r6, r0, #21
 8003ba6:	d5ca      	bpl.n	8003b3e <HAL_I2C_EV_IRQHandler+0x382>
 8003ba8:	074d      	lsls	r5, r1, #29
 8003baa:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8003bae:	d4c9      	bmi.n	8003b44 <HAL_I2C_EV_IRQHandler+0x388>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bb0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003bb4:	2922      	cmp	r1, #34	; 0x22
 8003bb6:	f47f ae30 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    tmp = hi2c->XferCount;
 8003bba:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003bbc:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8003bbe:	2903      	cmp	r1, #3
 8003bc0:	f240 81b0 	bls.w	8003f24 <HAL_I2C_EV_IRQHandler+0x768>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003bca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003bcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003bd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003bd6:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8003bdc:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8003bde:	f47f ae1c 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	6853      	ldr	r3, [r2, #4]
 8003be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bea:	6053      	str	r3, [r2, #4]
 8003bec:	e615      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bee:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003bf2:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bf4:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bf6:	bf16      	itet	ne
 8003bf8:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bfc:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c00:	b2d2      	uxtbne	r2, r2
 8003c02:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c04:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003c06:	b11a      	cbz	r2, 8003c10 <HAL_I2C_EV_IRQHandler+0x454>
 8003c08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c0a:	2a00      	cmp	r2, #0
 8003c0c:	f47f ae22 	bne.w	8003854 <HAL_I2C_EV_IRQHandler+0x98>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	f43f ae01 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003c18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c1a:	2a00      	cmp	r2, #0
 8003c1c:	f47f ae1a 	bne.w	8003854 <HAL_I2C_EV_IRQHandler+0x98>
 8003c20:	e5fb      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    I2C_ITError(hi2c);
 8003c22:	4620      	mov	r0, r4
}
 8003c24:	b00f      	add	sp, #60	; 0x3c
 8003c26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003c2a:	f7ff bd11 	b.w	8003650 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 8003c2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c30:	bb3a      	cbnz	r2, 8003c82 <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c32:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003c34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	e5ee      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003c40:	e61a      	b.n	8003878 <HAL_I2C_EV_IRQHandler+0xbc>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c42:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c44:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4c:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c4e:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8003c50:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c54:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c56:	bf54      	ite	pl
 8003c58:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c5a:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c5c:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 8003c60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c64:	f7ff fb6c 	bl	8003340 <HAL_I2C_AddrCallback>
 8003c68:	e5d7      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8003c6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c6c:	2a01      	cmp	r2, #1
 8003c6e:	f47f add4 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c72:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003c74:	11d2      	asrs	r2, r2, #7
 8003c76:	f002 0206 	and.w	r2, r2, #6
 8003c7a:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8003c7e:	611a      	str	r2, [r3, #16]
 8003c80:	e5cb      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c82:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	611a      	str	r2, [r3, #16]
 8003c8c:	e5c5      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003c8e:	bf00      	nop
 8003c90:	0800355d 	.word	0x0800355d
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c94:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003c96:	b911      	cbnz	r1, 8003c9e <HAL_I2C_EV_IRQHandler+0x4e2>
 8003c98:	2a40      	cmp	r2, #64	; 0x40
 8003c9a:	f000 80a1 	beq.w	8003de0 <HAL_I2C_EV_IRQHandler+0x624>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c9e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003ca0:	b922      	cbnz	r2, 8003cac <HAL_I2C_EV_IRQHandler+0x4f0>
 8003ca2:	6921      	ldr	r1, [r4, #16]
 8003ca4:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8003ca8:	f000 80a5 	beq.w	8003df6 <HAL_I2C_EV_IRQHandler+0x63a>
      if (hi2c->XferCount == 0U)
 8003cac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	d142      	bne.n	8003d3a <HAL_I2C_EV_IRQHandler+0x57e>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb4:	9202      	str	r2, [sp, #8]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	9202      	str	r2, [sp, #8]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	9202      	str	r2, [sp, #8]
 8003cbe:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	6523      	str	r3, [r4, #80]	; 0x50
 8003ccc:	e5a5      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003cce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cd0:	6802      	ldr	r2, [r0, #0]
 8003cd2:	6852      	ldr	r2, [r2, #4]
 8003cd4:	b292      	uxth	r2, r2
 8003cd6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003cd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cda:	b292      	uxth	r2, r2
 8003cdc:	b11a      	cbz	r2, 8003ce6 <HAL_I2C_EV_IRQHandler+0x52a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cde:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ce0:	f042 0204 	orr.w	r2, r2, #4
 8003ce4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cec:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cee:	f7fe feb1 	bl	8002a54 <HAL_DMA_GetState>
 8003cf2:	2801      	cmp	r0, #1
 8003cf4:	f43f ae8e 	beq.w	8003a14 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cf8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cfa:	4ba6      	ldr	r3, [pc, #664]	; (8003f94 <HAL_I2C_EV_IRQHandler+0x7d8>)
 8003cfc:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cfe:	f7fe fdcb 	bl	8002898 <HAL_DMA_Abort_IT>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	f43f ae86 	beq.w	8003a14 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d0c:	4798      	blx	r3
 8003d0e:	e681      	b.n	8003a14 <HAL_I2C_EV_IRQHandler+0x258>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d10:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d12:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d14:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d1a:	f7ff fb0f 	bl	800333c <HAL_I2C_SlaveRxCpltCallback>
 8003d1e:	e6a6      	b.n	8003a6e <HAL_I2C_EV_IRQHandler+0x2b2>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d20:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d24:	499c      	ldr	r1, [pc, #624]	; (8003f98 <HAL_I2C_EV_IRQHandler+0x7dc>)
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d26:	4620      	mov	r0, r4
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d28:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d34:	f7ff fb06 	bl	8003344 <HAL_I2C_ListenCpltCallback>
 8003d38:	e56f      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->XferCount == 1U)
 8003d3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	2a01      	cmp	r2, #1
 8003d40:	d076      	beq.n	8003e30 <HAL_I2C_EV_IRQHandler+0x674>
      else if (hi2c->XferCount == 2U)
 8003d42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d44:	b292      	uxth	r2, r2
 8003d46:	2a02      	cmp	r2, #2
 8003d48:	f000 812e 	beq.w	8003fa8 <HAL_I2C_EV_IRQHandler+0x7ec>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d52:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	0511      	lsls	r1, r2, #20
 8003d58:	d50e      	bpl.n	8003d78 <HAL_I2C_EV_IRQHandler+0x5bc>
 8003d5a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003d5e:	d007      	beq.n	8003d70 <HAL_I2C_EV_IRQHandler+0x5b4>
 8003d60:	3801      	subs	r0, #1
 8003d62:	281f      	cmp	r0, #31
 8003d64:	d808      	bhi.n	8003d78 <HAL_I2C_EV_IRQHandler+0x5bc>
 8003d66:	4a8d      	ldr	r2, [pc, #564]	; (8003f9c <HAL_I2C_EV_IRQHandler+0x7e0>)
 8003d68:	fa22 f000 	lsr.w	r0, r2, r0
 8003d6c:	07c2      	lsls	r2, r0, #31
 8003d6e:	d503      	bpl.n	8003d78 <HAL_I2C_EV_IRQHandler+0x5bc>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d76:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	9309      	str	r3, [sp, #36]	; 0x24
 8003d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d86:	e79f      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d88:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d90:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003d96:	e6eb      	b.n	8003b70 <HAL_I2C_EV_IRQHandler+0x3b4>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d9a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003d9e:	2a21      	cmp	r2, #33	; 0x21
 8003da0:	f47f ad3b 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount != 0U)
 8003da4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003da6:	b292      	uxth	r2, r2
 8003da8:	2a00      	cmp	r2, #0
 8003daa:	f47f aeac 	bne.w	8003b06 <HAL_I2C_EV_IRQHandler+0x34a>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dae:	2908      	cmp	r1, #8
 8003db0:	f000 809a 	beq.w	8003ee8 <HAL_I2C_EV_IRQHandler+0x72c>
 8003db4:	2920      	cmp	r1, #32
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_I2C_EV_IRQHandler+0x72c>
 8003dba:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003dbe:	f000 8093 	beq.w	8003ee8 <HAL_I2C_EV_IRQHandler+0x72c>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dc2:	2611      	movs	r6, #17
        hi2c->State = HAL_I2C_STATE_READY;
 8003dc4:	2520      	movs	r5, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dc6:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003dce:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dd0:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dda:	f7ff faa9 	bl	8003330 <HAL_I2C_MasterTxCpltCallback>
 8003dde:	e51c      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de0:	9100      	str	r1, [sp, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	9200      	str	r2, [sp, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	9b00      	ldr	r3, [sp, #0]
 8003dec:	e515      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003dee:	2a21      	cmp	r2, #33	; 0x21
 8003df0:	f43f adcc 	beq.w	800398c <HAL_I2C_EV_IRQHandler+0x1d0>
 8003df4:	e5c4      	b.n	8003980 <HAL_I2C_EV_IRQHandler+0x1c4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	9201      	str	r2, [sp, #4]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	9201      	str	r2, [sp, #4]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	9201      	str	r2, [sp, #4]
 8003e00:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e08:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003e0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	6523      	str	r3, [r4, #80]	; 0x50
 8003e10:	e503      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e12:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e14:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e1c:	f43f aea5 	beq.w	8003b6a <HAL_I2C_EV_IRQHandler+0x3ae>
 8003e20:	2902      	cmp	r1, #2
 8003e22:	f43f aea2 	beq.w	8003b6a <HAL_I2C_EV_IRQHandler+0x3ae>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e69c      	b.n	8003b6a <HAL_I2C_EV_IRQHandler+0x3ae>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e30:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003e34:	f000 8104 	beq.w	8004040 <HAL_I2C_EV_IRQHandler+0x884>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e38:	2808      	cmp	r0, #8
 8003e3a:	f000 80d2 	beq.w	8003fe2 <HAL_I2C_EV_IRQHandler+0x826>
 8003e3e:	2820      	cmp	r0, #32
 8003e40:	f000 80cf 	beq.w	8003fe2 <HAL_I2C_EV_IRQHandler+0x826>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e44:	2d12      	cmp	r5, #18
 8003e46:	f000 8145 	beq.w	80040d4 <HAL_I2C_EV_IRQHandler+0x918>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e4a:	2810      	cmp	r0, #16
 8003e4c:	f200 8144 	bhi.w	80040d8 <HAL_I2C_EV_IRQHandler+0x91c>
 8003e50:	4a53      	ldr	r2, [pc, #332]	; (8003fa0 <HAL_I2C_EV_IRQHandler+0x7e4>)
 8003e52:	fa22 f000 	lsr.w	r0, r2, r0
 8003e56:	07c7      	lsls	r7, r0, #31
 8003e58:	f140 813e 	bpl.w	80040d8 <HAL_I2C_EV_IRQHandler+0x91c>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e62:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e64:	2200      	movs	r2, #0
 8003e66:	9205      	str	r2, [sp, #20]
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	9205      	str	r2, [sp, #20]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	9305      	str	r3, [sp, #20]
 8003e70:	9b05      	ldr	r3, [sp, #20]
 8003e72:	e729      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e74:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e76:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e78:	f000 80de 	beq.w	8004038 <HAL_I2C_EV_IRQHandler+0x87c>
 8003e7c:	2910      	cmp	r1, #16
 8003e7e:	f000 80db 	beq.w	8004038 <HAL_I2C_EV_IRQHandler+0x87c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e82:	2904      	cmp	r1, #4
 8003e84:	f000 8117 	beq.w	80040b6 <HAL_I2C_EV_IRQHandler+0x8fa>
 8003e88:	2902      	cmp	r1, #2
 8003e8a:	f000 8114 	beq.w	80040b6 <HAL_I2C_EV_IRQHandler+0x8fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e92:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	2020      	movs	r0, #32
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e9a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003e9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9e:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount--;
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea8:	6912      	ldr	r2, [r2, #16]
    hi2c->pBuffPtr++;
 8003eaa:	1c59      	adds	r1, r3, #1
 8003eac:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	705a      	strb	r2, [r3, #1]
    hi2c->XferCount--;
 8003eb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003eb2:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003eba:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8003ebc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->pBuffPtr++;
 8003ec2:	3201      	adds	r2, #1
 8003ec4:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ec6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ecc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	f000 80c9 	beq.w	8004068 <HAL_I2C_EV_IRQHandler+0x8ac>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ed8:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ede:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ee0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ee2:	f7ff fa27 	bl	8003334 <HAL_I2C_MasterRxCpltCallback>
 8003ee6:	e498      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ee8:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	2020      	movs	r0, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003ef2:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003efa:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003efc:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f02:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f06:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f08:	2b40      	cmp	r3, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f0e:	f47f af64 	bne.w	8003dda <HAL_I2C_EV_IRQHandler+0x61e>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f12:	f7ff fa19 	bl	8003348 <HAL_I2C_MemTxCpltCallback>
 8003f16:	e480      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f18:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003f1c:	2a40      	cmp	r2, #64	; 0x40
 8003f1e:	f47f adf2 	bne.w	8003b06 <HAL_I2C_EV_IRQHandler+0x34a>
 8003f22:	e639      	b.n	8003b98 <HAL_I2C_EV_IRQHandler+0x3dc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003f26:	2802      	cmp	r0, #2
 8003f28:	f43f ac77 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003f2c:	2901      	cmp	r1, #1
 8003f2e:	f63f ac74 	bhi.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f32:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003f36:	481b      	ldr	r0, [pc, #108]	; (8003fa4 <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 8003f38:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f3a:	6802      	ldr	r2, [r0, #0]
 8003f3c:	fbb2 f2f1 	udiv	r2, r2, r1
 8003f40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f44:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f46:	e004      	b.n	8003f52 <HAL_I2C_EV_IRQHandler+0x796>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8003f4e:	f000 80c8 	beq.w	80040e2 <HAL_I2C_EV_IRQHandler+0x926>
    count--;
 8003f52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f54:	3a01      	subs	r2, #1
 8003f56:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8003f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f5a:	2900      	cmp	r1, #0
 8003f5c:	d1f4      	bne.n	8003f48 <HAL_I2C_EV_IRQHandler+0x78c>
        hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	2520      	movs	r5, #32
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f62:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f64:	432a      	orrs	r2, r5
 8003f66:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f68:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_ErrorCallback(hi2c);
 8003f6a:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	7033      	strb	r3, [r6, #0]
        hi2c->XferCount--;
 8003f76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003f78:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003f7e:	3201      	adds	r2, #1
        hi2c->XferCount--;
 8003f80:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003f82:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f8c:	f7ff fa3c 	bl	8003408 <HAL_I2C_ErrorCallback>
 8003f90:	e443      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8003f92:	bf00      	nop
 8003f94:	0800355d 	.word	0x0800355d
 8003f98:	ffff0000 	.word	0xffff0000
 8003f9c:	80008081 	.word	0x80008081
 8003fa0:	00010014 	.word	0x00010014
 8003fa4:	20000000 	.word	0x20000000
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fa8:	2810      	cmp	r0, #16
 8003faa:	d966      	bls.n	800407a <HAL_I2C_EV_IRQHandler+0x8be>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fac:	2100      	movs	r1, #0
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb4:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb6:	9107      	str	r1, [sp, #28]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	9207      	str	r2, [sp, #28]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	9207      	str	r2, [sp, #28]
 8003fc0:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	0516      	lsls	r6, r2, #20
 8003fce:	f57f ae7b 	bpl.w	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
 8003fd2:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003fd6:	d164      	bne.n	80040a2 <HAL_I2C_EV_IRQHandler+0x8e6>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fde:	605a      	str	r2, [r3, #4]
 8003fe0:	e672      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe2:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fea:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fec:	9106      	str	r1, [sp, #24]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	9206      	str	r2, [sp, #24]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	9206      	str	r2, [sp, #24]
 8003ff6:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e662      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004002:	2d08      	cmp	r5, #8
 8004004:	f43f af70 	beq.w	8003ee8 <HAL_I2C_EV_IRQHandler+0x72c>
 8004008:	2d20      	cmp	r5, #32
 800400a:	f43f af6d 	beq.w	8003ee8 <HAL_I2C_EV_IRQHandler+0x72c>
 800400e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004012:	f43f af69 	beq.w	8003ee8 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004016:	2611      	movs	r6, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800401a:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401c:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800401e:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004020:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004024:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004026:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800402c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004030:	f7ff f97e 	bl	8003330 <HAL_I2C_MasterTxCpltCallback>
 8004034:	f7ff bbf1 	b.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e729      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x6d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004046:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800404e:	d036      	beq.n	80040be <HAL_I2C_EV_IRQHandler+0x902>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004050:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004058:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	9103      	str	r1, [sp, #12]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	9203      	str	r2, [sp, #12]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	9303      	str	r3, [sp, #12]
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	e62f      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	2300      	movs	r3, #0
      HAL_I2C_MemRxCpltCallback(hi2c);
 800406a:	4620      	mov	r0, r4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004070:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004072:	f7ff f9c7 	bl	8003404 <HAL_I2C_MemRxCpltCallback>
 8004076:	f7ff bbd0 	b.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800407a:	4a2b      	ldr	r2, [pc, #172]	; (8004128 <HAL_I2C_EV_IRQHandler+0x96c>)
 800407c:	40c2      	lsrs	r2, r0
 800407e:	43d2      	mvns	r2, r2
 8004080:	f012 0201 	ands.w	r2, r2, #1
 8004084:	d192      	bne.n	8003fac <HAL_I2C_EV_IRQHandler+0x7f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004086:	6819      	ldr	r1, [r3, #0]
 8004088:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800408c:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	9208      	str	r2, [sp, #32]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	9208      	str	r2, [sp, #32]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	9208      	str	r2, [sp, #32]
 8004098:	9a08      	ldr	r2, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	0515      	lsls	r5, r2, #20
 800409e:	f57f ae13 	bpl.w	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
 80040a2:	3801      	subs	r0, #1
 80040a4:	281f      	cmp	r0, #31
 80040a6:	f63f ae0f 	bhi.w	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
 80040aa:	4a20      	ldr	r2, [pc, #128]	; (800412c <HAL_I2C_EV_IRQHandler+0x970>)
 80040ac:	40c2      	lsrs	r2, r0
 80040ae:	07d0      	lsls	r0, r2, #31
 80040b0:	f57f ae0a 	bpl.w	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
 80040b4:	e790      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x81c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e6ea      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x6d8>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	9204      	str	r2, [sp, #16]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	9204      	str	r2, [sp, #16]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	9204      	str	r2, [sp, #16]
 80040c8:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e5f9      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x50c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040d4:	2801      	cmp	r0, #1
 80040d6:	d184      	bne.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x826>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e6c0      	b.n	8003e64 <HAL_I2C_EV_IRQHandler+0x6a8>
        hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	2020      	movs	r0, #32
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e4:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80040ec:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ee:	6859      	ldr	r1, [r3, #4]
 80040f0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80040f4:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	702b      	strb	r3, [r5, #0]
        hi2c->XferCount--;
 80040fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80040fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29b      	uxth	r3, r3
 8004102:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004104:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004108:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 800410c:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800410e:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8004110:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004112:	f47f aee1 	bne.w	8003ed8 <HAL_I2C_EV_IRQHandler+0x71c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 800411a:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800411e:	f7ff f971 	bl	8003404 <HAL_I2C_MemRxCpltCallback>
 8004122:	f7ff bb7a 	b.w	800381a <HAL_I2C_EV_IRQHandler+0x5e>
 8004126:	bf00      	nop
 8004128:	00010014 	.word	0x00010014
 800412c:	80008081 	.word	0x80008081

08004130 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004130:	2800      	cmp	r0, #0
 8004132:	f000 81c3 	beq.w	80044bc <HAL_RCC_OscConfig+0x38c>
{
 8004136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413a:	6803      	ldr	r3, [r0, #0]
 800413c:	4604      	mov	r4, r0
 800413e:	07dd      	lsls	r5, r3, #31
{
 8004140:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004142:	d535      	bpl.n	80041b0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004144:	49a6      	ldr	r1, [pc, #664]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 8004146:	684a      	ldr	r2, [r1, #4]
 8004148:	f002 020c 	and.w	r2, r2, #12
 800414c:	2a04      	cmp	r2, #4
 800414e:	f000 80ef 	beq.w	8004330 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004152:	684a      	ldr	r2, [r1, #4]
 8004154:	f002 020c 	and.w	r2, r2, #12
 8004158:	2a08      	cmp	r2, #8
 800415a:	f000 80e5 	beq.w	8004328 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800415e:	6863      	ldr	r3, [r4, #4]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004164:	d010      	beq.n	8004188 <HAL_RCC_OscConfig+0x58>
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 810d 	beq.w	8004386 <HAL_RCC_OscConfig+0x256>
 800416c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004170:	f000 818f 	beq.w	8004492 <HAL_RCC_OscConfig+0x362>
 8004174:	4b9a      	ldr	r3, [pc, #616]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e004      	b.n	8004192 <HAL_RCC_OscConfig+0x62>
 8004188:	4a95      	ldr	r2, [pc, #596]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fe fa63 	bl	800265c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	4e92      	ldr	r6, [pc, #584]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004198:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	e005      	b.n	80041a8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800419c:	f7fe fa5e 	bl	800265c <HAL_GetTick>
 80041a0:	1b40      	subs	r0, r0, r5
 80041a2:	2864      	cmp	r0, #100	; 0x64
 80041a4:	f200 80eb 	bhi.w	800437e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a8:	6833      	ldr	r3, [r6, #0]
 80041aa:	039a      	lsls	r2, r3, #14
 80041ac:	d5f6      	bpl.n	800419c <HAL_RCC_OscConfig+0x6c>
 80041ae:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b0:	079f      	lsls	r7, r3, #30
 80041b2:	d528      	bpl.n	8004206 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b4:	4a8a      	ldr	r2, [pc, #552]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 80041b6:	6851      	ldr	r1, [r2, #4]
 80041b8:	f011 0f0c 	tst.w	r1, #12
 80041bc:	f000 808e 	beq.w	80042dc <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041c0:	6851      	ldr	r1, [r2, #4]
 80041c2:	f001 010c 	and.w	r1, r1, #12
 80041c6:	2908      	cmp	r1, #8
 80041c8:	f000 8084 	beq.w	80042d4 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041cc:	6923      	ldr	r3, [r4, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8125 	beq.w	800441e <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d4:	2201      	movs	r2, #1
 80041d6:	4b83      	ldr	r3, [pc, #524]	; (80043e4 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	4e81      	ldr	r6, [pc, #516]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 80041da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80041dc:	f7fe fa3e 	bl	800265c <HAL_GetTick>
 80041e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e2:	e005      	b.n	80041f0 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e4:	f7fe fa3a 	bl	800265c <HAL_GetTick>
 80041e8:	1b40      	subs	r0, r0, r5
 80041ea:	2802      	cmp	r0, #2
 80041ec:	f200 80c7 	bhi.w	800437e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	6833      	ldr	r3, [r6, #0]
 80041f2:	0798      	lsls	r0, r3, #30
 80041f4:	d5f6      	bpl.n	80041e4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	6833      	ldr	r3, [r6, #0]
 80041f8:	6962      	ldr	r2, [r4, #20]
 80041fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80041fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004202:	6033      	str	r3, [r6, #0]
 8004204:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004206:	071a      	lsls	r2, r3, #28
 8004208:	d41f      	bmi.n	800424a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800420a:	075d      	lsls	r5, r3, #29
 800420c:	d541      	bpl.n	8004292 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420e:	4b74      	ldr	r3, [pc, #464]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	00d0      	lsls	r0, r2, #3
 8004214:	d57d      	bpl.n	8004312 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8004216:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b73      	ldr	r3, [pc, #460]	; (80043e8 <HAL_RCC_OscConfig+0x2b8>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	05d1      	lsls	r1, r2, #23
 800421e:	f140 809d 	bpl.w	800435c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004222:	68e3      	ldr	r3, [r4, #12]
 8004224:	2b01      	cmp	r3, #1
 8004226:	f000 810b 	beq.w	8004440 <HAL_RCC_OscConfig+0x310>
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80c5 	beq.w	80043ba <HAL_RCC_OscConfig+0x28a>
 8004230:	2b05      	cmp	r3, #5
 8004232:	4b6b      	ldr	r3, [pc, #428]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	f000 8139 	beq.w	80044ac <HAL_RCC_OscConfig+0x37c>
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	621a      	str	r2, [r3, #32]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	f022 0204 	bic.w	r2, r2, #4
 8004246:	621a      	str	r2, [r3, #32]
 8004248:	e0ff      	b.n	800444a <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424a:	69a3      	ldr	r3, [r4, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d050      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8004250:	2201      	movs	r2, #1
 8004252:	4b66      	ldr	r3, [pc, #408]	; (80043ec <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004254:	4e62      	ldr	r6, [pc, #392]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8004256:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004258:	f7fe fa00 	bl	800265c <HAL_GetTick>
 800425c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	e005      	b.n	800426c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004260:	f7fe f9fc 	bl	800265c <HAL_GetTick>
 8004264:	1b40      	subs	r0, r0, r5
 8004266:	2802      	cmp	r0, #2
 8004268:	f200 8089 	bhi.w	800437e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800426e:	079b      	lsls	r3, r3, #30
 8004270:	d5f6      	bpl.n	8004260 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004272:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <HAL_RCC_OscConfig+0x2c0>)
 8004274:	4a5f      	ldr	r2, [pc, #380]	; (80043f4 <HAL_RCC_OscConfig+0x2c4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	0a5b      	lsrs	r3, r3, #9
 800427e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004280:	bf00      	nop
  }
  while (Delay --);
 8004282:	9b01      	ldr	r3, [sp, #4]
 8004284:	1e5a      	subs	r2, r3, #1
 8004286:	9201      	str	r2, [sp, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f9      	bne.n	8004280 <HAL_RCC_OscConfig+0x150>
 800428c:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428e:	075d      	lsls	r5, r3, #29
 8004290:	d4bd      	bmi.n	800420e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004292:	69e0      	ldr	r0, [r4, #28]
 8004294:	b1d0      	cbz	r0, 80042cc <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004296:	4d52      	ldr	r5, [pc, #328]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 8004298:	686a      	ldr	r2, [r5, #4]
 800429a:	f002 020c 	and.w	r2, r2, #12
 800429e:	2a08      	cmp	r2, #8
 80042a0:	f000 80e6 	beq.w	8004470 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80042a6:	f04f 0100 	mov.w	r1, #0
 80042aa:	4a53      	ldr	r2, [pc, #332]	; (80043f8 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ac:	f000 8108 	beq.w	80044c0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 80042b0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80042b2:	f7fe f9d3 	bl	800265c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80042b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ba:	e004      	b.n	80042c6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fe f9ce 	bl	800265c <HAL_GetTick>
 80042c0:	1b40      	subs	r0, r0, r5
 80042c2:	2802      	cmp	r0, #2
 80042c4:	d85b      	bhi.n	800437e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	d4f7      	bmi.n	80042bc <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 80042cc:	2000      	movs	r0, #0
}
 80042ce:	b002      	add	sp, #8
 80042d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042d4:	6852      	ldr	r2, [r2, #4]
 80042d6:	03d6      	lsls	r6, r2, #15
 80042d8:	f53f af78 	bmi.w	80041cc <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042dc:	4a40      	ldr	r2, [pc, #256]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	0795      	lsls	r5, r2, #30
 80042e2:	d52f      	bpl.n	8004344 <HAL_RCC_OscConfig+0x214>
 80042e4:	6922      	ldr	r2, [r4, #16]
 80042e6:	2a01      	cmp	r2, #1
 80042e8:	d02c      	beq.n	8004344 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80042ea:	2001      	movs	r0, #1
}
 80042ec:	b002      	add	sp, #8
 80042ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80042f2:	4a3e      	ldr	r2, [pc, #248]	; (80043ec <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	4e3a      	ldr	r6, [pc, #232]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 80042f6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80042f8:	f7fe f9b0 	bl	800265c <HAL_GetTick>
 80042fc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fe:	e004      	b.n	800430a <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004300:	f7fe f9ac 	bl	800265c <HAL_GetTick>
 8004304:	1b40      	subs	r0, r0, r5
 8004306:	2802      	cmp	r0, #2
 8004308:	d839      	bhi.n	800437e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800430c:	079f      	lsls	r7, r3, #30
 800430e:	d4f7      	bmi.n	8004300 <HAL_RCC_OscConfig+0x1d0>
 8004310:	e7bc      	b.n	800428c <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004312:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8004314:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800431a:	61da      	str	r2, [r3, #28]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004326:	e777      	b.n	8004218 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004328:	684a      	ldr	r2, [r1, #4]
 800432a:	03d0      	lsls	r0, r2, #15
 800432c:	f57f af17 	bpl.w	800415e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	0391      	lsls	r1, r2, #14
 8004336:	f57f af3b 	bpl.w	80041b0 <HAL_RCC_OscConfig+0x80>
 800433a:	6862      	ldr	r2, [r4, #4]
 800433c:	2a00      	cmp	r2, #0
 800433e:	f47f af37 	bne.w	80041b0 <HAL_RCC_OscConfig+0x80>
 8004342:	e7d2      	b.n	80042ea <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4926      	ldr	r1, [pc, #152]	; (80043e0 <HAL_RCC_OscConfig+0x2b0>)
 8004346:	6960      	ldr	r0, [r4, #20]
 8004348:	680a      	ldr	r2, [r1, #0]
 800434a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800434e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004352:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004354:	071a      	lsls	r2, r3, #28
 8004356:	f57f af58 	bpl.w	800420a <HAL_RCC_OscConfig+0xda>
 800435a:	e776      	b.n	800424a <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004364:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004366:	f7fe f979 	bl	800265c <HAL_GetTick>
 800436a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	05da      	lsls	r2, r3, #23
 8004370:	f53f af57 	bmi.w	8004222 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004374:	f7fe f972 	bl	800265c <HAL_GetTick>
 8004378:	1b80      	subs	r0, r0, r6
 800437a:	2864      	cmp	r0, #100	; 0x64
 800437c:	d9f6      	bls.n	800436c <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 800437e:	2003      	movs	r0, #3
}
 8004380:	b002      	add	sp, #8
 8004382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004386:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800438a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800438e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004390:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004392:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800439e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043a0:	f7fe f95c 	bl	800265c <HAL_GetTick>
 80043a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e004      	b.n	80043b2 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fe f958 	bl	800265c <HAL_GetTick>
 80043ac:	1b40      	subs	r0, r0, r5
 80043ae:	2864      	cmp	r0, #100	; 0x64
 80043b0:	d8e5      	bhi.n	800437e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b2:	6833      	ldr	r3, [r6, #0]
 80043b4:	039b      	lsls	r3, r3, #14
 80043b6:	d4f7      	bmi.n	80043a8 <HAL_RCC_OscConfig+0x278>
 80043b8:	e6f9      	b.n	80041ae <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043be:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80043c2:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c4:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	621a      	str	r2, [r3, #32]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d2:	f022 0204 	bic.w	r2, r2, #4
 80043d6:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80043d8:	f7fe f940 	bl	800265c <HAL_GetTick>
 80043dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	e012      	b.n	8004406 <HAL_RCC_OscConfig+0x2d6>
 80043e0:	40021000 	.word	0x40021000
 80043e4:	42420000 	.word	0x42420000
 80043e8:	40007000 	.word	0x40007000
 80043ec:	42420480 	.word	0x42420480
 80043f0:	20000000 	.word	0x20000000
 80043f4:	10624dd3 	.word	0x10624dd3
 80043f8:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fe f92e 	bl	800265c <HAL_GetTick>
 8004400:	1b80      	subs	r0, r0, r6
 8004402:	4540      	cmp	r0, r8
 8004404:	d8bb      	bhi.n	800437e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	0798      	lsls	r0, r3, #30
 800440a:	d4f7      	bmi.n	80043fc <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 800440c:	2d00      	cmp	r5, #0
 800440e:	f43f af40 	beq.w	8004292 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004412:	4a44      	ldr	r2, [pc, #272]	; (8004524 <HAL_RCC_OscConfig+0x3f4>)
 8004414:	69d3      	ldr	r3, [r2, #28]
 8004416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441a:	61d3      	str	r3, [r2, #28]
 800441c:	e739      	b.n	8004292 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800441e:	4a42      	ldr	r2, [pc, #264]	; (8004528 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004420:	4e40      	ldr	r6, [pc, #256]	; (8004524 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8004422:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004424:	f7fe f91a 	bl	800265c <HAL_GetTick>
 8004428:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442a:	e004      	b.n	8004436 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442c:	f7fe f916 	bl	800265c <HAL_GetTick>
 8004430:	1b40      	subs	r0, r0, r5
 8004432:	2802      	cmp	r0, #2
 8004434:	d8a3      	bhi.n	800437e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004436:	6833      	ldr	r3, [r6, #0]
 8004438:	0799      	lsls	r1, r3, #30
 800443a:	d4f7      	bmi.n	800442c <HAL_RCC_OscConfig+0x2fc>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	e6e2      	b.n	8004206 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004440:	4a38      	ldr	r2, [pc, #224]	; (8004524 <HAL_RCC_OscConfig+0x3f4>)
 8004442:	6a13      	ldr	r3, [r2, #32]
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800444a:	f7fe f907 	bl	800265c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004452:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004454:	4f33      	ldr	r7, [pc, #204]	; (8004524 <HAL_RCC_OscConfig+0x3f4>)
 8004456:	e004      	b.n	8004462 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fe f900 	bl	800265c <HAL_GetTick>
 800445c:	1b80      	subs	r0, r0, r6
 800445e:	4540      	cmp	r0, r8
 8004460:	d88d      	bhi.n	800437e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	079b      	lsls	r3, r3, #30
 8004466:	d5f7      	bpl.n	8004458 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8004468:	2d00      	cmp	r5, #0
 800446a:	f43f af12 	beq.w	8004292 <HAL_RCC_OscConfig+0x162>
 800446e:	e7d0      	b.n	8004412 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004470:	2801      	cmp	r0, #1
 8004472:	f43f af2c 	beq.w	80042ce <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8004476:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004478:	6a22      	ldr	r2, [r4, #32]
 800447a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800447e:	4291      	cmp	r1, r2
 8004480:	f47f af33 	bne.w	80042ea <HAL_RCC_OscConfig+0x1ba>
 8004484:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004486:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800448a:	1a18      	subs	r0, r3, r0
 800448c:	bf18      	it	ne
 800448e:	2001      	movne	r0, #1
 8004490:	e71d      	b.n	80042ce <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004492:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004496:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e672      	b.n	8004192 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ac:	f042 0204 	orr.w	r2, r2, #4
 80044b0:	621a      	str	r2, [r3, #32]
 80044b2:	6a1a      	ldr	r2, [r3, #32]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	621a      	str	r2, [r3, #32]
 80044ba:	e7c6      	b.n	800444a <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 80044bc:	2001      	movs	r0, #1
}
 80044be:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 80044c0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80044c2:	f7fe f8cb 	bl	800265c <HAL_GetTick>
 80044c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c8:	e005      	b.n	80044d6 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ca:	f7fe f8c7 	bl	800265c <HAL_GetTick>
 80044ce:	1b80      	subs	r0, r0, r6
 80044d0:	2802      	cmp	r0, #2
 80044d2:	f63f af54 	bhi.w	800437e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	0199      	lsls	r1, r3, #6
 80044da:	d4f6      	bmi.n	80044ca <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044dc:	6a23      	ldr	r3, [r4, #32]
 80044de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e2:	d105      	bne.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044e4:	686a      	ldr	r2, [r5, #4]
 80044e6:	68a1      	ldr	r1, [r4, #8]
 80044e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80044ec:	430a      	orrs	r2, r1
 80044ee:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80044f0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f2:	4d0c      	ldr	r5, [pc, #48]	; (8004524 <HAL_RCC_OscConfig+0x3f4>)
 80044f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80044f6:	686a      	ldr	r2, [r5, #4]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80044fe:	490b      	ldr	r1, [pc, #44]	; (800452c <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004500:	4313      	orrs	r3, r2
 8004502:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004504:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8004506:	f7fe f8a9 	bl	800265c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800450c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450e:	e005      	b.n	800451c <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004510:	f7fe f8a4 	bl	800265c <HAL_GetTick>
 8004514:	1b40      	subs	r0, r0, r5
 8004516:	2802      	cmp	r0, #2
 8004518:	f63f af31 	bhi.w	800437e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	019a      	lsls	r2, r3, #6
 8004520:	d5f6      	bpl.n	8004510 <HAL_RCC_OscConfig+0x3e0>
 8004522:	e6d3      	b.n	80042cc <HAL_RCC_OscConfig+0x19c>
 8004524:	40021000 	.word	0x40021000
 8004528:	42420000 	.word	0x42420000
 800452c:	42420060 	.word	0x42420060

08004530 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004530:	2800      	cmp	r0, #0
 8004532:	f000 80af 	beq.w	8004694 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004536:	4a5d      	ldr	r2, [pc, #372]	; (80046ac <HAL_RCC_ClockConfig+0x17c>)
{
 8004538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	6813      	ldr	r3, [r2, #0]
 800453e:	4604      	mov	r4, r0
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	428b      	cmp	r3, r1
 8004546:	460d      	mov	r5, r1
{
 8004548:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800454a:	d20d      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454c:	6813      	ldr	r3, [r2, #0]
 800454e:	f023 0307 	bic.w	r3, r3, #7
 8004552:	430b      	orrs	r3, r1
 8004554:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	428b      	cmp	r3, r1
 800455e:	d003      	beq.n	8004568 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8004560:	2001      	movs	r0, #1
}
 8004562:	b006      	add	sp, #24
 8004564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	0798      	lsls	r0, r3, #30
 800456c:	d514      	bpl.n	8004598 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456e:	0759      	lsls	r1, r3, #29
 8004570:	d504      	bpl.n	800457c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004572:	494f      	ldr	r1, [pc, #316]	; (80046b0 <HAL_RCC_ClockConfig+0x180>)
 8004574:	684a      	ldr	r2, [r1, #4]
 8004576:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800457a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457c:	071a      	lsls	r2, r3, #28
 800457e:	d504      	bpl.n	800458a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004580:	494b      	ldr	r1, [pc, #300]	; (80046b0 <HAL_RCC_ClockConfig+0x180>)
 8004582:	684a      	ldr	r2, [r1, #4]
 8004584:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004588:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800458a:	4949      	ldr	r1, [pc, #292]	; (80046b0 <HAL_RCC_ClockConfig+0x180>)
 800458c:	68a0      	ldr	r0, [r4, #8]
 800458e:	684a      	ldr	r2, [r1, #4]
 8004590:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004594:	4302      	orrs	r2, r0
 8004596:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004598:	07db      	lsls	r3, r3, #31
 800459a:	d520      	bpl.n	80045de <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	4b44      	ldr	r3, [pc, #272]	; (80046b0 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a4:	d078      	beq.n	8004698 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a6:	2a02      	cmp	r2, #2
 80045a8:	d071      	beq.n	800468e <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	0798      	lsls	r0, r3, #30
 80045ac:	d5d8      	bpl.n	8004560 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ae:	4e40      	ldr	r6, [pc, #256]	; (80046b0 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045b4:	6873      	ldr	r3, [r6, #4]
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	4313      	orrs	r3, r2
 80045bc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80045be:	f7fe f84d 	bl	800265c <HAL_GetTick>
 80045c2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c4:	e004      	b.n	80045d0 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c6:	f7fe f849 	bl	800265c <HAL_GetTick>
 80045ca:	1bc0      	subs	r0, r0, r7
 80045cc:	4540      	cmp	r0, r8
 80045ce:	d866      	bhi.n	800469e <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d0:	6873      	ldr	r3, [r6, #4]
 80045d2:	6862      	ldr	r2, [r4, #4]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80045dc:	d1f3      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045de:	4a33      	ldr	r2, [pc, #204]	; (80046ac <HAL_RCC_ClockConfig+0x17c>)
 80045e0:	6813      	ldr	r3, [r2, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	42ab      	cmp	r3, r5
 80045e8:	d909      	bls.n	80045fe <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	6813      	ldr	r3, [r2, #0]
 80045ec:	f023 0307 	bic.w	r3, r3, #7
 80045f0:	432b      	orrs	r3, r5
 80045f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f4:	6813      	ldr	r3, [r2, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	42ab      	cmp	r3, r5
 80045fc:	d1b0      	bne.n	8004560 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	0759      	lsls	r1, r3, #29
 8004602:	d506      	bpl.n	8004612 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004604:	492a      	ldr	r1, [pc, #168]	; (80046b0 <HAL_RCC_ClockConfig+0x180>)
 8004606:	68e0      	ldr	r0, [r4, #12]
 8004608:	684a      	ldr	r2, [r1, #4]
 800460a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800460e:	4302      	orrs	r2, r0
 8004610:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	071a      	lsls	r2, r3, #28
 8004614:	d507      	bpl.n	8004626 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004616:	4a26      	ldr	r2, [pc, #152]	; (80046b0 <HAL_RCC_ClockConfig+0x180>)
 8004618:	6921      	ldr	r1, [r4, #16]
 800461a:	6853      	ldr	r3, [r2, #4]
 800461c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004620:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004624:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004626:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_RCC_ClockConfig+0x184>)
 800462c:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800462e:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004634:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004638:	491d      	ldr	r1, [pc, #116]	; (80046b0 <HAL_RCC_ClockConfig+0x180>)
 800463a:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800463c:	f002 030c 	and.w	r3, r2, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d011      	beq.n	8004668 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004646:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <HAL_RCC_ClockConfig+0x180>)
 8004648:	481c      	ldr	r0, [pc, #112]	; (80046bc <HAL_RCC_ClockConfig+0x18c>)
 800464a:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800464c:	491c      	ldr	r1, [pc, #112]	; (80046c0 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800464e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004652:	5c80      	ldrb	r0, [r0, r2]
 8004654:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <HAL_RCC_ClockConfig+0x194>)
 8004656:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8004658:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800465a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800465c:	f7fd ffbc 	bl	80025d8 <HAL_InitTick>
  return HAL_OK;
 8004660:	2000      	movs	r0, #0
}
 8004662:	b006      	add	sp, #24
 8004664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004668:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800466c:	4423      	add	r3, r4
 800466e:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004672:	03d3      	lsls	r3, r2, #15
 8004674:	d515      	bpl.n	80046a2 <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004676:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800467a:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800467e:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004682:	4422      	add	r2, r4
 8004684:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004688:	fbb3 f3f2 	udiv	r3, r3, r2
 800468c:	e7db      	b.n	8004646 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468e:	019e      	lsls	r6, r3, #6
 8004690:	d48d      	bmi.n	80045ae <HAL_RCC_ClockConfig+0x7e>
 8004692:	e765      	b.n	8004560 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8004694:	2001      	movs	r0, #1
}
 8004696:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004698:	039f      	lsls	r7, r3, #14
 800469a:	d488      	bmi.n	80045ae <HAL_RCC_ClockConfig+0x7e>
 800469c:	e760      	b.n	8004560 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 800469e:	2003      	movs	r0, #3
 80046a0:	e75f      	b.n	8004562 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_ClockConfig+0x198>)
 80046a4:	fb03 f300 	mul.w	r3, r3, r0
 80046a8:	e7cd      	b.n	8004646 <HAL_RCC_ClockConfig+0x116>
 80046aa:	bf00      	nop
 80046ac:	40022000 	.word	0x40022000
 80046b0:	40021000 	.word	0x40021000
 80046b4:	08006554 	.word	0x08006554
 80046b8:	007a1200 	.word	0x007a1200
 80046bc:	080052a4 	.word	0x080052a4
 80046c0:	200008a4 	.word	0x200008a4
 80046c4:	20000000 	.word	0x20000000
 80046c8:	003d0900 	.word	0x003d0900

080046cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046cc:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80046ce:	4905      	ldr	r1, [pc, #20]	; (80046e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80046d0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80046d2:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	6810      	ldr	r0, [r2, #0]
}
 80046dc:	40d8      	lsrs	r0, r3
 80046de:	4770      	bx	lr
 80046e0:	40021000 	.word	0x40021000
 80046e4:	080052b4 	.word	0x080052b4
 80046e8:	20000000 	.word	0x20000000

080046ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046ec:	4b04      	ldr	r3, [pc, #16]	; (8004700 <HAL_RCC_GetPCLK2Freq+0x14>)
 80046ee:	4905      	ldr	r1, [pc, #20]	; (8004704 <HAL_RCC_GetPCLK2Freq+0x18>)
 80046f0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80046f2:	4a05      	ldr	r2, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046f4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80046f8:	5ccb      	ldrb	r3, [r1, r3]
 80046fa:	6810      	ldr	r0, [r2, #0]
}
 80046fc:	40d8      	lsrs	r0, r3
 80046fe:	4770      	bx	lr
 8004700:	40021000 	.word	0x40021000
 8004704:	080052b4 	.word	0x080052b4
 8004708:	20000000 	.word	0x20000000

0800470c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800470c:	2800      	cmp	r0, #0
 800470e:	d055      	beq.n	80047bc <HAL_SPI_Init+0xb0>
{
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004712:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004714:	4604      	mov	r4, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d041      	beq.n	800479e <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800471a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004720:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004722:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004726:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004728:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 800472c:	2900      	cmp	r1, #0
 800472e:	d03c      	beq.n	80047aa <HAL_SPI_Init+0x9e>
 8004730:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004732:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004736:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8004738:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473a:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800473c:	68e1      	ldr	r1, [r4, #12]
 800473e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8004742:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004746:	4303      	orrs	r3, r0
 8004748:	6920      	ldr	r0, [r4, #16]
 800474a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800474e:	4038      	ands	r0, r7
 8004750:	430b      	orrs	r3, r1
 8004752:	6961      	ldr	r1, [r4, #20]
 8004754:	4303      	orrs	r3, r0
 8004756:	69a0      	ldr	r0, [r4, #24]
 8004758:	4031      	ands	r1, r6
 800475a:	430b      	orrs	r3, r1
 800475c:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8004760:	430b      	orrs	r3, r1
 8004762:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004764:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004768:	6a27      	ldr	r7, [r4, #32]
 800476a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800476e:	430b      	orrs	r3, r1
 8004770:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8004774:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004776:	433b      	orrs	r3, r7
 8004778:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 800477a:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800477c:	0c00      	lsrs	r0, r0, #16
 800477e:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8004782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004786:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004788:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800478a:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800478c:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 800478e:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004794:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004796:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004798:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 800479c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800479e:	6842      	ldr	r2, [r0, #4]
 80047a0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80047a4:	d0bc      	beq.n	8004720 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047a6:	61c3      	str	r3, [r0, #28]
 80047a8:	e7ba      	b.n	8004720 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 80047aa:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80047ae:	4620      	mov	r0, r4
 80047b0:	f7fc f806 	bl	80007c0 <HAL_SPI_MspInit>
 80047b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ba:	e7ba      	b.n	8004732 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 80047bc:	2001      	movs	r0, #1
}
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d05d      	beq.n	8004880 <HAL_TIM_Base_Init+0xc0>
{
 80047c4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80047ca:	4604      	mov	r4, r0
 80047cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d03c      	beq.n	800484e <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d8:	492a      	ldr	r1, [pc, #168]	; (8004884 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80047da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047de:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80047e0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e2:	d039      	beq.n	8004858 <HAL_TIM_Base_Init+0x98>
 80047e4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80047e8:	d028      	beq.n	800483c <HAL_TIM_Base_Init+0x7c>
 80047ea:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80047ee:	428a      	cmp	r2, r1
 80047f0:	d024      	beq.n	800483c <HAL_TIM_Base_Init+0x7c>
 80047f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047f6:	428a      	cmp	r2, r1
 80047f8:	d020      	beq.n	800483c <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047fa:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047fe:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004804:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004806:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004808:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800480a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800480c:	2301      	movs	r3, #1
 800480e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004810:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004818:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800481c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004820:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800482c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004834:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004838:	2000      	movs	r0, #0
}
 800483a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800483c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004842:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004844:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800484a:	430b      	orrs	r3, r1
 800484c:	e7d5      	b.n	80047fa <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 800484e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004852:	f7fb ffe9 	bl	8000828 <HAL_TIM_Base_MspInit>
 8004856:	e7bd      	b.n	80047d4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004858:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800485e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004860:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004866:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004868:	69a1      	ldr	r1, [r4, #24]
 800486a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004870:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004872:	68e3      	ldr	r3, [r4, #12]
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800487a:	6963      	ldr	r3, [r4, #20]
 800487c:	6313      	str	r3, [r2, #48]	; 0x30
 800487e:	e7c5      	b.n	800480c <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 8004880:	2001      	movs	r0, #1
}
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00

08004888 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004888:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800488c:	2b01      	cmp	r3, #1
 800488e:	d11f      	bne.n	80048d0 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004892:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004898:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	490f      	ldr	r1, [pc, #60]	; (80048d8 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800489c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a4:	d009      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x32>
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048aa:	d006      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x32>
 80048ac:	4a0b      	ldr	r2, [pc, #44]	; (80048dc <HAL_TIM_Base_Start_IT+0x54>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x32>
 80048b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d104      	bne.n	80048c4 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c0:	2a06      	cmp	r2, #6
 80048c2:	d007      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 80048c4:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80048c6:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80048c8:	f042 0201 	orr.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	4770      	bx	lr
    return HAL_ERROR;
 80048d0:	2001      	movs	r0, #1
 80048d2:	4770      	bx	lr
  return HAL_OK;
 80048d4:	2000      	movs	r0, #0
}
 80048d6:	4770      	bx	lr
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40000400 	.word	0x40000400

080048e0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80048e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d074      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0xf2>
{
 80048e8:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80048ea:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80048ec:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 80048ee:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80048f0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80048f8:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80048fa:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048fc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8004900:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004904:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004906:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004908:	d065      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0xf6>
 800490a:	d831      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x90>
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d048      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0xc2>
 8004910:	d921      	bls.n	8004956 <HAL_TIM_ConfigClockSource+0x76>
 8004912:	2b50      	cmp	r3, #80	; 0x50
 8004914:	d116      	bne.n	8004944 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004916:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004918:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800491a:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491c:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004920:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004922:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004924:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004926:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800492a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800492e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004932:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004934:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004936:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004938:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800493e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8004944:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004946:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8004948:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800494c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8004950:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004952:	4618      	mov	r0, r3
}
 8004954:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004956:	2b20      	cmp	r3, #32
 8004958:	d002      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0x80>
 800495a:	d91e      	bls.n	800499a <HAL_TIM_ConfigClockSource+0xba>
 800495c:	2b30      	cmp	r3, #48	; 0x30
 800495e:	d1f1      	bne.n	8004944 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8004960:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004962:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004966:	430b      	orrs	r3, r1
 8004968:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800496c:	6093      	str	r3, [r2, #8]
}
 800496e:	e7e9      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004970:	2b70      	cmp	r3, #112	; 0x70
 8004972:	d049      	beq.n	8004a08 <HAL_TIM_ConfigClockSource+0x128>
 8004974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004978:	d1e4      	bne.n	8004944 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800497a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800497e:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004980:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004982:	432b      	orrs	r3, r5
 8004984:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800498c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498e:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004990:	6893      	ldr	r3, [r2, #8]
 8004992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004996:	6093      	str	r3, [r2, #8]
      break;
 8004998:	e7d4      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800499a:	f033 0110 	bics.w	r1, r3, #16
 800499e:	d1d1      	bne.n	8004944 <HAL_TIM_ConfigClockSource+0x64>
 80049a0:	e7de      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 80049a2:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a4:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a6:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a8:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ac:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ae:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b0:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b2:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049ba:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80049be:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80049c0:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80049c2:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80049c4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ca:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80049ce:	6093      	str	r3, [r2, #8]
}
 80049d0:	e7b8      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 80049d2:	2002      	movs	r0, #2
}
 80049d4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d6:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049da:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049de:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e0:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e2:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80049e4:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049e6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049f2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80049f6:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80049f8:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80049fa:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a00:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004a04:	6093      	str	r3, [r2, #8]
}
 8004a06:	e79d      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a08:	68cc      	ldr	r4, [r1, #12]
 8004a0a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004a0e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a10:	432b      	orrs	r3, r5
 8004a12:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a16:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004a1c:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004a1e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004a24:	6093      	str	r3, [r2, #8]
      break;
 8004a26:	e78d      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x64>

08004a28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d026      	beq.n	8004a7e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a32:	6803      	ldr	r3, [r0, #0]
{
 8004a34:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004a36:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004a3a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a3c:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3e:	4d11      	ldr	r5, [pc, #68]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a44:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a46:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004a48:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004a4a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d006      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004a54:	4a0c      	ldr	r2, [pc, #48]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d104      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a62:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a64:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a68:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a6a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004a6c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8004a70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8004a78:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004a7a:	4618      	mov	r0, r3
}
 8004a7c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a7e:	2002      	movs	r0, #2
}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40000400 	.word	0x40000400

08004a8c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d061      	beq.n	8004b54 <HAL_UART_Init+0xc8>
{
 8004a90:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a96:	4604      	mov	r4, r0
 8004a98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d051      	beq.n	8004b44 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa0:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004aa4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004aa8:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aaa:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8004aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab2:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ab4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004aba:	4301      	orrs	r1, r0
 8004abc:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004abe:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ac0:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004ac4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ac8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004aca:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ace:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8004ad8:	491f      	ldr	r1, [pc, #124]	; (8004b58 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ada:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ade:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8004ae0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ae2:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004ae4:	d033      	beq.n	8004b4e <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ae6:	f7ff fdf1 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004af0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afa:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8004afe:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b00:	4816      	ldr	r0, [pc, #88]	; (8004b5c <HAL_UART_Init+0xd0>)
 8004b02:	fba0 c103 	umull	ip, r1, r0, r3
 8004b06:	0949      	lsrs	r1, r1, #5
 8004b08:	fb02 3311 	mls	r3, r2, r1, r3
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	3332      	adds	r3, #50	; 0x32
 8004b10:	fba0 2303 	umull	r2, r3, r0, r3
 8004b14:	0109      	lsls	r1, r1, #4
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8004b1c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b1e:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8004b20:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b22:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004b26:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b28:	6953      	ldr	r3, [r2, #20]
 8004b2a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004b2e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004b30:	68d3      	ldr	r3, [r2, #12]
 8004b32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b36:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b3a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004b44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004b48:	f7fb fe8c 	bl	8000864 <HAL_UART_MspInit>
 8004b4c:	e7a8      	b.n	8004aa0 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b4e:	f7ff fdcd 	bl	80046ec <HAL_RCC_GetPCLK2Freq>
 8004b52:	e7ca      	b.n	8004aea <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 8004b54:	2001      	movs	r0, #1
}
 8004b56:	4770      	bx	lr
 8004b58:	40013800 	.word	0x40013800
 8004b5c:	51eb851f 	.word	0x51eb851f

08004b60 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b60:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d123      	bne.n	8004bb0 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8004b68:	b301      	cbz	r1, 8004bac <HAL_UART_Receive_IT+0x4c>
 8004b6a:	b1fa      	cbz	r2, 8004bac <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8004b6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d01d      	beq.n	8004bb0 <HAL_UART_Receive_IT+0x50>
{
 8004b74:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b78:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b7a:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7c:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8004b7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8004b82:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b84:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b86:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b8a:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 8004b8c:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b8e:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8004b92:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b94:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b96:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b98:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ba0:	68e3      	ldr	r3, [r4, #12]
 8004ba2:	f043 0320 	orr.w	r3, r3, #32
 8004ba6:	60e3      	str	r3, [r4, #12]
}
 8004ba8:	bc30      	pop	{r4, r5}
 8004baa:	4770      	bx	lr
      return HAL_ERROR;
 8004bac:	2001      	movs	r0, #1
 8004bae:	4770      	bx	lr
    return HAL_BUSY;
 8004bb0:	2002      	movs	r0, #2
}
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_UART_TxCpltCallback>:
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop

08004bb8 <HAL_UART_ErrorCallback>:
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <UART_DMAAbortOnError>:
{
 8004bbc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004bbe:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004bc2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bc4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004bc6:	f7ff fff7 	bl	8004bb8 <HAL_UART_ErrorCallback>
}
 8004bca:	bd08      	pop	{r3, pc}

08004bcc <HAL_UARTEx_RxEventCallback>:
}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop

08004bd0 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd0:	6883      	ldr	r3, [r0, #8]
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	d03b      	beq.n	8004c50 <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bd8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02f      	beq.n	8004c3e <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bde:	6803      	ldr	r3, [r0, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004be8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004bea:	3301      	adds	r3, #1
 8004bec:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004bee:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004bf6:	bb4b      	cbnz	r3, 8004c4c <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004bf8:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8004bfa:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bfc:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004bfe:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c00:	68d1      	ldr	r1, [r2, #12]
 8004c02:	f021 0120 	bic.w	r1, r1, #32
 8004c06:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c08:	68d1      	ldr	r1, [r2, #12]
 8004c0a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004c0e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c10:	6951      	ldr	r1, [r2, #20]
 8004c12:	f021 0101 	bic.w	r1, r1, #1
 8004c16:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004c18:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004c1e:	2901      	cmp	r1, #1
 8004c20:	d121      	bne.n	8004c66 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c24:	68d1      	ldr	r1, [r2, #12]
 8004c26:	f021 0110 	bic.w	r1, r1, #16
 8004c2a:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c2c:	6811      	ldr	r1, [r2, #0]
 8004c2e:	06c9      	lsls	r1, r1, #27
 8004c30:	d423      	bmi.n	8004c7a <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c32:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004c34:	f7ff ffca 	bl	8004bcc <HAL_UARTEx_RxEventCallback>
}
 8004c38:	2000      	movs	r0, #0
 8004c3a:	b002      	add	sp, #8
 8004c3c:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c3e:	6903      	ldr	r3, [r0, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1cc      	bne.n	8004bde <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c44:	6803      	ldr	r3, [r0, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	7013      	strb	r3, [r2, #0]
 8004c4a:	e7cd      	b.n	8004be8 <UART_Receive_IT.part.0+0x18>
}
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c50:	6903      	ldr	r3, [r0, #16]
 8004c52:	b96b      	cbnz	r3, 8004c70 <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c54:	6802      	ldr	r2, [r0, #0]
 8004c56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004c58:	6852      	ldr	r2, [r2, #4]
 8004c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c5e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8004c62:	6283      	str	r3, [r0, #40]	; 0x28
 8004c64:	e7c3      	b.n	8004bee <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8004c66:	f7fb fc53 	bl	8000510 <HAL_UART_RxCpltCallback>
}
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c70:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c72:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	7013      	strb	r3, [r2, #0]
 8004c78:	e7b6      	b.n	8004be8 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	6813      	ldr	r3, [r2, #0]
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	6853      	ldr	r3, [r2, #4]
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	9b01      	ldr	r3, [sp, #4]
 8004c86:	e7d4      	b.n	8004c32 <UART_Receive_IT.part.0+0x62>

08004c88 <HAL_UART_IRQHandler>:
{
 8004c88:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c8a:	6803      	ldr	r3, [r0, #0]
{
 8004c8c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c8e:	681a      	ldr	r2, [r3, #0]
{
 8004c90:	b082      	sub	sp, #8
  if (errorflags == RESET)
 8004c92:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c94:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c96:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004c98:	d14e      	bne.n	8004d38 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c9a:	0696      	lsls	r6, r2, #26
 8004c9c:	d502      	bpl.n	8004ca4 <HAL_UART_IRQHandler+0x1c>
 8004c9e:	068d      	lsls	r5, r1, #26
 8004ca0:	f100 8090 	bmi.w	8004dc4 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004ca6:	2801      	cmp	r0, #1
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004caa:	0616      	lsls	r6, r2, #24
 8004cac:	d502      	bpl.n	8004cb4 <HAL_UART_IRQHandler+0x2c>
 8004cae:	060d      	lsls	r5, r1, #24
 8004cb0:	f100 8092 	bmi.w	8004dd8 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cb4:	0650      	lsls	r0, r2, #25
 8004cb6:	d502      	bpl.n	8004cbe <HAL_UART_IRQHandler+0x36>
 8004cb8:	064a      	lsls	r2, r1, #25
 8004cba:	f100 80ab 	bmi.w	8004e14 <HAL_UART_IRQHandler+0x18c>
}
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cc2:	06d5      	lsls	r5, r2, #27
 8004cc4:	d5f1      	bpl.n	8004caa <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cc6:	06c8      	lsls	r0, r1, #27
 8004cc8:	d5ef      	bpl.n	8004caa <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cca:	2100      	movs	r1, #0
 8004ccc:	9101      	str	r1, [sp, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	9201      	str	r2, [sp, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	9201      	str	r2, [sp, #4]
 8004cd6:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004cde:	f000 80d2 	beq.w	8004e86 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ce2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ce4:	6802      	ldr	r2, [r0, #0]
 8004ce6:	6852      	ldr	r2, [r2, #4]
 8004ce8:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d0e7      	beq.n	8004cbe <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004cee:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004cf0:	4295      	cmp	r5, r2
 8004cf2:	d9e4      	bls.n	8004cbe <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cf4:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 8004cf6:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cf8:	2e20      	cmp	r6, #32
 8004cfa:	d016      	beq.n	8004d2a <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d04:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d14:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004d16:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	f022 0210 	bic.w	r2, r2, #16
 8004d22:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d24:	f7fd fd96 	bl	8002854 <HAL_DMA_Abort>
 8004d28:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d2a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	1a69      	subs	r1, r5, r1
 8004d30:	b289      	uxth	r1, r1
 8004d32:	f7ff ff4b 	bl	8004bcc <HAL_UARTEx_RxEventCallback>
 8004d36:	e7c2      	b.n	8004cbe <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d38:	f005 0501 	and.w	r5, r5, #1
 8004d3c:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8004d40:	4328      	orrs	r0, r5
 8004d42:	d0af      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d44:	07d0      	lsls	r0, r2, #31
 8004d46:	d505      	bpl.n	8004d54 <HAL_UART_IRQHandler+0xcc>
 8004d48:	05ce      	lsls	r6, r1, #23
 8004d4a:	d503      	bpl.n	8004d54 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d4c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004d4e:	f040 0001 	orr.w	r0, r0, #1
 8004d52:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d54:	0750      	lsls	r0, r2, #29
 8004d56:	d52c      	bpl.n	8004db2 <HAL_UART_IRQHandler+0x12a>
 8004d58:	b12d      	cbz	r5, 8004d66 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d5c:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d5e:	f040 0002 	orr.w	r0, r0, #2
 8004d62:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d64:	d429      	bmi.n	8004dba <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d66:	0716      	lsls	r6, r2, #28
 8004d68:	d507      	bpl.n	8004d7a <HAL_UART_IRQHandler+0xf2>
 8004d6a:	f001 0020 	and.w	r0, r1, #32
 8004d6e:	4328      	orrs	r0, r5
 8004d70:	d003      	beq.n	8004d7a <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d72:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004d74:	f040 0008 	orr.w	r0, r0, #8
 8004d78:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d7a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d09e      	beq.n	8004cbe <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d80:	0690      	lsls	r0, r2, #26
 8004d82:	d509      	bpl.n	8004d98 <HAL_UART_IRQHandler+0x110>
 8004d84:	068a      	lsls	r2, r1, #26
 8004d86:	d507      	bpl.n	8004d98 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d88:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004d8c:	2a22      	cmp	r2, #34	; 0x22
 8004d8e:	d103      	bne.n	8004d98 <HAL_UART_IRQHandler+0x110>
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7ff ff1d 	bl	8004bd0 <UART_Receive_IT.part.0>
 8004d96:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d98:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d9a:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9c:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004da0:	f005 0508 	and.w	r5, r5, #8
 8004da4:	4315      	orrs	r5, r2
 8004da6:	d140      	bne.n	8004e2a <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7ff ff05 	bl	8004bb8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	6425      	str	r5, [r4, #64]	; 0x40
 8004db0:	e785      	b.n	8004cbe <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004db2:	0790      	lsls	r0, r2, #30
 8004db4:	d5d7      	bpl.n	8004d66 <HAL_UART_IRQHandler+0xde>
 8004db6:	2d00      	cmp	r5, #0
 8004db8:	d0d5      	beq.n	8004d66 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004dbc:	f040 0004 	orr.w	r0, r0, #4
 8004dc0:	6420      	str	r0, [r4, #64]	; 0x40
 8004dc2:	e7d0      	b.n	8004d66 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004dc8:	2b22      	cmp	r3, #34	; 0x22
 8004dca:	f47f af78 	bne.w	8004cbe <HAL_UART_IRQHandler+0x36>
}
 8004dce:	b002      	add	sp, #8
 8004dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dd4:	f7ff befc 	b.w	8004bd0 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dd8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004ddc:	2a21      	cmp	r2, #33	; 0x21
 8004dde:	f47f af6e 	bne.w	8004cbe <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de2:	68a2      	ldr	r2, [r4, #8]
 8004de4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004de8:	d06e      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dea:	6a22      	ldr	r2, [r4, #32]
 8004dec:	1c51      	adds	r1, r2, #1
 8004dee:	6221      	str	r1, [r4, #32]
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004df4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004df6:	3a01      	subs	r2, #1
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004dfc:	2a00      	cmp	r2, #0
 8004dfe:	f47f af5e 	bne.w	8004cbe <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e08:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	e754      	b.n	8004cbe <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8004e14:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e16:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004e18:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004e20:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004e24:	f7ff fec6 	bl	8004bb4 <HAL_UART_TxCpltCallback>
    return;
 8004e28:	e749      	b.n	8004cbe <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e30:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e3c:	2a01      	cmp	r2, #1
 8004e3e:	d103      	bne.n	8004e48 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	f022 0210 	bic.w	r2, r2, #16
 8004e46:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	2120      	movs	r1, #32
 8004e4c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	0656      	lsls	r6, r2, #25
 8004e56:	d512      	bpl.n	8004e7e <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e58:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004e5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e60:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004e62:	b160      	cbz	r0, 8004e7e <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e64:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <HAL_UART_IRQHandler+0x258>)
 8004e66:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e68:	f7fd fd16 	bl	8002898 <HAL_DMA_Abort_IT>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	f43f af26 	beq.w	8004cbe <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004e74:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004e76:	b002      	add	sp, #8
 8004e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e7c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f7ff fe9a 	bl	8004bb8 <HAL_UART_ErrorCallback>
 8004e84:	e71b      	b.n	8004cbe <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e86:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8004e88:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e8a:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8004e8c:	b289      	uxth	r1, r1
 8004e8e:	2900      	cmp	r1, #0
 8004e90:	f43f af15 	beq.w	8004cbe <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e94:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004e96:	1a08      	subs	r0, r1, r0
 8004e98:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	f43f af0f 	beq.w	8004cbe <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea2:	68d8      	ldr	r0, [r3, #12]
 8004ea4:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8004ea8:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eaa:	6958      	ldr	r0, [r3, #20]
 8004eac:	f020 0001 	bic.w	r0, r0, #1
 8004eb0:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb8:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eba:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	f022 0210 	bic.w	r2, r2, #16
 8004ec0:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ec2:	f7ff fe83 	bl	8004bcc <HAL_UARTEx_RxEventCallback>
 8004ec6:	e6fa      	b.n	8004cbe <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec8:	6922      	ldr	r2, [r4, #16]
 8004eca:	2a00      	cmp	r2, #0
 8004ecc:	d18d      	bne.n	8004dea <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ece:	6a22      	ldr	r2, [r4, #32]
 8004ed0:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004ed4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004ed8:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004eda:	6222      	str	r2, [r4, #32]
 8004edc:	e78a      	b.n	8004df4 <HAL_UART_IRQHandler+0x16c>
 8004ede:	bf00      	nop
 8004ee0:	08004bbd 	.word	0x08004bbd

08004ee4 <__libc_init_array>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	4d0c      	ldr	r5, [pc, #48]	; (8004f1c <__libc_init_array+0x38>)
 8004eea:	4c0d      	ldr	r4, [pc, #52]	; (8004f20 <__libc_init_array+0x3c>)
 8004eec:	1b64      	subs	r4, r4, r5
 8004eee:	10a4      	asrs	r4, r4, #2
 8004ef0:	42a6      	cmp	r6, r4
 8004ef2:	d109      	bne.n	8004f08 <__libc_init_array+0x24>
 8004ef4:	f000 f842 	bl	8004f7c <_init>
 8004ef8:	2600      	movs	r6, #0
 8004efa:	4d0a      	ldr	r5, [pc, #40]	; (8004f24 <__libc_init_array+0x40>)
 8004efc:	4c0a      	ldr	r4, [pc, #40]	; (8004f28 <__libc_init_array+0x44>)
 8004efe:	1b64      	subs	r4, r4, r5
 8004f00:	10a4      	asrs	r4, r4, #2
 8004f02:	42a6      	cmp	r6, r4
 8004f04:	d105      	bne.n	8004f12 <__libc_init_array+0x2e>
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0c:	4798      	blx	r3
 8004f0e:	3601      	adds	r6, #1
 8004f10:	e7ee      	b.n	8004ef0 <__libc_init_array+0xc>
 8004f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f16:	4798      	blx	r3
 8004f18:	3601      	adds	r6, #1
 8004f1a:	e7f2      	b.n	8004f02 <__libc_init_array+0x1e>
 8004f1c:	08006568 	.word	0x08006568
 8004f20:	08006568 	.word	0x08006568
 8004f24:	08006568 	.word	0x08006568
 8004f28:	0800656c 	.word	0x0800656c

08004f2c <memset>:
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4402      	add	r2, r0
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d100      	bne.n	8004f36 <memset+0xa>
 8004f34:	4770      	bx	lr
 8004f36:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3a:	e7f9      	b.n	8004f30 <memset+0x4>

08004f3c <stpcpy>:
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f803 2b01 	strb.w	r2, [r3], #1
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	d1f8      	bne.n	8004f3e <stpcpy+0x2>
 8004f4c:	4770      	bx	lr

08004f4e <strcat>:
 8004f4e:	4602      	mov	r2, r0
 8004f50:	b510      	push	{r4, lr}
 8004f52:	7814      	ldrb	r4, [r2, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	3201      	adds	r2, #1
 8004f58:	2c00      	cmp	r4, #0
 8004f5a:	d1fa      	bne.n	8004f52 <strcat+0x4>
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	d1f9      	bne.n	8004f5e <strcat+0x10>
 8004f6a:	bd10      	pop	{r4, pc}

08004f6c <strcpy>:
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f72:	f803 2b01 	strb.w	r2, [r3], #1
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	d1f9      	bne.n	8004f6e <strcpy+0x2>
 8004f7a:	4770      	bx	lr

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
