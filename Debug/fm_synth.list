
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003410  08003410  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003410  08003410  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003410  08003410  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  2000000c  08003424  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08003424  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8bc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352b  00000000  00000000  0003a8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000165ab  00000000  00000000  0003de1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  000543c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000034f8  00000000  00000000  00055118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018018  00000000  00000000  00058610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f688  00000000  00000000  00070628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ad46  00000000  00000000  0008fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011a9f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032d8  00000000  00000000  0011aa4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030bc 	.word	0x080030bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030bc 	.word	0x080030bc

0800014c <init_audio_out>:
 */

#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	SPI1->CR1 |= SPI_CR1_SPE;
 800014c:	4a06      	ldr	r2, [pc, #24]	; (8000168 <init_audio_out+0x1c>)
void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
 800014e:	b508      	push	{r3, lr}
	SPI1->CR1 |= SPI_CR1_SPE;
 8000150:	6813      	ldr	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 8000152:	4608      	mov	r0, r1
	SPI1->CR1 |= SPI_CR1_SPE;
 8000154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015a:	f002 fc55 	bl	8002a08 <HAL_TIM_Base_Start_IT>
	output_volume = 0x3800;
 800015e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000162:	4b02      	ldr	r3, [pc, #8]	; (800016c <init_audio_out+0x20>)
 8000164:	801a      	strh	r2, [r3, #0]
}
 8000166:	bd08      	pop	{r3, pc}
 8000168:	40013000 	.word	0x40013000
 800016c:	20000218 	.word	0x20000218

08000170 <update_volume>:

void update_volume() {
	GPIOA->BSRR = GPIO_BSRR_BR4;					//pull CS pin low
 8000170:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
void update_volume() {
 8000174:	b510      	push	{r4, lr}
	GPIOA->BSRR = GPIO_BSRR_BR4;					//pull CS pin low
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <update_volume+0x38>)
	SPI1->DR = output_volume;						//write out data to SPI (assume SPI is not busy)
 8000178:	4c0c      	ldr	r4, [pc, #48]	; (80001ac <update_volume+0x3c>)
	GPIOA->BSRR = GPIO_BSRR_BR4;					//pull CS pin low
 800017a:	611a      	str	r2, [r3, #16]
	SPI1->DR = output_volume;						//write out data to SPI (assume SPI is not busy)
 800017c:	8822      	ldrh	r2, [r4, #0]
 800017e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000182:	60da      	str	r2, [r3, #12]
	output_volume = synth_sample();
 8000184:	f001 f824 	bl	80011d0 <synth_sample>
 8000188:	b280      	uxth	r0, r0
	if (output_volume > 0x0FFF) {					//max possible volume with 12-bit dac
 800018a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800018e:	bf28      	it	cs
 8000190:	f643 70ff 	movwcs	r0, #16383	; 0x3fff
		output_volume = 0x0FFF;
	}
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
	GPIOA->BSRR = GPIO_BSRR_BS4;					//pull CS pin high
 8000194:	f04f 0210 	mov.w	r2, #16
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <update_volume+0x38>)
 800019a:	bf38      	it	cc
 800019c:	f440 5040 	orrcc.w	r0, r0, #12288	; 0x3000
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 80001a0:	8020      	strh	r0, [r4, #0]
	GPIOA->BSRR = GPIO_BSRR_BS4;					//pull CS pin high
 80001a2:	611a      	str	r2, [r3, #16]
}
 80001a4:	bd10      	pop	{r4, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800
 80001ac:	20000218 	.word	0x20000218

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b4:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2601      	movs	r6, #1
 80001ba:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001bc:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001c0:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c4:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001cc:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d6:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001d8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001dc:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001de:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e0:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e2:	f002 f865 	bl	80022b0 <HAL_RCC_OscConfig>
 80001e6:	b108      	cbz	r0, 80001ec <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001ea:	e7fe      	b.n	80001ea <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	f04f 080f 	mov.w	r8, #15
 80001f2:	f04f 0902 	mov.w	r9, #2
 80001f6:	2600      	movs	r6, #0
 80001f8:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fc:	4621      	mov	r1, r4
 80001fe:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	e9cd 8900 	strd	r8, r9, [sp]
 8000204:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020a:	f002 fa51 	bl	80026b0 <HAL_RCC_ClockConfig>
 800020e:	b108      	cbz	r0, 8000214 <SystemClock_Config+0x64>
 8000210:	b672      	cpsid	i
  while (1)
 8000212:	e7fe      	b.n	8000212 <SystemClock_Config+0x62>
}
 8000214:	b010      	add	sp, #64	; 0x40
 8000216:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800021a:	bf00      	nop

0800021c <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021c:	2500      	movs	r5, #0
{
 800021e:	b580      	push	{r7, lr}
 8000220:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8000222:	f001 fab7 	bl	8001794 <HAL_Init>
  SystemClock_Config();
 8000226:	f7ff ffc3 	bl	80001b0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	e9cd 5506 	strd	r5, r5, [sp, #24]
 800022e:	e9cd 5508 	strd	r5, r5, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000232:	4c6b      	ldr	r4, [pc, #428]	; (80003e0 <main+0x1c4>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000238:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	61a3      	str	r3, [r4, #24]
 8000240:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000242:	4868      	ldr	r0, [pc, #416]	; (80003e4 <main+0x1c8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	f003 0304 	and.w	r3, r3, #4
 8000248:	9302      	str	r3, [sp, #8]
 800024a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800024c:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800024e:	2610      	movs	r6, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000250:	f043 0308 	orr.w	r3, r3, #8
 8000254:	61a3      	str	r3, [r4, #24]
 8000256:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000258:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	f003 0308 	and.w	r3, r3, #8
 800025e:	9303      	str	r3, [sp, #12]
 8000260:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000262:	f001 fd7b 	bl	8001d5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000266:	2200      	movs	r2, #0
 8000268:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026a:	485e      	ldr	r0, [pc, #376]	; (80003e4 <main+0x1c8>)
 800026c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800026e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000272:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000276:	f001 fc65 	bl	8001b44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800027a:	f24f 0678 	movw	r6, #61560	; 0xf078
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027e:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000280:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000282:	4859      	ldr	r0, [pc, #356]	; (80003e8 <main+0x1cc>)
 8000284:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000286:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000288:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028c:	f001 fc5a 	bl	8001b44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000290:	f44f 7260 	mov.w	r2, #896	; 0x380
 8000294:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000296:	4854      	ldr	r0, [pc, #336]	; (80003e8 <main+0x1cc>)
 8000298:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800029a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a0:	f001 fc50 	bl	8001b44 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002a4:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002a6:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6163      	str	r3, [r4, #20]
 80002ae:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002b0:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002b2:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002b6:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002bc:	f001 fab2 	bl	8001824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002c0:	200e      	movs	r0, #14
 80002c2:	f001 fae7 	bl	8001894 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 31250;
 80002c6:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 80002ca:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 80002cc:	4c47      	ldr	r4, [pc, #284]	; (80003ec <main+0x1d0>)
 80002ce:	4948      	ldr	r1, [pc, #288]	; (80003f0 <main+0x1d4>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d0:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d2:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d6:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart1.Init.BaudRate = 31250;
 80002da:	e9c4 1200 	strd	r1, r2, [r4]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002de:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80002e0:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e2:	f002 fc93 	bl	8002c0c <HAL_UART_Init>
 80002e6:	b108      	cbz	r0, 80002ec <main+0xd0>
 80002e8:	b672      	cpsid	i
  while (1)
 80002ea:	e7fe      	b.n	80002ea <main+0xce>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ec:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 80002ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1451-1;
 80002f2:	f240 52aa 	movw	r2, #1450	; 0x5aa
  htim2.Instance = TIM2;
 80002f6:	4f3f      	ldr	r7, [pc, #252]	; (80003f4 <main+0x1d8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f8:	e9cd 0006 	strd	r0, r0, [sp, #24]
 80002fc:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000300:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000302:	4638      	mov	r0, r7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000304:	e9c7 3301 	strd	r3, r3, [r7, #4]
  htim2.Instance = TIM2;
 8000308:	6039      	str	r1, [r7, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030a:	613b      	str	r3, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030c:	61bb      	str	r3, [r7, #24]
  htim2.Init.Period = 1451-1;
 800030e:	60fa      	str	r2, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000310:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000312:	f002 fb15 	bl	8002940 <HAL_TIM_Base_Init>
 8000316:	b108      	cbz	r0, 800031c <main+0x100>
 8000318:	b672      	cpsid	i
  while (1)
 800031a:	e7fe      	b.n	800031a <main+0xfe>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800031c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000320:	4638      	mov	r0, r7
 8000322:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000324:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000326:	f002 fb9b 	bl	8002a60 <HAL_TIM_ConfigClockSource>
 800032a:	b108      	cbz	r0, 8000330 <main+0x114>
 800032c:	b672      	cpsid	i
  while (1)
 800032e:	e7fe      	b.n	800032e <main+0x112>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000330:	2300      	movs	r3, #0
 8000332:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000334:	4638      	mov	r0, r7
 8000336:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000338:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800033c:	f002 fc34 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000340:	4603      	mov	r3, r0
 8000342:	b9e0      	cbnz	r0, 800037e <main+0x162>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000344:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000348:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800034c:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 800034e:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000350:	f44f 6600 	mov.w	r6, #2048	; 0x800
  hspi1.Instance = SPI1;
 8000354:	4d28      	ldr	r5, [pc, #160]	; (80003f8 <main+0x1dc>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000356:	e9c5 c301 	strd	ip, r3, [r5, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035a:	e9c5 3304 	strd	r3, r3, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800035e:	e9c5 3308 	strd	r3, r3, [r5, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000362:	62ab      	str	r3, [r5, #40]	; 0x28
  hspi1.Instance = SPI1;
 8000364:	4b25      	ldr	r3, [pc, #148]	; (80003fc <main+0x1e0>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000366:	61a8      	str	r0, [r5, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000368:	4628      	mov	r0, r5
  hspi1.Instance = SPI1;
 800036a:	602b      	str	r3, [r5, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800036c:	60ee      	str	r6, [r5, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800036e:	61e9      	str	r1, [r5, #28]
  hspi1.Init.CRCPolynomial = 10;
 8000370:	62ea      	str	r2, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000372:	f002 fa8b 	bl	800288c <HAL_SPI_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	b118      	cbz	r0, 8000382 <main+0x166>
 800037a:	b672      	cpsid	i
  while (1)
 800037c:	e7fe      	b.n	800037c <main+0x160>
 800037e:	b672      	cpsid	i
 8000380:	e7fe      	b.n	8000380 <main+0x164>
  hi2c2.Init.ClockSpeed = 10000;
 8000382:	f242 7010 	movw	r0, #10000	; 0x2710
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Instance = I2C2;
 800038a:	4e1d      	ldr	r6, [pc, #116]	; (8000400 <main+0x1e4>)
 800038c:	491d      	ldr	r1, [pc, #116]	; (8000404 <main+0x1e8>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800038e:	e9c6 0301 	strd	r0, r3, [r6, #4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000392:	4630      	mov	r0, r6
  hi2c2.Init.OwnAddress2 = 0;
 8000394:	e9c6 3305 	strd	r3, r3, [r6, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000398:	e9c6 3307 	strd	r3, r3, [r6, #28]
  hi2c2.Init.OwnAddress1 = 0;
 800039c:	60f3      	str	r3, [r6, #12]
  hi2c2.Instance = I2C2;
 800039e:	6031      	str	r1, [r6, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a0:	6132      	str	r2, [r6, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003a2:	f001 fd75 	bl	8001e90 <HAL_I2C_Init>
 80003a6:	b108      	cbz	r0, 80003ac <main+0x190>
 80003a8:	b672      	cpsid	i
  while (1)
 80003aa:	e7fe      	b.n	80003aa <main+0x18e>
  init_midi(&huart1);
 80003ac:	4620      	mov	r0, r4
 80003ae:	f000 f853 	bl	8000458 <init_midi>
  init_synth();
 80003b2:	f000 fc1d 	bl	8000bf0 <init_synth>
  init_audio_out(&hspi1, &htim2);
 80003b6:	4628      	mov	r0, r5
 80003b8:	4639      	mov	r1, r7
 80003ba:	f7ff fec7 	bl	800014c <init_audio_out>
  init_ui(&hi2c2);
 80003be:	4630      	mov	r0, r6
 80003c0:	f001 f978 	bl	80016b4 <init_ui>
 80003c4:	4e10      	ldr	r6, [pc, #64]	; (8000408 <main+0x1ec>)
 80003c6:	4d11      	ldr	r5, [pc, #68]	; (800040c <main+0x1f0>)
	if (midi_buffer_read != midi_buffer_write) {
 80003c8:	7832      	ldrb	r2, [r6, #0]
 80003ca:	782b      	ldrb	r3, [r5, #0]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d0fb      	beq.n	80003c8 <main+0x1ac>
		process_midi_byte(&huart1);
 80003d0:	4620      	mov	r0, r4
 80003d2:	f000 f863 	bl	800049c <process_midi_byte>
	if (midi_buffer_read != midi_buffer_write) {
 80003d6:	7832      	ldrb	r2, [r6, #0]
 80003d8:	782b      	ldrb	r3, [r5, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d0f4      	beq.n	80003c8 <main+0x1ac>
 80003de:	e7f7      	b.n	80003d0 <main+0x1b4>
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010800 	.word	0x40010800
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	200002c0 	.word	0x200002c0
 80003f0:	40013800 	.word	0x40013800
 80003f4:	200003e0 	.word	0x200003e0
 80003f8:	20000388 	.word	0x20000388
 80003fc:	40013000 	.word	0x40013000
 8000400:	20000224 	.word	0x20000224
 8000404:	40005800 	.word	0x40005800
 8000408:	20000428 	.word	0x20000428
 800040c:	20000278 	.word	0x20000278

08000410 <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000410:	2201      	movs	r2, #1
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000412:	b410      	push	{r4}
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000414:	4c05      	ldr	r4, [pc, #20]	; (800042c <HAL_UART_RxCpltCallback+0x1c>)
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000416:	4906      	ldr	r1, [pc, #24]	; (8000430 <HAL_UART_RxCpltCallback+0x20>)
	midi_buffer_write = (midi_buffer_write + 1) & (RING_BUFFER_SIZE - 1);
 8000418:	7823      	ldrb	r3, [r4, #0]
 800041a:	4413      	add	r3, r2
 800041c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000420:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000422:	7823      	ldrb	r3, [r4, #0]
}
 8000424:	bc10      	pop	{r4}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000426:	4419      	add	r1, r3
 8000428:	f002 bc5a 	b.w	8002ce0 <HAL_UART_Receive_IT>
 800042c:	20000278 	.word	0x20000278
 8000430:	20000304 	.word	0x20000304

08000434 <sample>:
void sample() {
 8000434:	b508      	push	{r3, lr}
	TIM2->SR = 0;
 8000436:	2200      	movs	r2, #0
 8000438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800043c:	f44f 7180 	mov.w	r1, #256	; 0x100
	TIM2->SR = 0;
 8000440:	611a      	str	r2, [r3, #16]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000442:	4803      	ldr	r0, [pc, #12]	; (8000450 <sample+0x1c>)
 8000444:	f001 fc8e 	bl	8001d64 <HAL_GPIO_TogglePin>
}
 8000448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_volume();
 800044c:	f7ff be90 	b.w	8000170 <update_volume>
 8000450:	40010800 	.word	0x40010800

08000454 <Error_Handler>:
 8000454:	b672      	cpsid	i
  while (1)
 8000456:	e7fe      	b.n	8000456 <Error_Handler+0x2>

08000458 <init_midi>:
 */

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
	data[0] = -1;
 8000458:	21ff      	movs	r1, #255	; 0xff
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <init_midi+0x34>)
 800045c:	4a0c      	ldr	r2, [pc, #48]	; (8000490 <init_midi+0x38>)
void init_midi(UART_HandleTypeDef* huart) {
 800045e:	b510      	push	{r4, lr}
 8000460:	4604      	mov	r4, r0
	data[0] = -1;
 8000462:	7011      	strb	r1, [r2, #0]
	data[1] = -1;
 8000464:	7051      	strb	r1, [r2, #1]
	for (uint8_t i = 0; i < RING_BUFFER_SIZE; i++) {
 8000466:	4618      	mov	r0, r3
 8000468:	2280      	movs	r2, #128	; 0x80
 800046a:	f002 fe1f 	bl	80030ac <memset>
		midi_buffer[i] = -1;
	}
	midi_buffer_read = 0;
 800046e:	2100      	movs	r1, #0
 8000470:	4603      	mov	r3, r0
	midi_buffer_write = 0;
 8000472:	4a08      	ldr	r2, [pc, #32]	; (8000494 <init_midi+0x3c>)
	midi_buffer_read = 0;
 8000474:	4808      	ldr	r0, [pc, #32]	; (8000498 <init_midi+0x40>)
 8000476:	7001      	strb	r1, [r0, #0]
	midi_buffer_write = 0;
 8000478:	7011      	strb	r1, [r2, #0]
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 800047a:	7811      	ldrb	r1, [r2, #0]
 800047c:	4620      	mov	r0, r4
}
 800047e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(huart, &midi_buffer[midi_buffer_write], 1);
 8000482:	2201      	movs	r2, #1
 8000484:	4419      	add	r1, r3
 8000486:	f002 bc2b 	b.w	8002ce0 <HAL_UART_Receive_IT>
 800048a:	bf00      	nop
 800048c:	20000304 	.word	0x20000304
 8000490:	20000384 	.word	0x20000384
 8000494:	20000278 	.word	0x20000278
 8000498:	20000428 	.word	0x20000428

0800049c <process_midi_byte>:

void process_midi_byte() {
 800049c:	b538      	push	{r3, r4, r5, lr}
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 800049e:	4c35      	ldr	r4, [pc, #212]	; (8000574 <process_midi_byte+0xd8>)
 80004a0:	4a35      	ldr	r2, [pc, #212]	; (8000578 <process_midi_byte+0xdc>)
 80004a2:	7823      	ldrb	r3, [r4, #0]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80004a4:	56d1      	ldrsb	r1, [r2, r3]
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 80004a6:	5cd2      	ldrb	r2, [r2, r3]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80004a8:	2900      	cmp	r1, #0
 80004aa:	db41      	blt.n	8000530 <process_midi_byte+0x94>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {													//if byte received was data byte
		switch (status & 0xF0) {
 80004ac:	4b33      	ldr	r3, [pc, #204]	; (800057c <process_midi_byte+0xe0>)
 80004ae:	7819      	ldrb	r1, [r3, #0]
 80004b0:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80004b4:	2bc0      	cmp	r3, #192	; 0xc0
 80004b6:	d033      	beq.n	8000520 <process_midi_byte+0x84>
 80004b8:	d820      	bhi.n	80004fc <process_midi_byte+0x60>
 80004ba:	2ba0      	cmp	r3, #160	; 0xa0
 80004bc:	d002      	beq.n	80004c4 <process_midi_byte+0x28>
 80004be:	d90c      	bls.n	80004da <process_midi_byte+0x3e>
 80004c0:	2bb0      	cmp	r3, #176	; 0xb0
 80004c2:	d147      	bne.n	8000554 <process_midi_byte+0xb8>
		case 0xD0:												//channel pressure (unimplemented)
			data[0] = midi_in;
			channel_pressure();
			break;
		case 0xE0:												//pitch bend (unimplemented)
			if (data[0] == (uint8_t)-1) {
 80004c4:	4b2e      	ldr	r3, [pc, #184]	; (8000580 <process_midi_byte+0xe4>)
 80004c6:	7819      	ldrb	r1, [r3, #0]
 80004c8:	29ff      	cmp	r1, #255	; 0xff
 80004ca:	d02a      	beq.n	8000522 <process_midi_byte+0x86>
				data[0] = midi_in;
			}
			else {
				data[1] = midi_in;
 80004cc:	705a      	strb	r2, [r3, #1]
			break;
		default:
			__NOP();
		}
	}
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 80004ce:	7823      	ldrb	r3, [r4, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004d6:	7023      	strb	r3, [r4, #0]
}
 80004d8:	bd38      	pop	{r3, r4, r5, pc}
		switch (status & 0xF0) {
 80004da:	2b80      	cmp	r3, #128	; 0x80
 80004dc:	d034      	beq.n	8000548 <process_midi_byte+0xac>
 80004de:	2b90      	cmp	r3, #144	; 0x90
 80004e0:	d138      	bne.n	8000554 <process_midi_byte+0xb8>
			if (data[0] == (uint8_t)-1) {
 80004e2:	4d27      	ldr	r5, [pc, #156]	; (8000580 <process_midi_byte+0xe4>)
 80004e4:	7828      	ldrb	r0, [r5, #0]
 80004e6:	28ff      	cmp	r0, #255	; 0xff
 80004e8:	d032      	beq.n	8000550 <process_midi_byte+0xb4>
				data[1] = midi_in;
 80004ea:	706a      	strb	r2, [r5, #1]
				if (data[1] == 0) {
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d13a      	bne.n	8000566 <process_midi_byte+0xca>

void note_off() {
	release_voice(data[0]);
 80004f0:	f000 fe30 	bl	8001154 <release_voice>
	data[0] = -1;
 80004f4:	23ff      	movs	r3, #255	; 0xff
 80004f6:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80004f8:	706b      	strb	r3, [r5, #1]
}
 80004fa:	e7e8      	b.n	80004ce <process_midi_byte+0x32>
		switch (status & 0xF0) {
 80004fc:	2be0      	cmp	r3, #224	; 0xe0
 80004fe:	d0e1      	beq.n	80004c4 <process_midi_byte+0x28>
 8000500:	2bf0      	cmp	r3, #240	; 0xf0
 8000502:	d10b      	bne.n	800051c <process_midi_byte+0x80>
			if (status == 0xFF) {									//system reset
 8000504:	29ff      	cmp	r1, #255	; 0xff
 8000506:	d1e2      	bne.n	80004ce <process_midi_byte+0x32>
				midi_buffer_read = 0;
 8000508:	2200      	movs	r2, #0
				data[0] = -1;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <process_midi_byte+0xe4>)
				midi_buffer_write = 0;
 800050c:	481d      	ldr	r0, [pc, #116]	; (8000584 <process_midi_byte+0xe8>)
				midi_buffer_read = 0;
 800050e:	7022      	strb	r2, [r4, #0]
				data[0] = -1;
 8000510:	7019      	strb	r1, [r3, #0]
				midi_buffer_write = 0;
 8000512:	7002      	strb	r2, [r0, #0]
				data[1] = -1;
 8000514:	7059      	strb	r1, [r3, #1]
				clear_voices();
 8000516:	f000 fd19 	bl	8000f4c <clear_voices>
 800051a:	e7d8      	b.n	80004ce <process_midi_byte+0x32>
		switch (status & 0xF0) {
 800051c:	2bd0      	cmp	r3, #208	; 0xd0
 800051e:	d119      	bne.n	8000554 <process_midi_byte+0xb8>
			data[0] = midi_in;
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <process_midi_byte+0xe4>)
 8000522:	701a      	strb	r2, [r3, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 8000524:	7823      	ldrb	r3, [r4, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800052c:	7023      	strb	r3, [r4, #0]
}
 800052e:	bd38      	pop	{r3, r4, r5, pc}
		data[0] = -1;
 8000530:	21ff      	movs	r1, #255	; 0xff
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <process_midi_byte+0xe4>)
		status = midi_in;
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <process_midi_byte+0xe0>)
		data[0] = -1;
 8000536:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 8000538:	7059      	strb	r1, [r3, #1]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800053a:	7823      	ldrb	r3, [r4, #0]
		status = midi_in;
 800053c:	7002      	strb	r2, [r0, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800053e:	3301      	adds	r3, #1
 8000540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000544:	7023      	strb	r3, [r4, #0]
}
 8000546:	bd38      	pop	{r3, r4, r5, pc}
			if (data[0] == (uint8_t)-1) {
 8000548:	4d0d      	ldr	r5, [pc, #52]	; (8000580 <process_midi_byte+0xe4>)
 800054a:	7828      	ldrb	r0, [r5, #0]
 800054c:	28ff      	cmp	r0, #255	; 0xff
 800054e:	d103      	bne.n	8000558 <process_midi_byte+0xbc>
				data[0] = midi_in;
 8000550:	702a      	strb	r2, [r5, #0]
 8000552:	e7bc      	b.n	80004ce <process_midi_byte+0x32>
			__NOP();
 8000554:	bf00      	nop
 8000556:	e7ba      	b.n	80004ce <process_midi_byte+0x32>
				data[1] = midi_in;
 8000558:	706a      	strb	r2, [r5, #1]
	release_voice(data[0]);
 800055a:	f000 fdfb 	bl	8001154 <release_voice>
	data[0] = -1;
 800055e:	23ff      	movs	r3, #255	; 0xff
 8000560:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 8000562:	706b      	strb	r3, [r5, #1]
}
 8000564:	e7b3      	b.n	80004ce <process_midi_byte+0x32>

void note_on() {
	add_voice(data[0]);
 8000566:	f000 fd03 	bl	8000f70 <add_voice>
	data[0] = -1;
 800056a:	23ff      	movs	r3, #255	; 0xff
 800056c:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 800056e:	706b      	strb	r3, [r5, #1]
}
 8000570:	e7ad      	b.n	80004ce <process_midi_byte+0x32>
 8000572:	bf00      	nop
 8000574:	20000428 	.word	0x20000428
 8000578:	20000304 	.word	0x20000304
 800057c:	20000429 	.word	0x20000429
 8000580:	20000384 	.word	0x20000384
 8000584:	20000278 	.word	0x20000278

08000588 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <note_to_freq+0x8>)
}
 800058a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800058e:	4770      	bx	lr
 8000590:	080030e4 	.word	0x080030e4

08000594 <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 8000596:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000598:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 800059c:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	be37c63b 	.word	0xbe37c63b

080005a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <HAL_MspInit+0x3c>)
{
 80005aa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ac:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ae:	490e      	ldr	r1, [pc, #56]	; (80005e8 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b0:	f042 0201 	orr.w	r2, r2, #1
 80005b4:	619a      	str	r2, [r3, #24]
 80005b6:	699a      	ldr	r2, [r3, #24]
 80005b8:	f002 0201 	and.w	r2, r2, #1
 80005bc:	9200      	str	r2, [sp, #0]
 80005be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	69da      	ldr	r2, [r3, #28]
 80005c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d2:	684b      	ldr	r3, [r1, #4]
 80005d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005dc:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	b002      	add	sp, #8
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010000 	.word	0x40010000

080005ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C2)
 80005f2:	6802      	ldr	r2, [r0, #0]
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <HAL_I2C_MspInit+0x90>)
{
 80005f6:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 80005f8:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80005fe:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hi2c->Instance==I2C2)
 8000602:	d002      	beq.n	800060a <HAL_I2C_MspInit+0x1e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000604:	b007      	add	sp, #28
 8000606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060a:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800060c:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 8000610:	f04f 0912 	mov.w	r9, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4f1a      	ldr	r7, [pc, #104]	; (8000680 <HAL_I2C_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	4605      	mov	r5, r0
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	61bb      	str	r3, [r7, #24]
 8000622:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	4817      	ldr	r0, [pc, #92]	; (8000684 <HAL_I2C_MspInit+0x98>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000630:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f001 fa86 	bl	8001b44 <HAL_GPIO_Init>
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000638:	f04f 0c10 	mov.w	ip, #16
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800063c:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C2_CLK_ENABLE();
 800063e:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000640:	4e11      	ldr	r6, [pc, #68]	; (8000688 <HAL_I2C_MspInit+0x9c>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000642:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800064a:	4910      	ldr	r1, [pc, #64]	; (800068c <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 800064c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000650:	9301      	str	r3, [sp, #4]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000652:	4630      	mov	r0, r6
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000654:	e9c6 c401 	strd	ip, r4, [r6, #4]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000658:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800065c:	e9c6 4406 	strd	r4, r4, [r6, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000660:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000662:	6031      	str	r1, [r6, #0]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000664:	60f2      	str	r2, [r6, #12]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000666:	f001 f93b 	bl	80018e0 <HAL_DMA_Init>
 800066a:	b920      	cbnz	r0, 8000676 <HAL_I2C_MspInit+0x8a>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800066c:	636e      	str	r6, [r5, #52]	; 0x34
 800066e:	6275      	str	r5, [r6, #36]	; 0x24
}
 8000670:	b007      	add	sp, #28
 8000672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8000676:	f7ff feed 	bl	8000454 <Error_Handler>
 800067a:	e7f7      	b.n	800066c <HAL_I2C_MspInit+0x80>
 800067c:	40005800 	.word	0x40005800
 8000680:	40021000 	.word	0x40021000
 8000684:	40010c00 	.word	0x40010c00
 8000688:	2000027c 	.word	0x2000027c
 800068c:	40020044 	.word	0x40020044

08000690 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	2300      	movs	r3, #0
{
 8000692:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 8000694:	6801      	ldr	r1, [r0, #0]
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <HAL_SPI_MspInit+0x60>)
{
 8000698:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 800069a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80006a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI1)
 80006a4:	d001      	beq.n	80006aa <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006a6:	b006      	add	sp, #24
 80006a8:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006aa:	24a0      	movs	r4, #160	; 0xa0
 80006ac:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ae:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006b4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80006b8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006c0:	619a      	str	r2, [r3, #24]
 80006c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	f042 0204 	orr.w	r2, r2, #4
 80006d4:	619a      	str	r2, [r3, #24]
 80006d6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e4:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f001 fa2d 	bl	8001b44 <HAL_GPIO_Init>
}
 80006ea:	b006      	add	sp, #24
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	bf00      	nop
 80006f0:	40013000 	.word	0x40013000
 80006f4:	40010800 	.word	0x40010800

080006f8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80006f8:	6803      	ldr	r3, [r0, #0]
 80006fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006fe:	d000      	beq.n	8000702 <HAL_TIM_Base_MspInit+0xa>
 8000700:	4770      	bx	lr

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000702:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000704:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000708:	69d8      	ldr	r0, [r3, #28]
{
 800070a:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800070c:	4308      	orrs	r0, r1
 800070e:	61d8      	str	r0, [r3, #28]
 8000710:	69db      	ldr	r3, [r3, #28]
{
 8000712:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000714:	400b      	ands	r3, r1
 8000716:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800071c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800071e:	f001 f881 	bl	8001824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000722:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000724:	b003      	add	sp, #12
 8000726:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800072a:	f001 b8b3 	b.w	8001894 <HAL_NVIC_EnableIRQ>
 800072e:	bf00      	nop

08000730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000730:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8000734:	6802      	ldr	r2, [r0, #0]
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <HAL_UART_MspInit+0x88>)
{
 8000738:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 800073a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000740:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8000744:	d001      	beq.n	800074a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000746:	b007      	add	sp, #28
 8000748:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800074a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074e:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000750:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8000752:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000756:	699a      	ldr	r2, [r3, #24]
 8000758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800075c:	619a      	str	r2, [r3, #24]
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000764:	9200      	str	r2, [sp, #0]
 8000766:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	f042 0204 	orr.w	r2, r2, #4
 800076e:	619a      	str	r2, [r3, #24]
 8000770:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000772:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	a902      	add	r1, sp, #8
 8000782:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000788:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f001 f9db 	bl	8001b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078e:	2300      	movs	r3, #0
 8000790:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	a902      	add	r1, sp, #8
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000798:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f001 f9d1 	bl	8001b44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007a2:	4622      	mov	r2, r4
 80007a4:	4621      	mov	r1, r4
 80007a6:	2025      	movs	r0, #37	; 0x25
 80007a8:	f001 f83c 	bl	8001824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007ac:	2025      	movs	r0, #37	; 0x25
 80007ae:	f001 f871 	bl	8001894 <HAL_NVIC_EnableIRQ>
}
 80007b2:	b007      	add	sp, #28
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop
 80007b8:	40013800 	.word	0x40013800
 80007bc:	40010800 	.word	0x40010800

080007c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler>
 80007c2:	bf00      	nop

080007c4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <HardFault_Handler>
 80007c6:	bf00      	nop

080007c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler>
 80007ca:	bf00      	nop

080007cc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <BusFault_Handler>
 80007ce:	bf00      	nop

080007d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler>
 80007d2:	bf00      	nop

080007d4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <DebugMon_Handler>:
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop

080007dc <PendSV_Handler>:
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 bfea 	b.w	80017b8 <HAL_IncTick>

080007e4 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80007e4:	4801      	ldr	r0, [pc, #4]	; (80007ec <DMA1_Channel4_IRQHandler+0x8>)
 80007e6:	f001 b919 	b.w	8001a1c <HAL_DMA_IRQHandler>
 80007ea:	bf00      	nop
 80007ec:	2000027c 	.word	0x2000027c

080007f0 <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 80007f0:	f7ff be20 	b.w	8000434 <sample>

080007f4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007f4:	4801      	ldr	r0, [pc, #4]	; (80007fc <USART1_IRQHandler+0x8>)
 80007f6:	f002 bb07 	b.w	8002e08 <HAL_UART_IRQHandler>
 80007fa:	bf00      	nop
 80007fc:	200002c0 	.word	0x200002c0

08000800 <modulate>:
		}
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
	}
}

static inline int16_t modulate(uint8_t voice_index) {
 8000800:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {			//loop through all operators of voice
		/*update phase of active operator*/
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 8000802:	4eb6      	ldr	r6, [pc, #728]	; (8000adc <modulate+0x2dc>)
 8000804:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8000808:	eb06 0343 	add.w	r3, r6, r3, lsl #1
	-27, -25, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9,  -7,  -5,  -3,  -2,
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 800080c:	f8b3 c078 	ldrh.w	ip, [r3, #120]	; 0x78
 8000810:	f8b3 70e8 	ldrh.w	r7, [r3, #232]	; 0xe8
 8000814:	891d      	ldrh	r5, [r3, #8]
 8000816:	88d9      	ldrh	r1, [r3, #6]
 8000818:	f8b3 4076 	ldrh.w	r4, [r3, #118]	; 0x76
 800081c:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	; 0xe6
 8000820:	440d      	add	r5, r1
 8000822:	4464      	add	r4, ip
 8000824:	f8b3 1156 	ldrh.w	r1, [r3, #342]	; 0x156
 8000828:	f8b3 c158 	ldrh.w	ip, [r3, #344]	; 0x158
 800082c:	443a      	add	r2, r7
	}

	switch (algo) {
 800082e:	4fac      	ldr	r7, [pc, #688]	; (8000ae0 <modulate+0x2e0>)
 8000830:	4461      	add	r1, ip
 8000832:	783f      	ldrb	r7, [r7, #0]
 8000834:	b2ad      	uxth	r5, r5
 8000836:	b2a4      	uxth	r4, r4
 8000838:	b292      	uxth	r2, r2
 800083a:	b289      	uxth	r1, r1
		op[op_index][voice_index].phase = update_phase(op[op_index][voice_index].delta, op[op_index][voice_index].phase);
 800083c:	811d      	strh	r5, [r3, #8]
 800083e:	f8a3 4078 	strh.w	r4, [r3, #120]	; 0x78
 8000842:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
 8000846:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
 800084a:	00c3      	lsls	r3, r0, #3
 800084c:	2f0b      	cmp	r7, #11
 800084e:	f200 81c6 	bhi.w	8000bde <modulate+0x3de>
 8000852:	e8df f017 	tbh	[pc, r7, lsl #1]
 8000856:	0036      	.short	0x0036
 8000858:	0074005e 	.word	0x0074005e
 800085c:	00bd009b 	.word	0x00bd009b
 8000860:	010400db 	.word	0x010400db
 8000864:	014b0125 	.word	0x014b0125
 8000868:	01a6017e 	.word	0x01a6017e
 800086c:	000c      	.short	0x000c
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 800086e:	4f9d      	ldr	r7, [pc, #628]	; (8000ae4 <modulate+0x2e4>)
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
		return ((int16_t)op2 + op1 + op0) / 3;
		break;
	case 0x0B:
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000870:	1a1b      	subs	r3, r3, r0
 8000872:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000876:	0a09      	lsrs	r1, r1, #8
 8000878:	0a12      	lsrs	r2, r2, #8
 800087a:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
 800087e:	f917 e001 	ldrsb.w	lr, [r7, r1]
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000882:	f917 c002 	ldrsb.w	ip, [r7, r2]
 8000886:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
 800088a:	0a24      	lsrs	r4, r4, #8
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800088c:	573e      	ldrsb	r6, [r7, r4]
 800088e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8000892:	0a2d      	lsrs	r5, r5, #8
		op3 = (int16_t)get_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000894:	fb00 f00e 	mul.w	r0, r0, lr
		op2 = (int16_t)get_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000898:	fb01 f10c 	mul.w	r1, r1, ip
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800089c:	577c      	ldrsb	r4, [r7, r5]
 800089e:	791b      	ldrb	r3, [r3, #4]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008a0:	fb02 f206 	mul.w	r2, r2, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80008a4:	fb03 f304 	mul.w	r3, r3, r4
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 80008a8:	f341 11c7 	sbfx	r1, r1, #7, #8
 80008ac:	f340 10c7 	sbfx	r0, r0, #7, #8
 80008b0:	4408      	add	r0, r1
 80008b2:	f342 12c7 	sbfx	r2, r2, #7, #8
 80008b6:	4410      	add	r0, r2
 80008b8:	f343 13c7 	sbfx	r3, r3, #7, #8
 80008bc:	4418      	add	r0, r3
 80008be:	1080      	asrs	r0, r0, #2
		break;
	default:
		break;
	}
	return 0;
}
 80008c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008c2:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 80008c4:	4888      	ldr	r0, [pc, #544]	; (8000ae8 <modulate+0x2e8>)
 80008c6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80008ca:	0a0e      	lsrs	r6, r1, #8
 80008cc:	5786      	ldrsb	r6, [r0, r6]
 80008ce:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008d2:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80008d4:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008d8:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	5686      	ldrsb	r6, [r0, r2]
 80008e0:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008e4:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80008e6:	fb01 f106 	mul.w	r1, r1, r6
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008ea:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80008ee:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008f0:	5680      	ldrsb	r0, [r0, r2]
 80008f2:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80008f6:	0a2a      	lsrs	r2, r5, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80008f8:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 80008fc:	4c79      	ldr	r4, [pc, #484]	; (8000ae4 <modulate+0x2e4>)
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80008fe:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	7918      	ldrb	r0, [r3, #4]
 8000906:	56a3      	ldrsb	r3, [r4, r2]
 8000908:	fb00 f003 	mul.w	r0, r0, r3
		return op0;
 800090c:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000912:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000914:	4874      	ldr	r0, [pc, #464]	; (8000ae8 <modulate+0x2e8>)
 8000916:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800091a:	0a16      	lsrs	r6, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800091c:	5787      	ldrsb	r7, [r0, r6]
 800091e:	0a09      	lsrs	r1, r1, #8
 8000920:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000924:	5646      	ldrsb	r6, [r0, r1]
 8000926:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 800092a:	fb02 f207 	mul.w	r2, r2, r7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800092e:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000932:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000934:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000938:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 800093c:	e7d7      	b.n	80008ee <modulate+0xee>
 800093e:	4f6a      	ldr	r7, [pc, #424]	; (8000ae8 <modulate+0x2e8>)
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000940:	1a1b      	subs	r3, r3, r0
 8000942:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000946:	0a12      	lsrs	r2, r2, #8
 8000948:	56be      	ldrsb	r6, [r7, r2]
 800094a:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800094e:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000950:	fb00 f006 	mul.w	r0, r0, r6
 8000954:	0a09      	lsrs	r1, r1, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000956:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800095a:	567c      	ldrsb	r4, [r7, r1]
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000962:	56b9      	ldrsb	r1, [r7, r2]
 8000964:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000968:	fb00 f004 	mul.w	r0, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800096c:	fb02 f101 	mul.w	r1, r2, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000970:	0a2a      	lsrs	r2, r5, #8
 8000972:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 8000976:	eb02 12e1 	add.w	r2, r2, r1, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 800097a:	495a      	ldr	r1, [pc, #360]	; (8000ae4 <modulate+0x2e4>)
 800097c:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 800097e:	7918      	ldrb	r0, [r3, #4]
 8000980:	568b      	ldrsb	r3, [r1, r2]
 8000982:	fb00 f003 	mul.w	r0, r0, r3
		return op0;
 8000986:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 800098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 800098c:	4f56      	ldr	r7, [pc, #344]	; (8000ae8 <modulate+0x2e8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 800098e:	1a1b      	subs	r3, r3, r0
 8000990:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000994:	0a09      	lsrs	r1, r1, #8
 8000996:	567e      	ldrsb	r6, [r7, r1]
 8000998:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 800099c:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009a0:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009a4:	f3c0 10c7 	ubfx	r0, r0, #7, #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009a8:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80009ac:	b2e4      	uxtb	r4, r4
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009ae:	eb00 2212 	add.w	r2, r0, r2, lsr #8
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009b2:	573e      	ldrsb	r6, [r7, r4]
 80009b4:	b2d2      	uxtb	r2, r2
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009b6:	56bc      	ldrsb	r4, [r7, r2]
 80009b8:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009bc:	fb01 f206 	mul.w	r2, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009c0:	fb00 f104 	mul.w	r1, r0, r4
		op1 = (int16_t)get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009c4:	11d2      	asrs	r2, r2, #7
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009c6:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 80009ca:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80009ce:	e7d4      	b.n	800097a <modulate+0x17a>
 80009d0:	4f45      	ldr	r7, [pc, #276]	; (8000ae8 <modulate+0x2e8>)
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009d2:	1a1b      	subs	r3, r3, r0
 80009d4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80009d8:	0a10      	lsrs	r0, r2, #8
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009da:	563e      	ldrsb	r6, [r7, r0]
 80009dc:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 80009e0:	0a09      	lsrs	r1, r1, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009e2:	5679      	ldrsb	r1, [r7, r1]
 80009e4:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009e8:	fb02 f206 	mul.w	r2, r2, r6
 80009ec:	0a24      	lsrs	r4, r4, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 80009ee:	fb00 f001 	mul.w	r0, r0, r1
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009f2:	573c      	ldrsb	r4, [r7, r4]
 80009f4:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		op2 = (int16_t)get_mod_sample(op[2][voice_index].phase >> 8)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 80009f8:	11d2      	asrs	r2, r2, #7
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 80009fa:	fb01 f104 	mul.w	r1, r1, r4
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 80009fe:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 8000a02:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8000a06:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000a0a:	e7b6      	b.n	800097a <modulate+0x17a>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a0c:	1a1b      	subs	r3, r3, r0
 8000a0e:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <modulate+0x2e8>)
 8000a10:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a14:	0a0e      	lsrs	r6, r1, #8
 8000a16:	5786      	ldrsb	r6, [r0, r6]
 8000a18:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a1c:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a1e:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a22:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	5680      	ldrsb	r0, [r0, r2]
 8000a2a:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a2e:	0a22      	lsrs	r2, r4, #8
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a30:	fb01 f100 	mul.w	r1, r1, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000a34:	482b      	ldr	r0, [pc, #172]	; (8000ae4 <modulate+0x2e4>)
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a36:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	0a2d      	lsrs	r5, r5, #8
 8000a3e:	5681      	ldrsb	r1, [r0, r2]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a40:	5742      	ldrsb	r2, [r0, r5]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a42:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a46:	791b      	ldrb	r3, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a48:	fb00 f001 	mul.w	r0, r0, r1
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a4c:	fb03 f302 	mul.w	r3, r3, r2
		return ((int16_t)op2 + op0) >> 1;
 8000a50:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000a54:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000a58:	4418      	add	r0, r3
 8000a5a:	1040      	asrs	r0, r0, #1
}
 8000a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a5e:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000a60:	4821      	ldr	r0, [pc, #132]	; (8000ae8 <modulate+0x2e8>)
 8000a62:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000a66:	0a0e      	lsrs	r6, r1, #8
 8000a68:	5786      	ldrsb	r6, [r0, r6]
 8000a6a:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a6e:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a70:	fb01 f106 	mul.w	r1, r1, r6
		op2 = (int16_t)get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a74:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	5681      	ldrsb	r1, [r0, r2]
 8000a7c:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000a80:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <modulate+0x2e4>)
 8000a82:	fb02 f201 	mul.w	r2, r2, r1
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a86:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8000a8a:	eb02 2114 	add.w	r1, r2, r4, lsr #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a8e:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8000a92:	b2c9      	uxtb	r1, r1
 8000a94:	b2d2      	uxtb	r2, r2
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a96:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a98:	5682      	ldrsb	r2, [r0, r2]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a9a:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8000a9e:	e7d2      	b.n	8000a46 <modulate+0x246>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000aa0:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000aa2:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <modulate+0x2e8>)
 8000aa4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000aa8:	0a0f      	lsrs	r7, r1, #8
 8000aaa:	0a26      	lsrs	r6, r4, #8
 8000aac:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
 8000ab0:	57c4      	ldrsb	r4, [r0, r7]
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ab2:	5786      	ldrsb	r6, [r0, r6]
 8000ab4:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ab8:	fb01 f404 	mul.w	r4, r1, r4
		op1 = (int16_t)get_mod_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000abc:	fb00 f006 	mul.w	r0, r0, r6
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac0:	0a11      	lsrs	r1, r2, #8
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac2:	0a2a      	lsrs	r2, r5, #8
 8000ac4:	eb02 12e0 	add.w	r2, r2, r0, asr #7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac8:	eb01 11e4 	add.w	r1, r1, r4, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <modulate+0x2e4>)
 8000ace:	b2c9      	uxtb	r1, r1
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	5641      	ldrsb	r1, [r0, r1]
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ad4:	5682      	ldrsb	r2, [r0, r2]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ad6:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
 8000ada:	e7b4      	b.n	8000a46 <modulate+0x246>
 8000adc:	20000028 	.word	0x20000028
 8000ae0:	200001ec 	.word	0x200001ec
 8000ae4:	080032e4 	.word	0x080032e4
 8000ae8:	080031e4 	.word	0x080031e4
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000aec:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000aee:	483d      	ldr	r0, [pc, #244]	; (8000be4 <modulate+0x3e4>)
 8000af0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000af4:	0a09      	lsrs	r1, r1, #8
 8000af6:	5640      	ldrsb	r0, [r0, r1]
 8000af8:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000afc:	4e3a      	ldr	r6, [pc, #232]	; (8000be8 <modulate+0x3e8>)
 8000afe:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b02:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000b06:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b0a:	eb01 2014 	add.w	r0, r1, r4, lsr #8
 8000b0e:	b2c0      	uxtb	r0, r0
 8000b10:	b2d4      	uxtb	r4, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b12:	eb01 2215 	add.w	r2, r1, r5, lsr #8
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b16:	5737      	ldrsb	r7, [r6, r4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b18:	5635      	ldrsb	r5, [r6, r0]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b1a:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b1e:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8000b22:	b2d2      	uxtb	r2, r2
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b24:	56b4      	ldrsb	r4, [r6, r2]
 8000b26:	791a      	ldrb	r2, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b2c:	fb00 f105 	mul.w	r1, r0, r5
		op0 = (int16_t)get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b30:	fb02 f204 	mul.w	r2, r2, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 8000b34:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000b38:	f341 11c7 	sbfx	r1, r1, #7, #8
		return ((int16_t)op2 + op1 + op0) / 3;
 8000b3c:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000b40:	440b      	add	r3, r1
 8000b42:	482a      	ldr	r0, [pc, #168]	; (8000bec <modulate+0x3ec>)
 8000b44:	4413      	add	r3, r2
 8000b46:	fb80 2003 	smull	r2, r0, r0, r3
 8000b4a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000b4e:	b200      	sxth	r0, r0
}
 8000b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b52:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b54:	4823      	ldr	r0, [pc, #140]	; (8000be4 <modulate+0x3e4>)
 8000b56:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000b5a:	0a09      	lsrs	r1, r1, #8
 8000b5c:	5640      	ldrsb	r0, [r0, r1]
 8000b5e:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000b62:	4e21      	ldr	r6, [pc, #132]	; (8000be8 <modulate+0x3e8>)
 8000b64:	fb01 f100 	mul.w	r1, r1, r0
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b68:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000b6c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b70:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8000b74:	b2d0      	uxtb	r0, r2
 8000b76:	b2ca      	uxtb	r2, r1
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b78:	f916 c000 	ldrsb.w	ip, [r6, r0]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b7c:	56b7      	ldrsb	r7, [r6, r2]
 8000b7e:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b82:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b86:	7919      	ldrb	r1, [r3, #4]
		op1 = (int16_t)get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b88:	fb00 f007 	mul.w	r0, r0, r7
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b8c:	fb02 f30c 	mul.w	r3, r2, ip
 8000b90:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b92:	5774      	ldrsb	r4, [r6, r5]
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b94:	fb01 f204 	mul.w	r2, r1, r4
		return ((int16_t)op2 + op1 + op0) / 3;
 8000b98:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000b9c:	f340 11c7 	sbfx	r1, r0, #7, #8
 8000ba0:	e7cc      	b.n	8000b3c <modulate+0x33c>
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba2:	1a1b      	subs	r3, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <modulate+0x3e4>)
 8000ba6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8000baa:	0a09      	lsrs	r1, r1, #8
 8000bac:	5641      	ldrsb	r1, [r0, r1]
 8000bae:	f893 0154 	ldrb.w	r0, [r3, #340]	; 0x154
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bb2:	0a12      	lsrs	r2, r2, #8
		op3 = (int16_t)get_mod_sample(op[3][voice_index].phase >> 8)*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bb4:	fb00 f001 	mul.w	r0, r0, r1
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000bb8:	490b      	ldr	r1, [pc, #44]	; (8000be8 <modulate+0x3e8>)
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bba:	eb02 12e0 	add.w	r2, r2, r0, asr #7
 8000bbe:	0a24      	lsrs	r4, r4, #8
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	568f      	ldrsb	r7, [r1, r2]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bc4:	570e      	ldrsb	r6, [r1, r4]
 8000bc6:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bca:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8000bce:	0a2d      	lsrs	r5, r5, #8
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bd0:	574c      	ldrsb	r4, [r1, r5]
		op1 = (int16_t)get_sample(op[1][voice_index].phase >> 8)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bd2:	fb00 f006 	mul.w	r0, r0, r6
		op0 = (int16_t)get_sample(op[0][voice_index].phase >> 8)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bd6:	7919      	ldrb	r1, [r3, #4]
		op2 = (int16_t)get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bd8:	fb02 f307 	mul.w	r3, r2, r7
 8000bdc:	e7da      	b.n	8000b94 <modulate+0x394>
	switch (algo) {
 8000bde:	2000      	movs	r0, #0
}
 8000be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	080031e4 	.word	0x080031e4
 8000be8:	080032e4 	.word	0x080032e4
 8000bec:	55555556 	.word	0x55555556

08000bf0 <init_synth>:
 *      Author: Tennyson Cheng
 */

#include "synth.h"

void init_synth() {
 8000bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		op_release[i] = 110;//ENV_MAX_RATE;				//default release 128
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);//ENV_MAX_RATE << 8;
		op_release_inc[i] = calculate_env_inc(op_release[i]);//ENV_MAX_RATE << 8;
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000bf4:	4cc5      	ldr	r4, [pc, #788]	; (8000f0c <init_synth+0x31c>)
		algo = 0x00;								//default algorithm 0
 8000bf6:	f04f 0600 	mov.w	r6, #0
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	46a3      	mov	fp, r4
 8000bfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c00:	46a2      	mov	sl, r4
 8000c02:	881d      	ldrh	r5, [r3, #0]
 8000c04:	4bc2      	ldr	r3, [pc, #776]	; (8000f10 <init_synth+0x320>)
void init_synth() {
 8000c06:	b097      	sub	sp, #92	; 0x5c
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c08:	e9cd 4400 	strd	r4, r4, [sp]
 8000c0c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000c10:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000c14:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000c18:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000c1c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8000c20:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000c24:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000c28:	9410      	str	r4, [sp, #64]	; 0x40
 8000c2a:	6018      	str	r0, [r3, #0]
 8000c2c:	9411      	str	r4, [sp, #68]	; 0x44
 8000c2e:	6059      	str	r1, [r3, #4]
 8000c30:	9412      	str	r4, [sp, #72]	; 0x48
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	819d      	strh	r5, [r3, #12]
 8000c36:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8000c3a:	835d      	strh	r5, [r3, #26]
 8000c3c:	f8c3 000e 	str.w	r0, [r3, #14]
 8000c40:	f8c3 1012 	str.w	r1, [r3, #18]
 8000c44:	f8c3 2016 	str.w	r2, [r3, #22]
 8000c48:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8000c4c:	61d8      	str	r0, [r3, #28]
		algo = 0x00;								//default algorithm 0
 8000c4e:	48b1      	ldr	r0, [pc, #708]	; (8000f14 <init_synth+0x324>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c50:	46a3      	mov	fp, r4
		algo = 0x00;								//default algorithm 0
 8000c52:	7006      	strb	r6, [r0, #0]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 8000c54:	f04f 3680 	mov.w	r6, #2155905152	; 0x80808080
 8000c58:	48af      	ldr	r0, [pc, #700]	; (8000f18 <init_synth+0x328>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c5a:	46a1      	mov	r9, r4
 8000c5c:	6006      	str	r6, [r0, #0]
 8000c5e:	f04f 3610 	mov.w	r6, #269488144	; 0x10101010
 8000c62:	48ae      	ldr	r0, [pc, #696]	; (8000f1c <init_synth+0x32c>)
 8000c64:	46a0      	mov	r8, r4
 8000c66:	6006      	str	r6, [r0, #0]
 8000c68:	f04f 367e 	mov.w	r6, #2122219134	; 0x7e7e7e7e
 8000c6c:	48ac      	ldr	r0, [pc, #688]	; (8000f20 <init_synth+0x330>)
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	6006      	str	r6, [r0, #0]
 8000c72:	f04f 3678 	mov.w	r6, #2021161080	; 0x78787878
 8000c76:	48ab      	ldr	r0, [pc, #684]	; (8000f24 <init_synth+0x334>)
 8000c78:	46a4      	mov	ip, r4
 8000c7a:	6006      	str	r6, [r0, #0]
 8000c7c:	f04f 3664 	mov.w	r6, #1684300900	; 0x64646464
 8000c80:	48a9      	ldr	r0, [pc, #676]	; (8000f28 <init_synth+0x338>)
 8000c82:	4627      	mov	r7, r4
 8000c84:	6006      	str	r6, [r0, #0]
 8000c86:	f04f 366e 	mov.w	r6, #1852730990	; 0x6e6e6e6e
 8000c8a:	48a8      	ldr	r0, [pc, #672]	; (8000f2c <init_synth+0x33c>)
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
 8000c8c:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8000f40 <init_synth+0x350>
 8000c90:	6006      	str	r6, [r0, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c92:	465e      	mov	r6, fp
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
 8000c94:	48a6      	ldr	r0, [pc, #664]	; (8000f30 <init_synth+0x340>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000c96:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);//ENV_MAX_RATE << 8;
 8000c9a:	f8c0 a000 	str.w	sl, [r0]
 8000c9e:	f8c0 a004 	str.w	sl, [r0, #4]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);//ENV_MAX_RATE << 8;
 8000ca2:	48a4      	ldr	r0, [pc, #656]	; (8000f34 <init_synth+0x344>)
 8000ca4:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8000f44 <init_synth+0x354>
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ca8:	9413      	str	r4, [sp, #76]	; 0x4c
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);//ENV_MAX_RATE << 8;
 8000caa:	f8c0 a000 	str.w	sl, [r0]
 8000cae:	f8c0 a004 	str.w	sl, [r0, #4]
		op_release_inc[i] = calculate_env_inc(op_release[i]);//ENV_MAX_RATE << 8;
 8000cb2:	48a1      	ldr	r0, [pc, #644]	; (8000f38 <init_synth+0x348>)
 8000cb4:	f8df a290 	ldr.w	sl, [pc, #656]	; 8000f48 <init_synth+0x358>
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000cb8:	6219      	str	r1, [r3, #32]
		op_release_inc[i] = calculate_env_inc(op_release[i]);//ENV_MAX_RATE << 8;
 8000cba:	f8c0 a000 	str.w	sl, [r0]
 8000cbe:	f8c0 a004 	str.w	sl, [r0, #4]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc4:	851d      	strh	r5, [r3, #40]	; 0x28
 8000cc6:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000cc8:	86dd      	strh	r5, [r3, #54]	; 0x36
 8000cca:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
 8000cce:	f8a3 5052 	strh.w	r5, [r3, #82]	; 0x52
 8000cd2:	f8a3 5060 	strh.w	r5, [r3, #96]	; 0x60
 8000cd6:	f8c3 002a 	str.w	r0, [r3, #42]	; 0x2a
 8000cda:	f8c3 102e 	str.w	r1, [r3, #46]	; 0x2e
 8000cde:	f8c3 2032 	str.w	r2, [r3, #50]	; 0x32
 8000ce2:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8000ce6:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 8000cea:	f8a3 507c 	strh.w	r5, [r3, #124]	; 0x7c
 8000cee:	6398      	str	r0, [r3, #56]	; 0x38
 8000cf0:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
 8000cf4:	f8a3 508a 	strh.w	r5, [r3, #138]	; 0x8a
 8000cf8:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8000cfc:	f8a3 5098 	strh.w	r5, [r3, #152]	; 0x98
 8000d00:	f8c3 0046 	str.w	r0, [r3, #70]	; 0x46
 8000d04:	f8c3 104a 	str.w	r1, [r3, #74]	; 0x4a
 8000d08:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
 8000d0c:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8000d10:	6558      	str	r0, [r3, #84]	; 0x54
 8000d12:	6599      	str	r1, [r3, #88]	; 0x58
 8000d14:	65da      	str	r2, [r3, #92]	; 0x5c
 8000d16:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8000d1a:	f8c3 0062 	str.w	r0, [r3, #98]	; 0x62
 8000d1e:	f8c3 1066 	str.w	r1, [r3, #102]	; 0x66
 8000d22:	f8c3 206a 	str.w	r2, [r3, #106]	; 0x6a
 8000d26:	cf07      	ldmia	r7!, {r0, r1, r2}
 8000d28:	6718      	str	r0, [r3, #112]	; 0x70
 8000d2a:	6759      	str	r1, [r3, #116]	; 0x74
 8000d2c:	679a      	str	r2, [r3, #120]	; 0x78
 8000d2e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d30:	465e      	mov	r6, fp
 8000d32:	f8c3 007e 	str.w	r0, [r3, #126]	; 0x7e
 8000d36:	f8c3 1082 	str.w	r1, [r3, #130]	; 0x82
 8000d3a:	f8c3 2086 	str.w	r2, [r3, #134]	; 0x86
 8000d3e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d40:	465e      	mov	r6, fp
 8000d42:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000d46:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8000d4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000d4e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d50:	465e      	mov	r6, fp
 8000d52:	f8c3 009a 	str.w	r0, [r3, #154]	; 0x9a
 8000d56:	f8c3 109e 	str.w	r1, [r3, #158]	; 0x9e
 8000d5a:	f8c3 20a2 	str.w	r2, [r3, #162]	; 0xa2
 8000d5e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d60:	465e      	mov	r6, fp
 8000d62:	f8a3 50a6 	strh.w	r5, [r3, #166]	; 0xa6
 8000d66:	f8a3 50b4 	strh.w	r5, [r3, #180]	; 0xb4
 8000d6a:	f8a3 50c2 	strh.w	r5, [r3, #194]	; 0xc2
 8000d6e:	f8a3 50d0 	strh.w	r5, [r3, #208]	; 0xd0
 8000d72:	f8a3 50de 	strh.w	r5, [r3, #222]	; 0xde
 8000d76:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 8000d7a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8000d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000d82:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d84:	465e      	mov	r6, fp
 8000d86:	f8c3 00b6 	str.w	r0, [r3, #182]	; 0xb6
 8000d8a:	f8c3 10ba 	str.w	r1, [r3, #186]	; 0xba
 8000d8e:	f8c3 20be 	str.w	r2, [r3, #190]	; 0xbe
 8000d92:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000d94:	465e      	mov	r6, fp
 8000d96:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
 8000d9a:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8000d9e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000da2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000da4:	465e      	mov	r6, fp
 8000da6:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
 8000daa:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
 8000dae:	f8c3 20da 	str.w	r2, [r3, #218]	; 0xda
 8000db2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000db4:	465e      	mov	r6, fp
 8000db6:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000dba:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8000dbe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000dc2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000dc4:	465e      	mov	r6, fp
 8000dc6:	f8a3 50ec 	strh.w	r5, [r3, #236]	; 0xec
 8000dca:	f8a3 50fa 	strh.w	r5, [r3, #250]	; 0xfa
 8000dce:	f8a3 5108 	strh.w	r5, [r3, #264]	; 0x108
 8000dd2:	f8a3 5116 	strh.w	r5, [r3, #278]	; 0x116
 8000dd6:	f8a3 5124 	strh.w	r5, [r3, #292]	; 0x124
 8000dda:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
 8000dde:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
 8000de2:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
 8000de6:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000de8:	465e      	mov	r6, fp
 8000dea:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
 8000dee:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 8000df2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000df6:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000df8:	465e      	mov	r6, fp
 8000dfa:	f8c3 010a 	str.w	r0, [r3, #266]	; 0x10a
 8000dfe:	f8c3 110e 	str.w	r1, [r3, #270]	; 0x10e
 8000e02:	f8c3 2112 	str.w	r2, [r3, #274]	; 0x112
 8000e06:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e08:	465e      	mov	r6, fp
 8000e0a:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000e0e:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
 8000e12:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8000e16:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e18:	465e      	mov	r6, fp
 8000e1a:	f8a3 5132 	strh.w	r5, [r3, #306]	; 0x132
 8000e1e:	f8a3 5140 	strh.w	r5, [r3, #320]	; 0x140
 8000e22:	f8a3 514e 	strh.w	r5, [r3, #334]	; 0x14e
 8000e26:	f8a3 515c 	strh.w	r5, [r3, #348]	; 0x15c
 8000e2a:	f8c3 0126 	str.w	r0, [r3, #294]	; 0x126
 8000e2e:	f8c3 112a 	str.w	r1, [r3, #298]	; 0x12a
 8000e32:	f8c3 212e 	str.w	r2, [r3, #302]	; 0x12e
 8000e36:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e38:	465e      	mov	r6, fp
 8000e3a:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8000e3e:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
 8000e42:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8000e46:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e48:	465e      	mov	r6, fp
 8000e4a:	f8c3 0142 	str.w	r0, [r3, #322]	; 0x142
 8000e4e:	f8c3 1146 	str.w	r1, [r3, #326]	; 0x146
 8000e52:	f8c3 214a 	str.w	r2, [r3, #330]	; 0x14a
 8000e56:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e58:	465e      	mov	r6, fp
 8000e5a:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8000e5e:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
 8000e62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8000e66:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e68:	465e      	mov	r6, fp
 8000e6a:	f8c3 015e 	str.w	r0, [r3, #350]	; 0x15e
 8000e6e:	f8c3 1162 	str.w	r1, [r3, #354]	; 0x162
 8000e72:	f8c3 2166 	str.w	r2, [r3, #358]	; 0x166
 8000e76:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e78:	465e      	mov	r6, fp
 8000e7a:	f8a3 516a 	strh.w	r5, [r3, #362]	; 0x16a
 8000e7e:	f8a3 5178 	strh.w	r5, [r3, #376]	; 0x178
 8000e82:	f8a3 5186 	strh.w	r5, [r3, #390]	; 0x186
 8000e86:	f8a3 5194 	strh.w	r5, [r3, #404]	; 0x194
 8000e8a:	f8a3 51a2 	strh.w	r5, [r3, #418]	; 0x1a2
 8000e8e:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
 8000e92:	f8c3 1170 	str.w	r1, [r3, #368]	; 0x170
 8000e96:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8000e9a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000e9c:	f8c3 017a 	str.w	r0, [r3, #378]	; 0x17a
 8000ea0:	f8c3 117e 	str.w	r1, [r3, #382]	; 0x17e
 8000ea4:	f8c3 2182 	str.w	r2, [r3, #386]	; 0x182
 8000ea8:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8000eac:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8000eb0:	f1a6 020c 	sub.w	r2, r6, #12
 8000eb4:	4616      	mov	r6, r2
 8000eb6:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8000eba:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8000ebe:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ec0:	f8c3 219e 	str.w	r2, [r3, #414]	; 0x19e
 8000ec4:	f1a6 020c 	sub.w	r2, r6, #12
 8000ec8:	4616      	mov	r6, r2
 8000eca:	f8c3 0196 	str.w	r0, [r3, #406]	; 0x196
 8000ece:	f8c3 119a 	str.w	r1, [r3, #410]	; 0x19a
 8000ed2:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ed4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8000ed8:	f1a6 020c 	sub.w	r2, r6, #12
 8000edc:	f8a3 51b0 	strh.w	r5, [r3, #432]	; 0x1b0
 8000ee0:	f8a3 51be 	strh.w	r5, [r3, #446]	; 0x1be
 8000ee4:	4615      	mov	r5, r2
 8000ee6:	f8c3 01a4 	str.w	r0, [r3, #420]	; 0x1a4
 8000eea:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
 8000eee:	cd07      	ldmia	r5!, {r0, r1, r2}
		}
	}
	env_period = ENV_MAX_PERIOD;
 8000ef0:	f240 5562 	movw	r5, #1378	; 0x562
 8000ef4:	4c11      	ldr	r4, [pc, #68]	; (8000f3c <init_synth+0x34c>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000ef6:	f8c3 01b2 	str.w	r0, [r3, #434]	; 0x1b2
	env_period = ENV_MAX_PERIOD;
 8000efa:	8025      	strh	r5, [r4, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000efc:	f8c3 11b6 	str.w	r1, [r3, #438]	; 0x1b6
 8000f00:	f8c3 21ba 	str.w	r2, [r3, #442]	; 0x1ba
}
 8000f04:	b017      	add	sp, #92	; 0x5c
 8000f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0a:	bf00      	nop
 8000f0c:	080030d4 	.word	0x080030d4
 8000f10:	20000028 	.word	0x20000028
 8000f14:	200001ec 	.word	0x200001ec
 8000f18:	20000200 	.word	0x20000200
 8000f1c:	2000021c 	.word	0x2000021c
 8000f20:	200001f4 	.word	0x200001f4
 8000f24:	20000214 	.word	0x20000214
 8000f28:	200001e8 	.word	0x200001e8
 8000f2c:	200001f0 	.word	0x200001f0
 8000f30:	2000020c 	.word	0x2000020c
 8000f34:	20000204 	.word	0x20000204
 8000f38:	200001f8 	.word	0x200001f8
 8000f3c:	200001ee 	.word	0x200001ee
 8000f40:	2aaa2aaa 	.word	0x2aaa2aaa
 8000f44:	0e380e38 	.word	0x0e380e38
 8000f48:	06bc06bc 	.word	0x06bc06bc

08000f4c <clear_voices>:

void clear_voices() {
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		op[0][i].note_value = -1;
 8000f4c:	22ff      	movs	r2, #255	; 0xff
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <clear_voices+0x20>)
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	739a      	strb	r2, [r3, #14]
 8000f54:	771a      	strb	r2, [r3, #28]
 8000f56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000f5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8000f62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000f66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}
}
 8000f6a:	4770      	bx	lr
 8000f6c:	20000028 	.word	0x20000028

08000f70 <add_voice>:

void add_voice(uint8_t note_value) {
 8000f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t voice_index, released_voice = -1;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000f74:	4c74      	ldr	r4, [pc, #464]	; (8001148 <add_voice+0x1d8>)
void add_voice(uint8_t note_value) {
 8000f76:	4607      	mov	r7, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8000f78:	7823      	ldrb	r3, [r4, #0]
 8000f7a:	2bff      	cmp	r3, #255	; 0xff
 8000f7c:	f000 80bc 	beq.w	80010f8 <add_voice+0x188>
 8000f80:	7ba2      	ldrb	r2, [r4, #14]
 8000f82:	2aff      	cmp	r2, #255	; 0xff
 8000f84:	f000 80bd 	beq.w	8001102 <add_voice+0x192>
 8000f88:	7f22      	ldrb	r2, [r4, #28]
 8000f8a:	2aff      	cmp	r2, #255	; 0xff
 8000f8c:	f000 80be 	beq.w	800110c <add_voice+0x19c>
 8000f90:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8000f94:	2aff      	cmp	r2, #255	; 0xff
 8000f96:	f000 80be 	beq.w	8001116 <add_voice+0x1a6>
 8000f9a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000f9e:	2aff      	cmp	r2, #255	; 0xff
 8000fa0:	f000 80be 	beq.w	8001120 <add_voice+0x1b0>
 8000fa4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8000fa8:	2aff      	cmp	r2, #255	; 0xff
 8000faa:	f000 80be 	beq.w	800112a <add_voice+0x1ba>
 8000fae:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8000fb2:	2aff      	cmp	r2, #255	; 0xff
 8000fb4:	f000 80be 	beq.w	8001134 <add_voice+0x1c4>
 8000fb8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8000fbc:	2aff      	cmp	r2, #255	; 0xff
 8000fbe:	f000 80c0 	beq.w	8001142 <add_voice+0x1d2>
 8000fc2:	2108      	movs	r1, #8
 8000fc4:	460d      	mov	r5, r1
			break;
		}
	}
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000fc6:	429f      	cmp	r7, r3
 8000fc8:	f000 8099 	beq.w	80010fe <add_voice+0x18e>
			voice_index = i;
			break;
		}
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000fcc:	7aa3      	ldrb	r3, [r4, #10]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000fce:	7ba2      	ldrb	r2, [r4, #14]
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	bf14      	ite	ne
 8000fd4:	23ff      	movne	r3, #255	; 0xff
 8000fd6:	2300      	moveq	r3, #0
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000fd8:	42ba      	cmp	r2, r7
 8000fda:	f000 8095 	beq.w	8001108 <add_voice+0x198>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000fde:	7e20      	ldrb	r0, [r4, #24]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000fe0:	7f22      	ldrb	r2, [r4, #28]
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8000fe2:	2803      	cmp	r0, #3
 8000fe4:	bf08      	it	eq
 8000fe6:	2301      	moveq	r3, #1
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000fe8:	42ba      	cmp	r2, r7
 8000fea:	f000 8092 	beq.w	8001112 <add_voice+0x1a2>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8000fee:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ff2:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8000ff6:	2803      	cmp	r0, #3
 8000ff8:	bf08      	it	eq
 8000ffa:	2302      	moveq	r3, #2
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8000ffc:	42ba      	cmp	r2, r7
 8000ffe:	f000 808d 	beq.w	800111c <add_voice+0x1ac>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001002:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001006:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800100a:	2803      	cmp	r0, #3
 800100c:	bf08      	it	eq
 800100e:	2303      	moveq	r3, #3
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001010:	42ba      	cmp	r2, r7
 8001012:	f000 8088 	beq.w	8001126 <add_voice+0x1b6>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001016:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800101a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800101e:	2803      	cmp	r0, #3
 8001020:	bf08      	it	eq
 8001022:	2304      	moveq	r3, #4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001024:	42ba      	cmp	r2, r7
 8001026:	f000 8083 	beq.w	8001130 <add_voice+0x1c0>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800102a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800102e:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001032:	2803      	cmp	r0, #3
 8001034:	bf08      	it	eq
 8001036:	2305      	moveq	r3, #5
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001038:	42ba      	cmp	r2, r7
 800103a:	d07e      	beq.n	800113a <add_voice+0x1ca>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800103c:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001040:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001044:	2803      	cmp	r0, #3
 8001046:	bf08      	it	eq
 8001048:	2306      	moveq	r3, #6
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800104a:	42ba      	cmp	r2, r7
 800104c:	d077      	beq.n	800113e <add_voice+0x1ce>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 800104e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8001052:	2a03      	cmp	r2, #3
 8001054:	d03a      	beq.n	80010cc <add_voice+0x15c>
			released_voice = i;
		}
	}
	if (voice_index == MAX_VOICES) {
 8001056:	2d08      	cmp	r5, #8
 8001058:	d102      	bne.n	8001060 <add_voice+0xf0>
		if (released_voice == (uint8_t)-1) {
 800105a:	2bff      	cmp	r3, #255	; 0xff
 800105c:	d03a      	beq.n	80010d4 <add_voice+0x164>
 800105e:	4619      	mov	r1, r3
		}
		else {
			voice_index = released_voice;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001060:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001064:	eb04 0441 	add.w	r4, r4, r1, lsl #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
		if (op_index != 0)	{
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
		}
		else {
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8001068:	4626      	mov	r6, r4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800106a:	2501      	movs	r5, #1
 800106c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800114c <add_voice+0x1dc>
 8001070:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001150 <add_voice+0x1e0>
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8001074:	f04f 0a00 	mov.w	sl, #0
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8001078:	4638      	mov	r0, r7
		op[op_index][voice_index].note_value = note_value;										//store note
 800107a:	7027      	strb	r7, [r4, #0]
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 800107c:	f8a4 a008 	strh.w	sl, [r4, #8]
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8001080:	f818 bb01 	ldrb.w	fp, [r8], #1
 8001084:	f7ff fa80 	bl	8000588 <note_to_freq>
 8001088:	fb00 f30b 	mul.w	r3, r0, fp
		if (op_index != 0)	{
 800108c:	2d01      	cmp	r5, #1
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 800108e:	ea4f 1323 	mov.w	r3, r3, asr #4
 8001092:	8063      	strh	r3, [r4, #2]
		if (op_index != 0)	{
 8001094:	d020      	beq.n	80010d8 <add_voice+0x168>
		}

		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001096:	f8b9 2000 	ldrh.w	r2, [r9]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 800109a:	88f3      	ldrh	r3, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 800109c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80010a0:	fab1 f181 	clz	r1, r1
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 80010a4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80010a8:	0949      	lsrs	r1, r1, #5
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 80010aa:	fb03 f300 	mul.w	r3, r3, r0
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 80010ae:	2d04      	cmp	r5, #4
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 80010b0:	ea4f 1323 	mov.w	r3, r3, asr #4
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 80010b4:	f884 a004 	strb.w	sl, [r4, #4]
			op[op_index][voice_index].delta = (op_ratio[op_index] * op[0][voice_index].delta) >> 4;	//multiply delta based off of ratio of carrier
 80010b8:	80e3      	strh	r3, [r4, #6]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 80010ba:	81a2      	strh	r2, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80010bc:	72a1      	strb	r1, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 80010be:	d009      	beq.n	80010d4 <add_voice+0x164>
 80010c0:	3501      	adds	r5, #1
 80010c2:	b2ed      	uxtb	r5, r5
 80010c4:	3470      	adds	r4, #112	; 0x70
 80010c6:	f109 0902 	add.w	r9, r9, #2
 80010ca:	e7d3      	b.n	8001074 <add_voice+0x104>
	if (voice_index == MAX_VOICES) {
 80010cc:	2d08      	cmp	r5, #8
 80010ce:	d1c7      	bne.n	8001060 <add_voice+0xf0>
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80010d0:	2307      	movs	r3, #7
 80010d2:	e7c4      	b.n	800105e <add_voice+0xee>
		}
		else {
			op[op_index][voice_index].adsr_state = ATTACK;											//else, start on attack state
		}
	}
}
 80010d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 80010d8:	8870      	ldrh	r0, [r6, #2]
 80010da:	f7ff fa5b 	bl	8000594 <calculate_delta>
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 80010de:	f8b9 3000 	ldrh.w	r3, [r9]
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 80010e2:	80f0      	strh	r0, [r6, #6]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80010e4:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 80010e8:	fab2 f282 	clz	r2, r2
 80010ec:	0952      	lsrs	r2, r2, #5
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 80010ee:	f884 a004 	strb.w	sl, [r4, #4]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 80010f2:	81a3      	strh	r3, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80010f4:	72a2      	strb	r2, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 80010f6:	e7e3      	b.n	80010c0 <add_voice+0x150>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80010f8:	2100      	movs	r1, #0
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80010fa:	460d      	mov	r5, r1
 80010fc:	e763      	b.n	8000fc6 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80010fe:	2100      	movs	r1, #0
 8001100:	e7ae      	b.n	8001060 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001102:	2101      	movs	r1, #1
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001104:	460d      	mov	r5, r1
 8001106:	e75e      	b.n	8000fc6 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001108:	2101      	movs	r1, #1
 800110a:	e7a9      	b.n	8001060 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800110c:	2102      	movs	r1, #2
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 800110e:	460d      	mov	r5, r1
 8001110:	e759      	b.n	8000fc6 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001112:	2102      	movs	r1, #2
 8001114:	e7a4      	b.n	8001060 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001116:	2103      	movs	r1, #3
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001118:	460d      	mov	r5, r1
 800111a:	e754      	b.n	8000fc6 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800111c:	2103      	movs	r1, #3
 800111e:	e79f      	b.n	8001060 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001120:	2104      	movs	r1, #4
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001122:	460d      	mov	r5, r1
 8001124:	e74f      	b.n	8000fc6 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001126:	2104      	movs	r1, #4
 8001128:	e79a      	b.n	8001060 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800112a:	2105      	movs	r1, #5
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 800112c:	460d      	mov	r5, r1
 800112e:	e74a      	b.n	8000fc6 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001130:	2105      	movs	r1, #5
 8001132:	e795      	b.n	8001060 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001134:	2106      	movs	r1, #6
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001136:	460d      	mov	r5, r1
 8001138:	e745      	b.n	8000fc6 <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800113a:	2106      	movs	r1, #6
 800113c:	e790      	b.n	8001060 <add_voice+0xf0>
 800113e:	2107      	movs	r1, #7
 8001140:	e78e      	b.n	8001060 <add_voice+0xf0>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001142:	2107      	movs	r1, #7
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 8001144:	460d      	mov	r5, r1
 8001146:	e73e      	b.n	8000fc6 <add_voice+0x56>
 8001148:	20000028 	.word	0x20000028
 800114c:	2000021c 	.word	0x2000021c
 8001150:	2000020c 	.word	0x2000020c

08001154 <release_voice>:

void release_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <release_voice+0x78>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	4282      	cmp	r2, r0
 800115a:	d028      	beq.n	80011ae <release_voice+0x5a>
 800115c:	7b9a      	ldrb	r2, [r3, #14]
 800115e:	4282      	cmp	r2, r0
 8001160:	d027      	beq.n	80011b2 <release_voice+0x5e>
 8001162:	7f1a      	ldrb	r2, [r3, #28]
 8001164:	4282      	cmp	r2, r0
 8001166:	d026      	beq.n	80011b6 <release_voice+0x62>
 8001168:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800116c:	4282      	cmp	r2, r0
 800116e:	d024      	beq.n	80011ba <release_voice+0x66>
 8001170:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001174:	4282      	cmp	r2, r0
 8001176:	d022      	beq.n	80011be <release_voice+0x6a>
 8001178:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800117c:	4282      	cmp	r2, r0
 800117e:	d020      	beq.n	80011c2 <release_voice+0x6e>
 8001180:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001184:	4282      	cmp	r2, r0
 8001186:	d01e      	beq.n	80011c6 <release_voice+0x72>
 8001188:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 800118c:	4282      	cmp	r2, r0
 800118e:	bf14      	ite	ne
 8001190:	2008      	movne	r0, #8
 8001192:	2007      	moveq	r0, #7
			break;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op[op_index][voice_index].adsr_state = RELEASE;
 8001194:	2203      	movs	r2, #3
 8001196:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800119a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800119e:	729a      	strb	r2, [r3, #10]
 80011a0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 80011a4:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80011a8:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	}
}
 80011ac:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 80011ae:	2000      	movs	r0, #0
 80011b0:	e7f0      	b.n	8001194 <release_voice+0x40>
 80011b2:	2001      	movs	r0, #1
 80011b4:	e7ee      	b.n	8001194 <release_voice+0x40>
 80011b6:	2002      	movs	r0, #2
 80011b8:	e7ec      	b.n	8001194 <release_voice+0x40>
 80011ba:	2003      	movs	r0, #3
 80011bc:	e7ea      	b.n	8001194 <release_voice+0x40>
 80011be:	2004      	movs	r0, #4
 80011c0:	e7e8      	b.n	8001194 <release_voice+0x40>
 80011c2:	2005      	movs	r0, #5
 80011c4:	e7e6      	b.n	8001194 <release_voice+0x40>
 80011c6:	2006      	movs	r0, #6
 80011c8:	e7e4      	b.n	8001194 <release_voice+0x40>
 80011ca:	bf00      	nop
 80011cc:	20000028 	.word	0x20000028

080011d0 <synth_sample>:

int16_t synth_sample() {
 80011d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t output_volume = 0x0800;											//default output volume 2048
	if (--env_period == 0x00) {												//decrement and check envelope period
 80011d4:	4bbf      	ldr	r3, [pc, #764]	; (80014d4 <synth_sample+0x304>)
 80011d6:	881d      	ldrh	r5, [r3, #0]
 80011d8:	3d01      	subs	r5, #1
 80011da:	b2ad      	uxth	r5, r5
 80011dc:	bb2d      	cbnz	r5, 800122a <synth_sample+0x5a>
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 80011de:	f240 5262 	movw	r2, #1378	; 0x562
	int16_t output_volume = 0x0800;											//default output volume 2048
 80011e2:	f44f 6800 	mov.w	r8, #2048	; 0x800
 80011e6:	4cbc      	ldr	r4, [pc, #752]	; (80014d8 <synth_sample+0x308>)
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80011e8:	f8df 9300 	ldr.w	r9, [pc, #768]	; 80014ec <synth_sample+0x31c>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80011ec:	4fbb      	ldr	r7, [pc, #748]	; (80014dc <synth_sample+0x30c>)
 80011ee:	4ebc      	ldr	r6, [pc, #752]	; (80014e0 <synth_sample+0x310>)
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 80011f0:	801a      	strh	r2, [r3, #0]
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80011f2:	7823      	ldrb	r3, [r4, #0]
 80011f4:	b2e8      	uxtb	r0, r5
 80011f6:	2bff      	cmp	r3, #255	; 0xff
 80011f8:	d00f      	beq.n	800121a <synth_sample+0x4a>
		switch (op[op_index][voice_index].adsr_state) {
 80011fa:	7aa3      	ldrb	r3, [r4, #10]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	f200 8095 	bhi.w	800132c <synth_sample+0x15c>
 8001202:	e8df f003 	tbb	[pc, r3]
 8001206:	6b7c      	.short	0x6b7c
 8001208:	6093      	.short	0x6093
 800120a:	03          	.byte	0x03
 800120b:	00          	.byte	0x00
static inline void delete_voice(uint8_t voice_index) { op[0][voice_index].note_value = -1; };
 800120c:	23ff      	movs	r3, #255	; 0xff
 800120e:	7023      	strb	r3, [r4, #0]
				cycle_envelope(voice_index);
				output_volume += modulate(voice_index);
 8001210:	f7ff faf6 	bl	8000800 <modulate>
 8001214:	4480      	add	r8, r0
 8001216:	fa0f f888 	sxth.w	r8, r8
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
 800121a:	3501      	adds	r5, #1
 800121c:	2d08      	cmp	r5, #8
 800121e:	f104 040e 	add.w	r4, r4, #14
 8001222:	d1e6      	bne.n	80011f2 <synth_sample+0x22>
				output_volume += modulate(voice_index);
			}
		}
	}
	return output_volume;
}
 8001224:	4640      	mov	r0, r8
 8001226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800122a:	4cab      	ldr	r4, [pc, #684]	; (80014d8 <synth_sample+0x308>)
	if (--env_period == 0x00) {												//decrement and check envelope period
 800122c:	801d      	strh	r5, [r3, #0]
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800122e:	7823      	ldrb	r3, [r4, #0]
 8001230:	2bff      	cmp	r3, #255	; 0xff
 8001232:	d173      	bne.n	800131c <synth_sample+0x14c>
	int16_t output_volume = 0x0800;											//default output volume 2048
 8001234:	f44f 6800 	mov.w	r8, #2048	; 0x800
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001238:	7ba3      	ldrb	r3, [r4, #14]
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	d005      	beq.n	800124a <synth_sample+0x7a>
				output_volume += modulate(voice_index);
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fade 	bl	8000800 <modulate>
 8001244:	4480      	add	r8, r0
 8001246:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800124a:	7f23      	ldrb	r3, [r4, #28]
 800124c:	2bff      	cmp	r3, #255	; 0xff
 800124e:	d005      	beq.n	800125c <synth_sample+0x8c>
				output_volume += modulate(voice_index);
 8001250:	2002      	movs	r0, #2
 8001252:	f7ff fad5 	bl	8000800 <modulate>
 8001256:	4480      	add	r8, r0
 8001258:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800125c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001260:	2bff      	cmp	r3, #255	; 0xff
 8001262:	d005      	beq.n	8001270 <synth_sample+0xa0>
				output_volume += modulate(voice_index);
 8001264:	2003      	movs	r0, #3
 8001266:	f7ff facb 	bl	8000800 <modulate>
 800126a:	4480      	add	r8, r0
 800126c:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001270:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d005      	beq.n	8001284 <synth_sample+0xb4>
				output_volume += modulate(voice_index);
 8001278:	2004      	movs	r0, #4
 800127a:	f7ff fac1 	bl	8000800 <modulate>
 800127e:	4480      	add	r8, r0
 8001280:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001284:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001288:	2bff      	cmp	r3, #255	; 0xff
 800128a:	d005      	beq.n	8001298 <synth_sample+0xc8>
				output_volume += modulate(voice_index);
 800128c:	2005      	movs	r0, #5
 800128e:	f7ff fab7 	bl	8000800 <modulate>
 8001292:	4480      	add	r8, r0
 8001294:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001298:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800129c:	2bff      	cmp	r3, #255	; 0xff
 800129e:	d005      	beq.n	80012ac <synth_sample+0xdc>
				output_volume += modulate(voice_index);
 80012a0:	2006      	movs	r0, #6
 80012a2:	f7ff faad 	bl	8000800 <modulate>
 80012a6:	4480      	add	r8, r0
 80012a8:	fa0f f888 	sxth.w	r8, r8
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80012ac:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 80012b0:	2bff      	cmp	r3, #255	; 0xff
 80012b2:	d0b7      	beq.n	8001224 <synth_sample+0x54>
				output_volume += modulate(voice_index);
 80012b4:	2007      	movs	r0, #7
 80012b6:	f7ff faa3 	bl	8000800 <modulate>
 80012ba:	4480      	add	r8, r0
 80012bc:	fa0f f888 	sxth.w	r8, r8
}
 80012c0:	4640      	mov	r0, r8
 80012c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 80012c6:	4a87      	ldr	r2, [pc, #540]	; (80014e4 <synth_sample+0x314>)
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	8812      	ldrh	r2, [r2, #0]
 80012cc:	4293      	cmp	r3, r2
 80012ce:	f080 8124 	bcs.w	800151a <synth_sample+0x34a>
				op[op_index][voice_index].env_amp = 0;
 80012d2:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 80012d4:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 80012d6:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SILENT;
 80012d8:	72a2      	strb	r2, [r4, #10]
 80012da:	e028      	b.n	800132e <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80012dc:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 80012e0:	8839      	ldrh	r1, [r7, #0]
 80012e2:	7832      	ldrb	r2, [r6, #0]
 80012e4:	ebac 0e01 	sub.w	lr, ip, r1
 80012e8:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80012ec:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80012f0:	db5d      	blt.n	80013ae <synth_sample+0x1de>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80012f2:	458c      	cmp	ip, r1
 80012f4:	d35b      	bcc.n	80013ae <synth_sample+0x1de>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80012f6:	fa1f f38e 	uxth.w	r3, lr
 80012fa:	81a3      	strh	r3, [r4, #12]
 80012fc:	e017      	b.n	800132e <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 80012fe:	4a7a      	ldr	r2, [pc, #488]	; (80014e8 <synth_sample+0x318>)
 8001300:	89a3      	ldrh	r3, [r4, #12]
 8001302:	8812      	ldrh	r2, [r2, #0]
 8001304:	4413      	add	r3, r2
 8001306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800130a:	f2c0 8103 	blt.w	8001514 <synth_sample+0x344>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800130e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001312:	2101      	movs	r1, #1
 8001314:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001316:	81a2      	strh	r2, [r4, #12]
				op[op_index][voice_index].adsr_state = DECAY;
 8001318:	72a1      	strb	r1, [r4, #10]
 800131a:	e008      	b.n	800132e <synth_sample+0x15e>
				output_volume += modulate(voice_index);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fa6f 	bl	8000800 <modulate>
 8001322:	f500 6800 	add.w	r8, r0, #2048	; 0x800
 8001326:	fa0f f888 	sxth.w	r8, r8
 800132a:	e785      	b.n	8001238 <synth_sample+0x68>
 800132c:	89a3      	ldrh	r3, [r4, #12]
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800132e:	f899 2000 	ldrb.w	r2, [r9]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8001338:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800133c:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 800133e:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001340:	7123      	strb	r3, [r4, #4]
		switch (op[op_index][voice_index].adsr_state) {
 8001342:	d059      	beq.n	80013f8 <synth_sample+0x228>
 8001344:	2a03      	cmp	r2, #3
 8001346:	d049      	beq.n	80013dc <synth_sample+0x20c>
 8001348:	b3b2      	cbz	r2, 80013b8 <synth_sample+0x1e8>
 800134a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800134e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8001358:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800135c:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 800135e:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001360:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		switch (op[op_index][voice_index].adsr_state) {
 8001364:	d061      	beq.n	800142a <synth_sample+0x25a>
 8001366:	2a03      	cmp	r2, #3
 8001368:	f000 8089 	beq.w	800147e <synth_sample+0x2ae>
 800136c:	2a00      	cmp	r2, #0
 800136e:	d075      	beq.n	800145c <synth_sample+0x28c>
 8001370:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001374:	f899 2002 	ldrb.w	r2, [r9, #2]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 800137e:	f894 215a 	ldrb.w	r2, [r4, #346]	; 0x15a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001382:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8001384:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001386:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
		switch (op[op_index][voice_index].adsr_state) {
 800138a:	f000 80b1 	beq.w	80014f0 <synth_sample+0x320>
 800138e:	2a03      	cmp	r2, #3
 8001390:	f000 8093 	beq.w	80014ba <synth_sample+0x2ea>
 8001394:	2a00      	cmp	r2, #0
 8001396:	d07f      	beq.n	8001498 <synth_sample+0x2c8>
 8001398:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800139c:	f899 2003 	ldrb.w	r2, [r9, #3]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	11db      	asrs	r3, r3, #7
 80013a8:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 80013ac:	e730      	b.n	8001210 <synth_sample+0x40>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80013ae:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SUSTAIN;
 80013b4:	72a2      	strb	r2, [r4, #10]
 80013b6:	e7ba      	b.n	800132e <synth_sample+0x15e>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 80013b8:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <synth_sample+0x318>)
 80013ba:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80013be:	8852      	ldrh	r2, [r2, #2]
 80013c0:	4413      	add	r3, r2
 80013c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013c6:	f2c0 80b1 	blt.w	800152c <synth_sample+0x35c>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80013ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 80013ce:	2101      	movs	r1, #1
 80013d0:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80013d2:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = DECAY;
 80013d6:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
 80013da:	e7b8      	b.n	800134e <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 80013dc:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <synth_sample+0x314>)
 80013de:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80013e2:	8852      	ldrh	r2, [r2, #2]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	f080 809c 	bcs.w	8001522 <synth_sample+0x352>
				op[op_index][voice_index].env_amp = 0;
 80013ea:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 80013ec:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 80013ee:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SILENT;
 80013f2:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 80013f6:	e7aa      	b.n	800134e <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80013f8:	f8b4 c07c 	ldrh.w	ip, [r4, #124]	; 0x7c
 80013fc:	8879      	ldrh	r1, [r7, #2]
 80013fe:	7872      	ldrb	r2, [r6, #1]
 8001400:	ebac 0e01 	sub.w	lr, ip, r1
 8001404:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001408:	ea4f 2302 	mov.w	r3, r2, lsl #8
 800140c:	db06      	blt.n	800141c <synth_sample+0x24c>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 800140e:	458c      	cmp	ip, r1
 8001410:	d304      	bcc.n	800141c <synth_sample+0x24c>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001412:	fa1f f38e 	uxth.w	r3, lr
 8001416:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 800141a:	e798      	b.n	800134e <synth_sample+0x17e>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 800141c:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 800141e:	b29b      	uxth	r3, r3
 8001420:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001424:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 8001428:	e791      	b.n	800134e <synth_sample+0x17e>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 800142a:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	; 0xec
 800142e:	88b9      	ldrh	r1, [r7, #4]
 8001430:	78b2      	ldrb	r2, [r6, #2]
 8001432:	ebac 0e01 	sub.w	lr, ip, r1
 8001436:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 800143a:	ea4f 2302 	mov.w	r3, r2, lsl #8
 800143e:	db06      	blt.n	800144e <synth_sample+0x27e>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001440:	458c      	cmp	ip, r1
 8001442:	d304      	bcc.n	800144e <synth_sample+0x27e>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 8001444:	fa1f f38e 	uxth.w	r3, lr
 8001448:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 800144c:	e792      	b.n	8001374 <synth_sample+0x1a4>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 800144e:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001450:	b29b      	uxth	r3, r3
 8001452:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001456:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 800145a:	e78b      	b.n	8001374 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <synth_sample+0x318>)
 800145e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8001462:	8892      	ldrh	r2, [r2, #4]
 8001464:	4413      	add	r3, r2
 8001466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800146a:	db63      	blt.n	8001534 <synth_sample+0x364>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800146c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 8001470:	2101      	movs	r1, #1
 8001472:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001474:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = DECAY;
 8001478:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
 800147c:	e77a      	b.n	8001374 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <synth_sample+0x314>)
 8001480:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8001484:	8892      	ldrh	r2, [r2, #4]
 8001486:	4293      	cmp	r3, r2
 8001488:	d258      	bcs.n	800153c <synth_sample+0x36c>
				op[op_index][voice_index].env_amp = 0;
 800148a:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 800148c:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 800148e:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SILENT;
 8001492:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001496:	e76d      	b.n	8001374 <synth_sample+0x1a4>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001498:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <synth_sample+0x318>)
 800149a:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 800149e:	88d2      	ldrh	r2, [r2, #6]
 80014a0:	4413      	add	r3, r2
 80014a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014a6:	db55      	blt.n	8001554 <synth_sample+0x384>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 80014ac:	2101      	movs	r1, #1
 80014ae:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014b0:	f8a4 215c 	strh.w	r2, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = DECAY;
 80014b4:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
 80014b8:	e770      	b.n	800139c <synth_sample+0x1cc>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <synth_sample+0x314>)
 80014bc:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 80014c0:	88d2      	ldrh	r2, [r2, #6]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d24a      	bcs.n	800155c <synth_sample+0x38c>
				op[op_index][voice_index].env_amp = 0;
 80014c6:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 80014c8:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 80014ca:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SILENT;
 80014ce:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 80014d2:	e763      	b.n	800139c <synth_sample+0x1cc>
 80014d4:	200001ee 	.word	0x200001ee
 80014d8:	20000028 	.word	0x20000028
 80014dc:	20000204 	.word	0x20000204
 80014e0:	200001e8 	.word	0x200001e8
 80014e4:	200001f8 	.word	0x200001f8
 80014e8:	2000020c 	.word	0x2000020c
 80014ec:	20000200 	.word	0x20000200
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] < (op_sustain[op_index] << 8)
 80014f0:	f8b4 c15c 	ldrh.w	ip, [r4, #348]	; 0x15c
 80014f4:	88f9      	ldrh	r1, [r7, #6]
 80014f6:	78f2      	ldrb	r2, [r6, #3]
 80014f8:	ebac 0e01 	sub.w	lr, ip, r1
 80014fc:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001500:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8001504:	db1f      	blt.n	8001546 <synth_sample+0x376>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001506:	458c      	cmp	ip, r1
 8001508:	d31d      	bcc.n	8001546 <synth_sample+0x376>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 800150a:	fa1f f38e 	uxth.w	r3, lr
 800150e:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001512:	e743      	b.n	800139c <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001514:	b29b      	uxth	r3, r3
 8001516:	81a3      	strh	r3, [r4, #12]
 8001518:	e709      	b.n	800132e <synth_sample+0x15e>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	b29b      	uxth	r3, r3
 800151e:	81a3      	strh	r3, [r4, #12]
 8001520:	e705      	b.n	800132e <synth_sample+0x15e>
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	b29b      	uxth	r3, r3
 8001526:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 800152a:	e710      	b.n	800134e <synth_sample+0x17e>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 800152c:	b29b      	uxth	r3, r3
 800152e:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8001532:	e70c      	b.n	800134e <synth_sample+0x17e>
 8001534:	b29b      	uxth	r3, r3
 8001536:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 800153a:	e71b      	b.n	8001374 <synth_sample+0x1a4>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	b29b      	uxth	r3, r3
 8001540:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001544:	e716      	b.n	8001374 <synth_sample+0x1a4>
				op[op_index][voice_index].adsr_state = SUSTAIN;
 8001546:	2202      	movs	r2, #2
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001548:	b29b      	uxth	r3, r3
 800154a:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SUSTAIN;
 800154e:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 8001552:	e723      	b.n	800139c <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001554:	b29b      	uxth	r3, r3
 8001556:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 800155a:	e71f      	b.n	800139c <synth_sample+0x1cc>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001564:	e71a      	b.n	800139c <synth_sample+0x1cc>
 8001566:	bf00      	nop

08001568 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop

0800156c <display_send_command>:
	display_send_data('e');
	display_send_data('s');
	display_send_data('t');
}

void display_send_command(uint8_t cmd) {
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
	display_i2c_write(data_LSB | DISPLAY_BIT_E);	//pull enable bit HIGH
	display_i2c_write(data_LSB);					//pull enable bit LOW
}

void display_i2c_write(uint8_t byte) {
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800156e:	26ff      	movs	r6, #255	; 0xff
 8001570:	4d27      	ldr	r5, [pc, #156]	; (8001610 <display_send_command+0xa4>)
void display_send_command(uint8_t cmd) {
 8001572:	b085      	sub	sp, #20
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 8001574:	f020 070f 	bic.w	r7, r0, #15
 8001578:	f047 0708 	orr.w	r7, r7, #8
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800157c:	f10d 020f 	add.w	r2, sp, #15
 8001580:	2301      	movs	r3, #1
 8001582:	214e      	movs	r1, #78	; 0x4e
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001584:	0104      	lsls	r4, r0, #4
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001586:	9600      	str	r6, [sp, #0]
 8001588:	6828      	ldr	r0, [r5, #0]
 800158a:	f88d 700f 	strb.w	r7, [sp, #15]
 800158e:	f000 fd43 	bl	8002018 <HAL_I2C_Master_Transmit>
	display_i2c_write(cmd_MSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 8001592:	f047 0c04 	orr.w	ip, r7, #4
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001596:	f10d 020f 	add.w	r2, sp, #15
 800159a:	2301      	movs	r3, #1
 800159c:	214e      	movs	r1, #78	; 0x4e
 800159e:	6828      	ldr	r0, [r5, #0]
 80015a0:	9600      	str	r6, [sp, #0]
 80015a2:	f88d c00f 	strb.w	ip, [sp, #15]
 80015a6:	f000 fd37 	bl	8002018 <HAL_I2C_Master_Transmit>
 80015aa:	f10d 020f 	add.w	r2, sp, #15
 80015ae:	2301      	movs	r3, #1
 80015b0:	214e      	movs	r1, #78	; 0x4e
 80015b2:	6828      	ldr	r0, [r5, #0]
 80015b4:	9600      	str	r6, [sp, #0]
 80015b6:	f88d 700f 	strb.w	r7, [sp, #15]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80015ba:	f044 0408 	orr.w	r4, r4, #8
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80015be:	f000 fd2b 	bl	8002018 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);									//wait 5 ms
 80015c2:	2005      	movs	r0, #5
 80015c4:	f000 f90a 	bl	80017dc <HAL_Delay>
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80015c8:	b2e4      	uxtb	r4, r4
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80015ca:	f10d 020f 	add.w	r2, sp, #15
 80015ce:	2301      	movs	r3, #1
 80015d0:	214e      	movs	r1, #78	; 0x4e
 80015d2:	6828      	ldr	r0, [r5, #0]
 80015d4:	9600      	str	r6, [sp, #0]
 80015d6:	f88d 400f 	strb.w	r4, [sp, #15]
	display_i2c_write(cmd_LSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 80015da:	f044 0704 	orr.w	r7, r4, #4
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80015de:	f000 fd1b 	bl	8002018 <HAL_I2C_Master_Transmit>
 80015e2:	f10d 020f 	add.w	r2, sp, #15
 80015e6:	2301      	movs	r3, #1
 80015e8:	214e      	movs	r1, #78	; 0x4e
 80015ea:	6828      	ldr	r0, [r5, #0]
 80015ec:	9600      	str	r6, [sp, #0]
 80015ee:	f88d 700f 	strb.w	r7, [sp, #15]
 80015f2:	f000 fd11 	bl	8002018 <HAL_I2C_Master_Transmit>
 80015f6:	2301      	movs	r3, #1
 80015f8:	214e      	movs	r1, #78	; 0x4e
 80015fa:	6828      	ldr	r0, [r5, #0]
 80015fc:	9600      	str	r6, [sp, #0]
 80015fe:	f10d 020f 	add.w	r2, sp, #15
 8001602:	f88d 400f 	strb.w	r4, [sp, #15]
 8001606:	f000 fd07 	bl	8002018 <HAL_I2C_Master_Transmit>
}
 800160a:	b005      	add	sp, #20
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160e:	bf00      	nop
 8001610:	20000220 	.word	0x20000220

08001614 <display_send_data>:
void display_send_data(uint8_t data) {
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001616:	26ff      	movs	r6, #255	; 0xff
 8001618:	4d25      	ldr	r5, [pc, #148]	; (80016b0 <display_send_data+0x9c>)
void display_send_data(uint8_t data) {
 800161a:	b085      	sub	sp, #20
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 800161c:	f020 070f 	bic.w	r7, r0, #15
 8001620:	f047 0709 	orr.w	r7, r7, #9
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001624:	f10d 020f 	add.w	r2, sp, #15
 8001628:	2301      	movs	r3, #1
 800162a:	214e      	movs	r1, #78	; 0x4e
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS| DISPLAY_BIT_BACKLIGHT;
 800162c:	0104      	lsls	r4, r0, #4
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800162e:	9600      	str	r6, [sp, #0]
 8001630:	6828      	ldr	r0, [r5, #0]
 8001632:	f88d 700f 	strb.w	r7, [sp, #15]
 8001636:	f000 fcef 	bl	8002018 <HAL_I2C_Master_Transmit>
	display_i2c_write(data_MSB | DISPLAY_BIT_E);	//pull enable bit HIGH
 800163a:	f047 0c04 	orr.w	ip, r7, #4
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800163e:	f10d 020f 	add.w	r2, sp, #15
 8001642:	2301      	movs	r3, #1
 8001644:	214e      	movs	r1, #78	; 0x4e
 8001646:	6828      	ldr	r0, [r5, #0]
 8001648:	9600      	str	r6, [sp, #0]
 800164a:	f88d c00f 	strb.w	ip, [sp, #15]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS| DISPLAY_BIT_BACKLIGHT;
 800164e:	f044 0409 	orr.w	r4, r4, #9
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001652:	f000 fce1 	bl	8002018 <HAL_I2C_Master_Transmit>
 8001656:	f10d 020f 	add.w	r2, sp, #15
 800165a:	2301      	movs	r3, #1
 800165c:	214e      	movs	r1, #78	; 0x4e
 800165e:	6828      	ldr	r0, [r5, #0]
 8001660:	9600      	str	r6, [sp, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS| DISPLAY_BIT_BACKLIGHT;
 8001662:	b2e4      	uxtb	r4, r4
	display_i2c_write(data_MSB);					//pull enable bit LOW
 8001664:	f88d 700f 	strb.w	r7, [sp, #15]
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001668:	f000 fcd6 	bl	8002018 <HAL_I2C_Master_Transmit>
 800166c:	f10d 020f 	add.w	r2, sp, #15
 8001670:	2301      	movs	r3, #1
 8001672:	214e      	movs	r1, #78	; 0x4e
 8001674:	6828      	ldr	r0, [r5, #0]
 8001676:	9600      	str	r6, [sp, #0]
 8001678:	f88d 400f 	strb.w	r4, [sp, #15]
	display_i2c_write(data_LSB | DISPLAY_BIT_E);	//pull enable bit HIGH
 800167c:	f044 0704 	orr.w	r7, r4, #4
	HAL_I2C_Master_Transmit(ui_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001680:	f000 fcca 	bl	8002018 <HAL_I2C_Master_Transmit>
 8001684:	f10d 020f 	add.w	r2, sp, #15
 8001688:	2301      	movs	r3, #1
 800168a:	214e      	movs	r1, #78	; 0x4e
 800168c:	6828      	ldr	r0, [r5, #0]
 800168e:	9600      	str	r6, [sp, #0]
 8001690:	f88d 700f 	strb.w	r7, [sp, #15]
 8001694:	f000 fcc0 	bl	8002018 <HAL_I2C_Master_Transmit>
 8001698:	2301      	movs	r3, #1
 800169a:	214e      	movs	r1, #78	; 0x4e
 800169c:	6828      	ldr	r0, [r5, #0]
 800169e:	9600      	str	r6, [sp, #0]
 80016a0:	f10d 020f 	add.w	r2, sp, #15
 80016a4:	f88d 400f 	strb.w	r4, [sp, #15]
 80016a8:	f000 fcb6 	bl	8002018 <HAL_I2C_Master_Transmit>
}
 80016ac:	b005      	add	sp, #20
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b0:	20000220 	.word	0x20000220

080016b4 <init_ui>:
void init_ui(I2C_HandleTypeDef* hi2c) {
 80016b4:	4602      	mov	r2, r0
 80016b6:	b508      	push	{r3, lr}
	ui_i2c = hi2c;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <init_ui+0x48>)
	display_send_command(init_4_bit_cmd);
 80016ba:	2033      	movs	r0, #51	; 0x33
	ui_i2c = hi2c;
 80016bc:	601a      	str	r2, [r3, #0]
	display_send_command(init_4_bit_cmd);
 80016be:	f7ff ff55 	bl	800156c <display_send_command>
	display_send_command(init_4_bit_cmd);
 80016c2:	2032      	movs	r0, #50	; 0x32
 80016c4:	f7ff ff52 	bl	800156c <display_send_command>
	display_send_command(DISPLAY_CMD_FUNC |  DISPLAY_BIT_FUNC_DOUBLE);
 80016c8:	2028      	movs	r0, #40	; 0x28
 80016ca:	f7ff ff4f 	bl	800156c <display_send_command>
	display_send_command(DISPLAY_CMD_CLEAR);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff ff4c 	bl	800156c <display_send_command>
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
 80016d4:	2006      	movs	r0, #6
 80016d6:	f7ff ff49 	bl	800156c <display_send_command>
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR |  DISPLAY_BIT_ON_BLINK);
 80016da:	200f      	movs	r0, #15
 80016dc:	f7ff ff46 	bl	800156c <display_send_command>
	display_send_data('t');
 80016e0:	2074      	movs	r0, #116	; 0x74
 80016e2:	f7ff ff97 	bl	8001614 <display_send_data>
	display_send_data('e');
 80016e6:	2065      	movs	r0, #101	; 0x65
 80016e8:	f7ff ff94 	bl	8001614 <display_send_data>
	display_send_data('s');
 80016ec:	2073      	movs	r0, #115	; 0x73
 80016ee:	f7ff ff91 	bl	8001614 <display_send_data>
}
 80016f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display_send_data('t');
 80016f6:	2074      	movs	r0, #116	; 0x74
 80016f8:	f7ff bf8c 	b.w	8001614 <display_send_data>
 80016fc:	20000220 	.word	0x20000220

08001700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	; (8001738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	; (8001744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001726:	f7ff ff1f 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f001 fc9b 	bl	8003064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172e:	f7fe fd75 	bl	800021c <main>
  bx lr
 8001732:	4770      	bx	lr
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800173c:	08003418 	.word	0x08003418
  ldr r2, =_sbss
 8001740:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001744:	20000430 	.word	0x20000430

08001748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_2_IRQHandler>
	...

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_InitTick+0x3c>)
{
 8001754:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001756:	7811      	ldrb	r1, [r2, #0]
 8001758:	4a0c      	ldr	r2, [pc, #48]	; (800178c <HAL_InitTick+0x40>)
 800175a:	fbb3 f3f1 	udiv	r3, r3, r1
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	fbb2 f0f3 	udiv	r0, r2, r3
 8001764:	f000 f8a4 	bl	80018b0 <HAL_SYSTICK_Config>
 8001768:	b908      	cbnz	r0, 800176e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	2d0f      	cmp	r5, #15
 800176c:	d901      	bls.n	8001772 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001770:	bd38      	pop	{r3, r4, r5, pc}
 8001772:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	4602      	mov	r2, r0
 8001776:	4629      	mov	r1, r5
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 f852 	bl	8001824 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_InitTick+0x44>)
 8001782:	4620      	mov	r0, r4
 8001784:	601d      	str	r5, [r3, #0]
}
 8001786:	bd38      	pop	{r3, r4, r5, pc}
 8001788:	20000004 	.word	0x20000004
 800178c:	20000000 	.word	0x20000000
 8001790:	20000008 	.word	0x20000008

08001794 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_Init+0x20>)
{
 8001796:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a2:	f000 f82d 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff ffd0 	bl	800174c <HAL_InitTick>
  HAL_MspInit();
 80017ac:	f7fe fefc 	bl	80005a8 <HAL_MspInit>
}
 80017b0:	2000      	movs	r0, #0
 80017b2:	bd08      	pop	{r3, pc}
 80017b4:	40022000 	.word	0x40022000

080017b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80017b8:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <HAL_IncTick+0x10>)
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <HAL_IncTick+0x14>)
 80017bc:	6811      	ldr	r1, [r2, #0]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	440b      	add	r3, r1
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	2000042c 	.word	0x2000042c
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017d0:	4b01      	ldr	r3, [pc, #4]	; (80017d8 <HAL_GetTick+0x8>)
 80017d2:	6818      	ldr	r0, [r3, #0]
}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000042c 	.word	0x2000042c

080017dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017dc:	b538      	push	{r3, r4, r5, lr}
 80017de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff fff6 	bl	80017d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80017e6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80017e8:	d002      	beq.n	80017f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_Delay+0x20>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f0:	f7ff ffee 	bl	80017d0 <HAL_GetTick>
 80017f4:	1b40      	subs	r0, r0, r5
 80017f6:	42a0      	cmp	r0, r4
 80017f8:	d3fa      	bcc.n	80017f0 <HAL_Delay+0x14>
  {
  }
}
 80017fa:	bd38      	pop	{r3, r4, r5, pc}
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001800:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001806:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800180a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001812:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800181a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b430      	push	{r4, r5}
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182e:	f1c3 0507 	rsb	r5, r3, #7
 8001832:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001834:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	bf28      	it	cs
 800183a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183c:	2c06      	cmp	r4, #6
 800183e:	d919      	bls.n	8001874 <HAL_NVIC_SetPriority+0x50>
 8001840:	f04f 34ff 	mov.w	r4, #4294967295
 8001844:	3b03      	subs	r3, #3
 8001846:	409c      	lsls	r4, r3
 8001848:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 34ff 	mov.w	r4, #4294967295
 8001850:	40ac      	lsls	r4, r5
 8001852:	ea21 0104 	bic.w	r1, r1, r4
 8001856:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001858:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800185e:	db0c      	blt.n	800187a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	0109      	lsls	r1, r1, #4
 8001862:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001866:	b2c9      	uxtb	r1, r1
 8001868:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800186c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001870:	bc30      	pop	{r4, r5}
 8001872:	4770      	bx	lr
 8001874:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	4613      	mov	r3, r2
 8001878:	e7e8      	b.n	800184c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_NVIC_SetPriority+0x6c>)
 800187c:	f000 000f 	and.w	r0, r0, #15
 8001880:	0109      	lsls	r1, r1, #4
 8001882:	b2c9      	uxtb	r1, r1
 8001884:	4403      	add	r3, r0
 8001886:	7619      	strb	r1, [r3, #24]
 8001888:	bc30      	pop	{r4, r5}
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00
 8001890:	e000ecfc 	.word	0xe000ecfc

08001894 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001894:	2800      	cmp	r0, #0
 8001896:	db07      	blt.n	80018a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001898:	2301      	movs	r3, #1
 800189a:	f000 011f 	and.w	r1, r0, #31
 800189e:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_NVIC_EnableIRQ+0x18>)
 80018a0:	408b      	lsls	r3, r1
 80018a2:	0940      	lsrs	r0, r0, #5
 80018a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	3801      	subs	r0, #1
 80018b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018b6:	d20d      	bcs.n	80018d4 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b8:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	4c06      	ldr	r4, [pc, #24]	; (80018dc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ca:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80018cc:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d0:	6019      	str	r1, [r3, #0]
 80018d2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018d4:	2001      	movs	r0, #1
 80018d6:	4770      	bx	lr
 80018d8:	e000e010 	.word	0xe000e010
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018e0:	b340      	cbz	r0, 8001934 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018e2:	4603      	mov	r3, r0
{
 80018e4:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018e6:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018ea:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ee:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 80018f0:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f2:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018f4:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f6:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018f8:	490f      	ldr	r1, [pc, #60]	; (8001938 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fa:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018fc:	4f0f      	ldr	r7, [pc, #60]	; (800193c <HAL_DMA_Init+0x5c>)
 80018fe:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001900:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001902:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001904:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001908:	4332      	orrs	r2, r6
 800190a:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 800190c:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190e:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 8001910:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001912:	0909      	lsrs	r1, r1, #4
 8001914:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001916:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 800191a:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800191c:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001920:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001922:	4907      	ldr	r1, [pc, #28]	; (8001940 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 8001924:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 8001926:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8001928:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 800192a:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 800192c:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192e:	639c      	str	r4, [r3, #56]	; 0x38
}
 8001930:	bcf0      	pop	{r4, r5, r6, r7}
 8001932:	4770      	bx	lr
    return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
}
 8001936:	4770      	bx	lr
 8001938:	bffdfff8 	.word	0xbffdfff8
 800193c:	cccccccd 	.word	0xcccccccd
 8001940:	40020000 	.word	0x40020000

08001944 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001944:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8001948:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800194a:	2a02      	cmp	r2, #2
 800194c:	d006      	beq.n	800195c <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194e:	2104      	movs	r1, #4
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001950:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001952:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001954:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 8001958:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 800195a:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800195c:	2101      	movs	r1, #1
{
 800195e:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8001960:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001964:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001966:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001968:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800196a:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196c:	f024 040e 	bic.w	r4, r4, #14
 8001970:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001972:	6814      	ldr	r4, [r2, #0]
  return status; 
 8001974:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001976:	f024 0401 	bic.w	r4, r4, #1
 800197a:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800197c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800197e:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001980:	841d      	strh	r5, [r3, #32]
}
 8001982:	bc70      	pop	{r4, r5, r6}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001988:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 800198c:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800198e:	2a02      	cmp	r2, #2
 8001990:	d003      	beq.n	800199a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001992:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8001994:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001996:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001998:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199a:	6802      	ldr	r2, [r0, #0]
{  
 800199c:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199e:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019a0:	481b      	ldr	r0, [pc, #108]	; (8001a10 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a2:	f021 010e 	bic.w	r1, r1, #14
 80019a6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80019a8:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019aa:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 80019ac:	f021 0101 	bic.w	r1, r1, #1
 80019b0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019b2:	d021      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x70>
 80019b4:	4917      	ldr	r1, [pc, #92]	; (8001a14 <HAL_DMA_Abort_IT+0x8c>)
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d01a      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x68>
 80019ba:	3114      	adds	r1, #20
 80019bc:	428a      	cmp	r2, r1
 80019be:	d01d      	beq.n	80019fc <HAL_DMA_Abort_IT+0x74>
 80019c0:	3114      	adds	r1, #20
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d01d      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x7a>
 80019c6:	3114      	adds	r1, #20
 80019c8:	428a      	cmp	r2, r1
 80019ca:	d01d      	beq.n	8001a08 <HAL_DMA_Abort_IT+0x80>
 80019cc:	3114      	adds	r1, #20
 80019ce:	428a      	cmp	r2, r1
 80019d0:	bf0c      	ite	eq
 80019d2:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80019d6:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 80019da:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019de:	4c0e      	ldr	r4, [pc, #56]	; (8001a18 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 80019e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019e2:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80019e4:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 80019e6:	b129      	cbz	r1, 80019f4 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 80019e8:	4618      	mov	r0, r3
 80019ea:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 80019ec:	2000      	movs	r0, #0
}
 80019ee:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019f0:	2210      	movs	r2, #16
 80019f2:	e7f2      	b.n	80019da <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	4608      	mov	r0, r1
}
 80019f6:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019f8:	2201      	movs	r2, #1
 80019fa:	e7ee      	b.n	80019da <HAL_DMA_Abort_IT+0x52>
 80019fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a00:	e7eb      	b.n	80019da <HAL_DMA_Abort_IT+0x52>
 8001a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a06:	e7e8      	b.n	80019da <HAL_DMA_Abort_IT+0x52>
 8001a08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a0c:	e7e5      	b.n	80019da <HAL_DMA_Abort_IT+0x52>
 8001a0e:	bf00      	nop
 8001a10:	40020008 	.word	0x40020008
 8001a14:	4002001c 	.word	0x4002001c
 8001a18:	40020000 	.word	0x40020000

08001a1c <HAL_DMA_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a1c:	2204      	movs	r2, #4
{
 8001a1e:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a20:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a24:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001a26:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a28:	408a      	lsls	r2, r1
 8001a2a:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001a2c:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a2e:	d01f      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x54>
 8001a30:	076a      	lsls	r2, r5, #29
 8001a32:	d51d      	bpl.n	8001a70 <HAL_DMA_IRQHandler+0x54>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	0691      	lsls	r1, r2, #26
 8001a38:	d403      	bmi.n	8001a42 <HAL_DMA_IRQHandler+0x26>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	f022 0204 	bic.w	r2, r2, #4
 8001a40:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a42:	4a3e      	ldr	r2, [pc, #248]	; (8001b3c <HAL_DMA_IRQHandler+0x120>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d05a      	beq.n	8001afe <HAL_DMA_IRQHandler+0xe2>
 8001a48:	3214      	adds	r2, #20
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d05f      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xf2>
 8001a4e:	3214      	adds	r2, #20
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d066      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x106>
 8001a54:	3214      	adds	r2, #20
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d069      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x112>
 8001a5a:	3214      	adds	r2, #20
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d05b      	beq.n	8001b18 <HAL_DMA_IRQHandler+0xfc>
 8001a60:	3214      	adds	r2, #20
 8001a62:	4293      	cmp	r3, r2
 8001a64:	bf0c      	ite	eq
 8001a66:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001a6a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001a6e:	e047      	b.n	8001b00 <HAL_DMA_IRQHandler+0xe4>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a70:	2202      	movs	r2, #2
 8001a72:	408a      	lsls	r2, r1
 8001a74:	4222      	tst	r2, r4
 8001a76:	d022      	beq.n	8001abe <HAL_DMA_IRQHandler+0xa2>
 8001a78:	07aa      	lsls	r2, r5, #30
 8001a7a:	d520      	bpl.n	8001abe <HAL_DMA_IRQHandler+0xa2>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	0691      	lsls	r1, r2, #26
 8001a80:	d406      	bmi.n	8001a90 <HAL_DMA_IRQHandler+0x74>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a82:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f022 020a 	bic.w	r2, r2, #10
 8001a8a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001a8c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a90:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <HAL_DMA_IRQHandler+0x120>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d029      	beq.n	8001aea <HAL_DMA_IRQHandler+0xce>
 8001a96:	3214      	adds	r2, #20
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d040      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x102>
 8001a9c:	3214      	adds	r2, #20
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d042      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x10c>
 8001aa2:	3214      	adds	r2, #20
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d034      	beq.n	8001b12 <HAL_DMA_IRQHandler+0xf6>
 8001aa8:	3214      	adds	r2, #20
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d042      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x118>
 8001aae:	3214      	adds	r2, #20
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	bf0c      	ite	eq
 8001ab4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001ab8:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001abc:	e016      	b.n	8001aec <HAL_DMA_IRQHandler+0xd0>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001abe:	2208      	movs	r2, #8
 8001ac0:	408a      	lsls	r2, r1
 8001ac2:	4222      	tst	r2, r4
 8001ac4:	d019      	beq.n	8001afa <HAL_DMA_IRQHandler+0xde>
 8001ac6:	072a      	lsls	r2, r5, #28
 8001ac8:	d517      	bpl.n	8001afa <HAL_DMA_IRQHandler+0xde>
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aca:	2401      	movs	r4, #1

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001acc:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad0:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ad2:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad6:	f022 020e 	bic.w	r2, r2, #14
 8001ada:	601a      	str	r2, [r3, #0]

    if (hdma->XferErrorCallback != NULL)
 8001adc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ade:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ae0:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001ae2:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001ae4:	b14b      	cbz	r3, 8001afa <HAL_DMA_IRQHandler+0xde>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8001ae6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001ae8:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001aea:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8001aec:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001aee:	4c14      	ldr	r4, [pc, #80]	; (8001b40 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8001af0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001af2:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001af4:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001af8:	b93a      	cbnz	r2, 8001b0a <HAL_DMA_IRQHandler+0xee>
}
 8001afa:	bc70      	pop	{r4, r5, r6}
 8001afc:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001afe:	2304      	movs	r3, #4
 8001b00:	490f      	ldr	r1, [pc, #60]	; (8001b40 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8001b02:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b04:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001b06:	2a00      	cmp	r2, #0
 8001b08:	d0f7      	beq.n	8001afa <HAL_DMA_IRQHandler+0xde>
}
 8001b0a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001b0c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b0e:	2340      	movs	r3, #64	; 0x40
 8001b10:	e7f6      	b.n	8001b00 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b16:	e7e9      	b.n	8001aec <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b1c:	e7f0      	b.n	8001b00 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b1e:	2320      	movs	r3, #32
 8001b20:	e7e4      	b.n	8001aec <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b26:	e7eb      	b.n	8001b00 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2c:	e7de      	b.n	8001aec <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b32:	e7e5      	b.n	8001b00 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b38:	e7d8      	b.n	8001aec <HAL_DMA_IRQHandler+0xd0>
 8001b3a:	bf00      	nop
 8001b3c:	40020008 	.word	0x40020008
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b48:	680c      	ldr	r4, [r1, #0]
{
 8001b4a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4c:	2c00      	cmp	r4, #0
 8001b4e:	f000 809e 	beq.w	8001c8e <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 8001b52:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b54:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8001d4c <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 8001b58:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b5a:	4f77      	ldr	r7, [pc, #476]	; (8001d38 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 8001b5c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8001d50 <HAL_GPIO_Init+0x20c>
 8001b60:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8001d54 <HAL_GPIO_Init+0x210>
 8001b64:	9000      	str	r0, [sp, #0]
 8001b66:	e004      	b.n	8001b72 <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8001b68:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	fa34 f203 	lsrs.w	r2, r4, r3
 8001b6e:	f000 808e 	beq.w	8001c8e <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 8001b72:	2201      	movs	r2, #1
 8001b74:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 8001b76:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7a:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8001b7e:	d1f3      	bne.n	8001b68 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001b80:	684c      	ldr	r4, [r1, #4]
 8001b82:	2c12      	cmp	r4, #18
 8001b84:	f200 8086 	bhi.w	8001c94 <HAL_GPIO_Init+0x150>
 8001b88:	2c12      	cmp	r4, #18
 8001b8a:	d80c      	bhi.n	8001ba6 <HAL_GPIO_Init+0x62>
 8001b8c:	e8df f004 	tbb	[pc, r4]
 8001b90:	0abcbf8a 	.word	0x0abcbf8a
 8001b94:	0b0b0b0b 	.word	0x0b0b0b0b
 8001b98:	0b0b0b0b 	.word	0x0b0b0b0b
 8001b9c:	0b0b0b0b 	.word	0x0b0b0b0b
 8001ba0:	b90b      	.short	0xb90b
 8001ba2:	b6          	.byte	0xb6
 8001ba3:	00          	.byte	0x00
 8001ba4:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba6:	2dff      	cmp	r5, #255	; 0xff
 8001ba8:	f200 8083 	bhi.w	8001cb2 <HAL_GPIO_Init+0x16e>
 8001bac:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb0:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb4:	240f      	movs	r4, #15
 8001bb6:	f8d9 2000 	ldr.w	r2, [r9]
 8001bba:	fa04 fb0a 	lsl.w	fp, r4, sl
 8001bbe:	ea22 020b 	bic.w	r2, r2, fp
 8001bc2:	fa06 fa0a 	lsl.w	sl, r6, sl
 8001bc6:	ea42 020a 	orr.w	r2, r2, sl
 8001bca:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bce:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001bd2:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8001bd6:	f000 808f 	beq.w	8001cf8 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bda:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	f04a 0a01 	orr.w	sl, sl, #1
 8001be6:	f8cc a018 	str.w	sl, [ip, #24]
 8001bea:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001bee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001bf2:	f00a 0a01 	and.w	sl, sl, #1
 8001bf6:	f8cd a00c 	str.w	sl, [sp, #12]
 8001bfa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bfe:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c02:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c06:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001c0a:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c0e:	fa04 f40a 	lsl.w	r4, r4, sl
 8001c12:	ea2b 0004 	bic.w	r0, fp, r4
 8001c16:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c18:	9c00      	ldr	r4, [sp, #0]
 8001c1a:	4848      	ldr	r0, [pc, #288]	; (8001d3c <HAL_GPIO_Init+0x1f8>)
 8001c1c:	4284      	cmp	r4, r0
 8001c1e:	d013      	beq.n	8001c48 <HAL_GPIO_Init+0x104>
 8001c20:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001c24:	4284      	cmp	r4, r0
 8001c26:	d07d      	beq.n	8001d24 <HAL_GPIO_Init+0x1e0>
 8001c28:	4845      	ldr	r0, [pc, #276]	; (8001d40 <HAL_GPIO_Init+0x1fc>)
 8001c2a:	4284      	cmp	r4, r0
 8001c2c:	d071      	beq.n	8001d12 <HAL_GPIO_Init+0x1ce>
 8001c2e:	4845      	ldr	r0, [pc, #276]	; (8001d44 <HAL_GPIO_Init+0x200>)
 8001c30:	4284      	cmp	r4, r0
 8001c32:	bf0c      	ite	eq
 8001c34:	f04f 0b03 	moveq.w	fp, #3
 8001c38:	f04f 0b04 	movne.w	fp, #4
 8001c3c:	9801      	ldr	r0, [sp, #4]
 8001c3e:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001c42:	ea40 000a 	orr.w	r0, r0, sl
 8001c46:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c48:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c4a:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8001c4e:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	bf14      	ite	ne
 8001c54:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c56:	43aa      	biceq	r2, r5
 8001c58:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001c5a:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c5c:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001c60:	bf14      	ite	ne
 8001c62:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c64:	43aa      	biceq	r2, r5
 8001c66:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c68:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6a:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c6e:	bf14      	ite	ne
 8001c70:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c72:	43aa      	biceq	r2, r5
 8001c74:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c76:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c7a:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7c:	d039      	beq.n	8001cf2 <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c7e:	4315      	orrs	r5, r2
 8001c80:	60fd      	str	r5, [r7, #12]
 8001c82:	680c      	ldr	r4, [r1, #0]
	position++;
 8001c84:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	fa34 f203 	lsrs.w	r2, r4, r3
 8001c8a:	f47f af72 	bne.w	8001b72 <HAL_GPIO_Init+0x2e>
  }
}
 8001c8e:	b005      	add	sp, #20
 8001c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001c94:	4544      	cmp	r4, r8
 8001c96:	d005      	beq.n	8001ca4 <HAL_GPIO_Init+0x160>
 8001c98:	d913      	bls.n	8001cc2 <HAL_GPIO_Init+0x17e>
 8001c9a:	4574      	cmp	r4, lr
 8001c9c:	d002      	beq.n	8001ca4 <HAL_GPIO_Init+0x160>
 8001c9e:	482a      	ldr	r0, [pc, #168]	; (8001d48 <HAL_GPIO_Init+0x204>)
 8001ca0:	4284      	cmp	r4, r0
 8001ca2:	d180      	bne.n	8001ba6 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca4:	688c      	ldr	r4, [r1, #8]
 8001ca6:	b9e4      	cbnz	r4, 8001ce2 <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca8:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001caa:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cae:	f67f af7d 	bls.w	8001bac <HAL_GPIO_Init+0x68>
 8001cb2:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001cb8:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cbc:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cc0:	e778      	b.n	8001bb4 <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 8001cc2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8001d58 <HAL_GPIO_Init+0x214>
 8001cc6:	454c      	cmp	r4, r9
 8001cc8:	d0ec      	beq.n	8001ca4 <HAL_GPIO_Init+0x160>
 8001cca:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001cce:	454c      	cmp	r4, r9
 8001cd0:	d0e8      	beq.n	8001ca4 <HAL_GPIO_Init+0x160>
 8001cd2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001cd6:	454c      	cmp	r4, r9
 8001cd8:	f47f af65 	bne.w	8001ba6 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cdc:	688c      	ldr	r4, [r1, #8]
 8001cde:	2c00      	cmp	r4, #0
 8001ce0:	d0e2      	beq.n	8001ca8 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 8001ce2:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ce4:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce6:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8001cea:	bf0c      	ite	eq
 8001cec:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8001cee:	6142      	strne	r2, [r0, #20]
 8001cf0:	e759      	b.n	8001ba6 <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cf2:	ea22 0505 	bic.w	r5, r2, r5
 8001cf6:	60fd      	str	r5, [r7, #12]
 8001cf8:	680c      	ldr	r4, [r1, #0]
 8001cfa:	e735      	b.n	8001b68 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cfc:	68ce      	ldr	r6, [r1, #12]
 8001cfe:	360c      	adds	r6, #12
          break;
 8001d00:	e751      	b.n	8001ba6 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d02:	68ce      	ldr	r6, [r1, #12]
 8001d04:	3604      	adds	r6, #4
          break;
 8001d06:	e74e      	b.n	8001ba6 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d08:	68ce      	ldr	r6, [r1, #12]
 8001d0a:	3608      	adds	r6, #8
          break;
 8001d0c:	e74b      	b.n	8001ba6 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d0e:	68ce      	ldr	r6, [r1, #12]
          break;
 8001d10:	e749      	b.n	8001ba6 <HAL_GPIO_Init+0x62>
 8001d12:	f04f 0b02 	mov.w	fp, #2
 8001d16:	9801      	ldr	r0, [sp, #4]
 8001d18:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001d1c:	ea40 000a 	orr.w	r0, r0, sl
 8001d20:	9001      	str	r0, [sp, #4]
 8001d22:	e791      	b.n	8001c48 <HAL_GPIO_Init+0x104>
 8001d24:	f04f 0b01 	mov.w	fp, #1
 8001d28:	9801      	ldr	r0, [sp, #4]
 8001d2a:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001d2e:	ea40 000a 	orr.w	r0, r0, sl
 8001d32:	9001      	str	r0, [sp, #4]
 8001d34:	e788      	b.n	8001c48 <HAL_GPIO_Init+0x104>
 8001d36:	bf00      	nop
 8001d38:	40010400 	.word	0x40010400
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	40011000 	.word	0x40011000
 8001d44:	40011400 	.word	0x40011400
 8001d48:	10320000 	.word	0x10320000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	10220000 	.word	0x10220000
 8001d54:	10310000 	.word	0x10310000
 8001d58:	10120000 	.word	0x10120000

08001d5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d5c:	b902      	cbnz	r2, 8001d60 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d5e:	0409      	lsls	r1, r1, #16
 8001d60:	6101      	str	r1, [r0, #16]
  }
}
 8001d62:	4770      	bx	lr

08001d64 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d64:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d66:	ea01 0203 	and.w	r2, r1, r3
 8001d6a:	ea21 0103 	bic.w	r1, r1, r3
 8001d6e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001d72:	6101      	str	r1, [r0, #16]
}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop

08001d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	4605      	mov	r5, r0
 8001d7c:	460e      	mov	r6, r1
 8001d7e:	4617      	mov	r7, r2
 8001d80:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d82:	682c      	ldr	r4, [r5, #0]
 8001d84:	d003      	beq.n	8001d8e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 8001d86:	e009      	b.n	8001d9c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d88:	6963      	ldr	r3, [r4, #20]
 8001d8a:	055b      	lsls	r3, r3, #21
 8001d8c:	d424      	bmi.n	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d8e:	6963      	ldr	r3, [r4, #20]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	f013 0308 	ands.w	r3, r3, #8
 8001d96:	d1f7      	bne.n	8001d88 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001d98:	4618      	mov	r0, r3
}
 8001d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d9c:	6963      	ldr	r3, [r4, #20]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	f013 0308 	ands.w	r3, r3, #8
 8001da4:	d0f8      	beq.n	8001d98 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001da6:	6963      	ldr	r3, [r4, #20]
 8001da8:	0559      	lsls	r1, r3, #21
 8001daa:	d415      	bmi.n	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dac:	f7ff fd10 	bl	80017d0 <HAL_GetTick>
 8001db0:	1bc0      	subs	r0, r0, r7
 8001db2:	4286      	cmp	r6, r0
 8001db4:	d301      	bcc.n	8001dba <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 8001db6:	2e00      	cmp	r6, #0
 8001db8:	d1e2      	bne.n	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dba:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dbc:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dbe:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dc0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dc8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001dca:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8001dd2:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dd4:	642b      	str	r3, [r5, #64]	; 0x40
}
 8001dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd8:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dda:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dde:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de6:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de8:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dea:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dec:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df0:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001df4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001df6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8001dfe:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e00:	642b      	str	r3, [r5, #64]	; 0x40
}
 8001e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e04 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	4605      	mov	r5, r0
 8001e08:	460e      	mov	r6, r1
 8001e0a:	4617      	mov	r7, r2
 8001e0c:	1c72      	adds	r2, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e0e:	682c      	ldr	r4, [r5, #0]
 8001e10:	d003      	beq.n	8001e1a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 8001e12:	e009      	b.n	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e14:	6963      	ldr	r3, [r4, #20]
 8001e16:	055b      	lsls	r3, r3, #21
 8001e18:	d424      	bmi.n	8001e64 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e1a:	6963      	ldr	r3, [r4, #20]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	f013 0302 	ands.w	r3, r3, #2
 8001e22:	d1f7      	bne.n	8001e14 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 8001e24:	4618      	mov	r0, r3
}
 8001e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e28:	6963      	ldr	r3, [r4, #20]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	f013 0302 	ands.w	r3, r3, #2
 8001e30:	d0f8      	beq.n	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e32:	6963      	ldr	r3, [r4, #20]
 8001e34:	0559      	lsls	r1, r3, #21
 8001e36:	d415      	bmi.n	8001e64 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e38:	f7ff fcca 	bl	80017d0 <HAL_GetTick>
 8001e3c:	1bc0      	subs	r0, r0, r7
 8001e3e:	4286      	cmp	r6, r0
 8001e40:	d301      	bcc.n	8001e46 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 8001e42:	2e00      	cmp	r6, #0
 8001e44:	d1e2      	bne.n	8001e0c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e46:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e48:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e4a:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e4c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e50:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e54:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001e56:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e5a:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	642b      	str	r3, [r5, #64]	; 0x40
}
 8001e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e64:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e66:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e6a:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e72:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e74:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e76:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e78:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e7c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e80:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001e82:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e86:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8001e8a:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e8c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8001e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e90 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001e90:	2800      	cmp	r0, #0
 8001e92:	f000 80b5 	beq.w	8002000 <HAL_I2C_Init+0x170>
{
 8001e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8094 	beq.w	8001fd0 <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea8:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001eaa:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec8:	f000 fcc0 	bl	800284c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ecc:	6865      	ldr	r5, [r4, #4]
 8001ece:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <HAL_I2C_Init+0x174>)
 8001ed0:	429d      	cmp	r5, r3
 8001ed2:	d84c      	bhi.n	8001f6e <HAL_I2C_Init+0xde>
 8001ed4:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <HAL_I2C_Init+0x178>)
 8001ed6:	4298      	cmp	r0, r3
 8001ed8:	d978      	bls.n	8001fcc <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eda:	1e42      	subs	r2, r0, #1
 8001edc:	006d      	lsls	r5, r5, #1
 8001ede:	fbb2 f2f5 	udiv	r2, r2, r5
 8001ee2:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 8001ee6:	4949      	ldr	r1, [pc, #292]	; (800200c <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee8:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001eea:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eee:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ef0:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ef2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001ef6:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 8001efa:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efc:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8001efe:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f00:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001f04:	3001      	adds	r0, #1
 8001f06:	4308      	orrs	r0, r1
 8001f08:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f0a:	69d9      	ldr	r1, [r3, #28]
 8001f0c:	4232      	tst	r2, r6
 8001f0e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001f12:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001f16:	d160      	bne.n	8001fda <HAL_I2C_Init+0x14a>
 8001f18:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1a:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8001f28:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001f2c:	4302      	orrs	r2, r0
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8001f38:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001f3c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001f40:	4302      	orrs	r2, r0
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f46:	68d9      	ldr	r1, [r3, #12]
 8001f48:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8001f4c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001f50:	4302      	orrs	r2, r0
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001f56:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001f58:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f60:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f66:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8001f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <HAL_I2C_Init+0x180>)
 8001f70:	4298      	cmp	r0, r3
 8001f72:	d92b      	bls.n	8001fcc <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f74:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001f78:	4e24      	ldr	r6, [pc, #144]	; (800200c <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f7a:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001f7c:	fba6 2600 	umull	r2, r6, r6, r0
 8001f80:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f82:	fb01 f102 	mul.w	r1, r1, r2
 8001f86:	4f23      	ldr	r7, [pc, #140]	; (8002014 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f88:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f8a:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f8e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001f92:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8001f96:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	0989      	lsrs	r1, r1, #6
 8001f9c:	3101      	adds	r1, #1
 8001f9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fa6:	69d9      	ldr	r1, [r3, #28]
 8001fa8:	68a6      	ldr	r6, [r4, #8]
 8001faa:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001fae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001fb2:	b9ae      	cbnz	r6, 8001fe0 <HAL_I2C_Init+0x150>
 8001fb4:	3801      	subs	r0, #1
 8001fb6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001fba:	fbb0 f2f2 	udiv	r2, r0, r2
 8001fbe:	3201      	adds	r2, #1
 8001fc0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001fc4:	b1d2      	cbz	r2, 8001ffc <HAL_I2C_Init+0x16c>
 8001fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fca:	e7a6      	b.n	8001f1a <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8001fcc:	2001      	movs	r0, #1
}
 8001fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001fd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001fd4:	f7fe fb0a 	bl	80005ec <HAL_I2C_MspInit>
 8001fd8:	e766      	b.n	8001ea8 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fda:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001fde:	e79c      	b.n	8001f1a <HAL_I2C_Init+0x8a>
 8001fe0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001fe4:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8001fe8:	1e42      	subs	r2, r0, #1
 8001fea:	fbb2 f2f5 	udiv	r2, r2, r5
 8001fee:	3201      	adds	r2, #1
 8001ff0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001ff4:	b112      	cbz	r2, 8001ffc <HAL_I2C_Init+0x16c>
 8001ff6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001ffa:	e78e      	b.n	8001f1a <HAL_I2C_Init+0x8a>
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	e78c      	b.n	8001f1a <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
}
 8002002:	4770      	bx	lr
 8002004:	000186a0 	.word	0x000186a0
 8002008:	001e847f 	.word	0x001e847f
 800200c:	431bde83 	.word	0x431bde83
 8002010:	003d08ff 	.word	0x003d08ff
 8002014:	10624dd3 	.word	0x10624dd3

08002018 <HAL_I2C_Master_Transmit>:
{
 8002018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800201c:	4604      	mov	r4, r0
 800201e:	b082      	sub	sp, #8
 8002020:	469a      	mov	sl, r3
 8002022:	4688      	mov	r8, r1
 8002024:	4691      	mov	r9, r2
 8002026:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff fbd2 	bl	80017d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800202c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002030:	2b20      	cmp	r3, #32
 8002032:	d005      	beq.n	8002040 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 8002034:	f04f 0802 	mov.w	r8, #2
}
 8002038:	4640      	mov	r0, r8
 800203a:	b002      	add	sp, #8
 800203c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002040:	4607      	mov	r7, r0
 8002042:	e005      	b.n	8002050 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002044:	f7ff fbc4 	bl	80017d0 <HAL_GetTick>
 8002048:	1bc0      	subs	r0, r0, r7
 800204a:	2819      	cmp	r0, #25
 800204c:	f200 80f3 	bhi.w	8002236 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	699d      	ldr	r5, [r3, #24]
 8002054:	43ed      	mvns	r5, r5
 8002056:	f015 0502 	ands.w	r5, r5, #2
 800205a:	d0f3      	beq.n	8002044 <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 800205c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002060:	2a01      	cmp	r2, #1
 8002062:	d0e7      	beq.n	8002034 <HAL_I2C_Master_Transmit+0x1c>
 8002064:	2201      	movs	r2, #1
 8002066:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	07d2      	lsls	r2, r2, #31
 800206e:	d570      	bpl.n	8002152 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002070:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002072:	2521      	movs	r5, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002074:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207c:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207e:	4a8b      	ldr	r2, [pc, #556]	; (80022ac <HAL_I2C_Master_Transmit+0x294>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002080:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002084:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002088:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800208a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800208e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002090:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002092:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002094:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002098:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 800209a:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800209c:	d007      	beq.n	80020ae <HAL_I2C_Master_Transmit+0x96>
 800209e:	2a01      	cmp	r2, #1
 80020a0:	d005      	beq.n	80020ae <HAL_I2C_Master_Transmit+0x96>
 80020a2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80020a6:	d002      	beq.n	80020ae <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020aa:	2a12      	cmp	r2, #18
 80020ac:	d103      	bne.n	80020b6 <HAL_I2C_Master_Transmit+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	1c75      	adds	r5, r6, #1
 80020b8:	d13d      	bne.n	8002136 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	07d0      	lsls	r0, r2, #31
 80020be:	d5fc      	bpl.n	80020ba <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c0:	6922      	ldr	r2, [r4, #16]
 80020c2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80020c6:	d149      	bne.n	800215c <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020c8:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80020cc:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ce:	463a      	mov	r2, r7
 80020d0:	4631      	mov	r1, r6
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff fe96 	bl	8001e04 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 80020d8:	4680      	mov	r8, r0
 80020da:	bb30      	cbnz	r0, 800212a <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	9001      	str	r0, [sp, #4]
 80020e0:	6959      	ldr	r1, [r3, #20]
    while (hi2c->XferSize > 0U)
 80020e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e4:	9101      	str	r1, [sp, #4]
 80020e6:	6999      	ldr	r1, [r3, #24]
 80020e8:	9101      	str	r1, [sp, #4]
 80020ea:	9901      	ldr	r1, [sp, #4]
    while (hi2c->XferSize > 0U)
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d076      	beq.n	80021de <HAL_I2C_Master_Transmit+0x1c6>
 80020f0:	1c75      	adds	r5, r6, #1
 80020f2:	f040 8081 	bne.w	80021f8 <HAL_I2C_Master_Transmit+0x1e0>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	0610      	lsls	r0, r2, #24
 80020fa:	d442      	bmi.n	8002182 <HAL_I2C_Master_Transmit+0x16a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	0551      	lsls	r1, r2, #21
 8002100:	d5f9      	bpl.n	80020f6 <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002102:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002104:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8002108:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210a:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800210c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800210e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002112:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002116:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002124:	2b04      	cmp	r3, #4
 8002126:	f000 80ab 	beq.w	8002280 <HAL_I2C_Master_Transmit+0x268>
      return HAL_ERROR;
 800212a:	f04f 0801 	mov.w	r8, #1
}
 800212e:	4640      	mov	r0, r8
 8002130:	b002      	add	sp, #8
 8002132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	07d1      	lsls	r1, r2, #31
 800213a:	d4c1      	bmi.n	80020c0 <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213c:	f7ff fb48 	bl	80017d0 <HAL_GetTick>
 8002140:	1bc0      	subs	r0, r0, r7
 8002142:	4286      	cmp	r6, r0
 8002144:	f0c0 8084 	bcc.w	8002250 <HAL_I2C_Master_Transmit+0x238>
 8002148:	2e00      	cmp	r6, #0
 800214a:	f000 8081 	beq.w	8002250 <HAL_I2C_Master_Transmit+0x238>
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	e7b1      	b.n	80020b6 <HAL_I2C_Master_Transmit+0x9e>
      __HAL_I2C_ENABLE(hi2c);
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e789      	b.n	8002070 <HAL_I2C_Master_Transmit+0x58>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800215c:	ea4f 12e8 	mov.w	r2, r8, asr #7
 8002160:	f002 0206 	and.w	r2, r2, #6
 8002164:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002168:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800216a:	4631      	mov	r1, r6
 800216c:	463a      	mov	r2, r7
 800216e:	4620      	mov	r0, r4
 8002170:	f7ff fe02 	bl	8001d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8002174:	2800      	cmp	r0, #0
 8002176:	d1d8      	bne.n	800212a <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	fa5f f188 	uxtb.w	r1, r8
 800217e:	6119      	str	r1, [r3, #16]
 8002180:	e7a5      	b.n	80020ce <HAL_I2C_Master_Transmit+0xb6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002182:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002184:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002188:	4605      	mov	r5, r0
 800218a:	f815 2b01 	ldrb.w	r2, [r5], #1
      hi2c->XferSize--;
 800218e:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002192:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002194:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002196:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 8002198:	3a01      	subs	r2, #1
 800219a:	b292      	uxth	r2, r2
 800219c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800219e:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 80021a0:	6265      	str	r5, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a2:	0755      	lsls	r5, r2, #29
      hi2c->XferSize--;
 80021a4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a6:	d50c      	bpl.n	80021c2 <HAL_I2C_Master_Transmit+0x1aa>
 80021a8:	b159      	cbz	r1, 80021c2 <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021aa:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 80021ac:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b0:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80021b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80021b4:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80021b6:	3a01      	subs	r2, #1
 80021b8:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80021ba:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80021be:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80021c0:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80021c2:	1c75      	adds	r5, r6, #1
 80021c4:	d128      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	0750      	lsls	r0, r2, #29
 80021ca:	d405      	bmi.n	80021d8 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	0551      	lsls	r1, r2, #21
 80021d0:	d497      	bmi.n	8002102 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	0750      	lsls	r0, r2, #29
 80021d6:	d5f9      	bpl.n	80021cc <HAL_I2C_Master_Transmit+0x1b4>
    while (hi2c->XferSize > 0U)
 80021d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80021da:	2a00      	cmp	r2, #0
 80021dc:	d188      	bne.n	80020f0 <HAL_I2C_Master_Transmit+0xd8>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021de:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80021ee:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80021f6:	e71f      	b.n	8002038 <HAL_I2C_Master_Transmit+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	0612      	lsls	r2, r2, #24
 80021fc:	d4c1      	bmi.n	8002182 <HAL_I2C_Master_Transmit+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	0552      	lsls	r2, r2, #21
 8002202:	f53f af7e 	bmi.w	8002102 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7ff fae3 	bl	80017d0 <HAL_GetTick>
 800220a:	1bc0      	subs	r0, r0, r7
 800220c:	4286      	cmp	r6, r0
 800220e:	d33f      	bcc.n	8002290 <HAL_I2C_Master_Transmit+0x278>
 8002210:	2e00      	cmp	r6, #0
 8002212:	d03d      	beq.n	8002290 <HAL_I2C_Master_Transmit+0x278>
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	e76b      	b.n	80020f0 <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	0752      	lsls	r2, r2, #29
 800221c:	d4dc      	bmi.n	80021d8 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	0552      	lsls	r2, r2, #21
 8002222:	f53f af6e 	bmi.w	8002102 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7ff fad3 	bl	80017d0 <HAL_GetTick>
 800222a:	1bc0      	subs	r0, r0, r7
 800222c:	4286      	cmp	r6, r0
 800222e:	d32f      	bcc.n	8002290 <HAL_I2C_Master_Transmit+0x278>
 8002230:	b376      	cbz	r6, 8002290 <HAL_I2C_Master_Transmit+0x278>
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	e7c5      	b.n	80021c2 <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002236:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002238:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800223a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800223e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002242:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002244:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	f043 0320 	orr.w	r3, r3, #32
 800224c:	6423      	str	r3, [r4, #64]	; 0x40
 800224e:	e6f1      	b.n	8002034 <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002250:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002252:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002254:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002256:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800225a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800225e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002260:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002262:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8002266:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800226a:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800226c:	680b      	ldr	r3, [r1, #0]
 800226e:	05de      	lsls	r6, r3, #23
 8002270:	f57f af5b 	bpl.w	800212a <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002274:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8002278:	f04f 0801 	mov.w	r8, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800227c:	6423      	str	r3, [r4, #64]	; 0x40
 800227e:	e6db      	b.n	8002038 <HAL_I2C_Master_Transmit+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002280:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8002282:	f04f 0801 	mov.w	r8, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	6813      	ldr	r3, [r2, #0]
 8002288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e6d3      	b.n	8002038 <HAL_I2C_Master_Transmit+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002290:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002292:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002294:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002296:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800229a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800229e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80022a0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022a4:	f043 0320 	orr.w	r3, r3, #32
 80022a8:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80022aa:	e73a      	b.n	8002122 <HAL_I2C_Master_Transmit+0x10a>
 80022ac:	ffff0000 	.word	0xffff0000

080022b0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b0:	2800      	cmp	r0, #0
 80022b2:	f000 81c3 	beq.w	800263c <HAL_RCC_OscConfig+0x38c>
{
 80022b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ba:	6803      	ldr	r3, [r0, #0]
 80022bc:	4604      	mov	r4, r0
 80022be:	07dd      	lsls	r5, r3, #31
{
 80022c0:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	d535      	bpl.n	8002330 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c4:	49a6      	ldr	r1, [pc, #664]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 80022c6:	684a      	ldr	r2, [r1, #4]
 80022c8:	f002 020c 	and.w	r2, r2, #12
 80022cc:	2a04      	cmp	r2, #4
 80022ce:	f000 80ef 	beq.w	80024b0 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022d2:	684a      	ldr	r2, [r1, #4]
 80022d4:	f002 020c 	and.w	r2, r2, #12
 80022d8:	2a08      	cmp	r2, #8
 80022da:	f000 80e5 	beq.w	80024a8 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d010      	beq.n	8002308 <HAL_RCC_OscConfig+0x58>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 810d 	beq.w	8002506 <HAL_RCC_OscConfig+0x256>
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f0:	f000 818f 	beq.w	8002612 <HAL_RCC_OscConfig+0x362>
 80022f4:	4b9a      	ldr	r3, [pc, #616]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e004      	b.n	8002312 <HAL_RCC_OscConfig+0x62>
 8002308:	4a95      	ldr	r2, [pc, #596]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 800230a:	6813      	ldr	r3, [r2, #0]
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7ff fa5d 	bl	80017d0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4e92      	ldr	r6, [pc, #584]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8002318:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	e005      	b.n	8002328 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7ff fa58 	bl	80017d0 <HAL_GetTick>
 8002320:	1b40      	subs	r0, r0, r5
 8002322:	2864      	cmp	r0, #100	; 0x64
 8002324:	f200 80eb 	bhi.w	80024fe <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002328:	6833      	ldr	r3, [r6, #0]
 800232a:	039a      	lsls	r2, r3, #14
 800232c:	d5f6      	bpl.n	800231c <HAL_RCC_OscConfig+0x6c>
 800232e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002330:	079f      	lsls	r7, r3, #30
 8002332:	d528      	bpl.n	8002386 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002334:	4a8a      	ldr	r2, [pc, #552]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 8002336:	6851      	ldr	r1, [r2, #4]
 8002338:	f011 0f0c 	tst.w	r1, #12
 800233c:	f000 808e 	beq.w	800245c <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002340:	6851      	ldr	r1, [r2, #4]
 8002342:	f001 010c 	and.w	r1, r1, #12
 8002346:	2908      	cmp	r1, #8
 8002348:	f000 8084 	beq.w	8002454 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800234c:	6923      	ldr	r3, [r4, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8125 	beq.w	800259e <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002354:	2201      	movs	r2, #1
 8002356:	4b83      	ldr	r3, [pc, #524]	; (8002564 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	4e81      	ldr	r6, [pc, #516]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 800235a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800235c:	f7ff fa38 	bl	80017d0 <HAL_GetTick>
 8002360:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	e005      	b.n	8002370 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7ff fa34 	bl	80017d0 <HAL_GetTick>
 8002368:	1b40      	subs	r0, r0, r5
 800236a:	2802      	cmp	r0, #2
 800236c:	f200 80c7 	bhi.w	80024fe <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	6833      	ldr	r3, [r6, #0]
 8002372:	0798      	lsls	r0, r3, #30
 8002374:	d5f6      	bpl.n	8002364 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	6833      	ldr	r3, [r6, #0]
 8002378:	6962      	ldr	r2, [r4, #20]
 800237a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800237e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002382:	6033      	str	r3, [r6, #0]
 8002384:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	071a      	lsls	r2, r3, #28
 8002388:	d41f      	bmi.n	80023ca <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238a:	075d      	lsls	r5, r3, #29
 800238c:	d541      	bpl.n	8002412 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b74      	ldr	r3, [pc, #464]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	00d0      	lsls	r0, r2, #3
 8002394:	d57d      	bpl.n	8002492 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b73      	ldr	r3, [pc, #460]	; (8002568 <HAL_RCC_OscConfig+0x2b8>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	05d1      	lsls	r1, r2, #23
 800239e:	f140 809d 	bpl.w	80024dc <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a2:	68e3      	ldr	r3, [r4, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	f000 810b 	beq.w	80025c0 <HAL_RCC_OscConfig+0x310>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80c5 	beq.w	800253a <HAL_RCC_OscConfig+0x28a>
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	4b6b      	ldr	r3, [pc, #428]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 80023b4:	6a1a      	ldr	r2, [r3, #32]
 80023b6:	f000 8139 	beq.w	800262c <HAL_RCC_OscConfig+0x37c>
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	621a      	str	r2, [r3, #32]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	f022 0204 	bic.w	r2, r2, #4
 80023c6:	621a      	str	r2, [r3, #32]
 80023c8:	e0ff      	b.n	80025ca <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	69a3      	ldr	r3, [r4, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d050      	beq.n	8002472 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80023d0:	2201      	movs	r2, #1
 80023d2:	4b66      	ldr	r3, [pc, #408]	; (800256c <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d4:	4e62      	ldr	r6, [pc, #392]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 80023d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023d8:	f7ff f9fa 	bl	80017d0 <HAL_GetTick>
 80023dc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e005      	b.n	80023ec <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff f9f6 	bl	80017d0 <HAL_GetTick>
 80023e4:	1b40      	subs	r0, r0, r5
 80023e6:	2802      	cmp	r0, #2
 80023e8:	f200 8089 	bhi.w	80024fe <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80023ee:	079b      	lsls	r3, r3, #30
 80023f0:	d5f6      	bpl.n	80023e0 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <HAL_RCC_OscConfig+0x2c0>)
 80023f4:	4a5f      	ldr	r2, [pc, #380]	; (8002574 <HAL_RCC_OscConfig+0x2c4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	0a5b      	lsrs	r3, r3, #9
 80023fe:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002400:	bf00      	nop
  }
  while (Delay --);
 8002402:	9b01      	ldr	r3, [sp, #4]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	9201      	str	r2, [sp, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <HAL_RCC_OscConfig+0x150>
 800240c:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240e:	075d      	lsls	r5, r3, #29
 8002410:	d4bd      	bmi.n	800238e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002412:	69e0      	ldr	r0, [r4, #28]
 8002414:	b1d0      	cbz	r0, 800244c <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002416:	4d52      	ldr	r5, [pc, #328]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 8002418:	686a      	ldr	r2, [r5, #4]
 800241a:	f002 020c 	and.w	r2, r2, #12
 800241e:	2a08      	cmp	r2, #8
 8002420:	f000 80e6 	beq.w	80025f0 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002424:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002426:	f04f 0100 	mov.w	r1, #0
 800242a:	4a53      	ldr	r2, [pc, #332]	; (8002578 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242c:	f000 8108 	beq.w	8002640 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8002430:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8002432:	f7ff f9cd 	bl	80017d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002436:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8002438:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243a:	e004      	b.n	8002446 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7ff f9c8 	bl	80017d0 <HAL_GetTick>
 8002440:	1b40      	subs	r0, r0, r5
 8002442:	2802      	cmp	r0, #2
 8002444:	d85b      	bhi.n	80024fe <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	019b      	lsls	r3, r3, #6
 800244a:	d4f7      	bmi.n	800243c <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 800244c:	2000      	movs	r0, #0
}
 800244e:	b002      	add	sp, #8
 8002450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002454:	6852      	ldr	r2, [r2, #4]
 8002456:	03d6      	lsls	r6, r2, #15
 8002458:	f53f af78 	bmi.w	800234c <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245c:	4a40      	ldr	r2, [pc, #256]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	0795      	lsls	r5, r2, #30
 8002462:	d52f      	bpl.n	80024c4 <HAL_RCC_OscConfig+0x214>
 8002464:	6922      	ldr	r2, [r4, #16]
 8002466:	2a01      	cmp	r2, #1
 8002468:	d02c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800246a:	2001      	movs	r0, #1
}
 800246c:	b002      	add	sp, #8
 800246e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002472:	4a3e      	ldr	r2, [pc, #248]	; (800256c <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4e3a      	ldr	r6, [pc, #232]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 8002476:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002478:	f7ff f9aa 	bl	80017d0 <HAL_GetTick>
 800247c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247e:	e004      	b.n	800248a <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff f9a6 	bl	80017d0 <HAL_GetTick>
 8002484:	1b40      	subs	r0, r0, r5
 8002486:	2802      	cmp	r0, #2
 8002488:	d839      	bhi.n	80024fe <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800248c:	079f      	lsls	r7, r3, #30
 800248e:	d4f7      	bmi.n	8002480 <HAL_RCC_OscConfig+0x1d0>
 8002490:	e7bc      	b.n	800240c <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8002494:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800249a:	61da      	str	r2, [r3, #28]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80024a6:	e777      	b.n	8002398 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a8:	684a      	ldr	r2, [r1, #4]
 80024aa:	03d0      	lsls	r0, r2, #15
 80024ac:	f57f af17 	bpl.w	80022de <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	4a2b      	ldr	r2, [pc, #172]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	0391      	lsls	r1, r2, #14
 80024b6:	f57f af3b 	bpl.w	8002330 <HAL_RCC_OscConfig+0x80>
 80024ba:	6862      	ldr	r2, [r4, #4]
 80024bc:	2a00      	cmp	r2, #0
 80024be:	f47f af37 	bne.w	8002330 <HAL_RCC_OscConfig+0x80>
 80024c2:	e7d2      	b.n	800246a <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4926      	ldr	r1, [pc, #152]	; (8002560 <HAL_RCC_OscConfig+0x2b0>)
 80024c6:	6960      	ldr	r0, [r4, #20]
 80024c8:	680a      	ldr	r2, [r1, #0]
 80024ca:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80024ce:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80024d2:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d4:	071a      	lsls	r2, r3, #28
 80024d6:	f57f af58 	bpl.w	800238a <HAL_RCC_OscConfig+0xda>
 80024da:	e776      	b.n	80023ca <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024dc:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024e6:	f7ff f973 	bl	80017d0 <HAL_GetTick>
 80024ea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	05da      	lsls	r2, r3, #23
 80024f0:	f53f af57 	bmi.w	80023a2 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f4:	f7ff f96c 	bl	80017d0 <HAL_GetTick>
 80024f8:	1b80      	subs	r0, r0, r6
 80024fa:	2864      	cmp	r0, #100	; 0x64
 80024fc:	d9f6      	bls.n	80024ec <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 80024fe:	2003      	movs	r0, #3
}
 8002500:	b002      	add	sp, #8
 8002502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800250a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800250e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002510:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002512:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800251e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002520:	f7ff f956 	bl	80017d0 <HAL_GetTick>
 8002524:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e004      	b.n	8002532 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff f952 	bl	80017d0 <HAL_GetTick>
 800252c:	1b40      	subs	r0, r0, r5
 800252e:	2864      	cmp	r0, #100	; 0x64
 8002530:	d8e5      	bhi.n	80024fe <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	6833      	ldr	r3, [r6, #0]
 8002534:	039b      	lsls	r3, r3, #14
 8002536:	d4f7      	bmi.n	8002528 <HAL_RCC_OscConfig+0x278>
 8002538:	e6f9      	b.n	800232e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800253e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002542:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	621a      	str	r2, [r3, #32]
 800254c:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002552:	f022 0204 	bic.w	r2, r2, #4
 8002556:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8002558:	f7ff f93a 	bl	80017d0 <HAL_GetTick>
 800255c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	e012      	b.n	8002586 <HAL_RCC_OscConfig+0x2d6>
 8002560:	40021000 	.word	0x40021000
 8002564:	42420000 	.word	0x42420000
 8002568:	40007000 	.word	0x40007000
 800256c:	42420480 	.word	0x42420480
 8002570:	20000000 	.word	0x20000000
 8002574:	10624dd3 	.word	0x10624dd3
 8002578:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7ff f928 	bl	80017d0 <HAL_GetTick>
 8002580:	1b80      	subs	r0, r0, r6
 8002582:	4540      	cmp	r0, r8
 8002584:	d8bb      	bhi.n	80024fe <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	0798      	lsls	r0, r3, #30
 800258a:	d4f7      	bmi.n	800257c <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 800258c:	2d00      	cmp	r5, #0
 800258e:	f43f af40 	beq.w	8002412 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002592:	4a44      	ldr	r2, [pc, #272]	; (80026a4 <HAL_RCC_OscConfig+0x3f4>)
 8002594:	69d3      	ldr	r3, [r2, #28]
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	61d3      	str	r3, [r2, #28]
 800259c:	e739      	b.n	8002412 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800259e:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a0:	4e40      	ldr	r6, [pc, #256]	; (80026a4 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 80025a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025a4:	f7ff f914 	bl	80017d0 <HAL_GetTick>
 80025a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e004      	b.n	80025b6 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff f910 	bl	80017d0 <HAL_GetTick>
 80025b0:	1b40      	subs	r0, r0, r5
 80025b2:	2802      	cmp	r0, #2
 80025b4:	d8a3      	bhi.n	80024fe <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	6833      	ldr	r3, [r6, #0]
 80025b8:	0799      	lsls	r1, r3, #30
 80025ba:	d4f7      	bmi.n	80025ac <HAL_RCC_OscConfig+0x2fc>
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	e6e2      	b.n	8002386 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	4a38      	ldr	r2, [pc, #224]	; (80026a4 <HAL_RCC_OscConfig+0x3f4>)
 80025c2:	6a13      	ldr	r3, [r2, #32]
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80025ca:	f7ff f901 	bl	80017d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	4f33      	ldr	r7, [pc, #204]	; (80026a4 <HAL_RCC_OscConfig+0x3f4>)
 80025d6:	e004      	b.n	80025e2 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7ff f8fa 	bl	80017d0 <HAL_GetTick>
 80025dc:	1b80      	subs	r0, r0, r6
 80025de:	4540      	cmp	r0, r8
 80025e0:	d88d      	bhi.n	80024fe <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	079b      	lsls	r3, r3, #30
 80025e6:	d5f7      	bpl.n	80025d8 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	f43f af12 	beq.w	8002412 <HAL_RCC_OscConfig+0x162>
 80025ee:	e7d0      	b.n	8002592 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	2801      	cmp	r0, #1
 80025f2:	f43f af2c 	beq.w	800244e <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 80025f6:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f8:	6a22      	ldr	r2, [r4, #32]
 80025fa:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80025fe:	4291      	cmp	r1, r2
 8002600:	f47f af33 	bne.w	800246a <HAL_RCC_OscConfig+0x1ba>
 8002604:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002606:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800260a:	1a18      	subs	r0, r3, r0
 800260c:	bf18      	it	ne
 800260e:	2001      	movne	r0, #1
 8002610:	e71d      	b.n	800244e <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002616:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e672      	b.n	8002312 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	f042 0204 	orr.w	r2, r2, #4
 8002630:	621a      	str	r2, [r3, #32]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	621a      	str	r2, [r3, #32]
 800263a:	e7c6      	b.n	80025ca <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 800263c:	2001      	movs	r0, #1
}
 800263e:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8002640:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8002642:	f7ff f8c5 	bl	80017d0 <HAL_GetTick>
 8002646:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	e005      	b.n	8002656 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7ff f8c1 	bl	80017d0 <HAL_GetTick>
 800264e:	1b80      	subs	r0, r0, r6
 8002650:	2802      	cmp	r0, #2
 8002652:	f63f af54 	bhi.w	80024fe <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	682b      	ldr	r3, [r5, #0]
 8002658:	0199      	lsls	r1, r3, #6
 800265a:	d4f6      	bmi.n	800264a <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800265c:	6a23      	ldr	r3, [r4, #32]
 800265e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002662:	d105      	bne.n	8002670 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002664:	686a      	ldr	r2, [r5, #4]
 8002666:	68a1      	ldr	r1, [r4, #8]
 8002668:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800266c:	430a      	orrs	r2, r1
 800266e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002670:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002672:	4d0c      	ldr	r5, [pc, #48]	; (80026a4 <HAL_RCC_OscConfig+0x3f4>)
 8002674:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002676:	686a      	ldr	r2, [r5, #4]
 8002678:	430b      	orrs	r3, r1
 800267a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800267e:	490b      	ldr	r1, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002680:	4313      	orrs	r3, r2
 8002682:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002684:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8002686:	f7ff f8a3 	bl	80017d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800268c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268e:	e005      	b.n	800269c <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7ff f89e 	bl	80017d0 <HAL_GetTick>
 8002694:	1b40      	subs	r0, r0, r5
 8002696:	2802      	cmp	r0, #2
 8002698:	f63f af31 	bhi.w	80024fe <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	019a      	lsls	r2, r3, #6
 80026a0:	d5f6      	bpl.n	8002690 <HAL_RCC_OscConfig+0x3e0>
 80026a2:	e6d3      	b.n	800244c <HAL_RCC_OscConfig+0x19c>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	42420000 	.word	0x42420000
 80026ac:	42420060 	.word	0x42420060

080026b0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80026b0:	2800      	cmp	r0, #0
 80026b2:	f000 80af 	beq.w	8002814 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b6:	4a5d      	ldr	r2, [pc, #372]	; (800282c <HAL_RCC_ClockConfig+0x17c>)
{
 80026b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	6813      	ldr	r3, [r2, #0]
 80026be:	4604      	mov	r4, r0
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	428b      	cmp	r3, r1
 80026c6:	460d      	mov	r5, r1
{
 80026c8:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ca:	d20d      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	f023 0307 	bic.w	r3, r3, #7
 80026d2:	430b      	orrs	r3, r1
 80026d4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	428b      	cmp	r3, r1
 80026de:	d003      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 80026e0:	2001      	movs	r0, #1
}
 80026e2:	b006      	add	sp, #24
 80026e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	0798      	lsls	r0, r3, #30
 80026ec:	d514      	bpl.n	8002718 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ee:	0759      	lsls	r1, r3, #29
 80026f0:	d504      	bpl.n	80026fc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f2:	494f      	ldr	r1, [pc, #316]	; (8002830 <HAL_RCC_ClockConfig+0x180>)
 80026f4:	684a      	ldr	r2, [r1, #4]
 80026f6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80026fa:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fc:	071a      	lsls	r2, r3, #28
 80026fe:	d504      	bpl.n	800270a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002700:	494b      	ldr	r1, [pc, #300]	; (8002830 <HAL_RCC_ClockConfig+0x180>)
 8002702:	684a      	ldr	r2, [r1, #4]
 8002704:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002708:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270a:	4949      	ldr	r1, [pc, #292]	; (8002830 <HAL_RCC_ClockConfig+0x180>)
 800270c:	68a0      	ldr	r0, [r4, #8]
 800270e:	684a      	ldr	r2, [r1, #4]
 8002710:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002714:	4302      	orrs	r2, r0
 8002716:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002718:	07db      	lsls	r3, r3, #31
 800271a:	d520      	bpl.n	800275e <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b44      	ldr	r3, [pc, #272]	; (8002830 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002720:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002724:	d078      	beq.n	8002818 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002726:	2a02      	cmp	r2, #2
 8002728:	d071      	beq.n	800280e <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	0798      	lsls	r0, r3, #30
 800272c:	d5d8      	bpl.n	80026e0 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4e40      	ldr	r6, [pc, #256]	; (8002830 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002734:	6873      	ldr	r3, [r6, #4]
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	4313      	orrs	r3, r2
 800273c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800273e:	f7ff f847 	bl	80017d0 <HAL_GetTick>
 8002742:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002744:	e004      	b.n	8002750 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002746:	f7ff f843 	bl	80017d0 <HAL_GetTick>
 800274a:	1bc0      	subs	r0, r0, r7
 800274c:	4540      	cmp	r0, r8
 800274e:	d866      	bhi.n	800281e <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002750:	6873      	ldr	r3, [r6, #4]
 8002752:	6862      	ldr	r2, [r4, #4]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800275c:	d1f3      	bne.n	8002746 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800275e:	4a33      	ldr	r2, [pc, #204]	; (800282c <HAL_RCC_ClockConfig+0x17c>)
 8002760:	6813      	ldr	r3, [r2, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	42ab      	cmp	r3, r5
 8002768:	d909      	bls.n	800277e <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	f023 0307 	bic.w	r3, r3, #7
 8002770:	432b      	orrs	r3, r5
 8002772:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002774:	6813      	ldr	r3, [r2, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	42ab      	cmp	r3, r5
 800277c:	d1b0      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	0759      	lsls	r1, r3, #29
 8002782:	d506      	bpl.n	8002792 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	492a      	ldr	r1, [pc, #168]	; (8002830 <HAL_RCC_ClockConfig+0x180>)
 8002786:	68e0      	ldr	r0, [r4, #12]
 8002788:	684a      	ldr	r2, [r1, #4]
 800278a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800278e:	4302      	orrs	r2, r0
 8002790:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	071a      	lsls	r2, r3, #28
 8002794:	d507      	bpl.n	80027a6 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002796:	4a26      	ldr	r2, [pc, #152]	; (8002830 <HAL_RCC_ClockConfig+0x180>)
 8002798:	6921      	ldr	r1, [r4, #16]
 800279a:	6853      	ldr	r3, [r2, #4]
 800279c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80027a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027a4:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a6:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_RCC_ClockConfig+0x184>)
 80027ac:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027ae:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b4:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80027b8:	491d      	ldr	r1, [pc, #116]	; (8002830 <HAL_RCC_ClockConfig+0x180>)
 80027ba:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80027bc:	f002 030c 	and.w	r3, r2, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d011      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 80027c4:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c6:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <HAL_RCC_ClockConfig+0x180>)
 80027c8:	481c      	ldr	r0, [pc, #112]	; (800283c <HAL_RCC_ClockConfig+0x18c>)
 80027ca:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80027cc:	491c      	ldr	r1, [pc, #112]	; (8002840 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ce:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80027d2:	5c80      	ldrb	r0, [r0, r2]
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_RCC_ClockConfig+0x194>)
 80027d6:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80027d8:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027da:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80027dc:	f7fe ffb6 	bl	800174c <HAL_InitTick>
  return HAL_OK;
 80027e0:	2000      	movs	r0, #0
}
 80027e2:	b006      	add	sp, #24
 80027e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027e8:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80027ec:	4423      	add	r3, r4
 80027ee:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027f2:	03d3      	lsls	r3, r2, #15
 80027f4:	d515      	bpl.n	8002822 <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f6:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027fa:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027fe:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002802:	4422      	add	r2, r4
 8002804:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002808:	fbb3 f3f2 	udiv	r3, r3, r2
 800280c:	e7db      	b.n	80027c6 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	019e      	lsls	r6, r3, #6
 8002810:	d48d      	bmi.n	800272e <HAL_RCC_ClockConfig+0x7e>
 8002812:	e765      	b.n	80026e0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8002814:	2001      	movs	r0, #1
}
 8002816:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002818:	039f      	lsls	r7, r3, #14
 800281a:	d488      	bmi.n	800272e <HAL_RCC_ClockConfig+0x7e>
 800281c:	e760      	b.n	80026e0 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 800281e:	2003      	movs	r0, #3
 8002820:	e75f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x198>)
 8002824:	fb03 f300 	mul.w	r3, r3, r0
 8002828:	e7cd      	b.n	80027c6 <HAL_RCC_ClockConfig+0x116>
 800282a:	bf00      	nop
 800282c:	40022000 	.word	0x40022000
 8002830:	40021000 	.word	0x40021000
 8002834:	080033fc 	.word	0x080033fc
 8002838:	007a1200 	.word	0x007a1200
 800283c:	080033e4 	.word	0x080033e4
 8002840:	20000008 	.word	0x20000008
 8002844:	20000000 	.word	0x20000000
 8002848:	003d0900 	.word	0x003d0900

0800284c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x14>)
 800284e:	4905      	ldr	r1, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002850:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002854:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	6810      	ldr	r0, [r2, #0]
}
 800285c:	40d8      	lsrs	r0, r3
 800285e:	4770      	bx	lr
 8002860:	40021000 	.word	0x40021000
 8002864:	080033f4 	.word	0x080033f4
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x14>)
 800286e:	4905      	ldr	r1, [pc, #20]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002870:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002874:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	6810      	ldr	r0, [r2, #0]
}
 800287c:	40d8      	lsrs	r0, r3
 800287e:	4770      	bx	lr
 8002880:	40021000 	.word	0x40021000
 8002884:	080033f4 	.word	0x080033f4
 8002888:	20000000 	.word	0x20000000

0800288c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800288c:	2800      	cmp	r0, #0
 800288e:	d055      	beq.n	800293c <HAL_SPI_Init+0xb0>
{
 8002890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002892:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002894:	4604      	mov	r4, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d041      	beq.n	800291e <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800289a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800289c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a0:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028a2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80028a8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 80028ac:	2900      	cmp	r1, #0
 80028ae:	d03c      	beq.n	800292a <HAL_SPI_Init+0x9e>
 80028b0:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028b2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80028b6:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80028b8:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ba:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028bc:	68e1      	ldr	r1, [r4, #12]
 80028be:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80028c2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80028c6:	4303      	orrs	r3, r0
 80028c8:	6920      	ldr	r0, [r4, #16]
 80028ca:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 80028ce:	4038      	ands	r0, r7
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6961      	ldr	r1, [r4, #20]
 80028d4:	4303      	orrs	r3, r0
 80028d6:	69a0      	ldr	r0, [r4, #24]
 80028d8:	4031      	ands	r1, r6
 80028da:	430b      	orrs	r3, r1
 80028dc:	f400 7100 	and.w	r1, r0, #512	; 0x200
 80028e0:	430b      	orrs	r3, r1
 80028e2:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 80028e4:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028e8:	6a27      	ldr	r7, [r4, #32]
 80028ea:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80028ee:	430b      	orrs	r3, r1
 80028f0:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 80028f4:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028f6:	433b      	orrs	r3, r7
 80028f8:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 80028fa:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028fc:	0c00      	lsrs	r0, r0, #16
 80028fe:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8002902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002906:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002908:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800290a:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800290c:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 800290e:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002914:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002916:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002918:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 800291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800291e:	6842      	ldr	r2, [r0, #4]
 8002920:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002924:	d0bc      	beq.n	80028a0 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002926:	61c3      	str	r3, [r0, #28]
 8002928:	e7ba      	b.n	80028a0 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 800292a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800292e:	4620      	mov	r0, r4
 8002930:	f7fd feae 	bl	8000690 <HAL_SPI_MspInit>
 8002934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002936:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800293a:	e7ba      	b.n	80028b2 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 800293c:	2001      	movs	r0, #1
}
 800293e:	4770      	bx	lr

08002940 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	2800      	cmp	r0, #0
 8002942:	d05d      	beq.n	8002a00 <HAL_TIM_Base_Init+0xc0>
{
 8002944:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002946:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800294a:	4604      	mov	r4, r0
 800294c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002950:	2b00      	cmp	r3, #0
 8002952:	d03c      	beq.n	80029ce <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002956:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002958:	492a      	ldr	r1, [pc, #168]	; (8002a04 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800295a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800295e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002960:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002962:	d039      	beq.n	80029d8 <HAL_TIM_Base_Init+0x98>
 8002964:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002968:	d028      	beq.n	80029bc <HAL_TIM_Base_Init+0x7c>
 800296a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800296e:	428a      	cmp	r2, r1
 8002970:	d024      	beq.n	80029bc <HAL_TIM_Base_Init+0x7c>
 8002972:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002976:	428a      	cmp	r2, r1
 8002978:	d020      	beq.n	80029bc <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800297a:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800297c:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800297e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002984:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002986:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002988:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800298a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800298c:	2301      	movs	r3, #1
 800298e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002990:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002998:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800299c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80029a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80029b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029b8:	2000      	movs	r0, #0
}
 80029ba:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80029bc:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029c2:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ca:	430b      	orrs	r3, r1
 80029cc:	e7d5      	b.n	800297a <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 80029ce:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80029d2:	f7fd fe91 	bl	80006f8 <HAL_TIM_Base_MspInit>
 80029d6:	e7bd      	b.n	8002954 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80029d8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029de:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e8:	69a1      	ldr	r1, [r4, #24]
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80029f0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f2:	68e3      	ldr	r3, [r4, #12]
 80029f4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029f6:	6863      	ldr	r3, [r4, #4]
 80029f8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80029fa:	6963      	ldr	r3, [r4, #20]
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	e7c5      	b.n	800298c <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 8002a00:	2001      	movs	r0, #1
}
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00

08002a08 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002a08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d11f      	bne.n	8002a50 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a12:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a18:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1a:	490f      	ldr	r1, [pc, #60]	; (8002a58 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a20:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a22:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	d009      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x32>
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2a:	d006      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x32>
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <HAL_TIM_Base_Start_IT+0x54>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x32>
 8002a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d104      	bne.n	8002a44 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a40:	2a06      	cmp	r2, #6
 8002a42:	d007      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8002a44:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002a46:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	4770      	bx	lr
    return HAL_ERROR;
 8002a50:	2001      	movs	r0, #1
 8002a52:	4770      	bx	lr
  return HAL_OK;
 8002a54:	2000      	movs	r0, #0
}
 8002a56:	4770      	bx	lr
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40000400 	.word	0x40000400

08002a60 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002a60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d074      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0xf2>
{
 8002a68:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002a6c:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 8002a6e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8002a70:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002a78:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a7a:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a7c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8002a80:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8002a84:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8002a86:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a88:	d065      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0xf6>
 8002a8a:	d831      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x90>
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d048      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0xc2>
 8002a90:	d921      	bls.n	8002ad6 <HAL_TIM_ConfigClockSource+0x76>
 8002a92:	2b50      	cmp	r3, #80	; 0x50
 8002a94:	d116      	bne.n	8002ac4 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a96:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a98:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9c:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa0:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa2:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa4:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa6:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aae:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002ab2:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ab4:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8002ab6:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab8:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002abe:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac2:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8002ac4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ac6:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8002ac8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8002ad0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002ad2:	4618      	mov	r0, r3
}
 8002ad4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d002      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x80>
 8002ada:	d91e      	bls.n	8002b1a <HAL_TIM_ConfigClockSource+0xba>
 8002adc:	2b30      	cmp	r3, #48	; 0x30
 8002ade:	d1f1      	bne.n	8002ac4 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8002ae0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002aec:	6093      	str	r3, [r2, #8]
}
 8002aee:	e7e9      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8002af0:	2b70      	cmp	r3, #112	; 0x70
 8002af2:	d049      	beq.n	8002b88 <HAL_TIM_ConfigClockSource+0x128>
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af8:	d1e4      	bne.n	8002ac4 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002afa:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8002afe:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002b00:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b02:	432b      	orrs	r3, r5
 8002b04:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b08:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b0c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0e:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b10:	6893      	ldr	r3, [r2, #8]
 8002b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b16:	6093      	str	r3, [r2, #8]
      break;
 8002b18:	e7d4      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8002b1a:	f033 0110 	bics.w	r1, r3, #16
 8002b1e:	d1d1      	bne.n	8002ac4 <HAL_TIM_ConfigClockSource+0x64>
 8002b20:	e7de      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8002b22:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b24:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b26:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b28:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b30:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b32:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b3a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002b3e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002b40:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8002b42:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002b44:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b4a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002b4e:	6093      	str	r3, [r2, #8]
}
 8002b50:	e7b8      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8002b52:	2002      	movs	r0, #2
}
 8002b54:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b56:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b58:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b5e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b60:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b62:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8002b64:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b66:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b6e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b72:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002b76:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002b78:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002b7a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b80:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002b84:	6093      	str	r3, [r2, #8]
}
 8002b86:	e79d      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b88:	68cc      	ldr	r4, [r1, #12]
 8002b8a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002b8e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b90:	432b      	orrs	r3, r5
 8002b92:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b96:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b9a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002b9c:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002b9e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ba0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002ba4:	6093      	str	r3, [r2, #8]
      break;
 8002ba6:	e78d      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x64>

08002ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d026      	beq.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb2:	6803      	ldr	r3, [r0, #0]
{
 8002bb4:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002bba:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bbc:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bbe:	4d11      	ldr	r5, [pc, #68]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc4:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc6:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8002bc8:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8002bca:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bcc:	d009      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd2:	d006      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002bd4:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002bda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d104      	bne.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be2:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002be4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bea:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002bec:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bee:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8002bf0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8002bf8:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8002bfa:	4618      	mov	r0, r3
}
 8002bfc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002bfe:	2002      	movs	r0, #2
}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400

08002c0c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d061      	beq.n	8002cd4 <HAL_UART_Init+0xc8>
{
 8002c10:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c16:	4604      	mov	r4, r0
 8002c18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d051      	beq.n	8002cc4 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c20:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c22:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c24:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002c28:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c2a:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8002c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c30:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c32:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c34:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c36:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002c3a:	4301      	orrs	r1, r0
 8002c3c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002c3e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c40:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002c44:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c48:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002c4a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c4e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8002c58:	491f      	ldr	r1, [pc, #124]	; (8002cd8 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c5e:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8002c60:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c62:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8002c64:	d033      	beq.n	8002cce <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c66:	f7ff fdf1 	bl	800284c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c6a:	6863      	ldr	r3, [r4, #4]
 8002c6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7a:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c7e:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c80:	4816      	ldr	r0, [pc, #88]	; (8002cdc <HAL_UART_Init+0xd0>)
 8002c82:	fba0 c103 	umull	ip, r1, r0, r3
 8002c86:	0949      	lsrs	r1, r1, #5
 8002c88:	fb02 3311 	mls	r3, r2, r1, r3
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	3332      	adds	r3, #50	; 0x32
 8002c90:	fba0 2303 	umull	r2, r3, r0, r3
 8002c94:	0109      	lsls	r1, r1, #4
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8002c9c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9e:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8002ca0:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ca6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca8:	6953      	ldr	r3, [r2, #20]
 8002caa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002cae:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002cb0:	68d3      	ldr	r3, [r2, #12]
 8002cb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cb6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb8:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cba:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8002cc4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002cc8:	f7fd fd32 	bl	8000730 <HAL_UART_MspInit>
 8002ccc:	e7a8      	b.n	8002c20 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cce:	f7ff fdcd 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8002cd2:	e7ca      	b.n	8002c6a <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 8002cd4:	2001      	movs	r0, #1
}
 8002cd6:	4770      	bx	lr
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	51eb851f 	.word	0x51eb851f

08002ce0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ce0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d123      	bne.n	8002d30 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8002ce8:	b301      	cbz	r1, 8002d2c <HAL_UART_Receive_IT+0x4c>
 8002cea:	b1fa      	cbz	r2, 8002d2c <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8002cec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d01d      	beq.n	8002d30 <HAL_UART_Receive_IT+0x50>
{
 8002cf4:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf6:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cf8:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cfa:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8002cfe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8002d02:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d04:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d06:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d0a:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 8002d0c:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d0e:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8002d12:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d14:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d16:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8002d18:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d20:	68e3      	ldr	r3, [r4, #12]
 8002d22:	f043 0320 	orr.w	r3, r3, #32
 8002d26:	60e3      	str	r3, [r4, #12]
}
 8002d28:	bc30      	pop	{r4, r5}
 8002d2a:	4770      	bx	lr
      return HAL_ERROR;
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	4770      	bx	lr
    return HAL_BUSY;
 8002d30:	2002      	movs	r0, #2
}
 8002d32:	4770      	bx	lr

08002d34 <HAL_UART_TxCpltCallback>:
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

08002d38 <HAL_UART_ErrorCallback>:
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop

08002d3c <UART_DMAAbortOnError>:
{
 8002d3c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002d3e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d40:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002d42:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d44:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002d46:	f7ff fff7 	bl	8002d38 <HAL_UART_ErrorCallback>
}
 8002d4a:	bd08      	pop	{r3, pc}

08002d4c <HAL_UARTEx_RxEventCallback>:
}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop

08002d50 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d50:	6883      	ldr	r3, [r0, #8]
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	d03b      	beq.n	8002dd0 <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d58:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02f      	beq.n	8002dbe <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d5e:	6803      	ldr	r3, [r0, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d66:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002d68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002d6e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002d76:	bb4b      	cbnz	r3, 8002dcc <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002d78:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8002d7a:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d7c:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002d7e:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d80:	68d1      	ldr	r1, [r2, #12]
 8002d82:	f021 0120 	bic.w	r1, r1, #32
 8002d86:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d88:	68d1      	ldr	r1, [r2, #12]
 8002d8a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002d8e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d90:	6951      	ldr	r1, [r2, #20]
 8002d92:	f021 0101 	bic.w	r1, r1, #1
 8002d96:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002d98:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d9c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002d9e:	2901      	cmp	r1, #1
 8002da0:	d121      	bne.n	8002de6 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da2:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da4:	68d1      	ldr	r1, [r2, #12]
 8002da6:	f021 0110 	bic.w	r1, r1, #16
 8002daa:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dac:	6811      	ldr	r1, [r2, #0]
 8002dae:	06c9      	lsls	r1, r1, #27
 8002db0:	d423      	bmi.n	8002dfa <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002db2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002db4:	f7ff ffca 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
}
 8002db8:	2000      	movs	r0, #0
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dbe:	6903      	ldr	r3, [r0, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1cc      	bne.n	8002d5e <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dc4:	6803      	ldr	r3, [r0, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	7013      	strb	r3, [r2, #0]
 8002dca:	e7cd      	b.n	8002d68 <UART_Receive_IT.part.0+0x18>
}
 8002dcc:	2000      	movs	r0, #0
 8002dce:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd0:	6903      	ldr	r3, [r0, #16]
 8002dd2:	b96b      	cbnz	r3, 8002df0 <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dd4:	6802      	ldr	r2, [r0, #0]
 8002dd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002dd8:	6852      	ldr	r2, [r2, #4]
 8002dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dde:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8002de2:	6283      	str	r3, [r0, #40]	; 0x28
 8002de4:	e7c3      	b.n	8002d6e <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8002de6:	f7fd fb13 	bl	8000410 <HAL_UART_RxCpltCallback>
}
 8002dea:	2000      	movs	r0, #0
 8002dec:	b002      	add	sp, #8
 8002dee:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002df0:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002df2:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	7013      	strb	r3, [r2, #0]
 8002df8:	e7b6      	b.n	8002d68 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	6813      	ldr	r3, [r2, #0]
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	6853      	ldr	r3, [r2, #4]
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	9b01      	ldr	r3, [sp, #4]
 8002e06:	e7d4      	b.n	8002db2 <UART_Receive_IT.part.0+0x62>

08002e08 <HAL_UART_IRQHandler>:
{
 8002e08:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e0a:	6803      	ldr	r3, [r0, #0]
{
 8002e0c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e0e:	681a      	ldr	r2, [r3, #0]
{
 8002e10:	b082      	sub	sp, #8
  if (errorflags == RESET)
 8002e12:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e14:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e16:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002e18:	d14e      	bne.n	8002eb8 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e1a:	0696      	lsls	r6, r2, #26
 8002e1c:	d502      	bpl.n	8002e24 <HAL_UART_IRQHandler+0x1c>
 8002e1e:	068d      	lsls	r5, r1, #26
 8002e20:	f100 8090 	bmi.w	8002f44 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e24:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e26:	2801      	cmp	r0, #1
 8002e28:	d00b      	beq.n	8002e42 <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e2a:	0616      	lsls	r6, r2, #24
 8002e2c:	d502      	bpl.n	8002e34 <HAL_UART_IRQHandler+0x2c>
 8002e2e:	060d      	lsls	r5, r1, #24
 8002e30:	f100 8092 	bmi.w	8002f58 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e34:	0650      	lsls	r0, r2, #25
 8002e36:	d502      	bpl.n	8002e3e <HAL_UART_IRQHandler+0x36>
 8002e38:	064a      	lsls	r2, r1, #25
 8002e3a:	f100 80ab 	bmi.w	8002f94 <HAL_UART_IRQHandler+0x18c>
}
 8002e3e:	b002      	add	sp, #8
 8002e40:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e42:	06d5      	lsls	r5, r2, #27
 8002e44:	d5f1      	bpl.n	8002e2a <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e46:	06c8      	lsls	r0, r1, #27
 8002e48:	d5ef      	bpl.n	8002e2a <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	9101      	str	r1, [sp, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	9201      	str	r2, [sp, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	9201      	str	r2, [sp, #4]
 8002e56:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8002e5e:	f000 80d2 	beq.w	8003006 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002e64:	6802      	ldr	r2, [r0, #0]
 8002e66:	6852      	ldr	r2, [r2, #4]
 8002e68:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8002e6a:	2a00      	cmp	r2, #0
 8002e6c:	d0e7      	beq.n	8002e3e <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e6e:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8002e70:	4295      	cmp	r5, r2
 8002e72:	d9e4      	bls.n	8002e3e <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e74:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 8002e76:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e78:	2e20      	cmp	r6, #32
 8002e7a:	d016      	beq.n	8002eaa <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e84:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e94:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8002e96:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9a:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	f022 0210 	bic.w	r2, r2, #16
 8002ea2:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ea4:	f7fe fd4e 	bl	8001944 <HAL_DMA_Abort>
 8002ea8:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eaa:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8002eac:	4620      	mov	r0, r4
 8002eae:	1a69      	subs	r1, r5, r1
 8002eb0:	b289      	uxth	r1, r1
 8002eb2:	f7ff ff4b 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
 8002eb6:	e7c2      	b.n	8002e3e <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eb8:	f005 0501 	and.w	r5, r5, #1
 8002ebc:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8002ec0:	4328      	orrs	r0, r5
 8002ec2:	d0af      	beq.n	8002e24 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ec4:	07d0      	lsls	r0, r2, #31
 8002ec6:	d505      	bpl.n	8002ed4 <HAL_UART_IRQHandler+0xcc>
 8002ec8:	05ce      	lsls	r6, r1, #23
 8002eca:	d503      	bpl.n	8002ed4 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ecc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002ece:	f040 0001 	orr.w	r0, r0, #1
 8002ed2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed4:	0750      	lsls	r0, r2, #29
 8002ed6:	d52c      	bpl.n	8002f32 <HAL_UART_IRQHandler+0x12a>
 8002ed8:	b12d      	cbz	r5, 8002ee6 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eda:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002edc:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ede:	f040 0002 	orr.w	r0, r0, #2
 8002ee2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ee4:	d429      	bmi.n	8002f3a <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ee6:	0716      	lsls	r6, r2, #28
 8002ee8:	d507      	bpl.n	8002efa <HAL_UART_IRQHandler+0xf2>
 8002eea:	f001 0020 	and.w	r0, r1, #32
 8002eee:	4328      	orrs	r0, r5
 8002ef0:	d003      	beq.n	8002efa <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ef2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002ef4:	f040 0008 	orr.w	r0, r0, #8
 8002ef8:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002efa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d09e      	beq.n	8002e3e <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f00:	0690      	lsls	r0, r2, #26
 8002f02:	d509      	bpl.n	8002f18 <HAL_UART_IRQHandler+0x110>
 8002f04:	068a      	lsls	r2, r1, #26
 8002f06:	d507      	bpl.n	8002f18 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f08:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002f0c:	2a22      	cmp	r2, #34	; 0x22
 8002f0e:	d103      	bne.n	8002f18 <HAL_UART_IRQHandler+0x110>
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7ff ff1d 	bl	8002d50 <UART_Receive_IT.part.0>
 8002f16:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f18:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f1a:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f1c:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f20:	f005 0508 	and.w	r5, r5, #8
 8002f24:	4315      	orrs	r5, r2
 8002f26:	d140      	bne.n	8002faa <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f7ff ff05 	bl	8002d38 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2e:	6425      	str	r5, [r4, #64]	; 0x40
 8002f30:	e785      	b.n	8002e3e <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f32:	0790      	lsls	r0, r2, #30
 8002f34:	d5d7      	bpl.n	8002ee6 <HAL_UART_IRQHandler+0xde>
 8002f36:	2d00      	cmp	r5, #0
 8002f38:	d0d5      	beq.n	8002ee6 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f3c:	f040 0004 	orr.w	r0, r0, #4
 8002f40:	6420      	str	r0, [r4, #64]	; 0x40
 8002f42:	e7d0      	b.n	8002ee6 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f44:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002f48:	2b22      	cmp	r3, #34	; 0x22
 8002f4a:	f47f af78 	bne.w	8002e3e <HAL_UART_IRQHandler+0x36>
}
 8002f4e:	b002      	add	sp, #8
 8002f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f54:	f7ff befc 	b.w	8002d50 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f58:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002f5c:	2a21      	cmp	r2, #33	; 0x21
 8002f5e:	f47f af6e 	bne.w	8002e3e <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f62:	68a2      	ldr	r2, [r4, #8]
 8002f64:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002f68:	d06e      	beq.n	8003048 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f6a:	6a22      	ldr	r2, [r4, #32]
 8002f6c:	1c51      	adds	r1, r2, #1
 8002f6e:	6221      	str	r1, [r4, #32]
 8002f70:	7812      	ldrb	r2, [r2, #0]
 8002f72:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002f74:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002f76:	3a01      	subs	r2, #1
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002f7c:	2a00      	cmp	r2, #0
 8002f7e:	f47f af5e 	bne.w	8002e3e <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f88:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e754      	b.n	8002e3e <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8002f94:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f96:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002f98:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002fa0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8002fa4:	f7ff fec6 	bl	8002d34 <HAL_UART_TxCpltCallback>
    return;
 8002fa8:	e749      	b.n	8002e3e <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fb0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fbc:	2a01      	cmp	r2, #1
 8002fbe:	d103      	bne.n	8002fc8 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	f022 0210 	bic.w	r2, r2, #16
 8002fc6:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8002fca:	2120      	movs	r1, #32
 8002fcc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd0:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	0656      	lsls	r6, r2, #25
 8002fd6:	d512      	bpl.n	8002ffe <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002fda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002fe2:	b160      	cbz	r0, 8002ffe <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_UART_IRQHandler+0x258>)
 8002fe6:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fe8:	f7fe fcce 	bl	8001988 <HAL_DMA_Abort_IT>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	f43f af26 	beq.w	8002e3e <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ff2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002ff4:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8002ff6:	b002      	add	sp, #8
 8002ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ffc:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff fe9a 	bl	8002d38 <HAL_UART_ErrorCallback>
 8003004:	e71b      	b.n	8002e3e <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003006:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8003008:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800300a:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800300c:	b289      	uxth	r1, r1
 800300e:	2900      	cmp	r1, #0
 8003010:	f43f af15 	beq.w	8002e3e <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003014:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003016:	1a08      	subs	r0, r1, r0
 8003018:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800301a:	2900      	cmp	r1, #0
 800301c:	f43f af0f 	beq.w	8002e3e <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 8003020:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003022:	68d8      	ldr	r0, [r3, #12]
 8003024:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8003028:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302a:	6958      	ldr	r0, [r3, #20]
 800302c:	f020 0001 	bic.w	r0, r0, #1
 8003030:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8003032:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003038:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800303a:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303c:	f022 0210 	bic.w	r2, r2, #16
 8003040:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003042:	f7ff fe83 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
 8003046:	e6fa      	b.n	8002e3e <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003048:	6922      	ldr	r2, [r4, #16]
 800304a:	2a00      	cmp	r2, #0
 800304c:	d18d      	bne.n	8002f6a <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800304e:	6a22      	ldr	r2, [r4, #32]
 8003050:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003054:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003058:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800305a:	6222      	str	r2, [r4, #32]
 800305c:	e78a      	b.n	8002f74 <HAL_UART_IRQHandler+0x16c>
 800305e:	bf00      	nop
 8003060:	08002d3d 	.word	0x08002d3d

08003064 <__libc_init_array>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	2600      	movs	r6, #0
 8003068:	4d0c      	ldr	r5, [pc, #48]	; (800309c <__libc_init_array+0x38>)
 800306a:	4c0d      	ldr	r4, [pc, #52]	; (80030a0 <__libc_init_array+0x3c>)
 800306c:	1b64      	subs	r4, r4, r5
 800306e:	10a4      	asrs	r4, r4, #2
 8003070:	42a6      	cmp	r6, r4
 8003072:	d109      	bne.n	8003088 <__libc_init_array+0x24>
 8003074:	f000 f822 	bl	80030bc <_init>
 8003078:	2600      	movs	r6, #0
 800307a:	4d0a      	ldr	r5, [pc, #40]	; (80030a4 <__libc_init_array+0x40>)
 800307c:	4c0a      	ldr	r4, [pc, #40]	; (80030a8 <__libc_init_array+0x44>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	42a6      	cmp	r6, r4
 8003084:	d105      	bne.n	8003092 <__libc_init_array+0x2e>
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	f855 3b04 	ldr.w	r3, [r5], #4
 800308c:	4798      	blx	r3
 800308e:	3601      	adds	r6, #1
 8003090:	e7ee      	b.n	8003070 <__libc_init_array+0xc>
 8003092:	f855 3b04 	ldr.w	r3, [r5], #4
 8003096:	4798      	blx	r3
 8003098:	3601      	adds	r6, #1
 800309a:	e7f2      	b.n	8003082 <__libc_init_array+0x1e>
 800309c:	08003410 	.word	0x08003410
 80030a0:	08003410 	.word	0x08003410
 80030a4:	08003410 	.word	0x08003410
 80030a8:	08003414 	.word	0x08003414

080030ac <memset>:
 80030ac:	4603      	mov	r3, r0
 80030ae:	4402      	add	r2, r0
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <memset+0xa>
 80030b4:	4770      	bx	lr
 80030b6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ba:	e7f9      	b.n	80030b0 <memset+0x4>

080030bc <_init>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	bf00      	nop
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr

080030c8 <_fini>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr
