
fm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d4  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f4  080061f4  000208a8  2**0
                  CONTENTS
  4 .ARM          00000000  080061f4  080061f4  000208a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061f4  080061f4  000208a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008a8  20000000  080061fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc0  200008a8  08006aa4  000208a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001568  08006aa4  00021568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000208a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee76  00000000  00000000  000208d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bbe  00000000  00000000  0003f747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016e78  00000000  00000000  00043305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  0005a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003d70  00000000  00000000  0005b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c33  00000000  00000000  0005edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021889  00000000  00000000  00077a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e92a  00000000  00000000  00099294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127bbe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003940  00000000  00000000  00127c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200008a8 	.word	0x200008a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c08 	.word	0x08004c08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200008ac 	.word	0x200008ac
 8000148:	08004c08 	.word	0x08004c08

0800014c <init_audio_out>:
 */

#include "audio_out.h"

void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
	audio_spi = hspi->Instance;
 800014c:	6803      	ldr	r3, [r0, #0]
void init_audio_out(SPI_HandleTypeDef* hspi, TIM_HandleTypeDef *htim) {
 800014e:	b510      	push	{r4, lr}
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000150:	681a      	ldr	r2, [r3, #0]
	audio_spi = hspi->Instance;
 8000152:	4c06      	ldr	r4, [pc, #24]	; (800016c <init_audio_out+0x20>)
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 8000154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	audio_spi = hspi->Instance;
 8000158:	6023      	str	r3, [r4, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015a:	4608      	mov	r0, r1
	audio_spi->CR1 |= SPI_CR1_SPE;					//enable SPI
 800015c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015e:	f004 fba3 	bl	80048a8 <HAL_TIM_Base_Start_IT>
	output_volume = 0x3800;
 8000162:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000166:	4b02      	ldr	r3, [pc, #8]	; (8000170 <init_audio_out+0x24>)
 8000168:	801a      	strh	r2, [r3, #0]
}
 800016a:	bd10      	pop	{r4, pc}
 800016c:	20000a9c 	.word	0x20000a9c
 8000170:	20000ac0 	.word	0x20000ac0

08000174 <update_volume>:

void update_volume() {
	AUDIO_GPIO->BSRR = (AUDIO_SPI_CS_PIN << 16);	//pull CS pin low
 8000174:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
void update_volume() {
 8000178:	b538      	push	{r3, r4, r5, lr}
	AUDIO_GPIO->BSRR = (AUDIO_SPI_CS_PIN << 16);	//pull CS pin low
 800017a:	4c07      	ldr	r4, [pc, #28]	; (8000198 <update_volume+0x24>)
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 800017c:	4d07      	ldr	r5, [pc, #28]	; (800019c <update_volume+0x28>)
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <update_volume+0x2c>)
	AUDIO_GPIO->BSRR = (AUDIO_SPI_CS_PIN << 16);	//pull CS pin low
 8000180:	6122      	str	r2, [r4, #16]
	audio_spi->DR = output_volume;					//write out data to SPI (assume SPI is not busy)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	882a      	ldrh	r2, [r5, #0]
 8000186:	60da      	str	r2, [r3, #12]
	output_volume = synth_sample();
 8000188:	f001 f902 	bl	8001390 <synth_sample>
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 800018c:	2310      	movs	r3, #16
	output_volume |= 0b0011000000000000;			//MCP4921 DAC: bit 12 = on/off, bit 13 = gain 1x/2x
 800018e:	f440 5040 	orr.w	r0, r0, #12288	; 0x3000
 8000192:	8028      	strh	r0, [r5, #0]
	AUDIO_GPIO->BSRR = AUDIO_SPI_CS_PIN;			//pull CS pin high
 8000194:	6123      	str	r3, [r4, #16]
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	40010800 	.word	0x40010800
 800019c:	20000ac0 	.word	0x20000ac0
 80001a0:	20000a9c 	.word	0x20000a9c

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a8:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2601      	movs	r6, #1
 80001ae:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b0:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 80001b4:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80001c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ca:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001cc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d0:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001d4:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f003 ffbb 	bl	8004150 <HAL_RCC_OscConfig>
 80001da:	b108      	cbz	r0, 80001e0 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001de:	e7fe      	b.n	80001de <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	f04f 080f 	mov.w	r8, #15
 80001e6:	f04f 0902 	mov.w	r9, #2
 80001ea:	2600      	movs	r6, #0
 80001ec:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f0:	4621      	mov	r1, r4
 80001f2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	e9cd 8900 	strd	r8, r9, [sp]
 80001f8:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fe:	f004 f9a7 	bl	8004550 <HAL_RCC_ClockConfig>
 8000202:	b108      	cbz	r0, 8000208 <SystemClock_Config+0x64>
 8000204:	b672      	cpsid	i
  while (1)
 8000206:	e7fe      	b.n	8000206 <SystemClock_Config+0x62>
}
 8000208:	b010      	add	sp, #64	; 0x40
 800020a:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800020e:	bf00      	nop

08000210 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000210:	2500      	movs	r5, #0
{
 8000212:	b580      	push	{r7, lr}
 8000214:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8000216:	f002 fa35 	bl	8002684 <HAL_Init>
  SystemClock_Config();
 800021a:	f7ff ffc3 	bl	80001a4 <SystemClock_Config>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000220:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8000224:	e9cd 5508 	strd	r5, r5, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000228:	4c7b      	ldr	r4, [pc, #492]	; (8000418 <main+0x208>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800022a:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022c:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800022e:	487b      	ldr	r0, [pc, #492]	; (800041c <main+0x20c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	61a3      	str	r3, [r4, #24]
 8000236:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000238:	4616      	mov	r6, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000242:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000244:	f04f 0810 	mov.w	r8, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	61a3      	str	r3, [r4, #24]
 800024e:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000250:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000254:	f003 0308 	and.w	r3, r3, #8
 8000258:	9303      	str	r3, [sp, #12]
 800025a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800025c:	f002 fd1a 	bl	8002c94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000260:	2200      	movs	r2, #0
 8000262:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000264:	486d      	ldr	r0, [pc, #436]	; (800041c <main+0x20c>)
 8000266:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000268:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800026c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000270:	f002 fc04 	bl	8002a7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_5;
 8000274:	f245 0228 	movw	r2, #20520	; 0x5028
 8000278:	4b69      	ldr	r3, [pc, #420]	; (8000420 <main+0x210>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027a:	486a      	ldr	r0, [pc, #424]	; (8000424 <main+0x214>)
 800027c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_5;
 800027e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000282:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000284:	f002 fbfa 	bl	8002a7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6;
 8000288:	f24a 0250 	movw	r2, #41040	; 0xa050
 800028c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028e:	4865      	ldr	r0, [pc, #404]	; (8000424 <main+0x214>)
 8000290:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6;
 8000292:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000296:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000298:	f002 fbf0 	bl	8002a7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800029c:	f44f 7260 	mov.w	r2, #896	; 0x380
 80002a0:	4b61      	ldr	r3, [pc, #388]	; (8000428 <main+0x218>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a2:	4860      	ldr	r0, [pc, #384]	; (8000424 <main+0x214>)
 80002a4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80002a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ac:	f002 fbe6 	bl	8002a7c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80002b0:	462a      	mov	r2, r5
 80002b2:	4631      	mov	r1, r6
 80002b4:	2009      	movs	r0, #9
 80002b6:	f002 fa2d 	bl	8002714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80002ba:	2009      	movs	r0, #9
 80002bc:	f002 fa62 	bl	8002784 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80002c0:	462a      	mov	r2, r5
 80002c2:	4631      	mov	r1, r6
 80002c4:	2017      	movs	r0, #23
 80002c6:	f002 fa25 	bl	8002714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002ca:	2017      	movs	r0, #23
 80002cc:	f002 fa5a 	bl	8002784 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80002d0:	462a      	mov	r2, r5
 80002d2:	4631      	mov	r1, r6
 80002d4:	2028      	movs	r0, #40	; 0x28
 80002d6:	f002 fa1d 	bl	8002714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002da:	2028      	movs	r0, #40	; 0x28
 80002dc:	f002 fa52 	bl	8002784 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002e0:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002e2:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002e4:	4333      	orrs	r3, r6
 80002e6:	6163      	str	r3, [r4, #20]
 80002e8:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002ea:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ec:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002ee:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80002f4:	f002 fa0e 	bl	8002714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002f8:	200e      	movs	r0, #14
 80002fa:	f002 fa43 	bl	8002784 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 31250;
 80002fe:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart1.Init.Mode = UART_MODE_RX;
 8000302:	2304      	movs	r3, #4
  huart1.Instance = USART1;
 8000304:	4c49      	ldr	r4, [pc, #292]	; (800042c <main+0x21c>)
 8000306:	494a      	ldr	r1, [pc, #296]	; (8000430 <main+0x220>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000308:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 800030a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800030e:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart1.Init.BaudRate = 31250;
 8000312:	e9c4 1200 	strd	r1, r2, [r4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000316:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000318:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031a:	f004 fbc7 	bl	8004aac <HAL_UART_Init>
 800031e:	b108      	cbz	r0, 8000324 <main+0x114>
 8000320:	b672      	cpsid	i
  while (1)
 8000322:	e7fe      	b.n	8000322 <main+0x112>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000324:	4603      	mov	r3, r0
  htim2.Instance = TIM2;
 8000326:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1451-1;
 800032a:	f240 52aa 	movw	r2, #1450	; 0x5aa
  htim2.Instance = TIM2;
 800032e:	4f41      	ldr	r7, [pc, #260]	; (8000434 <main+0x224>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000330:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8000334:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000338:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800033a:	4638      	mov	r0, r7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	e9c7 3301 	strd	r3, r3, [r7, #4]
  htim2.Instance = TIM2;
 8000340:	6039      	str	r1, [r7, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	613b      	str	r3, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000344:	61bb      	str	r3, [r7, #24]
  htim2.Init.Period = 1451-1;
 8000346:	60fa      	str	r2, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000348:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034a:	f004 fa49 	bl	80047e0 <HAL_TIM_Base_Init>
 800034e:	b108      	cbz	r0, 8000354 <main+0x144>
 8000350:	b672      	cpsid	i
  while (1)
 8000352:	e7fe      	b.n	8000352 <main+0x142>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000358:	4638      	mov	r0, r7
 800035a:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800035e:	f004 facf 	bl	8004900 <HAL_TIM_ConfigClockSource>
 8000362:	b108      	cbz	r0, 8000368 <main+0x158>
 8000364:	b672      	cpsid	i
  while (1)
 8000366:	e7fe      	b.n	8000366 <main+0x156>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000368:	2300      	movs	r3, #0
 800036a:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036c:	4638      	mov	r0, r7
 800036e:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000374:	f004 fb68 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000378:	4603      	mov	r3, r0
 800037a:	b9e0      	cbnz	r0, 80003b6 <main+0x1a6>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037c:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000380:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000384:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 8000386:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000388:	f44f 6600 	mov.w	r6, #2048	; 0x800
  hspi1.Instance = SPI1;
 800038c:	4d2a      	ldr	r5, [pc, #168]	; (8000438 <main+0x228>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800038e:	e9c5 c301 	strd	ip, r3, [r5, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000392:	e9c5 3304 	strd	r3, r3, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000396:	e9c5 3308 	strd	r3, r3, [r5, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800039a:	62ab      	str	r3, [r5, #40]	; 0x28
  hspi1.Instance = SPI1;
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <main+0x22c>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039e:	61a8      	str	r0, [r5, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a0:	4628      	mov	r0, r5
  hspi1.Instance = SPI1;
 80003a2:	602b      	str	r3, [r5, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003a4:	60ee      	str	r6, [r5, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003a6:	61e9      	str	r1, [r5, #28]
  hspi1.Init.CRCPolynomial = 10;
 80003a8:	62ea      	str	r2, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003aa:	f004 f9bf 	bl	800472c <HAL_SPI_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	b118      	cbz	r0, 80003ba <main+0x1aa>
 80003b2:	b672      	cpsid	i
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <main+0x1a4>
 80003b6:	b672      	cpsid	i
 80003b8:	e7fe      	b.n	80003b8 <main+0x1a8>
  hi2c2.Init.ClockSpeed = 10000;
 80003ba:	f242 7010 	movw	r0, #10000	; 0x2710
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Instance = I2C2;
 80003c2:	4e1f      	ldr	r6, [pc, #124]	; (8000440 <main+0x230>)
 80003c4:	491f      	ldr	r1, [pc, #124]	; (8000444 <main+0x234>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003c6:	e9c6 0301 	strd	r0, r3, [r6, #4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003ca:	4630      	mov	r0, r6
  hi2c2.Init.OwnAddress2 = 0;
 80003cc:	e9c6 3305 	strd	r3, r3, [r6, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d0:	e9c6 3307 	strd	r3, r3, [r6, #28]
  hi2c2.Init.OwnAddress1 = 0;
 80003d4:	60f3      	str	r3, [r6, #12]
  hi2c2.Instance = I2C2;
 80003d6:	6031      	str	r1, [r6, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d8:	6132      	str	r2, [r6, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003da:	f002 fcf7 	bl	8002dcc <HAL_I2C_Init>
 80003de:	b108      	cbz	r0, 80003e4 <main+0x1d4>
 80003e0:	b672      	cpsid	i
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <main+0x1d2>
  init_midi(&huart1);
 80003e4:	4620      	mov	r0, r4
 80003e6:	f000 f8b5 	bl	8000554 <init_midi>
  init_synth();
 80003ea:	f000 fce5 	bl	8000db8 <init_synth>
  init_audio_out(&hspi1, &htim2);
 80003ee:	4628      	mov	r0, r5
 80003f0:	4639      	mov	r1, r7
 80003f2:	f7ff feab 	bl	800014c <init_audio_out>
  init_ui(&hi2c2);
 80003f6:	4630      	mov	r0, r6
 80003f8:	f001 fea6 	bl	8002148 <init_ui>
 80003fc:	4e12      	ldr	r6, [pc, #72]	; (8000448 <main+0x238>)
 80003fe:	4d13      	ldr	r5, [pc, #76]	; (800044c <main+0x23c>)
	if (midi_buffer_read != midi_buffer_write) {
 8000400:	7832      	ldrb	r2, [r6, #0]
 8000402:	782b      	ldrb	r3, [r5, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d0fb      	beq.n	8000400 <main+0x1f0>
		process_midi_byte(&huart1);
 8000408:	4620      	mov	r0, r4
 800040a:	f000 f8c9 	bl	80005a0 <process_midi_byte>
	if (midi_buffer_read != midi_buffer_write) {
 800040e:	7832      	ldrb	r2, [r6, #0]
 8000410:	782b      	ldrb	r3, [r5, #0]
 8000412:	429a      	cmp	r2, r3
 8000414:	d0f4      	beq.n	8000400 <main+0x1f0>
 8000416:	e7f7      	b.n	8000408 <main+0x1f8>
 8000418:	40021000 	.word	0x40021000
 800041c:	40010800 	.word	0x40010800
 8000420:	10210000 	.word	0x10210000
 8000424:	40010c00 	.word	0x40010c00
 8000428:	10110000 	.word	0x10110000
 800042c:	20000f74 	.word	0x20000f74
 8000430:	40013800 	.word	0x40013800
 8000434:	2000137c 	.word	0x2000137c
 8000438:	20001324 	.word	0x20001324
 800043c:	40013000 	.word	0x40013000
 8000440:	20000acc 	.word	0x20000acc
 8000444:	40005800 	.word	0x40005800
 8000448:	200013c4 	.word	0x200013c4
 800044c:	20000bf8 	.word	0x20000bf8

08000450 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin) {
 8000450:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8000454:	d038      	beq.n	80004c8 <HAL_GPIO_EXTI_Callback+0x78>
 8000456:	d806      	bhi.n	8000466 <HAL_GPIO_EXTI_Callback+0x16>
 8000458:	2820      	cmp	r0, #32
 800045a:	d038      	beq.n	80004ce <HAL_GPIO_EXTI_Callback+0x7e>
 800045c:	2880      	cmp	r0, #128	; 0x80
 800045e:	d119      	bne.n	8000494 <HAL_GPIO_EXTI_Callback+0x44>
		fsm(pb_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f001 bec5 	b.w	80021f0 <fsm>
	switch (GPIO_Pin) {
 8000466:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800046a:	d03e      	beq.n	80004ea <HAL_GPIO_EXTI_Callback+0x9a>
 800046c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000470:	d122      	bne.n	80004b8 <HAL_GPIO_EXTI_Callback+0x68>
uint8_t inc_dec;
uint8_t temp[MAX_PARAMS];

void init_ui(I2C_HandleTypeDef* hi2c);
void fsm(input key);
static inline void fsm_change_op(uint8_t op) { fsm_op = op; };
 8000472:	2101      	movs	r1, #1
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT1_A | UI_ROT1_B)) == (UI_ROT1_A | UI_ROT1_B)
 8000476:	4a25      	ldr	r2, [pc, #148]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000478:	7019      	strb	r1, [r3, #0]
 800047a:	6893      	ldr	r3, [r2, #8]
 800047c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000480:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000484:	d003      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT1_A | UI_ROT1_B))) {
 8000486:	6893      	ldr	r3, [r2, #8]
 8000488:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800048c:	d111      	bne.n	80004b2 <HAL_GPIO_EXTI_Callback+0x62>
			fsm(rot_dec);
 800048e:	2004      	movs	r0, #4
 8000490:	f001 beae 	b.w	80021f0 <fsm>
	switch (GPIO_Pin) {
 8000494:	2808      	cmp	r0, #8
 8000496:	d115      	bne.n	80004c4 <HAL_GPIO_EXTI_Callback+0x74>
 8000498:	2102      	movs	r1, #2
 800049a:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT2_A | UI_ROT2_B)) == (UI_ROT2_A | UI_ROT2_B)
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 800049e:	7019      	strb	r1, [r3, #0]
 80004a0:	6893      	ldr	r3, [r2, #8]
 80004a2:	f003 0318 	and.w	r3, r3, #24
 80004a6:	2b18      	cmp	r3, #24
 80004a8:	d0f1      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT2_A | UI_ROT2_B))) {
 80004aa:	6893      	ldr	r3, [r2, #8]
 80004ac:	f013 0f18 	tst.w	r3, #24
 80004b0:	d0ed      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			fsm(rot_inc);
 80004b2:	2003      	movs	r0, #3
 80004b4:	f001 be9c 	b.w	80021f0 <fsm>
	switch (GPIO_Pin) {
 80004b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80004bc:	d103      	bne.n	80004c6 <HAL_GPIO_EXTI_Callback+0x76>
		fsm(pb_2);
 80004be:	2002      	movs	r0, #2
 80004c0:	f001 be96 	b.w	80021f0 <fsm>
 80004c4:	4770      	bx	lr
 80004c6:	4770      	bx	lr
		fsm(pb_1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f001 be91 	b.w	80021f0 <fsm>
 80004ce:	2103      	movs	r1, #3
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT3_A | UI_ROT3_B)) == (UI_ROT3_A | UI_ROT3_B)
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 80004d4:	7019      	strb	r1, [r3, #0]
 80004d6:	6893      	ldr	r3, [r2, #8]
 80004d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80004dc:	2b60      	cmp	r3, #96	; 0x60
 80004de:	d0d6      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT3_A | UI_ROT3_B))) {
 80004e0:	6893      	ldr	r3, [r2, #8]
 80004e2:	f013 0f60 	tst.w	r3, #96	; 0x60
 80004e6:	d0d2      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
 80004e8:	e7e3      	b.n	80004b2 <HAL_GPIO_EXTI_Callback+0x62>
 80004ea:	2100      	movs	r1, #0
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_GPIO_EXTI_Callback+0xb8>)
		if ((UI_ROT_GPIO->IDR & (UI_ROT0_A | UI_ROT0_B)) == (UI_ROT0_A | UI_ROT0_B)
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_GPIO_EXTI_Callback+0xbc>)
 80004f0:	7019      	strb	r1, [r3, #0]
 80004f2:	6893      	ldr	r3, [r2, #8]
 80004f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80004f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80004fc:	d0c7      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
			|| !(UI_ROT_GPIO->IDR & (UI_ROT0_A | UI_ROT0_B))) {
 80004fe:	6893      	ldr	r3, [r2, #8]
 8000500:	f413 5f40 	tst.w	r3, #12288	; 0x3000
 8000504:	d0c3      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x3e>
 8000506:	e7d4      	b.n	80004b2 <HAL_GPIO_EXTI_Callback+0x62>
 8000508:	20000ac8 	.word	0x20000ac8
 800050c:	40010c00 	.word	0x40010c00

08000510 <midi_read>:
	uint8_t midi_uart_stat = midi_uart->SR;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <midi_read+0x28>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
	if ((midi_uart_stat & USART_SR_PE) |
 8000516:	0792      	lsls	r2, r2, #30
 8000518:	d10b      	bne.n	8000532 <midi_read+0x22>
void midi_read() {
 800051a:	b410      	push	{r4}
	midi_buffer[midi_buffer_write] = midi_uart->DR;
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <midi_read+0x2c>)
 800051e:	685c      	ldr	r4, [r3, #4]
 8000520:	7811      	ldrb	r1, [r2, #0]
	++midi_buffer_write;
 8000522:	7813      	ldrb	r3, [r2, #0]
	midi_buffer[midi_buffer_write] = midi_uart->DR;
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <midi_read+0x30>)
	++midi_buffer_write;
 8000526:	3301      	adds	r3, #1
 8000528:	b2db      	uxtb	r3, r3
	midi_buffer[midi_buffer_write] = midi_uart->DR;
 800052a:	5444      	strb	r4, [r0, r1]
	++midi_buffer_write;
 800052c:	7013      	strb	r3, [r2, #0]
}
 800052e:	bc10      	pop	{r4}
 8000530:	4770      	bx	lr
		midi_uart->DR;
 8000532:	685b      	ldr	r3, [r3, #4]
		reset();
 8000534:	f000 b8ca 	b.w	80006cc <reset>
 8000538:	20001184 	.word	0x20001184
 800053c:	20000bf8 	.word	0x20000bf8
 8000540:	20000fb8 	.word	0x20000fb8

08000544 <sample>:
	TIM2->SR = 0;
 8000544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
	update_volume();
 800054c:	f7ff be12 	b.w	8000174 <update_volume>

08000550 <Error_Handler>:
 8000550:	b672      	cpsid	i
  while (1)
 8000552:	e7fe      	b.n	8000552 <Error_Handler+0x2>

08000554 <init_midi>:
 *      Author: Tennyson Cheng
 */

#include "midi.h"

void init_midi(UART_HandleTypeDef* huart) {
 8000554:	b430      	push	{r4, r5}
	midi_uart = huart->Instance;
	data[0] = -1;
 8000556:	24ff      	movs	r4, #255	; 0xff
	data[1] = -1;
	for (uint8_t i = 0; i < RING_BUFFER_SIZE; i++) {
 8000558:	2300      	movs	r3, #0
		midi_buffer[i] = -1;
 800055a:	4621      	mov	r1, r4
	midi_uart = huart->Instance;
 800055c:	6800      	ldr	r0, [r0, #0]
 800055e:	4a0b      	ldr	r2, [pc, #44]	; (800058c <init_midi+0x38>)
	data[0] = -1;
 8000560:	4d0b      	ldr	r5, [pc, #44]	; (8000590 <init_midi+0x3c>)
	midi_uart = huart->Instance;
 8000562:	6010      	str	r0, [r2, #0]
		midi_buffer[i] = -1;
 8000564:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <init_midi+0x40>)
	data[0] = -1;
 8000566:	702c      	strb	r4, [r5, #0]
	data[1] = -1;
 8000568:	706c      	strb	r4, [r5, #1]
		midi_buffer[i] = -1;
 800056a:	7014      	strb	r4, [r2, #0]
	for (uint8_t i = 0; i < RING_BUFFER_SIZE; i++) {
 800056c:	3301      	adds	r3, #1
 800056e:	b2db      	uxtb	r3, r3
		if (i == RING_BUFFER_SIZE - 1) {
 8000570:	2bff      	cmp	r3, #255	; 0xff
		midi_buffer[i] = -1;
 8000572:	54d1      	strb	r1, [r2, r3]
		if (i == RING_BUFFER_SIZE - 1) {
 8000574:	d1fa      	bne.n	800056c <init_midi+0x18>
			break;
		}
	}
	midi_buffer_read = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <init_midi+0x44>)
	midi_buffer_write = 0;
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <init_midi+0x48>)
	midi_buffer_read = 0;
 800057c:	700b      	strb	r3, [r1, #0]
	midi_buffer_write = 0;
 800057e:	7013      	strb	r3, [r2, #0]
	midi_uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_RE;		//enable reciever interrupt
 8000580:	68c3      	ldr	r3, [r0, #12]
}
 8000582:	bc30      	pop	{r4, r5}
	midi_uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_RE;		//enable reciever interrupt
 8000584:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000588:	60c3      	str	r3, [r0, #12]
}
 800058a:	4770      	bx	lr
 800058c:	20001184 	.word	0x20001184
 8000590:	20001188 	.word	0x20001188
 8000594:	20000fb8 	.word	0x20000fb8
 8000598:	200013c4 	.word	0x200013c4
 800059c:	20000bf8 	.word	0x20000bf8

080005a0 <process_midi_byte>:

void process_midi_byte() {
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 80005a2:	4c43      	ldr	r4, [pc, #268]	; (80006b0 <process_midi_byte+0x110>)
 80005a4:	4a43      	ldr	r2, [pc, #268]	; (80006b4 <process_midi_byte+0x114>)
 80005a6:	7823      	ldrb	r3, [r4, #0]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80005a8:	56d1      	ldrsb	r1, [r2, r3]
	uint8_t midi_in = midi_buffer[midi_buffer_read];
 80005aa:	5cd2      	ldrb	r2, [r2, r3]
	if ((midi_in & 0x80) == 0x80) {	//if byte received was status byte
 80005ac:	2900      	cmp	r1, #0
 80005ae:	db3e      	blt.n	800062e <process_midi_byte+0x8e>
		status = midi_in;
		data[0] = -1;
		data[1] = -1;
	}
	else {													//if byte received was data byte
		switch (status & 0xF0) {
 80005b0:	4b41      	ldr	r3, [pc, #260]	; (80006b8 <process_midi_byte+0x118>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005b8:	2bc0      	cmp	r3, #192	; 0xc0
 80005ba:	d031      	beq.n	8000620 <process_midi_byte+0x80>
 80005bc:	d81b      	bhi.n	80005f6 <process_midi_byte+0x56>
 80005be:	2ba0      	cmp	r3, #160	; 0xa0
 80005c0:	d002      	beq.n	80005c8 <process_midi_byte+0x28>
 80005c2:	d907      	bls.n	80005d4 <process_midi_byte+0x34>
 80005c4:	2bb0      	cmp	r3, #176	; 0xb0
 80005c6:	d11a      	bne.n	80005fe <process_midi_byte+0x5e>
				data[1] = midi_in;
				polyphonic_pressure();
			}
			break;
		case 0xB0:												//control change (unimplemented)
			if (data[0] == (uint8_t)-1) {
 80005c8:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <process_midi_byte+0x11c>)
 80005ca:	7819      	ldrb	r1, [r3, #0]
 80005cc:	29ff      	cmp	r1, #255	; 0xff
 80005ce:	d028      	beq.n	8000622 <process_midi_byte+0x82>
				data[0] = midi_in;
			}
			else {
				data[1] = midi_in;
 80005d0:	705a      	strb	r2, [r3, #1]

void polyphonic_pressure() {
}

void control_change() {
}
 80005d2:	e01e      	b.n	8000612 <process_midi_byte+0x72>
		switch (status & 0xF0) {
 80005d4:	2b80      	cmp	r3, #128	; 0x80
 80005d6:	d035      	beq.n	8000644 <process_midi_byte+0xa4>
 80005d8:	2b90      	cmp	r3, #144	; 0x90
 80005da:	d110      	bne.n	80005fe <process_midi_byte+0x5e>
			if (data[0] == (uint8_t)-1) {
 80005dc:	4d37      	ldr	r5, [pc, #220]	; (80006bc <process_midi_byte+0x11c>)
 80005de:	7828      	ldrb	r0, [r5, #0]
 80005e0:	28ff      	cmp	r0, #255	; 0xff
 80005e2:	d033      	beq.n	800064c <process_midi_byte+0xac>
				data[1] = midi_in;
 80005e4:	706a      	strb	r2, [r5, #1]
				if (data[1] == 0) {
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	d15b      	bne.n	80006a2 <process_midi_byte+0x102>
	release_voice(data[0]);
 80005ea:	f000 fe93 	bl	8001314 <release_voice>
	data[0] = -1;
 80005ee:	23ff      	movs	r3, #255	; 0xff
 80005f0:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80005f2:	706b      	strb	r3, [r5, #1]
}
 80005f4:	e00d      	b.n	8000612 <process_midi_byte+0x72>
		switch (status & 0xF0) {
 80005f6:	2be0      	cmp	r3, #224	; 0xe0
 80005f8:	d02a      	beq.n	8000650 <process_midi_byte+0xb0>
 80005fa:	2bf0      	cmp	r3, #240	; 0xf0
 80005fc:	d10e      	bne.n	800061c <process_midi_byte+0x7c>
	midi_buffer_read = 0;
 80005fe:	2100      	movs	r1, #0
	data[0] = -1;
 8000600:	22ff      	movs	r2, #255	; 0xff
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <process_midi_byte+0x11c>)
	midi_buffer_write = 0;
 8000604:	482e      	ldr	r0, [pc, #184]	; (80006c0 <process_midi_byte+0x120>)
	midi_buffer_read = 0;
 8000606:	7021      	strb	r1, [r4, #0]
	data[0] = -1;
 8000608:	701a      	strb	r2, [r3, #0]
	midi_buffer_write = 0;
 800060a:	7001      	strb	r1, [r0, #0]
	data[1] = -1;
 800060c:	705a      	strb	r2, [r3, #1]
	clear_voices();
 800060e:	f000 fd71 	bl	80010f4 <clear_voices>
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 8000612:	7823      	ldrb	r3, [r4, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	7023      	strb	r3, [r4, #0]
}
 800061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (status & 0xF0) {
 800061c:	2bd0      	cmp	r3, #208	; 0xd0
 800061e:	d1ee      	bne.n	80005fe <process_midi_byte+0x5e>
			data[0] = midi_in;
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <process_midi_byte+0x11c>)
 8000622:	701a      	strb	r2, [r3, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 8000624:	7823      	ldrb	r3, [r4, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	7023      	strb	r3, [r4, #0]
}
 800062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data[0] = -1;
 800062e:	21ff      	movs	r1, #255	; 0xff
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <process_midi_byte+0x11c>)
		status = midi_in;
 8000632:	4821      	ldr	r0, [pc, #132]	; (80006b8 <process_midi_byte+0x118>)
		data[0] = -1;
 8000634:	7019      	strb	r1, [r3, #0]
		data[1] = -1;
 8000636:	7059      	strb	r1, [r3, #1]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 8000638:	7823      	ldrb	r3, [r4, #0]
		status = midi_in;
 800063a:	7002      	strb	r2, [r0, #0]
	midi_buffer_read = (midi_buffer_read + 1) & (RING_BUFFER_SIZE - 1);
 800063c:	3301      	adds	r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	7023      	strb	r3, [r4, #0]
}
 8000642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (data[0] == (uint8_t)-1) {
 8000644:	4d1d      	ldr	r5, [pc, #116]	; (80006bc <process_midi_byte+0x11c>)
 8000646:	7828      	ldrb	r0, [r5, #0]
 8000648:	28ff      	cmp	r0, #255	; 0xff
 800064a:	d123      	bne.n	8000694 <process_midi_byte+0xf4>
				data[0] = midi_in;
 800064c:	702a      	strb	r2, [r5, #0]
 800064e:	e7e0      	b.n	8000612 <process_midi_byte+0x72>
			if (data[0] == (uint8_t)-1) {
 8000650:	4d1a      	ldr	r5, [pc, #104]	; (80006bc <process_midi_byte+0x11c>)
 8000652:	782b      	ldrb	r3, [r5, #0]
 8000654:	2bff      	cmp	r3, #255	; 0xff
 8000656:	d0f9      	beq.n	800064c <process_midi_byte+0xac>
void pitch_bend() {
	int16_t pitch = ((int16_t)data[1] << 7) | data[0];
	pitch -= MIDI_PITCH_ZERO;
	pitch >>= 7;
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 8000658:	4f1a      	ldr	r7, [pc, #104]	; (80006c4 <process_midi_byte+0x124>)
	int16_t pitch = ((int16_t)data[1] << 7) | data[0];
 800065a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 800065e:	783e      	ldrb	r6, [r7, #0]
 8000660:	7878      	ldrb	r0, [r7, #1]
 8000662:	78b9      	ldrb	r1, [r7, #2]
	pitch -= MIDI_PITCH_ZERO;
 8000664:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 8000668:	78ff      	ldrb	r7, [r7, #3]
 800066a:	f343 13c8 	sbfx	r3, r3, #7, #9
 800066e:	fb03 f606 	mul.w	r6, r3, r6
 8000672:	fb03 f000 	mul.w	r0, r3, r0
 8000676:	fb03 f101 	mul.w	r1, r3, r1
 800067a:	fb03 f307 	mul.w	r3, r3, r7
				data[1] = midi_in;
 800067e:	706a      	strb	r2, [r5, #1]
		op_pitch_bend[op_index] = (op_ratio[op_index] * pitch) >> 4;
 8000680:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <process_midi_byte+0x128>)
 8000682:	1136      	asrs	r6, r6, #4
 8000684:	1100      	asrs	r0, r0, #4
 8000686:	1109      	asrs	r1, r1, #4
 8000688:	111b      	asrs	r3, r3, #4
 800068a:	7016      	strb	r6, [r2, #0]
 800068c:	7050      	strb	r0, [r2, #1]
 800068e:	7091      	strb	r1, [r2, #2]
 8000690:	70d3      	strb	r3, [r2, #3]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8000692:	e7be      	b.n	8000612 <process_midi_byte+0x72>
				data[1] = midi_in;
 8000694:	706a      	strb	r2, [r5, #1]
	release_voice(data[0]);
 8000696:	f000 fe3d 	bl	8001314 <release_voice>
	data[0] = -1;
 800069a:	23ff      	movs	r3, #255	; 0xff
 800069c:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 800069e:	706b      	strb	r3, [r5, #1]
}
 80006a0:	e7b7      	b.n	8000612 <process_midi_byte+0x72>
	add_voice(data[0]);
 80006a2:	f000 fd39 	bl	8001118 <add_voice>
	data[0] = -1;
 80006a6:	23ff      	movs	r3, #255	; 0xff
 80006a8:	702b      	strb	r3, [r5, #0]
	data[1] = -1;
 80006aa:	706b      	strb	r3, [r5, #1]
}
 80006ac:	e7b1      	b.n	8000612 <process_midi_byte+0x72>
 80006ae:	bf00      	nop
 80006b0:	200013c4 	.word	0x200013c4
 80006b4:	20000fb8 	.word	0x20000fb8
 80006b8:	20001560 	.word	0x20001560
 80006bc:	20001188 	.word	0x20001188
 80006c0:	20000bf8 	.word	0x20000bf8
 80006c4:	20000ac4 	.word	0x20000ac4
 80006c8:	20000ab8 	.word	0x20000ab8

080006cc <reset>:
	midi_buffer_read = 0;
 80006cc:	2100      	movs	r1, #0
	data[0] = -1;
 80006ce:	22ff      	movs	r2, #255	; 0xff
void reset() {
 80006d0:	b410      	push	{r4}
	data[0] = -1;
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <reset+0x1c>)
	midi_buffer_read = 0;
 80006d4:	4c05      	ldr	r4, [pc, #20]	; (80006ec <reset+0x20>)
	midi_buffer_write = 0;
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <reset+0x24>)
	midi_buffer_read = 0;
 80006d8:	7021      	strb	r1, [r4, #0]
	data[0] = -1;
 80006da:	701a      	strb	r2, [r3, #0]
	midi_buffer_write = 0;
 80006dc:	7001      	strb	r1, [r0, #0]
	data[1] = -1;
 80006de:	705a      	strb	r2, [r3, #1]
}
 80006e0:	bc10      	pop	{r4}
	clear_voices();
 80006e2:	f000 bd07 	b.w	80010f4 <clear_voices>
 80006e6:	bf00      	nop
 80006e8:	20001188 	.word	0x20001188
 80006ec:	200013c4 	.word	0x200013c4
 80006f0:	20000bf8 	.word	0x20000bf8

080006f4 <note_to_freq>:
 */

#include "phase.h"

uint16_t note_to_freq(uint8_t note_value) {
	return NOTE_FREQ_TABLE[note_value];
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <note_to_freq+0x8>)
}
 80006f6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80006fa:	4770      	bx	lr
 80006fc:	08004c30 	.word	0x08004c30

08000700 <calculate_delta>:

uint16_t calculate_delta(uint16_t freq) {
	uint32_t total_samples = TABLE_SAMPLE_SIZE * freq;		//# of samples to map one second of the target frequency
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <calculate_delta+0x10>)
	total_samples <<= 8;									//shift left 8 bits for fractional bits (8 LSB)
 8000702:	0400      	lsls	r0, r0, #16
	uint16_t delta = total_samples / SAMPLING_FREQ;			//8 MSB = integer, 8 LSB = fractional. integer represents index in wave table.
 8000704:	fba3 3000 	umull	r3, r0, r3, r0
	return delta;
}
 8000708:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	be37c63b 	.word	0xbe37c63b

08000714 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_MspInit+0x3c>)
{
 8000716:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000718:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800071a:	490e      	ldr	r1, [pc, #56]	; (8000754 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800071c:	f042 0201 	orr.w	r2, r2, #1
 8000720:	619a      	str	r2, [r3, #24]
 8000722:	699a      	ldr	r2, [r3, #24]
 8000724:	f002 0201 	and.w	r2, r2, #1
 8000728:	9200      	str	r2, [sp, #0]
 800072a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000732:	61da      	str	r2, [r3, #28]
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073e:	684b      	ldr	r3, [r1, #4]
 8000740:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000748:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	b002      	add	sp, #8
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	40010000 	.word	0x40010000

08000758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C2)
 800075e:	6802      	ldr	r2, [r0, #0]
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <HAL_I2C_MspInit+0xa0>)
{
 8000762:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 8000764:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800076a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hi2c->Instance==I2C2)
 800076e:	d002      	beq.n	8000776 <HAL_I2C_MspInit+0x1e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000770:	b007      	add	sp, #28
 8000772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000778:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 800077c:	f04f 0912 	mov.w	r9, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4f1e      	ldr	r7, [pc, #120]	; (80007fc <HAL_I2C_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	4605      	mov	r5, r0
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	481b      	ldr	r0, [pc, #108]	; (8000800 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800079c:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f002 f96c 	bl	8002a7c <HAL_GPIO_Init>
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007a4:	f04f 0c10 	mov.w	ip, #16
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007a8:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007aa:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80007ac:	4e15      	ldr	r6, [pc, #84]	; (8000804 <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b2:	61fb      	str	r3, [r7, #28]
 80007b4:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80007b6:	4914      	ldr	r1, [pc, #80]	; (8000808 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007bc:	9301      	str	r3, [sp, #4]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80007be:	4630      	mov	r0, r6
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c0:	e9c6 c401 	strd	ip, r4, [r6, #4]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007c4:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007c8:	e9c6 4406 	strd	r4, r4, [r6, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007cc:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80007ce:	6031      	str	r1, [r6, #0]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007d0:	60f2      	str	r2, [r6, #12]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80007d2:	f001 fffd 	bl	80027d0 <HAL_DMA_Init>
 80007d6:	b960      	cbnz	r0, 80007f2 <HAL_I2C_MspInit+0x9a>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	2021      	movs	r0, #33	; 0x21
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80007de:	636e      	str	r6, [r5, #52]	; 0x34
 80007e0:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80007e2:	f001 ff97 	bl	8002714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80007e6:	2021      	movs	r0, #33	; 0x21
 80007e8:	f001 ffcc 	bl	8002784 <HAL_NVIC_EnableIRQ>
}
 80007ec:	b007      	add	sp, #28
 80007ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 80007f2:	f7ff fead 	bl	8000550 <Error_Handler>
 80007f6:	e7ef      	b.n	80007d8 <HAL_I2C_MspInit+0x80>
 80007f8:	40005800 	.word	0x40005800
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010c00 	.word	0x40010c00
 8000804:	20000ccc 	.word	0x20000ccc
 8000808:	40020044 	.word	0x40020044

0800080c <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	2300      	movs	r3, #0
{
 800080e:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI1)
 8000810:	6801      	ldr	r1, [r0, #0]
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <HAL_SPI_MspInit+0x60>)
{
 8000814:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8000816:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800081c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI1)
 8000820:	d001      	beq.n	8000826 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000822:	b006      	add	sp, #24
 8000824:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000826:	24a0      	movs	r4, #160	; 0xa0
 8000828:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800082c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000830:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000834:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800083c:	619a      	str	r2, [r3, #24]
 800083e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000842:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000846:	9200      	str	r2, [sp, #0]
 8000848:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	699a      	ldr	r2, [r3, #24]
 800084c:	f042 0204 	orr.w	r2, r2, #4
 8000850:	619a      	str	r2, [r3, #24]
 8000852:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000854:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f002 f90b 	bl	8002a7c <HAL_GPIO_Init>
}
 8000866:	b006      	add	sp, #24
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	bf00      	nop
 800086c:	40013000 	.word	0x40013000
 8000870:	40010800 	.word	0x40010800

08000874 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000874:	6803      	ldr	r3, [r0, #0]
 8000876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800087a:	d000      	beq.n	800087e <HAL_TIM_Base_MspInit+0xa>
 800087c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800087e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000882:	69d8      	ldr	r0, [r3, #28]
{
 8000884:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000886:	f040 0001 	orr.w	r0, r0, #1
 800088a:	61d8      	str	r0, [r3, #28]
 800088c:	69db      	ldr	r3, [r3, #28]
{
 800088e:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2102      	movs	r1, #2
 800089a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800089c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800089e:	f001 ff39 	bl	8002714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008a2:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008a4:	b003      	add	sp, #12
 80008a6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008aa:	f001 bf6b 	b.w	8002784 <HAL_NVIC_EnableIRQ>
 80008ae:	bf00      	nop

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80008b4:	6802      	ldr	r2, [r0, #0]
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <HAL_UART_MspInit+0x88>)
{
 80008b8:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 80008ba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80008c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 80008c4:	d001      	beq.n	80008ca <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008c6:	b007      	add	sp, #28
 80008c8:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ce:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d0:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80008d6:	699a      	ldr	r2, [r3, #24]
 80008d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008dc:	619a      	str	r2, [r3, #24]
 80008de:	699a      	ldr	r2, [r3, #24]
 80008e0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	699a      	ldr	r2, [r3, #24]
 80008ea:	f042 0204 	orr.w	r2, r2, #4
 80008ee:	619a      	str	r2, [r3, #24]
 80008f0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	a902      	add	r1, sp, #8
 8000902:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f002 f8b7 	bl	8002a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800090e:	2300      	movs	r3, #0
 8000910:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	a902      	add	r1, sp, #8
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000918:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f002 f8ad 	bl	8002a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000922:	4622      	mov	r2, r4
 8000924:	4621      	mov	r1, r4
 8000926:	2025      	movs	r0, #37	; 0x25
 8000928:	f001 fef4 	bl	8002714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800092c:	2025      	movs	r0, #37	; 0x25
 800092e:	f001 ff29 	bl	8002784 <HAL_NVIC_EnableIRQ>
}
 8000932:	b007      	add	sp, #28
 8000934:	bd30      	pop	{r4, r5, pc}
 8000936:	bf00      	nop
 8000938:	40013800 	.word	0x40013800
 800093c:	40010800 	.word	0x40010800

08000940 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler>
 8000942:	bf00      	nop

08000944 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <HardFault_Handler>
 8000946:	bf00      	nop

08000948 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler>
 800094a:	bf00      	nop

0800094c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <BusFault_Handler>
 800094e:	bf00      	nop

08000950 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler>
 8000952:	bf00      	nop

08000954 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <DebugMon_Handler>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <PendSV_Handler>:
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f001 bea2 	b.w	80026a8 <HAL_IncTick>

08000964 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000964:	2008      	movs	r0, #8
 8000966:	f002 b999 	b.w	8002c9c <HAL_GPIO_EXTI_IRQHandler>
 800096a:	bf00      	nop

0800096c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800096c:	4801      	ldr	r0, [pc, #4]	; (8000974 <DMA1_Channel4_IRQHandler+0x8>)
 800096e:	f001 bfed 	b.w	800294c <HAL_DMA_IRQHandler>
 8000972:	bf00      	nop
 8000974:	20000ccc 	.word	0x20000ccc

08000978 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000978:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800097a:	2020      	movs	r0, #32
 800097c:	f002 f98e 	bl	8002c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000980:	2080      	movs	r0, #128	; 0x80
 8000982:	f002 f98b 	bl	8002c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000986:	f44f 7080 	mov.w	r0, #256	; 0x100
 800098a:	f002 f987 	bl	8002c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800098e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000992:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000996:	f002 b981 	b.w	8002c9c <HAL_GPIO_EXTI_IRQHandler>
 800099a:	bf00      	nop

0800099c <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sample();
 800099c:	f7ff bdd2 	b.w	8000544 <sample>

080009a0 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80009a0:	4801      	ldr	r0, [pc, #4]	; (80009a8 <I2C2_EV_IRQHandler+0x8>)
 80009a2:	f002 bf1b 	b.w	80037dc <HAL_I2C_EV_IRQHandler>
 80009a6:	bf00      	nop
 80009a8:	20000acc 	.word	0x20000acc

080009ac <USART1_IRQHandler>:
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	midi_read();
 80009ac:	f7ff bdb0 	b.w	8000510 <midi_read>

080009b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80009b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009b6:	f002 f971 	bl	8002c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80009be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009c2:	f002 b96b 	b.w	8002c9c <HAL_GPIO_EXTI_IRQHandler>
 80009c6:	bf00      	nop

080009c8 <modulate>:
		}
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
	}
}

static inline int8_t modulate(uint8_t voice_index) {
 80009c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/*update phase of active operator*/
	op[0][voice_index].phase = update_phase(op[0][voice_index].delta + op_pitch_bend[0], op[0][voice_index].phase);
 80009cc:	4fc4      	ldr	r7, [pc, #784]	; (8000ce0 <modulate+0x318>)
 80009ce:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80009d2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
	-27, -25, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9,  -7,  -5,  -3,  -2,
};

uint16_t note_to_freq(uint8_t note_value);
uint16_t calculate_delta(uint16_t freq);
static inline uint16_t update_phase(uint16_t delta, uint16_t phase) { return delta + phase; };
 80009d6:	891e      	ldrh	r6, [r3, #8]
 80009d8:	f8b3 1078 	ldrh.w	r1, [r3, #120]	; 0x78
 80009dc:	f8b3 4076 	ldrh.w	r4, [r3, #118]	; 0x76
 80009e0:	88dd      	ldrh	r5, [r3, #6]
 80009e2:	f8df c308 	ldr.w	ip, [pc, #776]	; 8000cec <modulate+0x324>
 80009e6:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	; 0xe8
 80009ea:	eb04 0801 	add.w	r8, r4, r1
 80009ee:	f8b3 e0e6 	ldrh.w	lr, [r3, #230]	; 0xe6
 80009f2:	f8b3 1156 	ldrh.w	r1, [r3, #342]	; 0x156
 80009f6:	4435      	add	r5, r6
 80009f8:	f8b3 6158 	ldrh.w	r6, [r3, #344]	; 0x158
 80009fc:	f99c 9000 	ldrsb.w	r9, [ip]
 8000a00:	440e      	add	r6, r1
	op[1][voice_index].phase = update_phase(op[1][voice_index].delta + op_pitch_bend[1], op[1][voice_index].phase);
 8000a02:	f99c 4001 	ldrsb.w	r4, [ip, #1]
	op[2][voice_index].phase = update_phase(op[2][voice_index].delta + op_pitch_bend[2], op[2][voice_index].phase);
	op[3][voice_index].phase = update_phase(op[3][voice_index].delta + op_pitch_bend[3], op[3][voice_index].phase);
 8000a06:	f99c 1003 	ldrsb.w	r1, [ip, #3]
 8000a0a:	4496      	add	lr, r2
	op[2][voice_index].phase = update_phase(op[2][voice_index].delta + op_pitch_bend[2], op[2][voice_index].phase);
 8000a0c:	f99c 2002 	ldrsb.w	r2, [ip, #2]


	switch (algo) {
 8000a10:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8000cf0 <modulate+0x328>
 8000a14:	4431      	add	r1, r6
 8000a16:	444d      	add	r5, r9
 8000a18:	4444      	add	r4, r8
 8000a1a:	4472      	add	r2, lr
 8000a1c:	f89c 6000 	ldrb.w	r6, [ip]
 8000a20:	b2ad      	uxth	r5, r5
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	b292      	uxth	r2, r2
 8000a26:	b289      	uxth	r1, r1
	op[0][voice_index].phase = update_phase(op[0][voice_index].delta + op_pitch_bend[0], op[0][voice_index].phase);
 8000a28:	811d      	strh	r5, [r3, #8]
	op[1][voice_index].phase = update_phase(op[1][voice_index].delta + op_pitch_bend[1], op[1][voice_index].phase);
 8000a2a:	f8a3 4078 	strh.w	r4, [r3, #120]	; 0x78
	op[2][voice_index].phase = update_phase(op[2][voice_index].delta + op_pitch_bend[2], op[2][voice_index].phase);
 8000a2e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	op[3][voice_index].phase = update_phase(op[3][voice_index].delta + op_pitch_bend[3], op[3][voice_index].phase);
 8000a32:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
	op[0][voice_index].phase = update_phase(op[0][voice_index].delta + op_pitch_bend[0], op[0][voice_index].phase);
 8000a36:	00c3      	lsls	r3, r0, #3
 8000a38:	2e0b      	cmp	r6, #11
 8000a3a:	f200 81b5 	bhi.w	8000da8 <modulate+0x3e0>
 8000a3e:	e8df f016 	tbh	[pc, r6, lsl #1]
 8000a42:	0038      	.short	0x0038
 8000a44:	00790061 	.word	0x00790061
 8000a48:	00cb00a0 	.word	0x00cb00a0
 8000a4c:	011400e9 	.word	0x011400e9
 8000a50:	01590131 	.word	0x01590131
 8000a54:	01a2018d 	.word	0x01a2018d
 8000a58:	000c      	.short	0x000c
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
		return ((int16_t)op2 + op1 + op0) / 0x03;
		break;
	case 0x0B:
		op3 = get_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a5a:	1a18      	subs	r0, r3, r0
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000a5c:	4ba1      	ldr	r3, [pc, #644]	; (8000ce4 <modulate+0x31c>)
 8000a5e:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000a62:	0a09      	lsrs	r1, r1, #8
 8000a64:	0a12      	lsrs	r2, r2, #8
 8000a66:	f913 e001 	ldrsb.w	lr, [r3, r1]
		op2 = get_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a6a:	f913 c002 	ldrsb.w	ip, [r3, r2]
 8000a6e:	0a24      	lsrs	r4, r4, #8
		op3 = get_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a70:	f897 0154 	ldrb.w	r0, [r7, #340]	; 0x154
		op2 = get_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a74:	f897 10e4 	ldrb.w	r1, [r7, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a78:	571e      	ldrsb	r6, [r3, r4]
 8000a7a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8000a7e:	0a2d      	lsrs	r5, r5, #8
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a80:	575c      	ldrsb	r4, [r3, r5]
		op3 = get_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000a82:	fb00 f00e 	mul.w	r0, r0, lr
		op2 = get_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000a86:	fb01 f10c 	mul.w	r1, r1, ip
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a8a:	793b      	ldrb	r3, [r7, #4]
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000a8c:	fb02 f206 	mul.w	r2, r2, r6
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000a90:	fb03 f304 	mul.w	r3, r3, r4
		return ((int16_t)op3 + op2 + op1 + op0) >> 2;
 8000a94:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000a98:	f341 11c7 	sbfx	r1, r1, #7, #8
 8000a9c:	4408      	add	r0, r1
 8000a9e:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000aa2:	4410      	add	r0, r2
 8000aa4:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000aa8:	4418      	add	r0, r3
 8000aaa:	f340 0087 	sbfx	r0, r0, #2, #8
		break;
	default:
		break;
	}
	return 0;
}
 8000aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ab2:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000ab4:	4b8c      	ldr	r3, [pc, #560]	; (8000ce8 <modulate+0x320>)
 8000ab6:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000aba:	0a09      	lsrs	r1, r1, #8
 8000abc:	f897 0154 	ldrb.w	r0, [r7, #340]	; 0x154
 8000ac0:	5659      	ldrsb	r1, [r3, r1]
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac2:	0a12      	lsrs	r2, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac4:	fb00 f101 	mul.w	r1, r0, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ac8:	eb02 12e1 	add.w	r2, r2, r1, asr #7
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	5699      	ldrsb	r1, [r3, r2]
 8000ad0:	f897 20e4 	ldrb.w	r2, [r7, #228]	; 0xe4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ad4:	0a24      	lsrs	r4, r4, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ad6:	fb02 f201 	mul.w	r2, r2, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ada:	eb04 14e2 	add.w	r4, r4, r2, asr #7
 8000ade:	b2e4      	uxtb	r4, r4
 8000ae0:	571a      	ldrsb	r2, [r3, r4]
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ae2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ae6:	0a2d      	lsrs	r5, r5, #8
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000ae8:	fb03 f302 	mul.w	r3, r3, r2
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000aec:	4a7d      	ldr	r2, [pc, #500]	; (8000ce4 <modulate+0x31c>)
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000aee:	eb05 15e3 	add.w	r5, r5, r3, asr #7
 8000af2:	b2ed      	uxtb	r5, r5
 8000af4:	7938      	ldrb	r0, [r7, #4]
 8000af6:	5753      	ldrsb	r3, [r2, r5]
 8000af8:	fb00 f003 	mul.w	r0, r0, r3
 8000afc:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b04:	4e78      	ldr	r6, [pc, #480]	; (8000ce8 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b06:	1a18      	subs	r0, r3, r0
 8000b08:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000b0c:	0a12      	lsrs	r2, r2, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b0e:	56b0      	ldrsb	r0, [r6, r2]
 8000b10:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8000b14:	0a09      	lsrs	r1, r1, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b16:	5671      	ldrsb	r1, [r6, r1]
 8000b18:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b1c:	fb03 f300 	mul.w	r3, r3, r0
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b20:	fb02 f201 	mul.w	r2, r2, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b24:	11db      	asrs	r3, r3, #7
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3 + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b26:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000b2a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8000b2e:	b2e4      	uxtb	r4, r4
 8000b30:	5732      	ldrsb	r2, [r6, r4]
 8000b32:	e7d6      	b.n	8000ae2 <modulate+0x11a>
 8000b34:	4e6c      	ldr	r6, [pc, #432]	; (8000ce8 <modulate+0x320>)
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b36:	1a18      	subs	r0, r3, r0
 8000b38:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000b3c:	0a12      	lsrs	r2, r2, #8
 8000b3e:	56b2      	ldrsb	r2, [r6, r2]
 8000b40:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b44:	0a24      	lsrs	r4, r4, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b46:	fb03 f302 	mul.w	r3, r3, r2
 8000b4a:	0a09      	lsrs	r1, r1, #8
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b4c:	eb04 14e3 	add.w	r4, r4, r3, asr #7
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b50:	5671      	ldrsb	r1, [r6, r1]
 8000b52:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8000b56:	b2e4      	uxtb	r4, r4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b58:	5730      	ldrsb	r0, [r6, r4]
 8000b5a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b5e:	fb03 f101 	mul.w	r1, r3, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b62:	fb02 f200 	mul.w	r2, r2, r0
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000b66:	0a2b      	lsrs	r3, r5, #8
 8000b68:	eb03 13e1 	add.w	r3, r3, r1, asr #7
 8000b6c:	eb03 13e2 	add.w	r3, r3, r2, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000b70:	4a5c      	ldr	r2, [pc, #368]	; (8000ce4 <modulate+0x31c>)
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	7938      	ldrb	r0, [r7, #4]
 8000b76:	56d3      	ldrsb	r3, [r2, r3]
 8000b78:	fb00 f003 	mul.w	r0, r0, r3
 8000b7c:	f340 10c7 	sbfx	r0, r0, #7, #8
		return op0;
 8000b80:	e795      	b.n	8000aae <modulate+0xe6>
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000b82:	4e59      	ldr	r6, [pc, #356]	; (8000ce8 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b84:	1a18      	subs	r0, r3, r0
 8000b86:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000b8a:	0a0b      	lsrs	r3, r1, #8
 8000b8c:	56f0      	ldrsb	r0, [r6, r3]
 8000b8e:	f897 1154 	ldrb.w	r1, [r7, #340]	; 0x154
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b92:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000b96:	fb01 f100 	mul.w	r1, r1, r0
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000b9a:	f3c1 11c7 	ubfx	r1, r1, #7, #8
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000b9e:	eb01 2414 	add.w	r4, r1, r4, lsr #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000ba2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8000ba6:	b2e4      	uxtb	r4, r4
 8000ba8:	b2d2      	uxtb	r2, r2
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000baa:	5730      	ldrsb	r0, [r6, r4]
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bac:	56b1      	ldrsb	r1, [r6, r2]
 8000bae:	f897 20e4 	ldrb.w	r2, [r7, #228]	; 0xe4
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bb2:	fb03 f300 	mul.w	r3, r3, r0
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bb6:	fb02 f201 	mul.w	r2, r2, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bba:	11db      	asrs	r3, r3, #7
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bbc:	eb03 13e2 	add.w	r3, r3, r2, asr #7
 8000bc0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000bc4:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <modulate+0x31c>)
 8000bc6:	b2ed      	uxtb	r5, r5
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000bc8:	7938      	ldrb	r0, [r7, #4]
 8000bca:	575b      	ldrsb	r3, [r3, r5]
 8000bcc:	fb00 f003 	mul.w	r0, r0, r3
 8000bd0:	f340 10c7 	sbfx	r0, r0, #7, #8
}
 8000bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000bd8:	4e43      	ldr	r6, [pc, #268]	; (8000ce8 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bda:	1a18      	subs	r0, r3, r0
 8000bdc:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000be0:	0a12      	lsrs	r2, r2, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000be2:	56b0      	ldrsb	r0, [r6, r2]
 8000be4:	0a09      	lsrs	r1, r1, #8
 8000be6:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bea:	5672      	ldrsb	r2, [r6, r1]
 8000bec:	f897 1154 	ldrb.w	r1, [r7, #340]	; 0x154
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf0:	fb03 f300 	mul.w	r3, r3, r0
 8000bf4:	0a24      	lsrs	r4, r4, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000bf6:	fb01 f102 	mul.w	r1, r1, r2
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000bfa:	5730      	ldrsb	r0, [r6, r4]
 8000bfc:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
		op2 = get_mod_sample((op[2][voice_index].phase >> 8))*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c00:	11db      	asrs	r3, r3, #7
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c02:	fb02 f200 	mul.w	r2, r2, r0
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3 + op2 + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c06:	eb03 13e1 	add.w	r3, r3, r1, asr #7
 8000c0a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8000c0e:	eb05 15e2 	add.w	r5, r5, r2, asr #7
 8000c12:	e7d7      	b.n	8000bc4 <modulate+0x1fc>
 8000c14:	4e34      	ldr	r6, [pc, #208]	; (8000ce8 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c16:	1a18      	subs	r0, r3, r0
 8000c18:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000c1c:	0a09      	lsrs	r1, r1, #8
 8000c1e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8000c22:	5671      	ldrsb	r1, [r6, r1]
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c24:	0a12      	lsrs	r2, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c26:	fb03 f301 	mul.w	r3, r3, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c2a:	eb02 12e3 	add.w	r2, r2, r3, asr #7
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	56b2      	ldrsb	r2, [r6, r2]
 8000c32:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c36:	0a24      	lsrs	r4, r4, #8
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c38:	fb03 f302 	mul.w	r3, r3, r2
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000c3c:	4a29      	ldr	r2, [pc, #164]	; (8000ce4 <modulate+0x31c>)
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c3e:	eb04 14e3 	add.w	r4, r4, r3, asr #7
 8000c42:	0a2d      	lsrs	r5, r5, #8
 8000c44:	b2e4      	uxtb	r4, r4
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c46:	5711      	ldrsb	r1, [r2, r4]
 8000c48:	f897 0074 	ldrb.w	r0, [r7, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c4c:	5752      	ldrsb	r2, [r2, r5]
 8000c4e:	793b      	ldrb	r3, [r7, #4]
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c50:	fb00 f001 	mul.w	r0, r0, r1
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c54:	fb03 f302 	mul.w	r3, r3, r2
		return ((int16_t)op1 + op0) >> 1;
 8000c58:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000c5c:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000c60:	4418      	add	r0, r3
 8000c62:	f340 0047 	sbfx	r0, r0, #1, #8
}
 8000c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000c6a:	4e1f      	ldr	r6, [pc, #124]	; (8000ce8 <modulate+0x320>)
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c6c:	1a18      	subs	r0, r3, r0
 8000c6e:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000c72:	0a09      	lsrs	r1, r1, #8
 8000c74:	5671      	ldrsb	r1, [r6, r1]
 8000c76:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c7a:	0a12      	lsrs	r2, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000c7c:	fb03 f301 	mul.w	r3, r3, r1
		op2 = get_mod_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000c80:	eb02 12e3 	add.w	r2, r2, r3, asr #7
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	56b1      	ldrsb	r1, [r6, r2]
 8000c88:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000c8c:	4a15      	ldr	r2, [pc, #84]	; (8000ce4 <modulate+0x31c>)
 8000c8e:	fb03 f301 	mul.w	r3, r3, r1
		op1 = get_sample((op[1][voice_index].phase >> 8) + op2)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000c92:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8000c96:	eb03 2414 	add.w	r4, r3, r4, lsr #8
		op0 = get_sample((op[0][voice_index].phase >> 8) + op2)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000c9a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8000c9e:	b2e4      	uxtb	r4, r4
 8000ca0:	b2ed      	uxtb	r5, r5
 8000ca2:	e7d0      	b.n	8000c46 <modulate+0x27e>
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000ca4:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <modulate+0x320>)
 8000ca8:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000cac:	0a09      	lsrs	r1, r1, #8
 8000cae:	0a24      	lsrs	r4, r4, #8
 8000cb0:	f897 0154 	ldrb.w	r0, [r7, #340]	; 0x154
 8000cb4:	5659      	ldrsb	r1, [r3, r1]
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000cb6:	571c      	ldrsb	r4, [r3, r4]
 8000cb8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000cbc:	fb00 f101 	mul.w	r1, r0, r1
		op1 = get_mod_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000cc0:	fb03 f304 	mul.w	r3, r3, r4
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000cc4:	0a12      	lsrs	r2, r2, #8
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000cc6:	0a2d      	lsrs	r5, r5, #8
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000cc8:	eb02 12e1 	add.w	r2, r2, r1, asr #7
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000ccc:	eb05 15e3 	add.w	r5, r5, r3, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <modulate+0x31c>)
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	b2ed      	uxtb	r5, r5
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000cd6:	5699      	ldrsb	r1, [r3, r2]
 8000cd8:	f897 00e4 	ldrb.w	r0, [r7, #228]	; 0xe4
		op0 = get_sample((op[0][voice_index].phase >> 8) + op1)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000cdc:	575a      	ldrsb	r2, [r3, r5]
 8000cde:	e7b6      	b.n	8000c4e <modulate+0x286>
 8000ce0:	200008c4 	.word	0x200008c4
 8000ce4:	08004e30 	.word	0x08004e30
 8000ce8:	08004d30 	.word	0x08004d30
 8000cec:	20000ab8 	.word	0x20000ab8
 8000cf0:	20000a88 	.word	0x20000a88
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000cf4:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <modulate+0x3e4>)
 8000cf8:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000cfc:	0a09      	lsrs	r1, r1, #8
 8000cfe:	5658      	ldrsb	r0, [r3, r1]
 8000d00:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d04:	492a      	ldr	r1, [pc, #168]	; (8000db0 <modulate+0x3e8>)
 8000d06:	fb03 f300 	mul.w	r3, r3, r0
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d0a:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8000d0e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
		op1 = get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d12:	eb03 2414 	add.w	r4, r3, r4, lsr #8
		op0 = get_sample((op[0][voice_index].phase >> 8) + op3)*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d16:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	b2e4      	uxtb	r4, r4
 8000d1e:	b2ed      	uxtb	r5, r5
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d20:	568e      	ldrsb	r6, [r1, r2]
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d22:	570c      	ldrsb	r4, [r1, r4]
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d24:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d28:	f897 0074 	ldrb.w	r0, [r7, #116]	; 0x74
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d2c:	5749      	ldrsb	r1, [r1, r5]
 8000d2e:	793a      	ldrb	r2, [r7, #4]
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d30:	fb03 f306 	mul.w	r3, r3, r6
		op1 = get_sample((op[1][voice_index].phase >> 8))*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d34:	fb00 f004 	mul.w	r0, r0, r4
		op0 = get_sample((op[0][voice_index].phase >> 8))*op[0][voice_index].volume >> MAX_VOLUME_BITS;
 8000d38:	fb02 f201 	mul.w	r2, r2, r1
		return ((int16_t)op2 + op1 + op0) / 0x03;
 8000d3c:	f340 10c7 	sbfx	r0, r0, #7, #8
 8000d40:	f343 13c7 	sbfx	r3, r3, #7, #8
 8000d44:	f342 12c7 	sbfx	r2, r2, #7, #8
 8000d48:	4403      	add	r3, r0
 8000d4a:	481a      	ldr	r0, [pc, #104]	; (8000db4 <modulate+0x3ec>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	fb80 2003 	smull	r2, r0, r0, r3
 8000d52:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000d56:	b240      	sxtb	r0, r0
}
 8000d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000d5c:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <modulate+0x3e4>)
 8000d60:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000d64:	0a09      	lsrs	r1, r1, #8
 8000d66:	5658      	ldrsb	r0, [r3, r1]
 8000d68:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000d6c:	4910      	ldr	r1, [pc, #64]	; (8000db0 <modulate+0x3e8>)
 8000d6e:	fb03 f300 	mul.w	r3, r3, r0
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d72:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8000d76:	eb03 2212 	add.w	r2, r3, r2, lsr #8
		op1 = get_sample((op[1][voice_index].phase >> 8) + op3)*op[1][voice_index].volume >> MAX_VOLUME_BITS;
 8000d7a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	b2e4      	uxtb	r4, r4
 8000d82:	0a2d      	lsrs	r5, r5, #8
 8000d84:	e7cc      	b.n	8000d20 <modulate+0x358>
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000d86:	1a18      	subs	r0, r3, r0
static inline int8_t get_mod_sample(uint8_t phase_integer) { return SINE_MOD_TABLE[phase_integer]; };
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <modulate+0x3e4>)
 8000d8a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 8000d8e:	0a09      	lsrs	r1, r1, #8
 8000d90:	5659      	ldrsb	r1, [r3, r1]
 8000d92:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d96:	0a12      	lsrs	r2, r2, #8
		op3 = get_mod_sample((op[3][voice_index].phase >> 8))*op[3][voice_index].volume >> MAX_VOLUME_BITS;
 8000d98:	fb03 f301 	mul.w	r3, r3, r1
		op2 = get_sample((op[2][voice_index].phase >> 8) + op3)*op[2][voice_index].volume >> MAX_VOLUME_BITS;
 8000d9c:	eb02 12e3 	add.w	r2, r2, r3, asr #7
static inline int8_t get_sample(uint8_t phase_integer) { return SINE_TABLE[phase_integer]; };
 8000da0:	4903      	ldr	r1, [pc, #12]	; (8000db0 <modulate+0x3e8>)
 8000da2:	0a24      	lsrs	r4, r4, #8
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	e7ec      	b.n	8000d82 <modulate+0x3ba>
	switch (algo) {
 8000da8:	2000      	movs	r0, #0
 8000daa:	e680      	b.n	8000aae <modulate+0xe6>
 8000dac:	08004d30 	.word	0x08004d30
 8000db0:	08004e30 	.word	0x08004e30
 8000db4:	55555556 	.word	0x55555556

08000db8 <init_synth>:
 *      Author: Tennyson Cheng
 */

#include "synth.h"

void init_synth() {
 8000db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		op_release[i] = ENV_MAX_RATE;				//default release 128
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
		op_release_inc[i] = calculate_env_inc(op_release[i]);
		for (uint8_t o = 0; o < MAX_VOICES; o++) {
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000dbc:	4cbe      	ldr	r4, [pc, #760]	; (80010b8 <init_synth+0x300>)
 8000dbe:	4bbf      	ldr	r3, [pc, #764]	; (80010bc <init_synth+0x304>)
 8000dc0:	4625      	mov	r5, r4
 8000dc2:	46a2      	mov	sl, r4
 8000dc4:	cd07      	ldmia	r5!, {r0, r1, r2}
 8000dc6:	882d      	ldrh	r5, [r5, #0]
void init_synth() {
 8000dc8:	b099      	sub	sp, #100	; 0x64
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000dca:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000dce:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000dd2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000dd6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000dda:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000dde:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000de2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000de6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8000dea:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8000dee:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8000df2:	9415      	str	r4, [sp, #84]	; 0x54
 8000df4:	6018      	str	r0, [r3, #0]
 8000df6:	9416      	str	r4, [sp, #88]	; 0x58
 8000df8:	6059      	str	r1, [r3, #4]
 8000dfa:	9417      	str	r4, [sp, #92]	; 0x5c
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	819d      	strh	r5, [r3, #12]
 8000e00:	835d      	strh	r5, [r3, #26]
 8000e02:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8000e06:	f8c3 1012 	str.w	r1, [r3, #18]
		algo = 0x00;								//default algorithm 0
 8000e0a:	f04f 0100 	mov.w	r1, #0
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e0e:	f8c3 2016 	str.w	r2, [r3, #22]
		algo = 0x00;								//default algorithm 0
 8000e12:	4aab      	ldr	r2, [pc, #684]	; (80010c0 <init_synth+0x308>)
 8000e14:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
 8000e18:	7011      	strb	r1, [r2, #0]
	for (uint8_t i = 0; i < MAX_OPERATORS; i++) {
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4aa9      	ldr	r2, [pc, #676]	; (80010c4 <init_synth+0x30c>)
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000e1e:	f04f 2680 	mov.w	r6, #2147516416	; 0x80008000
 8000e22:	6011      	str	r1, [r2, #0]
 8000e24:	4aa8      	ldr	r2, [pc, #672]	; (80010c8 <init_synth+0x310>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e26:	46a2      	mov	sl, r4
 8000e28:	6011      	str	r1, [r2, #0]
 8000e2a:	f04f 3110 	mov.w	r1, #269488144	; 0x10101010
 8000e2e:	4aa7      	ldr	r2, [pc, #668]	; (80010cc <init_synth+0x314>)
 8000e30:	46a0      	mov	r8, r4
 8000e32:	f8c2 9000 	str.w	r9, [r2]
 8000e36:	4aa6      	ldr	r2, [pc, #664]	; (80010d0 <init_synth+0x318>)
 8000e38:	46a6      	mov	lr, r4
 8000e3a:	f8c2 9000 	str.w	r9, [r2]
 8000e3e:	4aa5      	ldr	r2, [pc, #660]	; (80010d4 <init_synth+0x31c>)
 8000e40:	46a4      	mov	ip, r4
 8000e42:	f8c2 9000 	str.w	r9, [r2]
 8000e46:	4aa4      	ldr	r2, [pc, #656]	; (80010d8 <init_synth+0x320>)
 8000e48:	4627      	mov	r7, r4
 8000e4a:	f8c2 9000 	str.w	r9, [r2]
 8000e4e:	4aa3      	ldr	r2, [pc, #652]	; (80010dc <init_synth+0x324>)
 8000e50:	f8c3 000e 	str.w	r0, [r3, #14]
 8000e54:	f8c2 9000 	str.w	r9, [r2]
	SILENT
} ADSR_STATES;

uint16_t env_period;

static inline uint16_t calculate_env_inc(uint8_t rate) { return (ENV_MAX_RATE << 8) / (uint16_t)(ENV_MAX_RATE - rate + 1); };
 8000e58:	4aa1      	ldr	r2, [pc, #644]	; (80010e0 <init_synth+0x328>)
 8000e5a:	851d      	strh	r5, [r3, #40]	; 0x28
 8000e5c:	6011      	str	r1, [r2, #0]
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000e5e:	4aa1      	ldr	r2, [pc, #644]	; (80010e4 <init_synth+0x32c>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e60:	86dd      	strh	r5, [r3, #54]	; 0x36
		op_attack_inc[i] = calculate_env_inc(op_attack[i]);
 8000e62:	6016      	str	r6, [r2, #0]
 8000e64:	6056      	str	r6, [r2, #4]
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000e66:	4aa0      	ldr	r2, [pc, #640]	; (80010e8 <init_synth+0x330>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e68:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
		op_decay_inc[i] = calculate_env_inc(op_decay[i]);
 8000e6c:	6016      	str	r6, [r2, #0]
 8000e6e:	6056      	str	r6, [r2, #4]
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000e70:	4a9e      	ldr	r2, [pc, #632]	; (80010ec <init_synth+0x334>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e72:	f8a3 5052 	strh.w	r5, [r3, #82]	; 0x52
		op_release_inc[i] = calculate_env_inc(op_release[i]);
 8000e76:	6016      	str	r6, [r2, #0]
 8000e78:	6056      	str	r6, [r2, #4]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8000e7a:	4656      	mov	r6, sl
 8000e7c:	46a3      	mov	fp, r4
 8000e7e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000e80:	61d8      	str	r0, [r3, #28]
 8000e82:	6219      	str	r1, [r3, #32]
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
 8000e86:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8000e8a:	f8c3 002a 	str.w	r0, [r3, #42]	; 0x2a
 8000e8e:	f8c3 102e 	str.w	r1, [r3, #46]	; 0x2e
 8000e92:	f8c3 2032 	str.w	r2, [r3, #50]	; 0x32
 8000e96:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8000e9a:	6398      	str	r0, [r3, #56]	; 0x38
 8000e9c:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea0:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 8000ea4:	f8c3 0046 	str.w	r0, [r3, #70]	; 0x46
 8000ea8:	f8c3 104a 	str.w	r1, [r3, #74]	; 0x4a
 8000eac:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
 8000eb0:	cf07      	ldmia	r7!, {r0, r1, r2}
 8000eb2:	6558      	str	r0, [r3, #84]	; 0x54
 8000eb4:	6599      	str	r1, [r3, #88]	; 0x58
 8000eb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8000eb8:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000eba:	4656      	mov	r6, sl
 8000ebc:	f8a3 5060 	strh.w	r5, [r3, #96]	; 0x60
 8000ec0:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8000ec4:	f8a3 507c 	strh.w	r5, [r3, #124]	; 0x7c
 8000ec8:	f8a3 508a 	strh.w	r5, [r3, #138]	; 0x8a
 8000ecc:	f8a3 5098 	strh.w	r5, [r3, #152]	; 0x98
 8000ed0:	f8c3 0062 	str.w	r0, [r3, #98]	; 0x62
 8000ed4:	f8c3 1066 	str.w	r1, [r3, #102]	; 0x66
 8000ed8:	f8c3 206a 	str.w	r2, [r3, #106]	; 0x6a
 8000edc:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ede:	4656      	mov	r6, sl
 8000ee0:	6718      	str	r0, [r3, #112]	; 0x70
 8000ee2:	6759      	str	r1, [r3, #116]	; 0x74
 8000ee4:	679a      	str	r2, [r3, #120]	; 0x78
 8000ee6:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ee8:	4656      	mov	r6, sl
 8000eea:	f8c3 007e 	str.w	r0, [r3, #126]	; 0x7e
 8000eee:	f8c3 1082 	str.w	r1, [r3, #130]	; 0x82
 8000ef2:	f8c3 2086 	str.w	r2, [r3, #134]	; 0x86
 8000ef6:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ef8:	4656      	mov	r6, sl
 8000efa:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000efe:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8000f02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000f06:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f08:	4656      	mov	r6, sl
 8000f0a:	f8a3 50a6 	strh.w	r5, [r3, #166]	; 0xa6
 8000f0e:	f8a3 50b4 	strh.w	r5, [r3, #180]	; 0xb4
 8000f12:	f8a3 50c2 	strh.w	r5, [r3, #194]	; 0xc2
 8000f16:	f8a3 50d0 	strh.w	r5, [r3, #208]	; 0xd0
 8000f1a:	f8a3 50de 	strh.w	r5, [r3, #222]	; 0xde
 8000f1e:	f8c3 009a 	str.w	r0, [r3, #154]	; 0x9a
 8000f22:	f8c3 109e 	str.w	r1, [r3, #158]	; 0x9e
 8000f26:	f8c3 20a2 	str.w	r2, [r3, #162]	; 0xa2
 8000f2a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f2c:	4656      	mov	r6, sl
 8000f2e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 8000f32:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8000f36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000f3a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f3c:	4656      	mov	r6, sl
 8000f3e:	f8c3 00b6 	str.w	r0, [r3, #182]	; 0xb6
 8000f42:	f8c3 10ba 	str.w	r1, [r3, #186]	; 0xba
 8000f46:	f8c3 20be 	str.w	r2, [r3, #190]	; 0xbe
 8000f4a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f4c:	4656      	mov	r6, sl
 8000f4e:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
 8000f52:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8000f56:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000f5a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f5c:	4656      	mov	r6, sl
 8000f5e:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
 8000f62:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
 8000f66:	f8c3 20da 	str.w	r2, [r3, #218]	; 0xda
 8000f6a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f6c:	4656      	mov	r6, sl
 8000f6e:	f8a3 50ec 	strh.w	r5, [r3, #236]	; 0xec
 8000f72:	f8a3 50fa 	strh.w	r5, [r3, #250]	; 0xfa
 8000f76:	f8a3 5108 	strh.w	r5, [r3, #264]	; 0x108
 8000f7a:	f8a3 5116 	strh.w	r5, [r3, #278]	; 0x116
 8000f7e:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f82:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8000f86:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000f8a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f8c:	4656      	mov	r6, sl
 8000f8e:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
 8000f92:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
 8000f96:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
 8000f9a:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000f9c:	4656      	mov	r6, sl
 8000f9e:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
 8000fa2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 8000fa6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000faa:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fac:	4656      	mov	r6, sl
 8000fae:	f8c3 010a 	str.w	r0, [r3, #266]	; 0x10a
 8000fb2:	f8c3 110e 	str.w	r1, [r3, #270]	; 0x10e
 8000fb6:	f8c3 2112 	str.w	r2, [r3, #274]	; 0x112
 8000fba:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fbc:	4656      	mov	r6, sl
 8000fbe:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000fc2:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
 8000fc6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8000fca:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000fcc:	4656      	mov	r6, sl
 8000fce:	f8a3 5124 	strh.w	r5, [r3, #292]	; 0x124
 8000fd2:	f8a3 5132 	strh.w	r5, [r3, #306]	; 0x132
 8000fd6:	f8a3 5140 	strh.w	r5, [r3, #320]	; 0x140
 8000fda:	f8a3 514e 	strh.w	r5, [r3, #334]	; 0x14e
 8000fde:	f8a3 515c 	strh.w	r5, [r3, #348]	; 0x15c
 8000fe2:	f8c3 0126 	str.w	r0, [r3, #294]	; 0x126
 8000fe6:	f8c3 112a 	str.w	r1, [r3, #298]	; 0x12a
 8000fea:	f8c3 212e 	str.w	r2, [r3, #302]	; 0x12e
 8000fee:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000ff0:	4656      	mov	r6, sl
 8000ff2:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8000ff6:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
 8000ffa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8000ffe:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001000:	4656      	mov	r6, sl
 8001002:	f8c3 0142 	str.w	r0, [r3, #322]	; 0x142
 8001006:	f8c3 1146 	str.w	r1, [r3, #326]	; 0x146
 800100a:	f8c3 214a 	str.w	r2, [r3, #330]	; 0x14a
 800100e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001010:	4656      	mov	r6, sl
 8001012:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8001016:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
 800101a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800101e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001020:	4656      	mov	r6, sl
 8001022:	f8a3 516a 	strh.w	r5, [r3, #362]	; 0x16a
 8001026:	f8a3 5178 	strh.w	r5, [r3, #376]	; 0x178
 800102a:	f8a3 5186 	strh.w	r5, [r3, #390]	; 0x186
 800102e:	f8a3 5194 	strh.w	r5, [r3, #404]	; 0x194
 8001032:	f8a3 51a2 	strh.w	r5, [r3, #418]	; 0x1a2
 8001036:	f8c3 015e 	str.w	r0, [r3, #350]	; 0x15e
 800103a:	f8c3 1162 	str.w	r1, [r3, #354]	; 0x162
 800103e:	f8c3 2166 	str.w	r2, [r3, #358]	; 0x166
 8001042:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001044:	4656      	mov	r6, sl
 8001046:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
 800104a:	f8c3 1170 	str.w	r1, [r3, #368]	; 0x170
 800104e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8001052:	4654      	mov	r4, sl
 8001054:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001056:	4656      	mov	r6, sl
 8001058:	f8a3 51b0 	strh.w	r5, [r3, #432]	; 0x1b0
 800105c:	f8a3 51be 	strh.w	r5, [r3, #446]	; 0x1be
		}
	}
	env_period = ENV_MAX_PERIOD;
 8001060:	f240 5562 	movw	r5, #1378	; 0x562
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8001064:	f8c3 017a 	str.w	r0, [r3, #378]	; 0x17a
 8001068:	f8c3 117e 	str.w	r1, [r3, #382]	; 0x17e
 800106c:	f8c3 2182 	str.w	r2, [r3, #386]	; 0x182
 8001070:	ce07      	ldmia	r6!, {r0, r1, r2}
 8001072:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8001076:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 800107a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 800107e:	cc07      	ldmia	r4!, {r0, r1, r2}
	env_period = ENV_MAX_PERIOD;
 8001080:	4c1b      	ldr	r4, [pc, #108]	; (80010f0 <init_synth+0x338>)
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 8001082:	f8c3 0196 	str.w	r0, [r3, #406]	; 0x196
 8001086:	f8c3 119a 	str.w	r1, [r3, #410]	; 0x19a
 800108a:	f8c3 219e 	str.w	r2, [r3, #414]	; 0x19e
 800108e:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 8001092:	f8c3 01a4 	str.w	r0, [r3, #420]	; 0x1a4
 8001096:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
 800109a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 800109e:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
	env_period = ENV_MAX_PERIOD;
 80010a2:	8025      	strh	r5, [r4, #0]
			op[i][o] = (OPERATOR) {-1, -1, MAX_VOLUME, -1, -1, SILENT, MAX_VOLUME << 8};
 80010a4:	f8c3 01b2 	str.w	r0, [r3, #434]	; 0x1b2
 80010a8:	f8c3 11b6 	str.w	r1, [r3, #438]	; 0x1b6
 80010ac:	f8c3 21ba 	str.w	r2, [r3, #442]	; 0x1ba
}
 80010b0:	b019      	add	sp, #100	; 0x64
 80010b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010b6:	bf00      	nop
 80010b8:	08004c20 	.word	0x08004c20
 80010bc:	200008c4 	.word	0x200008c4
 80010c0:	20000a88 	.word	0x20000a88
 80010c4:	20000aac 	.word	0x20000aac
 80010c8:	20000ab8 	.word	0x20000ab8
 80010cc:	20000aa0 	.word	0x20000aa0
 80010d0:	20000a90 	.word	0x20000a90
 80010d4:	20000abc 	.word	0x20000abc
 80010d8:	20000a84 	.word	0x20000a84
 80010dc:	20000a8c 	.word	0x20000a8c
 80010e0:	20000ac4 	.word	0x20000ac4
 80010e4:	20000ab0 	.word	0x20000ab0
 80010e8:	20000aa4 	.word	0x20000aa4
 80010ec:	20000a94 	.word	0x20000a94
 80010f0:	20000a8a 	.word	0x20000a8a

080010f4 <clear_voices>:

void clear_voices() {
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		op[0][i].note_value = -1;
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <clear_voices+0x20>)
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	739a      	strb	r2, [r3, #14]
 80010fc:	771a      	strb	r2, [r3, #28]
 80010fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800110a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800110e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}
}
 8001112:	4770      	bx	lr
 8001114:	200008c4 	.word	0x200008c4

08001118 <add_voice>:

void add_voice(uint8_t note_value) {
 8001118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t voice_index, released_voice = (uint8_t)-1;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 800111c:	4c79      	ldr	r4, [pc, #484]	; (8001304 <add_voice+0x1ec>)
void add_voice(uint8_t note_value) {
 800111e:	4606      	mov	r6, r0
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 8001120:	7823      	ldrb	r3, [r4, #0]
 8001122:	2bff      	cmp	r3, #255	; 0xff
 8001124:	f000 80c5 	beq.w	80012b2 <add_voice+0x19a>
 8001128:	7ba2      	ldrb	r2, [r4, #14]
 800112a:	2aff      	cmp	r2, #255	; 0xff
 800112c:	f000 80c6 	beq.w	80012bc <add_voice+0x1a4>
 8001130:	7f22      	ldrb	r2, [r4, #28]
 8001132:	2aff      	cmp	r2, #255	; 0xff
 8001134:	f000 80c7 	beq.w	80012c6 <add_voice+0x1ae>
 8001138:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800113c:	2aff      	cmp	r2, #255	; 0xff
 800113e:	f000 80c7 	beq.w	80012d0 <add_voice+0x1b8>
 8001142:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8001146:	2aff      	cmp	r2, #255	; 0xff
 8001148:	f000 80c7 	beq.w	80012da <add_voice+0x1c2>
 800114c:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8001150:	2aff      	cmp	r2, #255	; 0xff
 8001152:	f000 80c7 	beq.w	80012e4 <add_voice+0x1cc>
 8001156:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 800115a:	2aff      	cmp	r2, #255	; 0xff
 800115c:	f000 80c7 	beq.w	80012ee <add_voice+0x1d6>
 8001160:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8001164:	2aff      	cmp	r2, #255	; 0xff
 8001166:	f000 80c9 	beq.w	80012fc <add_voice+0x1e4>
 800116a:	2108      	movs	r1, #8
 800116c:	460d      	mov	r5, r1
			break;
		}
	}
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800116e:	429e      	cmp	r6, r3
 8001170:	f000 80a2 	beq.w	80012b8 <add_voice+0x1a0>
			voice_index = i;
			break;
		}
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001174:	7aa3      	ldrb	r3, [r4, #10]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001176:	7ba2      	ldrb	r2, [r4, #14]
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001178:	2b03      	cmp	r3, #3
 800117a:	bf14      	ite	ne
 800117c:	23ff      	movne	r3, #255	; 0xff
 800117e:	2300      	moveq	r3, #0
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001180:	42b2      	cmp	r2, r6
 8001182:	f000 809e 	beq.w	80012c2 <add_voice+0x1aa>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001186:	7e20      	ldrb	r0, [r4, #24]
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001188:	7f22      	ldrb	r2, [r4, #28]
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800118a:	2803      	cmp	r0, #3
 800118c:	bf08      	it	eq
 800118e:	2301      	moveq	r3, #1
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001190:	42b2      	cmp	r2, r6
 8001192:	f000 809b 	beq.w	80012cc <add_voice+0x1b4>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 8001196:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 800119a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800119e:	2803      	cmp	r0, #3
 80011a0:	bf08      	it	eq
 80011a2:	2302      	moveq	r3, #2
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011a4:	42b2      	cmp	r2, r6
 80011a6:	f000 8096 	beq.w	80012d6 <add_voice+0x1be>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011aa:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011ae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80011b2:	2803      	cmp	r0, #3
 80011b4:	bf08      	it	eq
 80011b6:	2303      	moveq	r3, #3
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011b8:	42b2      	cmp	r2, r6
 80011ba:	f000 8091 	beq.w	80012e0 <add_voice+0x1c8>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011be:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011c2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80011c6:	2803      	cmp	r0, #3
 80011c8:	bf08      	it	eq
 80011ca:	2304      	moveq	r3, #4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011cc:	42b2      	cmp	r2, r6
 80011ce:	f000 808c 	beq.w	80012ea <add_voice+0x1d2>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011d2:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011d6:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80011da:	2803      	cmp	r0, #3
 80011dc:	bf08      	it	eq
 80011de:	2305      	moveq	r3, #5
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011e0:	42b2      	cmp	r2, r6
 80011e2:	f000 8087 	beq.w	80012f4 <add_voice+0x1dc>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011e6:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011ea:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80011ee:	2803      	cmp	r0, #3
 80011f0:	bf08      	it	eq
 80011f2:	2306      	moveq	r3, #6
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80011f4:	42b2      	cmp	r2, r6
 80011f6:	d07f      	beq.n	80012f8 <add_voice+0x1e0>
		if (op[0][i].adsr_state == RELEASE) {											//keep track of any note in released state
 80011f8:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 80011fc:	2a03      	cmp	r2, #3
 80011fe:	d03f      	beq.n	8001280 <add_voice+0x168>
			released_voice = i;
		}
	}
	if (voice_index == MAX_VOICES) {
 8001200:	2d08      	cmp	r5, #8
 8001202:	d102      	bne.n	800120a <add_voice+0xf2>
		if (released_voice == (uint8_t)-1) {
 8001204:	2bff      	cmp	r3, #255	; 0xff
 8001206:	d03f      	beq.n	8001288 <add_voice+0x170>
 8001208:	4619      	mov	r1, r3
		}
		else {
			voice_index = released_voice;
		}
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 800120a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800120e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
			op[op_index][voice_index].delta = (op_ratio[op_index] * 								//multiply delta based off of ratio of carrier
				(op[0][voice_index].delta - (int16_t)op_detune[op_index])) >> 4;
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
		}
		else {
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 8001212:	4627      	mov	r7, r4
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 8001214:	2500      	movs	r5, #0
 8001216:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800130c <add_voice+0x1f4>
 800121a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8001310 <add_voice+0x1f8>
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 800121e:	f04f 0a00 	mov.w	sl, #0
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 8001222:	4630      	mov	r0, r6
		op[op_index][voice_index].note_value = note_value;										//store note
 8001224:	7026      	strb	r6, [r4, #0]
		op[op_index][voice_index].phase = 0;													//reset the phase (wave table index)
 8001226:	f8a4 a008 	strh.w	sl, [r4, #8]
		op[op_index][voice_index].freq = (op_ratio[op_index] * note_to_freq(note_value)) >> 4;	//calculate and store frequency (>> 4 for integer)
 800122a:	f819 8b01 	ldrb.w	r8, [r9], #1
 800122e:	f7ff fa61 	bl	80006f4 <note_to_freq>
 8001232:	fb00 f308 	mul.w	r3, r0, r8
 8001236:	111b      	asrs	r3, r3, #4
 8001238:	8063      	strh	r3, [r4, #2]
		if (op_index != 0)	{
 800123a:	b2e8      	uxtb	r0, r5
 800123c:	b335      	cbz	r5, 800128c <add_voice+0x174>
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
		}
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 800123e:	f8bb 1000 	ldrh.w	r1, [fp]
				(op[0][voice_index].delta - (int16_t)op_detune[op_index])) >> 4;
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <add_voice+0x1f0>)
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001244:	f5a1 4c00 	sub.w	ip, r1, #32768	; 0x8000
 8001248:	fabc fc8c 	clz	ip, ip
				(op[0][voice_index].delta - (int16_t)op_detune[op_index])) >> 4;
 800124c:	f8b7 e006 	ldrh.w	lr, [r7, #6]
 8001250:	575b      	ldrsb	r3, [r3, r5]
			op[op_index][voice_index].delta = (op_ratio[op_index] * 								//multiply delta based off of ratio of carrier
 8001252:	f819 2c01 	ldrb.w	r2, [r9, #-1]
				(op[0][voice_index].delta - (int16_t)op_detune[op_index])) >> 4;
 8001256:	ebae 0e03 	sub.w	lr, lr, r3
			op[op_index][voice_index].delta = (op_ratio[op_index] * 								//multiply delta based off of ratio of carrier
 800125a:	fb02 f20e 	mul.w	r2, r2, lr
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 800125e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001262:	eb03 1322 	add.w	r3, r3, r2, asr #4
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001266:	2803      	cmp	r0, #3
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 8001268:	f884 a004 	strb.w	sl, [r4, #4]
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 800126c:	80e3      	strh	r3, [r4, #6]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 800126e:	81a1      	strh	r1, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 8001270:	f884 c00a 	strb.w	ip, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001274:	d008      	beq.n	8001288 <add_voice+0x170>
 8001276:	3501      	adds	r5, #1
 8001278:	3470      	adds	r4, #112	; 0x70
 800127a:	f10b 0b02 	add.w	fp, fp, #2
 800127e:	e7ce      	b.n	800121e <add_voice+0x106>
	if (voice_index == MAX_VOICES) {
 8001280:	2d08      	cmp	r5, #8
 8001282:	d1c2      	bne.n	800120a <add_voice+0xf2>
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8001284:	2307      	movs	r3, #7
 8001286:	e7bf      	b.n	8001208 <add_voice+0xf0>
		}
		else {
			op[op_index][voice_index].adsr_state = ATTACK;											//else, start on attack state
		}
	}
}
 8001288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			op[op_index][voice_index].delta = calculate_delta(op[0][voice_index].freq);				//calculate and store delta
 800128c:	8878      	ldrh	r0, [r7, #2]
 800128e:	f7ff fa37 	bl	8000700 <calculate_delta>
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 8001292:	f8bb 3000 	ldrh.w	r3, [fp]
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <add_voice+0x1f0>)
 8001298:	f992 1000 	ldrsb.w	r1, [r2]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 800129c:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 80012a0:	fab2 f282 	clz	r2, r2
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 80012a4:	4408      	add	r0, r1
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80012a6:	0952      	lsrs	r2, r2, #5
			op[op_index][voice_index].delta += (int16_t)op_detune[op_index];						//offset with detune param
 80012a8:	80f8      	strh	r0, [r7, #6]
		op[op_index][voice_index].volume = 0x00;												//reset volume to 0
 80012aa:	7125      	strb	r5, [r4, #4]
		op[op_index][voice_index].env_amp = op_attack_inc[op_index];							//start envelope amp with attack increment
 80012ac:	81a3      	strh	r3, [r4, #12]
		if (op_attack_inc[op_index] == MAX_VOLUME << 8) {										//if attack rate is max
 80012ae:	72a2      	strb	r2, [r4, #10]
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 80012b0:	e7e1      	b.n	8001276 <add_voice+0x15e>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012b2:	2100      	movs	r1, #0
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012b4:	460d      	mov	r5, r1
 80012b6:	e75a      	b.n	800116e <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012b8:	2100      	movs	r1, #0
 80012ba:	e7a6      	b.n	800120a <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012bc:	2101      	movs	r1, #1
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012be:	460d      	mov	r5, r1
 80012c0:	e755      	b.n	800116e <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012c2:	2101      	movs	r1, #1
 80012c4:	e7a1      	b.n	800120a <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012c6:	2102      	movs	r1, #2
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012c8:	460d      	mov	r5, r1
 80012ca:	e750      	b.n	800116e <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012cc:	2102      	movs	r1, #2
 80012ce:	e79c      	b.n	800120a <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012d0:	2103      	movs	r1, #3
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012d2:	460d      	mov	r5, r1
 80012d4:	e74b      	b.n	800116e <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012d6:	2103      	movs	r1, #3
 80012d8:	e797      	b.n	800120a <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012da:	2104      	movs	r1, #4
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012dc:	460d      	mov	r5, r1
 80012de:	e746      	b.n	800116e <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012e0:	2104      	movs	r1, #4
 80012e2:	e792      	b.n	800120a <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012e4:	2105      	movs	r1, #5
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012e6:	460d      	mov	r5, r1
 80012e8:	e741      	b.n	800116e <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012ea:	2105      	movs	r1, #5
 80012ec:	e78d      	b.n	800120a <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012ee:	2106      	movs	r1, #6
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012f0:	460d      	mov	r5, r1
 80012f2:	e73c      	b.n	800116e <add_voice+0x56>
		if (op[0][i].note_value == note_value) {												//if the same note is active but released, reactivate it
 80012f4:	2106      	movs	r1, #6
 80012f6:	e788      	b.n	800120a <add_voice+0xf2>
 80012f8:	2107      	movs	r1, #7
 80012fa:	e786      	b.n	800120a <add_voice+0xf2>
		if (op[0][voice_index].note_value == (uint8_t)-1) {										//find unused voice
 80012fc:	2107      	movs	r1, #7
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
 80012fe:	460d      	mov	r5, r1
 8001300:	e735      	b.n	800116e <add_voice+0x56>
 8001302:	bf00      	nop
 8001304:	200008c4 	.word	0x200008c4
 8001308:	20000aac 	.word	0x20000aac
 800130c:	20000ac4 	.word	0x20000ac4
 8001310:	20000ab0 	.word	0x20000ab0

08001314 <release_voice>:

void release_voice(uint8_t note_value) {
	uint8_t voice_index;
	for (voice_index = 0; voice_index < MAX_VOICES; voice_index++) {
		if (op[0][voice_index].note_value == note_value) {
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <release_voice+0x78>)
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	4282      	cmp	r2, r0
 800131a:	d01a      	beq.n	8001352 <release_voice+0x3e>
 800131c:	7b9a      	ldrb	r2, [r3, #14]
 800131e:	4282      	cmp	r2, r0
 8001320:	d025      	beq.n	800136e <release_voice+0x5a>
 8001322:	7f1a      	ldrb	r2, [r3, #28]
 8001324:	4282      	cmp	r2, r0
 8001326:	d024      	beq.n	8001372 <release_voice+0x5e>
 8001328:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800132c:	4282      	cmp	r2, r0
 800132e:	d022      	beq.n	8001376 <release_voice+0x62>
 8001330:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001334:	4282      	cmp	r2, r0
 8001336:	d020      	beq.n	800137a <release_voice+0x66>
 8001338:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800133c:	4282      	cmp	r2, r0
 800133e:	d01e      	beq.n	800137e <release_voice+0x6a>
 8001340:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001344:	4282      	cmp	r2, r0
 8001346:	d01c      	beq.n	8001382 <release_voice+0x6e>
 8001348:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 800134c:	4282      	cmp	r2, r0
 800134e:	d01a      	beq.n	8001386 <release_voice+0x72>
		return;
	}
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
		op[op_index][voice_index].adsr_state = RELEASE;
	}
}
 8001350:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 8001352:	2100      	movs	r1, #0
		op[op_index][voice_index].adsr_state = RELEASE;
 8001354:	2203      	movs	r2, #3
 8001356:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800135a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800135e:	729a      	strb	r2, [r3, #10]
 8001360:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8001364:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8001368:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
}
 800136c:	4770      	bx	lr
		if (op[0][voice_index].note_value == note_value) {
 800136e:	2101      	movs	r1, #1
 8001370:	e7f0      	b.n	8001354 <release_voice+0x40>
 8001372:	2102      	movs	r1, #2
 8001374:	e7ee      	b.n	8001354 <release_voice+0x40>
 8001376:	2103      	movs	r1, #3
 8001378:	e7ec      	b.n	8001354 <release_voice+0x40>
 800137a:	2104      	movs	r1, #4
 800137c:	e7ea      	b.n	8001354 <release_voice+0x40>
 800137e:	2105      	movs	r1, #5
 8001380:	e7e8      	b.n	8001354 <release_voice+0x40>
 8001382:	2106      	movs	r1, #6
 8001384:	e7e6      	b.n	8001354 <release_voice+0x40>
 8001386:	2107      	movs	r1, #7
 8001388:	e7e4      	b.n	8001354 <release_voice+0x40>
 800138a:	bf00      	nop
 800138c:	200008c4 	.word	0x200008c4

08001390 <synth_sample>:

int16_t synth_sample() {
 8001390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t output_volume = 0x0800;											//default output volume 2048
	if (--env_period == 0x00) {												//decrement and check envelope period
 8001394:	4bc3      	ldr	r3, [pc, #780]	; (80016a4 <synth_sample+0x314>)
 8001396:	881d      	ldrh	r5, [r3, #0]
 8001398:	3d01      	subs	r5, #1
 800139a:	b2ad      	uxth	r5, r5
 800139c:	bb2d      	cbnz	r5, 80013ea <synth_sample+0x5a>
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 800139e:	f240 5262 	movw	r2, #1378	; 0x562
	int16_t output_volume = 0x0800;											//default output volume 2048
 80013a2:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80013a6:	4cc0      	ldr	r4, [pc, #768]	; (80016a8 <synth_sample+0x318>)
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80013a8:	f8df 930c 	ldr.w	r9, [pc, #780]	; 80016b8 <synth_sample+0x328>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80013ac:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80016bc <synth_sample+0x32c>
 80013b0:	4fbe      	ldr	r7, [pc, #760]	; (80016ac <synth_sample+0x31c>)
		env_period = ENV_MAX_PERIOD;											//reset envelope period
 80013b2:	801a      	strh	r2, [r3, #0]
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80013b4:	7823      	ldrb	r3, [r4, #0]
 80013b6:	b2e8      	uxtb	r0, r5
 80013b8:	2bff      	cmp	r3, #255	; 0xff
 80013ba:	d00e      	beq.n	80013da <synth_sample+0x4a>
		switch (op[op_index][voice_index].adsr_state) {
 80013bc:	7aa3      	ldrb	r3, [r4, #10]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	f200 808d 	bhi.w	80014de <synth_sample+0x14e>
 80013c4:	e8df f003 	tbb	[pc, r3]
 80013c8:	588b6375 	.word	0x588b6375
 80013cc:	03          	.byte	0x03
 80013cd:	00          	.byte	0x00
static inline void delete_voice(uint8_t voice_index) { op[0][voice_index].note_value = -1; };
 80013ce:	23ff      	movs	r3, #255	; 0xff
 80013d0:	7023      	strb	r3, [r4, #0]
				cycle_envelope(voice_index);
				output_volume += modulate(voice_index);
 80013d2:	f7ff faf9 	bl	80009c8 <modulate>
 80013d6:	4406      	add	r6, r0
 80013d8:	b236      	sxth	r6, r6
		for (uint8_t voice_index = 0; voice_index < MAX_VOICES; voice_index++) {//loop through all voices
 80013da:	3501      	adds	r5, #1
 80013dc:	2d08      	cmp	r5, #8
 80013de:	f104 040e 	add.w	r4, r4, #14
 80013e2:	d1e7      	bne.n	80013b4 <synth_sample+0x24>
				output_volume += modulate(voice_index);
			}
		}
	}
	return output_volume;
}
 80013e4:	4630      	mov	r0, r6
 80013e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80013ea:	4caf      	ldr	r4, [pc, #700]	; (80016a8 <synth_sample+0x318>)
	if (--env_period == 0x00) {												//decrement and check envelope period
 80013ec:	801d      	strh	r5, [r3, #0]
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80013ee:	7823      	ldrb	r3, [r4, #0]
 80013f0:	2bff      	cmp	r3, #255	; 0xff
 80013f2:	d16d      	bne.n	80014d0 <synth_sample+0x140>
	int16_t output_volume = 0x0800;											//default output volume 2048
 80013f4:	f44f 6600 	mov.w	r6, #2048	; 0x800
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 80013f8:	7ba3      	ldrb	r3, [r4, #14]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d004      	beq.n	8001408 <synth_sample+0x78>
				output_volume += modulate(voice_index);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff fae2 	bl	80009c8 <modulate>
 8001404:	4406      	add	r6, r0
 8001406:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001408:	7f23      	ldrb	r3, [r4, #28]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d004      	beq.n	8001418 <synth_sample+0x88>
				output_volume += modulate(voice_index);
 800140e:	2002      	movs	r0, #2
 8001410:	f7ff fada 	bl	80009c8 <modulate>
 8001414:	4406      	add	r6, r0
 8001416:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001418:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800141c:	2bff      	cmp	r3, #255	; 0xff
 800141e:	d004      	beq.n	800142a <synth_sample+0x9a>
				output_volume += modulate(voice_index);
 8001420:	2003      	movs	r0, #3
 8001422:	f7ff fad1 	bl	80009c8 <modulate>
 8001426:	4406      	add	r6, r0
 8001428:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800142a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800142e:	2bff      	cmp	r3, #255	; 0xff
 8001430:	d004      	beq.n	800143c <synth_sample+0xac>
				output_volume += modulate(voice_index);
 8001432:	2004      	movs	r0, #4
 8001434:	f7ff fac8 	bl	80009c8 <modulate>
 8001438:	4406      	add	r6, r0
 800143a:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800143c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001440:	2bff      	cmp	r3, #255	; 0xff
 8001442:	d004      	beq.n	800144e <synth_sample+0xbe>
				output_volume += modulate(voice_index);
 8001444:	2005      	movs	r0, #5
 8001446:	f7ff fabf 	bl	80009c8 <modulate>
 800144a:	4406      	add	r6, r0
 800144c:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 800144e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	d004      	beq.n	8001460 <synth_sample+0xd0>
				output_volume += modulate(voice_index);
 8001456:	2006      	movs	r0, #6
 8001458:	f7ff fab6 	bl	80009c8 <modulate>
 800145c:	4406      	add	r6, r0
 800145e:	b236      	sxth	r6, r6
			if (op[0][voice_index].note_value != (uint8_t)-1) {						//if the voice is active
 8001460:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8001464:	2bff      	cmp	r3, #255	; 0xff
 8001466:	d0bd      	beq.n	80013e4 <synth_sample+0x54>
				output_volume += modulate(voice_index);
 8001468:	2007      	movs	r0, #7
 800146a:	f7ff faad 	bl	80009c8 <modulate>
 800146e:	4406      	add	r6, r0
 8001470:	b236      	sxth	r6, r6
}
 8001472:	4630      	mov	r0, r6
 8001474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001478:	4a8d      	ldr	r2, [pc, #564]	; (80016b0 <synth_sample+0x320>)
 800147a:	89a3      	ldrh	r3, [r4, #12]
 800147c:	8812      	ldrh	r2, [r2, #0]
 800147e:	4293      	cmp	r3, r2
 8001480:	f080 8136 	bcs.w	80016f0 <synth_sample+0x360>
				op[op_index][voice_index].env_amp = 0;
 8001484:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001486:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001488:	81a3      	strh	r3, [r4, #12]
				op[op_index][voice_index].adsr_state = SILENT;
 800148a:	72a2      	strb	r2, [r4, #10]
 800148c:	e028      	b.n	80014e0 <synth_sample+0x150>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 800148e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8001492:	f8b8 1000 	ldrh.w	r1, [r8]
 8001496:	783a      	ldrb	r2, [r7, #0]
 8001498:	ebac 0e01 	sub.w	lr, ip, r1
 800149c:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80014a0:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80014a4:	dd5f      	ble.n	8001566 <synth_sample+0x1d6>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80014a6:	458c      	cmp	ip, r1
 80014a8:	d35d      	bcc.n	8001566 <synth_sample+0x1d6>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80014aa:	fa1f f38e 	uxth.w	r3, lr
 80014ae:	81a3      	strh	r3, [r4, #12]
 80014b0:	e016      	b.n	80014e0 <synth_sample+0x150>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 80014b2:	4a80      	ldr	r2, [pc, #512]	; (80016b4 <synth_sample+0x324>)
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	8812      	ldrh	r2, [r2, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014be:	f2c0 8114 	blt.w	80016ea <synth_sample+0x35a>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 80014c6:	2101      	movs	r1, #1
 80014c8:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 80014ca:	81a2      	strh	r2, [r4, #12]
				op[op_index][voice_index].adsr_state = DECAY;
 80014cc:	72a1      	strb	r1, [r4, #10]
 80014ce:	e007      	b.n	80014e0 <synth_sample+0x150>
				output_volume += modulate(voice_index);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff fa79 	bl	80009c8 <modulate>
 80014d6:	f500 6600 	add.w	r6, r0, #2048	; 0x800
 80014da:	b236      	sxth	r6, r6
 80014dc:	e78c      	b.n	80013f8 <synth_sample+0x68>
 80014de:	89a3      	ldrh	r3, [r4, #12]
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014e0:	f899 2000 	ldrb.w	r2, [r9]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 80014ea:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014ee:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 80014f0:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 80014f2:	7123      	strb	r3, [r4, #4]
		switch (op[op_index][voice_index].adsr_state) {
 80014f4:	d05f      	beq.n	80015b6 <synth_sample+0x226>
 80014f6:	2a03      	cmp	r2, #3
 80014f8:	d04f      	beq.n	800159a <synth_sample+0x20a>
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d03b      	beq.n	8001576 <synth_sample+0x1e6>
 80014fe:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001502:	f899 2001 	ldrb.w	r2, [r9, #1]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 800150c:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001510:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 8001512:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001514:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		switch (op[op_index][voice_index].adsr_state) {
 8001518:	d06a      	beq.n	80015f0 <synth_sample+0x260>
 800151a:	2a03      	cmp	r2, #3
 800151c:	f000 8096 	beq.w	800164c <synth_sample+0x2bc>
 8001520:	2a00      	cmp	r2, #0
 8001522:	f000 8082 	beq.w	800162a <synth_sample+0x29a>
 8001526:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800152a:	f899 2002 	ldrb.w	r2, [r9, #2]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	fb02 f303 	mul.w	r3, r2, r3
		switch (op[op_index][voice_index].adsr_state) {
 8001534:	f894 215a 	ldrb.w	r2, [r4, #346]	; 0x15a
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001538:	11db      	asrs	r3, r3, #7
		switch (op[op_index][voice_index].adsr_state) {
 800153a:	2a01      	cmp	r2, #1
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 800153c:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
		switch (op[op_index][voice_index].adsr_state) {
 8001540:	f000 80be 	beq.w	80016c0 <synth_sample+0x330>
 8001544:	2a03      	cmp	r2, #3
 8001546:	f000 809f 	beq.w	8001688 <synth_sample+0x2f8>
 800154a:	2a00      	cmp	r2, #0
 800154c:	f000 808b 	beq.w	8001666 <synth_sample+0x2d6>
 8001550:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
		op[op_index][voice_index].volume = ((uint8_t)(op[op_index][voice_index].env_amp >> 8) * op_amp[op_index]) >> MAX_VOLUME_BITS;
 8001554:	f899 2003 	ldrb.w	r2, [r9, #3]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	11db      	asrs	r3, r3, #7
 8001560:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	for (uint8_t op_index = 0; op_index < MAX_OPERATORS; op_index++) {
 8001564:	e735      	b.n	80013d2 <synth_sample+0x42>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001566:	b29b      	uxth	r3, r3
 8001568:	81a3      	strh	r3, [r4, #12]
				if (op_sustain[op_index] == 0x00) {
 800156a:	2a00      	cmp	r2, #0
 800156c:	f040 80cd 	bne.w	800170a <synth_sample+0x37a>
					op[op_index][voice_index].adsr_state = SILENT;
 8001570:	2204      	movs	r2, #4
 8001572:	72a2      	strb	r2, [r4, #10]
 8001574:	e7b4      	b.n	80014e0 <synth_sample+0x150>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001576:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <synth_sample+0x324>)
 8001578:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800157c:	8852      	ldrh	r2, [r2, #2]
 800157e:	4413      	add	r3, r2
 8001580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001584:	f2c0 80bd 	blt.w	8001702 <synth_sample+0x372>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 800158c:	2101      	movs	r1, #1
 800158e:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001590:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = DECAY;
 8001594:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
 8001598:	e7b3      	b.n	8001502 <synth_sample+0x172>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 800159a:	4a45      	ldr	r2, [pc, #276]	; (80016b0 <synth_sample+0x320>)
 800159c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80015a0:	8852      	ldrh	r2, [r2, #2]
 80015a2:	4293      	cmp	r3, r2
 80015a4:	f080 80a8 	bcs.w	80016f8 <synth_sample+0x368>
				op[op_index][voice_index].env_amp = 0;
 80015a8:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 80015aa:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 80015ac:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				op[op_index][voice_index].adsr_state = SILENT;
 80015b0:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 80015b4:	e7a5      	b.n	8001502 <synth_sample+0x172>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80015b6:	f8b4 c07c 	ldrh.w	ip, [r4, #124]	; 0x7c
 80015ba:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80015be:	787a      	ldrb	r2, [r7, #1]
 80015c0:	ebac 0e01 	sub.w	lr, ip, r1
 80015c4:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80015c8:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80015cc:	dd06      	ble.n	80015dc <synth_sample+0x24c>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 80015ce:	458c      	cmp	ip, r1
 80015d0:	d304      	bcc.n	80015dc <synth_sample+0x24c>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 80015d2:	fa1f f38e 	uxth.w	r3, lr
 80015d6:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80015da:	e792      	b.n	8001502 <synth_sample+0x172>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80015dc:	b29b      	uxth	r3, r3
 80015de:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
				if (op_sustain[op_index] == 0x00) {
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	f040 809d 	bne.w	8001722 <synth_sample+0x392>
					op[op_index][voice_index].adsr_state = SILENT;
 80015e8:	2204      	movs	r2, #4
 80015ea:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 80015ee:	e788      	b.n	8001502 <synth_sample+0x172>
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80015f0:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	; 0xec
 80015f4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80015f8:	78ba      	ldrb	r2, [r7, #2]
 80015fa:	ebac 0e01 	sub.w	lr, ip, r1
 80015fe:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 8001602:	ea4f 2302 	mov.w	r3, r2, lsl #8
 8001606:	dd06      	ble.n	8001616 <synth_sample+0x286>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 8001608:	458c      	cmp	ip, r1
 800160a:	d304      	bcc.n	8001616 <synth_sample+0x286>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 800160c:	fa1f f38e 	uxth.w	r3, lr
 8001610:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001614:	e789      	b.n	800152a <synth_sample+0x19a>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 8001616:	b29b      	uxth	r3, r3
 8001618:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				if (op_sustain[op_index] == 0x00) {
 800161c:	2a00      	cmp	r2, #0
 800161e:	f040 8094 	bne.w	800174a <synth_sample+0x3ba>
					op[op_index][voice_index].adsr_state = SILENT;
 8001622:	2204      	movs	r2, #4
 8001624:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001628:	e77f      	b.n	800152a <synth_sample+0x19a>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <synth_sample+0x324>)
 800162c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8001630:	8892      	ldrh	r2, [r2, #4]
 8001632:	4413      	add	r3, r2
 8001634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001638:	db6f      	blt.n	800171a <synth_sample+0x38a>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800163a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 800163e:	2101      	movs	r1, #1
 8001640:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001642:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = DECAY;
 8001646:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
 800164a:	e76e      	b.n	800152a <synth_sample+0x19a>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 800164c:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <synth_sample+0x320>)
 800164e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8001652:	8892      	ldrh	r2, [r2, #4]
 8001654:	4293      	cmp	r3, r2
 8001656:	d25b      	bcs.n	8001710 <synth_sample+0x380>
				op[op_index][voice_index].env_amp = 0;
 8001658:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 800165a:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 800165c:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				op[op_index][voice_index].adsr_state = SILENT;
 8001660:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001664:	e761      	b.n	800152a <synth_sample+0x19a>
			if (op[op_index][voice_index].env_amp + op_attack_inc[op_index] >= MAX_VOLUME << 8) {
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <synth_sample+0x324>)
 8001668:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 800166c:	88d2      	ldrh	r2, [r2, #6]
 800166e:	4413      	add	r3, r2
 8001670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001674:	db65      	blt.n	8001742 <synth_sample+0x3b2>
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 8001676:	f44f 4200 	mov.w	r2, #32768	; 0x8000
				op[op_index][voice_index].adsr_state = DECAY;
 800167a:	2101      	movs	r1, #1
 800167c:	4613      	mov	r3, r2
				op[op_index][voice_index].env_amp = MAX_VOLUME << 8;
 800167e:	f8a4 215c 	strh.w	r2, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = DECAY;
 8001682:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
 8001686:	e765      	b.n	8001554 <synth_sample+0x1c4>
			if (op[op_index][voice_index].env_amp < op_release_inc[op_index]) {
 8001688:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <synth_sample+0x320>)
 800168a:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 800168e:	88d2      	ldrh	r2, [r2, #6]
 8001690:	4293      	cmp	r3, r2
 8001692:	d251      	bcs.n	8001738 <synth_sample+0x3a8>
				op[op_index][voice_index].env_amp = 0;
 8001694:	2300      	movs	r3, #0
				op[op_index][voice_index].adsr_state = SILENT;
 8001696:	2204      	movs	r2, #4
				op[op_index][voice_index].env_amp = 0;
 8001698:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				op[op_index][voice_index].adsr_state = SILENT;
 800169c:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 80016a0:	e758      	b.n	8001554 <synth_sample+0x1c4>
 80016a2:	bf00      	nop
 80016a4:	20000a8a 	.word	0x20000a8a
 80016a8:	200008c4 	.word	0x200008c4
 80016ac:	20000a84 	.word	0x20000a84
 80016b0:	20000a94 	.word	0x20000a94
 80016b4:	20000ab0 	.word	0x20000ab0
 80016b8:	20000aa0 	.word	0x20000aa0
 80016bc:	20000aa4 	.word	0x20000aa4
			if (op[op_index][voice_index].env_amp - op_decay_inc[op_index] <= (op_sustain[op_index] << 8)
 80016c0:	f8b4 c15c 	ldrh.w	ip, [r4, #348]	; 0x15c
 80016c4:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80016c8:	78fa      	ldrb	r2, [r7, #3]
 80016ca:	ebac 0e01 	sub.w	lr, ip, r1
 80016ce:	ebbe 2f02 	cmp.w	lr, r2, lsl #8
 80016d2:	ea4f 2302 	mov.w	r3, r2, lsl #8
 80016d6:	dc28      	bgt.n	800172a <synth_sample+0x39a>
				op[op_index][voice_index].env_amp = (op_sustain[op_index] << 8);
 80016d8:	b29b      	uxth	r3, r3
 80016da:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
				if (op_sustain[op_index] == 0x00) {
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d037      	beq.n	8001752 <synth_sample+0x3c2>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 80016e2:	2202      	movs	r2, #2
 80016e4:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 80016e8:	e734      	b.n	8001554 <synth_sample+0x1c4>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	81a3      	strh	r3, [r4, #12]
 80016ee:	e6f7      	b.n	80014e0 <synth_sample+0x150>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	81a3      	strh	r3, [r4, #12]
 80016f6:	e6f3      	b.n	80014e0 <synth_sample+0x150>
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8001700:	e6ff      	b.n	8001502 <synth_sample+0x172>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001702:	b29b      	uxth	r3, r3
 8001704:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8001708:	e6fb      	b.n	8001502 <synth_sample+0x172>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 800170a:	2202      	movs	r2, #2
 800170c:	72a2      	strb	r2, [r4, #10]
 800170e:	e6e7      	b.n	80014e0 <synth_sample+0x150>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001718:	e707      	b.n	800152a <synth_sample+0x19a>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 800171a:	b29b      	uxth	r3, r3
 800171c:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
 8001720:	e703      	b.n	800152a <synth_sample+0x19a>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 8001722:	2202      	movs	r2, #2
 8001724:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
 8001728:	e6eb      	b.n	8001502 <synth_sample+0x172>
					|| op[op_index][voice_index].env_amp < op_decay_inc[op_index]) {
 800172a:	458c      	cmp	ip, r1
 800172c:	d3d4      	bcc.n	80016d8 <synth_sample+0x348>
				op[op_index][voice_index].env_amp -= op_decay_inc[op_index];
 800172e:	fa1f f38e 	uxth.w	r3, lr
 8001732:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001736:	e70d      	b.n	8001554 <synth_sample+0x1c4>
				op[op_index][voice_index].env_amp -= op_release_inc[op_index];
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001740:	e708      	b.n	8001554 <synth_sample+0x1c4>
				op[op_index][voice_index].env_amp += op_attack_inc[op_index];
 8001742:	b29b      	uxth	r3, r3
 8001744:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8001748:	e704      	b.n	8001554 <synth_sample+0x1c4>
					op[op_index][voice_index].adsr_state = SUSTAIN;
 800174a:	2202      	movs	r2, #2
 800174c:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
 8001750:	e6eb      	b.n	800152a <synth_sample+0x19a>
					op[op_index][voice_index].adsr_state = SILENT;
 8001752:	2204      	movs	r2, #4
 8001754:	f884 215a 	strb.w	r2, [r4, #346]	; 0x15a
 8001758:	e6fc      	b.n	8001554 <synth_sample+0x1c4>
 800175a:	bf00      	nop

0800175c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop

08001760 <display_send_command>:
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
	//turn on display
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
}

void display_send_command(uint8_t cmd) {
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
	display_i2c_write(data_LSB | DISPLAY_BIT_E);	//pull enable bit HIGH
	display_i2c_write(data_LSB);					//pull enable bit LOW
}

void display_i2c_write(uint8_t byte) {
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001762:	26ff      	movs	r6, #255	; 0xff
 8001764:	4d27      	ldr	r5, [pc, #156]	; (8001804 <display_send_command+0xa4>)
void display_send_command(uint8_t cmd) {
 8001766:	b085      	sub	sp, #20
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 8001768:	f020 070f 	bic.w	r7, r0, #15
 800176c:	f047 0708 	orr.w	r7, r7, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 8001770:	f10d 020f 	add.w	r2, sp, #15
 8001774:	2301      	movs	r3, #1
 8001776:	214e      	movs	r1, #78	; 0x4e
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001778:	0104      	lsls	r4, r0, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800177a:	9600      	str	r6, [sp, #0]
 800177c:	6828      	ldr	r0, [r5, #0]
 800177e:	f88d 700f 	strb.w	r7, [sp, #15]
 8001782:	f001 fbe7 	bl	8002f54 <HAL_I2C_Master_Transmit>
	display_i2c_write(cmd_MSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 8001786:	f047 0c04 	orr.w	ip, r7, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 800178a:	f10d 020f 	add.w	r2, sp, #15
 800178e:	2301      	movs	r3, #1
 8001790:	214e      	movs	r1, #78	; 0x4e
 8001792:	6828      	ldr	r0, [r5, #0]
 8001794:	9600      	str	r6, [sp, #0]
 8001796:	f88d c00f 	strb.w	ip, [sp, #15]
 800179a:	f001 fbdb 	bl	8002f54 <HAL_I2C_Master_Transmit>
 800179e:	f10d 020f 	add.w	r2, sp, #15
 80017a2:	2301      	movs	r3, #1
 80017a4:	214e      	movs	r1, #78	; 0x4e
 80017a6:	6828      	ldr	r0, [r5, #0]
 80017a8:	9600      	str	r6, [sp, #0]
 80017aa:	f88d 700f 	strb.w	r7, [sp, #15]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80017ae:	f044 0408 	orr.w	r4, r4, #8
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80017b2:	f001 fbcf 	bl	8002f54 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);									//wait 5 ms
 80017b6:	2005      	movs	r0, #5
 80017b8:	f000 ff88 	bl	80026cc <HAL_Delay>
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 80017bc:	b2e4      	uxtb	r4, r4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80017be:	f10d 020f 	add.w	r2, sp, #15
 80017c2:	2301      	movs	r3, #1
 80017c4:	214e      	movs	r1, #78	; 0x4e
 80017c6:	6828      	ldr	r0, [r5, #0]
 80017c8:	9600      	str	r6, [sp, #0]
 80017ca:	f88d 400f 	strb.w	r4, [sp, #15]
	display_i2c_write(cmd_LSB | DISPLAY_BIT_E);		//pull enable bit HIGH
 80017ce:	f044 0704 	orr.w	r7, r4, #4
	HAL_I2C_Master_Transmit(display_i2c, DISPLAY_ADDR_I2C_WRITE, &byte, 1, 0xFF);
 80017d2:	f001 fbbf 	bl	8002f54 <HAL_I2C_Master_Transmit>
 80017d6:	f10d 020f 	add.w	r2, sp, #15
 80017da:	2301      	movs	r3, #1
 80017dc:	214e      	movs	r1, #78	; 0x4e
 80017de:	6828      	ldr	r0, [r5, #0]
 80017e0:	9600      	str	r6, [sp, #0]
 80017e2:	f88d 700f 	strb.w	r7, [sp, #15]
 80017e6:	f001 fbb5 	bl	8002f54 <HAL_I2C_Master_Transmit>
 80017ea:	2301      	movs	r3, #1
 80017ec:	214e      	movs	r1, #78	; 0x4e
 80017ee:	6828      	ldr	r0, [r5, #0]
 80017f0:	9600      	str	r6, [sp, #0]
 80017f2:	f10d 020f 	add.w	r2, sp, #15
 80017f6:	f88d 400f 	strb.w	r4, [sp, #15]
 80017fa:	f001 fbab 	bl	8002f54 <HAL_I2C_Master_Transmit>
}
 80017fe:	b005      	add	sp, #20
 8001800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001802:	bf00      	nop
 8001804:	20000b24 	.word	0x20000b24

08001808 <init_display>:
void init_display(I2C_HandleTypeDef* hi2c) {
 8001808:	4602      	mov	r2, r0
 800180a:	b508      	push	{r3, lr}
	display_i2c = hi2c;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <init_display+0x30>)
	display_send_command(init_4_bit_cmd);
 800180e:	2033      	movs	r0, #51	; 0x33
	display_i2c = hi2c;
 8001810:	601a      	str	r2, [r3, #0]
	display_send_command(init_4_bit_cmd);
 8001812:	f7ff ffa5 	bl	8001760 <display_send_command>
	display_send_command(init_4_bit_cmd);
 8001816:	2032      	movs	r0, #50	; 0x32
 8001818:	f7ff ffa2 	bl	8001760 <display_send_command>
	display_send_command(DISPLAY_CMD_FUNC |  DISPLAY_BIT_FUNC_DOUBLE);
 800181c:	2028      	movs	r0, #40	; 0x28
 800181e:	f7ff ff9f 	bl	8001760 <display_send_command>
	display_send_command(DISPLAY_CMD_CLEAR);
 8001822:	2001      	movs	r0, #1
 8001824:	f7ff ff9c 	bl	8001760 <display_send_command>
	display_send_command(DISPLAY_CMD_ENTRY | DISPLAY_BIT_ENTRY_INC);
 8001828:	2006      	movs	r0, #6
 800182a:	f7ff ff99 	bl	8001760 <display_send_command>
}
 800182e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display_send_command(DISPLAY_CMD_ON_OFF | DISPLAY_BIT_ON_DISPLAY | DISPLAY_BIT_ON_CURSOR);
 8001832:	200e      	movs	r0, #14
 8001834:	f7ff bf94 	b.w	8001760 <display_send_command>
 8001838:	20000b24 	.word	0x20000b24

0800183c <display_i2c_dma_write>:
}

void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 800183c:	b410      	push	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 800183e:	4c04      	ldr	r4, [pc, #16]	; (8001850 <display_i2c_dma_write+0x14>)
void display_i2c_dma_write(uint8_t* buffer, uint8_t size) {
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 8001844:	6820      	ldr	r0, [r4, #0]
 8001846:	214e      	movs	r1, #78	; 0x4e
}
 8001848:	bc10      	pop	{r4}
	HAL_I2C_Master_Transmit_DMA(display_i2c, DISPLAY_ADDR_I2C_WRITE, buffer, size);
 800184a:	f001 bccf 	b.w	80031ec <HAL_I2C_Master_Transmit_DMA>
 800184e:	bf00      	nop
 8001850:	20000b24 	.word	0x20000b24

08001854 <display_convert_cmd>:

void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = cmd_MSB;
 8001854:	7813      	ldrb	r3, [r2, #0]
void display_convert_cmd(uint8_t cmd, uint8_t* buffer, uint8_t* pos){
 8001856:	b470      	push	{r4, r5, r6}
	uint8_t cmd_MSB = (cmd & 0xF0) | DISPLAY_BIT_BACKLIGHT;
 8001858:	f020 040f 	bic.w	r4, r0, #15
 800185c:	f044 0408 	orr.w	r4, r4, #8
	*(buffer + (*pos)++) = cmd_MSB;
 8001860:	1c5d      	adds	r5, r3, #1
 8001862:	7015      	strb	r5, [r2, #0]
 8001864:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB | DISPLAY_BIT_E;
 8001866:	7813      	ldrb	r3, [r2, #0]
 8001868:	f044 0504 	orr.w	r5, r4, #4
 800186c:	1c5e      	adds	r6, r3, #1
 800186e:	7016      	strb	r6, [r2, #0]
 8001870:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = cmd_MSB;
 8001872:	7815      	ldrb	r5, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 8001874:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = cmd_MSB;
 8001876:	1c68      	adds	r0, r5, #1
 8001878:	7010      	strb	r0, [r2, #0]
 800187a:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = cmd_LSB;
 800187c:	7810      	ldrb	r0, [r2, #0]
	uint8_t cmd_LSB = (cmd << 4) | DISPLAY_BIT_BACKLIGHT;
 800187e:	f043 0308 	orr.w	r3, r3, #8
 8001882:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = cmd_LSB;
 8001884:	1c44      	adds	r4, r0, #1
 8001886:	7014      	strb	r4, [r2, #0]
 8001888:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB | DISPLAY_BIT_E;
 800188a:	7810      	ldrb	r0, [r2, #0]
 800188c:	f043 0404 	orr.w	r4, r3, #4
 8001890:	1c45      	adds	r5, r0, #1
 8001892:	7015      	strb	r5, [r2, #0]
 8001894:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = cmd_LSB;
 8001896:	7810      	ldrb	r0, [r2, #0]
 8001898:	1c44      	adds	r4, r0, #1
 800189a:	7014      	strb	r4, [r2, #0]
 800189c:	540b      	strb	r3, [r1, r0]
}
 800189e:	bc70      	pop	{r4, r5, r6}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <display_convert_data>:

void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
	*(buffer + (*pos)++) = data_MSB;
 80018a4:	7813      	ldrb	r3, [r2, #0]
void display_convert_data(uint8_t data, uint8_t* buffer, uint8_t* pos) {
 80018a6:	b470      	push	{r4, r5, r6}
	uint8_t data_MSB = (data & 0xF0) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 80018a8:	f020 040f 	bic.w	r4, r0, #15
 80018ac:	f044 0409 	orr.w	r4, r4, #9
	*(buffer + (*pos)++) = data_MSB;
 80018b0:	1c5d      	adds	r5, r3, #1
 80018b2:	7015      	strb	r5, [r2, #0]
 80018b4:	54cc      	strb	r4, [r1, r3]
	*(buffer + (*pos)++) = data_MSB | DISPLAY_BIT_E;
 80018b6:	7813      	ldrb	r3, [r2, #0]
 80018b8:	f044 0504 	orr.w	r5, r4, #4
 80018bc:	1c5e      	adds	r6, r3, #1
 80018be:	7016      	strb	r6, [r2, #0]
 80018c0:	54cd      	strb	r5, [r1, r3]
	*(buffer + (*pos)++) = data_MSB;
 80018c2:	7815      	ldrb	r5, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 80018c4:	0103      	lsls	r3, r0, #4
	*(buffer + (*pos)++) = data_MSB;
 80018c6:	1c68      	adds	r0, r5, #1
 80018c8:	7010      	strb	r0, [r2, #0]
 80018ca:	554c      	strb	r4, [r1, r5]
	*(buffer + (*pos)++) = data_LSB;
 80018cc:	7810      	ldrb	r0, [r2, #0]
	uint8_t data_LSB = (data << 4) | DISPLAY_BIT_RS | DISPLAY_BIT_BACKLIGHT;
 80018ce:	f043 0309 	orr.w	r3, r3, #9
 80018d2:	b2db      	uxtb	r3, r3
	*(buffer + (*pos)++) = data_LSB;
 80018d4:	1c44      	adds	r4, r0, #1
 80018d6:	7014      	strb	r4, [r2, #0]
 80018d8:	540b      	strb	r3, [r1, r0]
	*(buffer + (*pos)++) = data_LSB | DISPLAY_BIT_E;
 80018da:	7810      	ldrb	r0, [r2, #0]
 80018dc:	f043 0404 	orr.w	r4, r3, #4
 80018e0:	1c45      	adds	r5, r0, #1
 80018e2:	7015      	strb	r5, [r2, #0]
 80018e4:	540c      	strb	r4, [r1, r0]
	*(buffer + (*pos)++) = data_LSB;
 80018e6:	7810      	ldrb	r0, [r2, #0]
 80018e8:	1c44      	adds	r4, r0, #1
 80018ea:	7014      	strb	r4, [r2, #0]
 80018ec:	540b      	strb	r3, [r1, r0]
}
 80018ee:	bc70      	pop	{r4, r5, r6}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop

080018f4 <input_invalid>:
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
}

void input_invalid() {
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <change_inc_dec>:

void change_inc_dec() {
	if (inc_dec == INC_DEC_DEFAULT) {
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <change_inc_dec+0x10>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	2a01      	cmp	r2, #1
		inc_dec = INC_DEC_ALT;
	}
	else {
		inc_dec = INC_DEC_DEFAULT;
 80018fe:	bf0c      	ite	eq
 8001900:	2208      	moveq	r2, #8
 8001902:	2201      	movne	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
	}
}
 8001906:	4770      	bx	lr
 8001908:	20000b20 	.word	0x20000b20

0800190c <select_menu_amp>:

void select_menu_amp() {
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 800190c:	21cc      	movs	r1, #204	; 0xcc
 800190e:	4801      	ldr	r0, [pc, #4]	; (8001914 <select_menu_amp+0x8>)
 8001910:	f7ff bf94 	b.w	800183c <display_i2c_dma_write>
 8001914:	20000d10 	.word	0x20000d10

08001918 <select_menu_ratio>:
}

void select_menu_ratio() {
	display_i2c_dma_write(ui_menu_ratio_converted, UI_STRING_CONVERTED_SIZE);
 8001918:	21cc      	movs	r1, #204	; 0xcc
 800191a:	4801      	ldr	r0, [pc, #4]	; (8001920 <select_menu_ratio+0x8>)
 800191c:	f7ff bf8e 	b.w	800183c <display_i2c_dma_write>
 8001920:	20001258 	.word	0x20001258

08001924 <select_menu_detune>:
}
void select_menu_detune() {
	display_i2c_dma_write(ui_menu_detune_converted, UI_STRING_CONVERTED_SIZE);
 8001924:	21cc      	movs	r1, #204	; 0xcc
 8001926:	4801      	ldr	r0, [pc, #4]	; (800192c <select_menu_detune+0x8>)
 8001928:	f7ff bf88 	b.w	800183c <display_i2c_dma_write>
 800192c:	200013c8 	.word	0x200013c8

08001930 <select_menu_env>:
}

void select_menu_env() {
	display_i2c_dma_write(ui_menu_env_converted, UI_STRING_CONVERTED_SIZE);
 8001930:	21cc      	movs	r1, #204	; 0xcc
 8001932:	4801      	ldr	r0, [pc, #4]	; (8001938 <select_menu_env+0x8>)
 8001934:	f7ff bf82 	b.w	800183c <display_i2c_dma_write>
 8001938:	20000ddc 	.word	0x20000ddc

0800193c <select_menu_algo>:
}

void select_menu_algo() {
	display_i2c_dma_write(ui_menu_algo_converted, UI_STRING_CONVERTED_SIZE);
 800193c:	21cc      	movs	r1, #204	; 0xcc
 800193e:	4801      	ldr	r0, [pc, #4]	; (8001944 <select_menu_algo+0x8>)
 8001940:	f7ff bf7c 	b.w	800183c <display_i2c_dma_write>
 8001944:	20000ea8 	.word	0x20000ea8

08001948 <select_menu_instr>:
}

void select_menu_instr() {
	display_i2c_dma_write(ui_menu_instr_converted, UI_STRING_CONVERTED_SIZE);
 8001948:	21cc      	movs	r1, #204	; 0xcc
 800194a:	4801      	ldr	r0, [pc, #4]	; (8001950 <select_menu_instr+0x8>)
 800194c:	f7ff bf76 	b.w	800183c <display_i2c_dma_write>
 8001950:	200010b8 	.word	0x200010b8

08001954 <enter_menu_instr>:
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop

08001958 <inc_set_instr>:
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <dec_set_instr>:
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <temp_set_instr>:
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <enter_menu_env>:
	}
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
}

void display_update_menu_env() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001964:	2300      	movs	r3, #0
void enter_menu_env() {
 8001966:	b570      	push	{r4, r5, r6, lr}
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001968:	4911      	ldr	r1, [pc, #68]	; (80019b0 <enter_menu_env+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <enter_menu_env+0x50>)
 800196c:	7809      	ldrb	r1, [r1, #0]
void enter_menu_env() {
 800196e:	b086      	sub	sp, #24
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001970:	ad02      	add	r5, sp, #8
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001972:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001976:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001978:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800197c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001980:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 8001982:	f003 f939 	bl	8004bf8 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001986:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < 4; i++) {
		display_convert_data(
 8001988:	4e0b      	ldr	r6, [pc, #44]	; (80019b8 <enter_menu_env+0x54>)
 800198a:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 800198c:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001990:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001994:	4631      	mov	r1, r6
 8001996:	f10d 0203 	add.w	r2, sp, #3
 800199a:	f7ff ff83 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 800199e:	42ac      	cmp	r4, r5
 80019a0:	d1f6      	bne.n	8001990 <enter_menu_env+0x2c>
			params[i], ui_menu_env_op_converted, &index
		);
	}
	display_i2c_dma_write(ui_menu_env_op_converted, UI_STRING_CONVERTED_SIZE);
 80019a2:	21cc      	movs	r1, #204	; 0xcc
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <enter_menu_env+0x54>)
 80019a6:	f7ff ff49 	bl	800183c <display_i2c_dma_write>
}
 80019aa:	b006      	add	sp, #24
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
 80019ae:	bf00      	nop
 80019b0:	20000bf9 	.word	0x20000bf9
 80019b4:	20000004 	.word	0x20000004
 80019b8:	20000b28 	.word	0x20000b28

080019bc <inc_menu_env_op>:
void inc_menu_env_op() {
 80019bc:	b570      	push	{r4, r5, r6, lr}
	if (++fsm_env_op == MAX_OPERATORS) {
 80019be:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <inc_menu_env_op+0x5c>)
void inc_menu_env_op() {
 80019c0:	b086      	sub	sp, #24
	if (++fsm_env_op == MAX_OPERATORS) {
 80019c2:	7813      	ldrb	r3, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80019c4:	ad02      	add	r5, sp, #8
	if (++fsm_env_op == MAX_OPERATORS) {
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b04      	cmp	r3, #4
		fsm_env_op = 0x00;
 80019cc:	bf05      	ittet	eq
 80019ce:	2100      	moveq	r1, #0
 80019d0:	460b      	moveq	r3, r1
	if (++fsm_env_op == MAX_OPERATORS) {
 80019d2:	7013      	strbne	r3, [r2, #0]
		fsm_env_op = 0x00;
 80019d4:	7011      	strbeq	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80019d6:	2200      	movs	r2, #0
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 80019d8:	4910      	ldr	r1, [pc, #64]	; (8001a1c <inc_menu_env_op+0x60>)
 80019da:	a801      	add	r0, sp, #4
 80019dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80019e0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80019e4:	e9c5 2201 	strd	r2, r2, [r5, #4]
 80019e8:	732a      	strb	r2, [r5, #12]
	strcat(params, HEX_TO_STRING[fsm_env_op]);
 80019ea:	f003 f905 	bl	8004bf8 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 80019ee:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 80019f0:	4e0b      	ldr	r6, [pc, #44]	; (8001a20 <inc_menu_env_op+0x64>)
 80019f2:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 80019f4:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 80019f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80019fc:	4631      	mov	r1, r6
 80019fe:	f10d 0203 	add.w	r2, sp, #3
 8001a02:	f7ff ff4f 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001a06:	42ac      	cmp	r4, r5
 8001a08:	d1f6      	bne.n	80019f8 <inc_menu_env_op+0x3c>
	display_i2c_dma_write(ui_menu_env_op_converted, UI_STRING_CONVERTED_SIZE);
 8001a0a:	21cc      	movs	r1, #204	; 0xcc
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <inc_menu_env_op+0x64>)
 8001a0e:	f7ff ff15 	bl	800183c <display_i2c_dma_write>
}
 8001a12:	b006      	add	sp, #24
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
 8001a16:	bf00      	nop
 8001a18:	20000bf9 	.word	0x20000bf9
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	20000b28 	.word	0x20000b28

08001a24 <enter_menu_algo>:
	}
	display_i2c_dma_write(ui_set_env_converted, UI_STRING_CONVERTED_SIZE);
}

void display_update_menu_algo() {
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a24:	2300      	movs	r3, #0
void enter_menu_algo() {
 8001a26:	b570      	push	{r4, r5, r6, lr}
	temp[0] = algo;
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <enter_menu_algo+0x50>)
 8001a2a:	4813      	ldr	r0, [pc, #76]	; (8001a78 <enter_menu_algo+0x54>)
 8001a2c:	7812      	ldrb	r2, [r2, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001a2e:	4913      	ldr	r1, [pc, #76]	; (8001a7c <enter_menu_algo+0x58>)
void enter_menu_algo() {
 8001a30:	b086      	sub	sp, #24
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a32:	ad02      	add	r5, sp, #8
	temp[0] = algo;
 8001a34:	7002      	strb	r2, [r0, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001a36:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001a3a:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a3c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001a40:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001a44:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[algo]);
 8001a46:	f003 f8d7 	bl	8004bf8 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001a4a:	236c      	movs	r3, #108	; 0x6c
	for (uint8_t i = 0; i < 4; i++) {
		display_convert_data(
 8001a4c:	4e0c      	ldr	r6, [pc, #48]	; (8001a80 <enter_menu_algo+0x5c>)
 8001a4e:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001a50:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001a54:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a58:	4631      	mov	r1, r6
 8001a5a:	f10d 0203 	add.w	r2, sp, #3
 8001a5e:	f7ff ff21 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001a62:	42ac      	cmp	r4, r5
 8001a64:	d1f6      	bne.n	8001a54 <enter_menu_algo+0x30>
			params[i], ui_set_algo_converted, &index
		);
	}
	display_i2c_dma_write(ui_set_algo_converted, UI_STRING_CONVERTED_SIZE);
 8001a66:	21cc      	movs	r1, #204	; 0xcc
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <enter_menu_algo+0x5c>)
 8001a6a:	f7ff fee7 	bl	800183c <display_i2c_dma_write>
}
 8001a6e:	b006      	add	sp, #24
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
 8001a72:	bf00      	nop
 8001a74:	20000a88 	.word	0x20000a88
 8001a78:	20000bf4 	.word	0x20000bf4
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	2000118c 	.word	0x2000118c

08001a84 <temp_set_algo>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a84:	2300      	movs	r3, #0
void temp_set_algo() {
 8001a86:	b570      	push	{r4, r5, r6, lr}
	temp[0] = algo;
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <temp_set_algo+0x54>)
	uint8_t temp2 = temp[0];
 8001a8a:	4c14      	ldr	r4, [pc, #80]	; (8001adc <temp_set_algo+0x58>)
	temp[0] = algo;
 8001a8c:	7815      	ldrb	r5, [r2, #0]
	uint8_t temp2 = temp[0];
 8001a8e:	7820      	ldrb	r0, [r4, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001a90:	4913      	ldr	r1, [pc, #76]	; (8001ae0 <temp_set_algo+0x5c>)
void temp_set_algo() {
 8001a92:	b086      	sub	sp, #24
	temp[0] = algo;
 8001a94:	7025      	strb	r5, [r4, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001a96:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001a9a:	ad02      	add	r5, sp, #8
	algo = temp2;
 8001a9c:	7010      	strb	r0, [r2, #0]
	strcat(params, HEX_TO_STRING[algo]);
 8001a9e:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001aa0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001aa4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001aa8:	732b      	strb	r3, [r5, #12]
	strcat(params, HEX_TO_STRING[algo]);
 8001aaa:	f003 f8a5 	bl	8004bf8 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001aae:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001ab0:	4e0c      	ldr	r6, [pc, #48]	; (8001ae4 <temp_set_algo+0x60>)
 8001ab2:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001ab4:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001ab8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001abc:	4631      	mov	r1, r6
 8001abe:	f10d 0203 	add.w	r2, sp, #3
 8001ac2:	f7ff feef 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001ac6:	42ac      	cmp	r4, r5
 8001ac8:	d1f6      	bne.n	8001ab8 <temp_set_algo+0x34>
	display_i2c_dma_write(ui_set_algo_converted, UI_STRING_CONVERTED_SIZE);
 8001aca:	21cc      	movs	r1, #204	; 0xcc
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <temp_set_algo+0x60>)
 8001ace:	f7ff feb5 	bl	800183c <display_i2c_dma_write>
}
 8001ad2:	b006      	add	sp, #24
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000a88 	.word	0x20000a88
 8001adc:	20000bf4 	.word	0x20000bf4
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	2000118c 	.word	0x2000118c

08001ae8 <inc_set_algo>:
void inc_set_algo() {
 8001ae8:	b570      	push	{r4, r5, r6, lr}
	if (++algo == (MAX_ALGO + 1)) {
 8001aea:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <inc_set_algo+0x5c>)
void inc_set_algo() {
 8001aec:	b086      	sub	sp, #24
	if (++algo == (MAX_ALGO + 1)) {
 8001aee:	7813      	ldrb	r3, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001af0:	ad02      	add	r5, sp, #8
	if (++algo == (MAX_ALGO + 1)) {
 8001af2:	3301      	adds	r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b0c      	cmp	r3, #12
		algo = 0x00;
 8001af8:	bf05      	ittet	eq
 8001afa:	2100      	moveq	r1, #0
 8001afc:	460b      	moveq	r3, r1
	if (++algo == (MAX_ALGO + 1)) {
 8001afe:	7013      	strbne	r3, [r2, #0]
		algo = 0x00;
 8001b00:	7011      	strbeq	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b02:	2200      	movs	r2, #0
	strcat(params, HEX_TO_STRING[algo]);
 8001b04:	4910      	ldr	r1, [pc, #64]	; (8001b48 <inc_set_algo+0x60>)
 8001b06:	a801      	add	r0, sp, #4
 8001b08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b0c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8001b10:	e9c5 2201 	strd	r2, r2, [r5, #4]
 8001b14:	732a      	strb	r2, [r5, #12]
	strcat(params, HEX_TO_STRING[algo]);
 8001b16:	f003 f86f 	bl	8004bf8 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b1a:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001b1c:	4e0b      	ldr	r6, [pc, #44]	; (8001b4c <inc_set_algo+0x64>)
 8001b1e:	ac01      	add	r4, sp, #4
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b20:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 8001b24:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001b28:	4631      	mov	r1, r6
 8001b2a:	f10d 0203 	add.w	r2, sp, #3
 8001b2e:	f7ff feb9 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < 4; i++) {
 8001b32:	42ac      	cmp	r4, r5
 8001b34:	d1f6      	bne.n	8001b24 <inc_set_algo+0x3c>
	display_i2c_dma_write(ui_set_algo_converted, UI_STRING_CONVERTED_SIZE);
 8001b36:	21cc      	movs	r1, #204	; 0xcc
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <inc_set_algo+0x64>)
 8001b3a:	f7ff fe7f 	bl	800183c <display_i2c_dma_write>
}
 8001b3e:	b006      	add	sp, #24
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
 8001b42:	bf00      	nop
 8001b44:	20000a88 	.word	0x20000a88
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	2000118c 	.word	0x2000118c

08001b50 <enter_menu_ratio>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b50:	2300      	movs	r3, #0
		temp[i] = op_ratio[i];
 8001b52:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <enter_menu_ratio+0x60>)
void enter_menu_ratio() {
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	4614      	mov	r4, r2
 8001b58:	b086      	sub	sp, #24
		temp[i] = op_ratio[i];
 8001b5a:	6811      	ldr	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b5c:	e9cd 3301 	strd	r3, r3, [sp, #4]
		temp[i] = op_ratio[i];
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <enter_menu_ratio+0x64>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b62:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001b66:	4e14      	ldr	r6, [pc, #80]	; (8001bb8 <enter_menu_ratio+0x68>)
		temp[i] = op_ratio[i];
 8001b68:	6011      	str	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001b6a:	1d25      	adds	r5, r4, #4
 8001b6c:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 8001b70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001b74:	a801      	add	r0, sp, #4
 8001b76:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001b7a:	f003 f82e 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001b7e:	42a5      	cmp	r5, r4
 8001b80:	d1f6      	bne.n	8001b70 <enter_menu_ratio+0x20>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b82:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001b84:	4e0d      	ldr	r6, [pc, #52]	; (8001bbc <enter_menu_ratio+0x6c>)
 8001b86:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001b8a:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001b8e:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001b92:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001b96:	4631      	mov	r1, r6
 8001b98:	f10d 0203 	add.w	r2, sp, #3
 8001b9c:	f7ff fe82 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001ba0:	42a5      	cmp	r5, r4
 8001ba2:	d1f6      	bne.n	8001b92 <enter_menu_ratio+0x42>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001ba4:	21cc      	movs	r1, #204	; 0xcc
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <enter_menu_ratio+0x6c>)
 8001ba8:	f7ff fe48 	bl	800183c <display_i2c_dma_write>
}
 8001bac:	b006      	add	sp, #24
 8001bae:	bd70      	pop	{r4, r5, r6, pc}
 8001bb0:	20000ac4 	.word	0x20000ac4
 8001bb4:	20000bf4 	.word	0x20000bf4
 8001bb8:	20000608 	.word	0x20000608
 8001bbc:	20000bfc 	.word	0x20000bfc

08001bc0 <enter_menu_detune>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001bc0:	2300      	movs	r3, #0
		temp[i] = op_detune[i];
 8001bc2:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <enter_menu_detune+0x64>)
void enter_menu_detune() {
 8001bc4:	b570      	push	{r4, r5, r6, lr}
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	b086      	sub	sp, #24
		temp[i] = op_detune[i];
 8001bca:	6811      	ldr	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001bcc:	e9cd 3301 	strd	r3, r3, [sp, #4]
		temp[i] = op_detune[i];
 8001bd0:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <enter_menu_detune+0x68>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001bd2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001bd6:	4e15      	ldr	r6, [pc, #84]	; (8001c2c <enter_menu_detune+0x6c>)
		temp[i] = op_detune[i];
 8001bd8:	6011      	str	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001bda:	1d25      	adds	r5, r4, #4
 8001bdc:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001be0:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001be4:	a801      	add	r0, sp, #4
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001bec:	f002 fff5 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001bf0:	42a5      	cmp	r5, r4
 8001bf2:	d1f5      	bne.n	8001be0 <enter_menu_detune+0x20>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001bf4:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001bf6:	4e0e      	ldr	r6, [pc, #56]	; (8001c30 <enter_menu_detune+0x70>)
 8001bf8:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001bfc:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c00:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001c04:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001c08:	4631      	mov	r1, r6
 8001c0a:	f10d 0203 	add.w	r2, sp, #3
 8001c0e:	f7ff fe49 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c12:	42ac      	cmp	r4, r5
 8001c14:	d1f6      	bne.n	8001c04 <enter_menu_detune+0x44>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001c16:	21cc      	movs	r1, #204	; 0xcc
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <enter_menu_detune+0x70>)
 8001c1a:	f7ff fe0f 	bl	800183c <display_i2c_dma_write>
}
 8001c1e:	b006      	add	sp, #24
 8001c20:	bd70      	pop	{r4, r5, r6, pc}
 8001c22:	bf00      	nop
 8001c24:	20000aac 	.word	0x20000aac
 8001c28:	20000bf4 	.word	0x20000bf4
 8001c2c:	20000208 	.word	0x20000208
 8001c30:	20000bfc 	.word	0x20000bfc

08001c34 <enter_menu_amp>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c34:	2300      	movs	r3, #0
		temp[i] = op_amp[i];
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <enter_menu_amp+0x60>)
void enter_menu_amp() {
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	4614      	mov	r4, r2
 8001c3c:	b086      	sub	sp, #24
		temp[i] = op_amp[i];
 8001c3e:	6811      	ldr	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c40:	e9cd 3301 	strd	r3, r3, [sp, #4]
		temp[i] = op_amp[i];
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <enter_menu_amp+0x64>)
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c46:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001c4a:	4e14      	ldr	r6, [pc, #80]	; (8001c9c <enter_menu_amp+0x68>)
		temp[i] = op_amp[i];
 8001c4c:	6011      	str	r1, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001c4e:	1d25      	adds	r5, r4, #4
 8001c50:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001c54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001c58:	a801      	add	r0, sp, #4
 8001c5a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001c5e:	f002 ffbc 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001c62:	42a5      	cmp	r5, r4
 8001c64:	d1f6      	bne.n	8001c54 <enter_menu_amp+0x20>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c66:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001c68:	4e0d      	ldr	r6, [pc, #52]	; (8001ca0 <enter_menu_amp+0x6c>)
 8001c6a:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001c6e:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c72:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001c76:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001c7a:	4631      	mov	r1, r6
 8001c7c:	f10d 0203 	add.w	r2, sp, #3
 8001c80:	f7ff fe10 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001c84:	42a5      	cmp	r5, r4
 8001c86:	d1f6      	bne.n	8001c76 <enter_menu_amp+0x42>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001c88:	21cc      	movs	r1, #204	; 0xcc
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <enter_menu_amp+0x6c>)
 8001c8c:	f7ff fdd6 	bl	800183c <display_i2c_dma_write>
}
 8001c90:	b006      	add	sp, #24
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
 8001c94:	20000aa0 	.word	0x20000aa0
 8001c98:	20000bf4 	.word	0x20000bf4
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	20000bfc 	.word	0x20000bfc

08001ca4 <temp_set_ratio>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001ca4:	2300      	movs	r3, #0
		temp[i] = op_ratio[i];
 8001ca6:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <temp_set_ratio+0x64>)
void temp_set_ratio() {
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	4614      	mov	r4, r2
		uint8_t temp2 = temp[i];
 8001cac:	4917      	ldr	r1, [pc, #92]	; (8001d0c <temp_set_ratio+0x68>)
void temp_set_ratio() {
 8001cae:	b086      	sub	sp, #24
		uint8_t temp2 = temp[i];
 8001cb0:	680d      	ldr	r5, [r1, #0]
		temp[i] = op_ratio[i];
 8001cb2:	6810      	ldr	r0, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cb4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001cb8:	4e15      	ldr	r6, [pc, #84]	; (8001d10 <temp_set_ratio+0x6c>)
		op_ratio[i] = temp2;
 8001cba:	6015      	str	r5, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cbc:	9301      	str	r3, [sp, #4]
		temp[i] = op_ratio[i];
 8001cbe:	6008      	str	r0, [r1, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001cc0:	1d15      	adds	r5, r2, #4
 8001cc2:	9304      	str	r3, [sp, #16]
 8001cc4:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 8001cc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ccc:	a801      	add	r0, sp, #4
 8001cce:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001cd2:	f002 ff82 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001cd6:	42ac      	cmp	r4, r5
 8001cd8:	d1f6      	bne.n	8001cc8 <temp_set_ratio+0x24>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001cda:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001cdc:	4e0d      	ldr	r6, [pc, #52]	; (8001d14 <temp_set_ratio+0x70>)
 8001cde:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001ce2:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001ce6:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001cea:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001cee:	4631      	mov	r1, r6
 8001cf0:	f10d 0203 	add.w	r2, sp, #3
 8001cf4:	f7ff fdd6 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001cf8:	42a5      	cmp	r5, r4
 8001cfa:	d1f6      	bne.n	8001cea <temp_set_ratio+0x46>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001cfc:	21cc      	movs	r1, #204	; 0xcc
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <temp_set_ratio+0x70>)
 8001d00:	f7ff fd9c 	bl	800183c <display_i2c_dma_write>
}
 8001d04:	b006      	add	sp, #24
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
 8001d08:	20000ac4 	.word	0x20000ac4
 8001d0c:	20000bf4 	.word	0x20000bf4
 8001d10:	20000608 	.word	0x20000608
 8001d14:	20000bfc 	.word	0x20000bfc

08001d18 <temp_set_detune>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d18:	2300      	movs	r3, #0
		temp[i] = op_detune[i];
 8001d1a:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <temp_set_detune+0x68>)
void temp_set_detune() {
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	4614      	mov	r4, r2
		uint8_t temp2 = temp[i];
 8001d20:	4918      	ldr	r1, [pc, #96]	; (8001d84 <temp_set_detune+0x6c>)
void temp_set_detune() {
 8001d22:	b086      	sub	sp, #24
		uint8_t temp2 = temp[i];
 8001d24:	680d      	ldr	r5, [r1, #0]
		temp[i] = op_detune[i];
 8001d26:	6810      	ldr	r0, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001d2c:	4e16      	ldr	r6, [pc, #88]	; (8001d88 <temp_set_detune+0x70>)
		op_detune[i] = temp2;
 8001d2e:	6015      	str	r5, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d30:	9301      	str	r3, [sp, #4]
		temp[i] = op_detune[i];
 8001d32:	6008      	str	r0, [r1, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d34:	1d15      	adds	r5, r2, #4
 8001d36:	9304      	str	r3, [sp, #16]
 8001d38:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001d3c:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001d40:	a801      	add	r0, sp, #4
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001d48:	f002 ff47 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001d4c:	42ac      	cmp	r4, r5
 8001d4e:	d1f5      	bne.n	8001d3c <temp_set_detune+0x24>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001d50:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001d52:	4e0e      	ldr	r6, [pc, #56]	; (8001d8c <temp_set_detune+0x74>)
 8001d54:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001d58:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001d5c:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001d60:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001d64:	4631      	mov	r1, r6
 8001d66:	f10d 0203 	add.w	r2, sp, #3
 8001d6a:	f7ff fd9b 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001d6e:	42a5      	cmp	r5, r4
 8001d70:	d1f6      	bne.n	8001d60 <temp_set_detune+0x48>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001d72:	21cc      	movs	r1, #204	; 0xcc
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <temp_set_detune+0x74>)
 8001d76:	f7ff fd61 	bl	800183c <display_i2c_dma_write>
}
 8001d7a:	b006      	add	sp, #24
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000aac 	.word	0x20000aac
 8001d84:	20000bf4 	.word	0x20000bf4
 8001d88:	20000208 	.word	0x20000208
 8001d8c:	20000bfc 	.word	0x20000bfc

08001d90 <temp_set_amp>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001d90:	2300      	movs	r3, #0
		temp[i] = op_amp[i];
 8001d92:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <temp_set_amp+0x64>)
void temp_set_amp() {
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	4614      	mov	r4, r2
		uint8_t temp2 = temp[i];
 8001d98:	4917      	ldr	r1, [pc, #92]	; (8001df8 <temp_set_amp+0x68>)
void temp_set_amp() {
 8001d9a:	b086      	sub	sp, #24
		uint8_t temp2 = temp[i];
 8001d9c:	680d      	ldr	r5, [r1, #0]
		temp[i] = op_amp[i];
 8001d9e:	6810      	ldr	r0, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001da0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001da4:	4e15      	ldr	r6, [pc, #84]	; (8001dfc <temp_set_amp+0x6c>)
		op_amp[i] = temp2;
 8001da6:	6015      	str	r5, [r2, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001da8:	9301      	str	r3, [sp, #4]
		temp[i] = op_amp[i];
 8001daa:	6008      	str	r0, [r1, #0]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001dac:	1d15      	adds	r5, r2, #4
 8001dae:	9304      	str	r3, [sp, #16]
 8001db0:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001db4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001db8:	a801      	add	r0, sp, #4
 8001dba:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001dbe:	f002 ff0c 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001dc2:	42ac      	cmp	r4, r5
 8001dc4:	d1f6      	bne.n	8001db4 <temp_set_amp+0x24>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001dc6:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001dc8:	4e0d      	ldr	r6, [pc, #52]	; (8001e00 <temp_set_amp+0x70>)
 8001dca:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001dce:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001dd2:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001dd6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001dda:	4631      	mov	r1, r6
 8001ddc:	f10d 0203 	add.w	r2, sp, #3
 8001de0:	f7ff fd60 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001de4:	42a5      	cmp	r5, r4
 8001de6:	d1f6      	bne.n	8001dd6 <temp_set_amp+0x46>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001de8:	21cc      	movs	r1, #204	; 0xcc
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <temp_set_amp+0x70>)
 8001dec:	f7ff fd26 	bl	800183c <display_i2c_dma_write>
}
 8001df0:	b006      	add	sp, #24
 8001df2:	bd70      	pop	{r4, r5, r6, pc}
 8001df4:	20000aa0 	.word	0x20000aa0
 8001df8:	20000bf4 	.word	0x20000bf4
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	20000bfc 	.word	0x20000bfc

08001e04 <inc_set_amp>:
void inc_set_amp() {
 8001e04:	b570      	push	{r4, r5, r6, lr}
	op_amp[fsm_op] += inc_dec;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <inc_set_amp+0x70>)
 8001e08:	491b      	ldr	r1, [pc, #108]	; (8001e78 <inc_set_amp+0x74>)
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	481b      	ldr	r0, [pc, #108]	; (8001e7c <inc_set_amp+0x78>)
 8001e0e:	5c8b      	ldrb	r3, [r1, r2]
 8001e10:	7800      	ldrb	r0, [r0, #0]
void inc_set_amp() {
 8001e12:	b086      	sub	sp, #24
	op_amp[fsm_op] += inc_dec;
 8001e14:	4403      	add	r3, r0
 8001e16:	b2db      	uxtb	r3, r3
	if (op_amp[fsm_op] > MAX_VOLUME) {
 8001e18:	2b80      	cmp	r3, #128	; 0x80
		op_amp[fsm_op] = MAX_VOLUME;
 8001e1a:	bf88      	it	hi
 8001e1c:	2380      	movhi	r3, #128	; 0x80
 8001e1e:	548b      	strb	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001e20:	2300      	movs	r3, #0
 8001e22:	4c15      	ldr	r4, [pc, #84]	; (8001e78 <inc_set_amp+0x74>)
 8001e24:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001e28:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001e2c:	4e14      	ldr	r6, [pc, #80]	; (8001e80 <inc_set_amp+0x7c>)
 8001e2e:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001e32:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001e34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001e38:	a801      	add	r0, sp, #4
 8001e3a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001e3e:	f002 fecc 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001e42:	42ac      	cmp	r4, r5
 8001e44:	d1f6      	bne.n	8001e34 <inc_set_amp+0x30>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001e46:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001e48:	4e0e      	ldr	r6, [pc, #56]	; (8001e84 <inc_set_amp+0x80>)
 8001e4a:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001e4e:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001e52:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001e56:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001e5a:	4631      	mov	r1, r6
 8001e5c:	f10d 0203 	add.w	r2, sp, #3
 8001e60:	f7ff fd20 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001e64:	42a5      	cmp	r5, r4
 8001e66:	d1f6      	bne.n	8001e56 <inc_set_amp+0x52>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001e68:	21cc      	movs	r1, #204	; 0xcc
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <inc_set_amp+0x80>)
 8001e6c:	f7ff fce6 	bl	800183c <display_i2c_dma_write>
}
 8001e70:	b006      	add	sp, #24
 8001e72:	bd70      	pop	{r4, r5, r6, pc}
 8001e74:	20000ac8 	.word	0x20000ac8
 8001e78:	20000aa0 	.word	0x20000aa0
 8001e7c:	20000b20 	.word	0x20000b20
 8001e80:	20000004 	.word	0x20000004
 8001e84:	20000bfc 	.word	0x20000bfc

08001e88 <dec_set_amp>:
void dec_set_amp() {
 8001e88:	b570      	push	{r4, r5, r6, lr}
	op_amp[fsm_op] -= inc_dec;
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <dec_set_amp+0x70>)
 8001e8c:	491b      	ldr	r1, [pc, #108]	; (8001efc <dec_set_amp+0x74>)
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	481b      	ldr	r0, [pc, #108]	; (8001f00 <dec_set_amp+0x78>)
 8001e92:	5c8b      	ldrb	r3, [r1, r2]
 8001e94:	7800      	ldrb	r0, [r0, #0]
void dec_set_amp() {
 8001e96:	b086      	sub	sp, #24
	op_amp[fsm_op] -= inc_dec;
 8001e98:	1a1b      	subs	r3, r3, r0
 8001e9a:	b2db      	uxtb	r3, r3
	if (op_amp[fsm_op] > MAX_VOLUME) {
 8001e9c:	2b80      	cmp	r3, #128	; 0x80
		op_amp[fsm_op] = 0x00;
 8001e9e:	bf88      	it	hi
 8001ea0:	2300      	movhi	r3, #0
 8001ea2:	548b      	strb	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4c15      	ldr	r4, [pc, #84]	; (8001efc <dec_set_amp+0x74>)
 8001ea8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001eac:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001eb0:	4e14      	ldr	r6, [pc, #80]	; (8001f04 <dec_set_amp+0x7c>)
 8001eb2:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001eb6:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING[op_amp[op]]);
 8001eb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ebc:	a801      	add	r0, sp, #4
 8001ebe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001ec2:	f002 fe8a 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001ec6:	42ac      	cmp	r4, r5
 8001ec8:	d1f6      	bne.n	8001eb8 <dec_set_amp+0x30>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001eca:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001ecc:	4e0e      	ldr	r6, [pc, #56]	; (8001f08 <dec_set_amp+0x80>)
 8001ece:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001ed2:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001ed6:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001eda:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001ede:	4631      	mov	r1, r6
 8001ee0:	f10d 0203 	add.w	r2, sp, #3
 8001ee4:	f7ff fcde 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001ee8:	42a5      	cmp	r5, r4
 8001eea:	d1f6      	bne.n	8001eda <dec_set_amp+0x52>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001eec:	21cc      	movs	r1, #204	; 0xcc
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <dec_set_amp+0x80>)
 8001ef0:	f7ff fca4 	bl	800183c <display_i2c_dma_write>
}
 8001ef4:	b006      	add	sp, #24
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
 8001ef8:	20000ac8 	.word	0x20000ac8
 8001efc:	20000aa0 	.word	0x20000aa0
 8001f00:	20000b20 	.word	0x20000b20
 8001f04:	20000004 	.word	0x20000004
 8001f08:	20000bfc 	.word	0x20000bfc

08001f0c <inc_set_detune>:
void inc_set_detune() {
 8001f0c:	b570      	push	{r4, r5, r6, lr}
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <inc_set_detune+0x78>)
 8001f10:	481d      	ldr	r0, [pc, #116]	; (8001f88 <inc_set_detune+0x7c>)
 8001f12:	7819      	ldrb	r1, [r3, #0]
		op_detune[fsm_op] += inc_dec;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <inc_set_detune+0x80>)
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8001f16:	5642      	ldrsb	r2, [r0, r1]
		op_detune[fsm_op] += inc_dec;
 8001f18:	781b      	ldrb	r3, [r3, #0]
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8001f1a:	2a00      	cmp	r2, #0
void inc_set_detune() {
 8001f1c:	b086      	sub	sp, #24
		op_detune[fsm_op] += inc_dec;
 8001f1e:	4413      	add	r3, r2
	if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {	//detune is negative
 8001f20:	db03      	blt.n	8001f2a <inc_set_detune+0x1e>
		op_detune[fsm_op] += inc_dec;
 8001f22:	b25b      	sxtb	r3, r3
		if ((uint8_t)op_detune[fsm_op] > MAX_POS_DETUNE) {
 8001f24:	2b00      	cmp	r3, #0
			op_detune[fsm_op] = MAX_POS_DETUNE;
 8001f26:	bfb8      	it	lt
 8001f28:	237f      	movlt	r3, #127	; 0x7f
 8001f2a:	5443      	strb	r3, [r0, r1]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4c16      	ldr	r4, [pc, #88]	; (8001f88 <inc_set_detune+0x7c>)
 8001f30:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001f34:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001f38:	4e15      	ldr	r6, [pc, #84]	; (8001f90 <inc_set_detune+0x84>)
 8001f3a:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001f3e:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001f40:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001f44:	a801      	add	r0, sp, #4
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001f4c:	f002 fe45 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001f50:	42a5      	cmp	r5, r4
 8001f52:	d1f5      	bne.n	8001f40 <inc_set_detune+0x34>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001f54:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001f56:	4e0f      	ldr	r6, [pc, #60]	; (8001f94 <inc_set_detune+0x88>)
 8001f58:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001f5c:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001f60:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001f64:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001f68:	4631      	mov	r1, r6
 8001f6a:	f10d 0203 	add.w	r2, sp, #3
 8001f6e:	f7ff fc99 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001f72:	42a5      	cmp	r5, r4
 8001f74:	d1f6      	bne.n	8001f64 <inc_set_detune+0x58>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8001f76:	21cc      	movs	r1, #204	; 0xcc
 8001f78:	4806      	ldr	r0, [pc, #24]	; (8001f94 <inc_set_detune+0x88>)
 8001f7a:	f7ff fc5f 	bl	800183c <display_i2c_dma_write>
}
 8001f7e:	b006      	add	sp, #24
 8001f80:	bd70      	pop	{r4, r5, r6, pc}
 8001f82:	bf00      	nop
 8001f84:	20000ac8 	.word	0x20000ac8
 8001f88:	20000aac 	.word	0x20000aac
 8001f8c:	20000b20 	.word	0x20000b20
 8001f90:	20000208 	.word	0x20000208
 8001f94:	20000bfc 	.word	0x20000bfc

08001f98 <dec_set_detune>:
void dec_set_detune() {
 8001f98:	b570      	push	{r4, r5, r6, lr}
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <dec_set_detune+0x78>)
 8001f9c:	491d      	ldr	r1, [pc, #116]	; (8002014 <dec_set_detune+0x7c>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
		op_detune[fsm_op] -= inc_dec;
 8001fa0:	481d      	ldr	r0, [pc, #116]	; (8002018 <dec_set_detune+0x80>)
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8001fa2:	568b      	ldrsb	r3, [r1, r2]
		op_detune[fsm_op] -= inc_dec;
 8001fa4:	7800      	ldrb	r0, [r0, #0]
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8001fa6:	2b00      	cmp	r3, #0
void dec_set_detune() {
 8001fa8:	b086      	sub	sp, #24
		op_detune[fsm_op] -= inc_dec;
 8001faa:	eba3 0300 	sub.w	r3, r3, r0
	if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {	//detune is positive
 8001fae:	da03      	bge.n	8001fb8 <dec_set_detune+0x20>
		op_detune[fsm_op] -= inc_dec;
 8001fb0:	b25b      	sxtb	r3, r3
		if ((uint8_t)op_detune[fsm_op] < MAX_NEG_DETUNE) {
 8001fb2:	2b00      	cmp	r3, #0
			op_detune[fsm_op] = MAX_NEG_DETUNE;
 8001fb4:	bfa8      	it	ge
 8001fb6:	2380      	movge	r3, #128	; 0x80
 8001fb8:	548b      	strb	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8001fba:	2300      	movs	r3, #0
 8001fbc:	4c15      	ldr	r4, [pc, #84]	; (8002014 <dec_set_detune+0x7c>)
 8001fbe:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001fc2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001fc6:	4e15      	ldr	r6, [pc, #84]	; (800201c <dec_set_detune+0x84>)
 8001fc8:	f88d 3014 	strb.w	r3, [sp, #20]
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001fcc:	1d25      	adds	r5, r4, #4
		strcat(params, HEX_TO_STRING_DETUNE[(uint8_t)op_detune[op]]);
 8001fce:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8001fd2:	a801      	add	r0, sp, #4
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001fda:	f002 fdfe 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8001fde:	42a5      	cmp	r5, r4
 8001fe0:	d1f5      	bne.n	8001fce <dec_set_detune+0x36>
	uint8_t index = SECOND_LINE_START_INDEX;
 8001fe2:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8001fe4:	4e0e      	ldr	r6, [pc, #56]	; (8002020 <dec_set_detune+0x88>)
 8001fe6:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8001fea:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8001fee:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8001ff2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001ff6:	4631      	mov	r1, r6
 8001ff8:	f10d 0203 	add.w	r2, sp, #3
 8001ffc:	f7ff fc52 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002000:	42a5      	cmp	r5, r4
 8002002:	d1f6      	bne.n	8001ff2 <dec_set_detune+0x5a>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8002004:	21cc      	movs	r1, #204	; 0xcc
 8002006:	4806      	ldr	r0, [pc, #24]	; (8002020 <dec_set_detune+0x88>)
 8002008:	f7ff fc18 	bl	800183c <display_i2c_dma_write>
}
 800200c:	b006      	add	sp, #24
 800200e:	bd70      	pop	{r4, r5, r6, pc}
 8002010:	20000ac8 	.word	0x20000ac8
 8002014:	20000aac 	.word	0x20000aac
 8002018:	20000b20 	.word	0x20000b20
 800201c:	20000208 	.word	0x20000208
 8002020:	20000bfc 	.word	0x20000bfc

08002024 <inc_set_ratio>:
void inc_set_ratio() {
 8002024:	b570      	push	{r4, r5, r6, lr}
	if (inc_dec == INC_DEC_DEFAULT) {
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <inc_set_ratio+0x7c>)
		op_ratio[fsm_op] += 0x01;
 8002028:	491e      	ldr	r1, [pc, #120]	; (80020a4 <inc_set_ratio+0x80>)
	if (inc_dec == INC_DEC_DEFAULT) {
 800202a:	781b      	ldrb	r3, [r3, #0]
void inc_set_ratio() {
 800202c:	b086      	sub	sp, #24
	if (inc_dec == INC_DEC_DEFAULT) {
 800202e:	2b01      	cmp	r3, #1
		op_ratio[fsm_op] += 0x01;
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <inc_set_ratio+0x84>)
 8002032:	4c1c      	ldr	r4, [pc, #112]	; (80020a4 <inc_set_ratio+0x80>)
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	4e1d      	ldr	r6, [pc, #116]	; (80020ac <inc_set_ratio+0x88>)
 8002038:	5c8b      	ldrb	r3, [r1, r2]
 800203a:	f104 0504 	add.w	r5, r4, #4
 800203e:	bf0c      	ite	eq
 8002040:	3301      	addeq	r3, #1
		op_ratio[fsm_op] += 0x10;
 8002042:	3310      	addne	r3, #16
 8002044:	b2db      	uxtb	r3, r3
	if (op_ratio[fsm_op] > MAX_RATIO) {
 8002046:	2b80      	cmp	r3, #128	; 0x80
		op_ratio[fsm_op] += 0x10;
 8002048:	548b      	strb	r3, [r1, r2]
		op_ratio[fsm_op] = MAX_RATIO;
 800204a:	bf84      	itt	hi
 800204c:	2380      	movhi	r3, #128	; 0x80
 800204e:	548b      	strbhi	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002050:	2300      	movs	r3, #0
 8002052:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002056:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800205a:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 800205e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002062:	a801      	add	r0, sp, #4
 8002064:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8002068:	f002 fdb7 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 800206c:	42ac      	cmp	r4, r5
 800206e:	d1f6      	bne.n	800205e <inc_set_ratio+0x3a>
	uint8_t index = SECOND_LINE_START_INDEX;
 8002070:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8002072:	4e0f      	ldr	r6, [pc, #60]	; (80020b0 <inc_set_ratio+0x8c>)
 8002074:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 8002078:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 800207c:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8002080:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002084:	4631      	mov	r1, r6
 8002086:	f10d 0203 	add.w	r2, sp, #3
 800208a:	f7ff fc0b 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 800208e:	42a5      	cmp	r5, r4
 8002090:	d1f6      	bne.n	8002080 <inc_set_ratio+0x5c>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8002092:	21cc      	movs	r1, #204	; 0xcc
 8002094:	4806      	ldr	r0, [pc, #24]	; (80020b0 <inc_set_ratio+0x8c>)
 8002096:	f7ff fbd1 	bl	800183c <display_i2c_dma_write>
}
 800209a:	b006      	add	sp, #24
 800209c:	bd70      	pop	{r4, r5, r6, pc}
 800209e:	bf00      	nop
 80020a0:	20000b20 	.word	0x20000b20
 80020a4:	20000ac4 	.word	0x20000ac4
 80020a8:	20000ac8 	.word	0x20000ac8
 80020ac:	20000608 	.word	0x20000608
 80020b0:	20000bfc 	.word	0x20000bfc

080020b4 <dec_set_ratio>:
void dec_set_ratio() {
 80020b4:	b570      	push	{r4, r5, r6, lr}
	if (inc_dec == INC_DEC_DEFAULT) {
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <dec_set_ratio+0x80>)
		op_ratio[fsm_op] -= 0x01;
 80020b8:	491f      	ldr	r1, [pc, #124]	; (8002138 <dec_set_ratio+0x84>)
	if (inc_dec == INC_DEC_DEFAULT) {
 80020ba:	781b      	ldrb	r3, [r3, #0]
void dec_set_ratio() {
 80020bc:	b086      	sub	sp, #24
	if (inc_dec == INC_DEC_DEFAULT) {
 80020be:	2b01      	cmp	r3, #1
		op_ratio[fsm_op] -= 0x01;
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <dec_set_ratio+0x88>)
 80020c2:	4c1d      	ldr	r4, [pc, #116]	; (8002138 <dec_set_ratio+0x84>)
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	4e1e      	ldr	r6, [pc, #120]	; (8002140 <dec_set_ratio+0x8c>)
 80020c8:	5c8b      	ldrb	r3, [r1, r2]
 80020ca:	f104 0504 	add.w	r5, r4, #4
 80020ce:	bf0c      	ite	eq
 80020d0:	f103 33ff 	addeq.w	r3, r3, #4294967295
		op_ratio[fsm_op] -= 0x10;
 80020d4:	3b10      	subne	r3, #16
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	548b      	strb	r3, [r1, r2]
	if (op_ratio[fsm_op] > MAX_RATIO || op_ratio[fsm_op] == 0x00) {
 80020da:	3b01      	subs	r3, #1
 80020dc:	061b      	lsls	r3, r3, #24
		op_ratio[fsm_op] = 0x01;
 80020de:	bf44      	itt	mi
 80020e0:	2301      	movmi	r3, #1
 80020e2:	548b      	strbmi	r3, [r1, r2]
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 80020e4:	2300      	movs	r3, #0
 80020e6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80020ea:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80020ee:	f88d 3014 	strb.w	r3, [sp, #20]
		strcat(params, HEX_TO_STRING_RATIO[op_ratio[op]]);
 80020f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80020f6:	a801      	add	r0, sp, #4
 80020f8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80020fc:	f002 fd6d 	bl	8004bda <strcat>
	for (uint8_t op = 0; op < MAX_OPERATORS; op++) {
 8002100:	42a5      	cmp	r5, r4
 8002102:	d1f6      	bne.n	80020f2 <dec_set_ratio+0x3e>
	uint8_t index = SECOND_LINE_START_INDEX;
 8002104:	236c      	movs	r3, #108	; 0x6c
		display_convert_data(
 8002106:	4e0f      	ldr	r6, [pc, #60]	; (8002144 <dec_set_ratio+0x90>)
 8002108:	f10d 0403 	add.w	r4, sp, #3
	uint8_t index = SECOND_LINE_START_INDEX;
 800210c:	f88d 3003 	strb.w	r3, [sp, #3]
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002110:	f10d 0513 	add.w	r5, sp, #19
		display_convert_data(
 8002114:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002118:	4631      	mov	r1, r6
 800211a:	f10d 0203 	add.w	r2, sp, #3
 800211e:	f7ff fbc1 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 8002122:	42a5      	cmp	r5, r4
 8002124:	d1f6      	bne.n	8002114 <dec_set_ratio+0x60>
	display_i2c_dma_write(ui_set_converted, UI_STRING_CONVERTED_SIZE);
 8002126:	21cc      	movs	r1, #204	; 0xcc
 8002128:	4806      	ldr	r0, [pc, #24]	; (8002144 <dec_set_ratio+0x90>)
 800212a:	f7ff fb87 	bl	800183c <display_i2c_dma_write>
}
 800212e:	b006      	add	sp, #24
 8002130:	bd70      	pop	{r4, r5, r6, pc}
 8002132:	bf00      	nop
 8002134:	20000b20 	.word	0x20000b20
 8002138:	20000ac4 	.word	0x20000ac4
 800213c:	20000ac8 	.word	0x20000ac8
 8002140:	20000608 	.word	0x20000608
 8002144:	20000bfc 	.word	0x20000bfc

08002148 <init_ui>:
void init_ui(I2C_HandleTypeDef* hi2c) {
 8002148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800214c:	b082      	sub	sp, #8
	init_display(hi2c);
 800214e:	f7ff fb5b 	bl	8001808 <init_display>
		uint8_t index = 0;
 8002152:	f04f 0800 	mov.w	r8, #0
 8002156:	4d1f      	ldr	r5, [pc, #124]	; (80021d4 <init_ui+0x8c>)
 8002158:	4e1f      	ldr	r6, [pc, #124]	; (80021d8 <init_ui+0x90>)
 800215a:	f105 0730 	add.w	r7, r5, #48	; 0x30
		display_convert_cmd(							//start DDRAM address at beginning of first line
 800215e:	2080      	movs	r0, #128	; 0x80
 8002160:	f855 1b04 	ldr.w	r1, [r5], #4
 8002164:	f10d 0207 	add.w	r2, sp, #7
 8002168:	2400      	movs	r4, #0
		uint8_t index = 0;
 800216a:	f88d 8007 	strb.w	r8, [sp, #7]
		display_convert_cmd(							//start DDRAM address at beginning of first line
 800216e:	f7ff fb71 	bl	8001854 <display_convert_cmd>
			display_convert_data(						//convert chars to 4-bit bus data for 1602 LCD
 8002172:	6833      	ldr	r3, [r6, #0]
 8002174:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8002178:	5d18      	ldrb	r0, [r3, r4]
 800217a:	f10d 0207 	add.w	r2, sp, #7
 800217e:	3401      	adds	r4, #1
 8002180:	f7ff fb90 	bl	80018a4 <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 8002184:	2c10      	cmp	r4, #16
 8002186:	d1f4      	bne.n	8002172 <init_ui+0x2a>
		display_convert_cmd(							//move DDRAM address at beginning of second line
 8002188:	20c0      	movs	r0, #192	; 0xc0
 800218a:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800218e:	f10d 0207 	add.w	r2, sp, #7
 8002192:	f7ff fb5f 	bl	8001854 <display_convert_cmd>
			display_convert_data(						//write spaces for second line
 8002196:	2020      	movs	r0, #32
 8002198:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800219c:	f10d 0207 	add.w	r2, sp, #7
 80021a0:	3c01      	subs	r4, #1
 80021a2:	f7ff fb7f 	bl	80018a4 <display_convert_data>
		for (uint8_t o = 0; o < DISPLAY_MAX_PHYSICAL_LENGTH; o++) {
 80021a6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80021aa:	d1f4      	bne.n	8002196 <init_ui+0x4e>
	for (uint8_t i = 0; i < NUM_OF_UI_STRINGS; i++) {	//loop through all UI strings to convert
 80021ac:	42bd      	cmp	r5, r7
 80021ae:	f106 0604 	add.w	r6, r6, #4
 80021b2:	d1d4      	bne.n	800215e <init_ui+0x16>
	fsm_op = 0;
 80021b4:	4a09      	ldr	r2, [pc, #36]	; (80021dc <init_ui+0x94>)
	fsm_env_op = 0;
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <init_ui+0x98>)
	present_state = menu_amp;				//set state to menu_amp
 80021b8:	4d0a      	ldr	r5, [pc, #40]	; (80021e4 <init_ui+0x9c>)
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 80021ba:	21cc      	movs	r1, #204	; 0xcc
 80021bc:	480a      	ldr	r0, [pc, #40]	; (80021e8 <init_ui+0xa0>)
	fsm_op = 0;
 80021be:	7014      	strb	r4, [r2, #0]
	fsm_env_op = 0;
 80021c0:	701c      	strb	r4, [r3, #0]
	present_state = menu_amp;				//set state to menu_amp
 80021c2:	702c      	strb	r4, [r5, #0]
	display_i2c_dma_write(ui_menu_amp_converted, UI_STRING_CONVERTED_SIZE);
 80021c4:	f7ff fb3a 	bl	800183c <display_i2c_dma_write>
	inc_dec = 0x01;
 80021c8:	2201      	movs	r2, #1
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <init_ui+0xa4>)
 80021cc:	701a      	strb	r2, [r3, #0]
}
 80021ce:	b002      	add	sp, #8
 80021d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021d4:	20000870 	.word	0x20000870
 80021d8:	20000840 	.word	0x20000840
 80021dc:	20000ac8 	.word	0x20000ac8
 80021e0:	20000bf9 	.word	0x20000bf9
 80021e4:	20000cc8 	.word	0x20000cc8
 80021e8:	20000d10 	.word	0x20000d10
 80021ec:	20000b20 	.word	0x20000b20

080021f0 <fsm>:
void fsm(input key) {
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 80021f2:	4e11      	ldr	r6, [pc, #68]	; (8002238 <fsm+0x48>)
 80021f4:	4f11      	ldr	r7, [pc, #68]	; (800223c <fsm+0x4c>)
 80021f6:	7833      	ldrb	r3, [r6, #0]
 80021f8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80021fc:	780a      	ldrb	r2, [r1, #0]
 80021fe:	4290      	cmp	r0, r2
 8002200:	d017      	beq.n	8002232 <fsm+0x42>
 8002202:	2300      	movs	r3, #0
 8002204:	460d      	mov	r5, r1
 8002206:	461c      	mov	r4, r3
 8002208:	e006      	b.n	8002218 <fsm+0x28>
 800220a:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
 800220e:	00dc      	lsls	r4, r3, #3
 8002210:	4282      	cmp	r2, r0
 8002212:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
 8002216:	d003      	beq.n	8002220 <fsm+0x30>
		fsm_transition_table[present_state][i].key != invalid; i++);	//point i to the correct transition
 8002218:	3301      	adds	r3, #1
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 800221a:	2a05      	cmp	r2, #5
		fsm_transition_table[present_state][i].key != invalid; i++);	//point i to the correct transition
 800221c:	b2db      	uxtb	r3, r3
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 800221e:	d1f4      	bne.n	800220a <fsm+0x1a>
	fsm_transition_table[present_state][i].transition_task();			//execute associated transition function
 8002220:	686b      	ldr	r3, [r5, #4]
 8002222:	4798      	blx	r3
	present_state = fsm_transition_table[present_state][i].next_state;	//update state
 8002224:	7833      	ldrb	r3, [r6, #0]
 8002226:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800222a:	441c      	add	r4, r3
 800222c:	7863      	ldrb	r3, [r4, #1]
 800222e:	7033      	strb	r3, [r6, #0]
}
 8002230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; fsm_transition_table[present_state][i].key != key &&
 8002232:	460d      	mov	r5, r1
 8002234:	2400      	movs	r4, #0
 8002236:	e7f3      	b.n	8002220 <fsm+0x30>
 8002238:	20000cc8 	.word	0x20000cc8
 800223c:	2000080c 	.word	0x2000080c

08002240 <display_update_menu_env_op>:
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002240:	2300      	movs	r3, #0
void display_update_menu_env_op() {
 8002242:	b570      	push	{r4, r5, r6, lr}
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 8002244:	491c      	ldr	r1, [pc, #112]	; (80022b8 <display_update_menu_env_op+0x78>)
 8002246:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <display_update_menu_env_op+0x7c>)
 8002248:	780e      	ldrb	r6, [r1, #0]
 800224a:	4d1d      	ldr	r5, [pc, #116]	; (80022c0 <display_update_menu_env_op+0x80>)
 800224c:	5d92      	ldrb	r2, [r2, r6]
void display_update_menu_env_op() {
 800224e:	b086      	sub	sp, #24
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 8002250:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 8002254:	a801      	add	r0, sp, #4
	char params[DISPLAY_MAX_PHYSICAL_LENGTH+1] = "";
 8002256:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800225a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800225e:	f88d 3014 	strb.w	r3, [sp, #20]
	strcat(params, HEX_TO_STRING[op_attack[fsm_env_op]]);
 8002262:	f002 fcb1 	bl	8004bc8 <stpcpy>
	strcat(params, HEX_TO_STRING[op_decay[fsm_env_op]]);
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <display_update_menu_env_op+0x84>)
 8002268:	f10d 0403 	add.w	r4, sp, #3
 800226c:	5d9b      	ldrb	r3, [r3, r6]
 800226e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8002272:	f002 fca9 	bl	8004bc8 <stpcpy>
	strcat(params, HEX_TO_STRING[op_sustain[fsm_env_op]]);
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <display_update_menu_env_op+0x88>)
 8002278:	5d9b      	ldrb	r3, [r3, r6]
 800227a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800227e:	f002 fca3 	bl	8004bc8 <stpcpy>
	strcat(params, HEX_TO_STRING[op_release[fsm_env_op]]);
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <display_update_menu_env_op+0x8c>)
 8002284:	5d9b      	ldrb	r3, [r3, r6]
		display_convert_data(
 8002286:	4e12      	ldr	r6, [pc, #72]	; (80022d0 <display_update_menu_env_op+0x90>)
	strcat(params, HEX_TO_STRING[op_release[fsm_env_op]]);
 8002288:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800228c:	f002 fcb4 	bl	8004bf8 <strcpy>
	uint8_t index = SECOND_LINE_START_INDEX;
 8002290:	236c      	movs	r3, #108	; 0x6c
 8002292:	f10d 0513 	add.w	r5, sp, #19
 8002296:	f88d 3003 	strb.w	r3, [sp, #3]
		display_convert_data(
 800229a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800229e:	4631      	mov	r1, r6
 80022a0:	f10d 0203 	add.w	r2, sp, #3
 80022a4:	f7ff fafe 	bl	80018a4 <display_convert_data>
	for (uint8_t i = 0; i < DISPLAY_MAX_PHYSICAL_LENGTH; i++) {
 80022a8:	42ac      	cmp	r4, r5
 80022aa:	d1f6      	bne.n	800229a <display_update_menu_env_op+0x5a>
	display_i2c_dma_write(ui_set_env_converted, UI_STRING_CONVERTED_SIZE);
 80022ac:	21cc      	movs	r1, #204	; 0xcc
 80022ae:	4808      	ldr	r0, [pc, #32]	; (80022d0 <display_update_menu_env_op+0x90>)
 80022b0:	f7ff fac4 	bl	800183c <display_i2c_dma_write>
}
 80022b4:	b006      	add	sp, #24
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
 80022b8:	20000bf9 	.word	0x20000bf9
 80022bc:	20000a90 	.word	0x20000a90
 80022c0:	20000004 	.word	0x20000004
 80022c4:	20000abc 	.word	0x20000abc
 80022c8:	20000a84 	.word	0x20000a84
 80022cc:	20000a8c 	.word	0x20000a8c
 80022d0:	20001494 	.word	0x20001494

080022d4 <enter_menu_env_op>:
	temp[0] = op_attack[fsm_env_op];
 80022d4:	2300      	movs	r3, #0
void enter_menu_env_op() {
 80022d6:	b430      	push	{r4, r5}
	temp[0] = op_attack[fsm_env_op];
 80022d8:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <enter_menu_env_op+0x34>)
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <enter_menu_env_op+0x38>)
 80022dc:	7812      	ldrb	r2, [r2, #0]
	temp[1] = op_decay[fsm_env_op];
 80022de:	490c      	ldr	r1, [pc, #48]	; (8002310 <enter_menu_env_op+0x3c>)
	temp[0] = op_attack[fsm_env_op];
 80022e0:	5c85      	ldrb	r5, [r0, r2]
	temp[2] = op_sustain[fsm_env_op];
 80022e2:	480c      	ldr	r0, [pc, #48]	; (8002314 <enter_menu_env_op+0x40>)
	temp[0] = op_attack[fsm_env_op];
 80022e4:	5c8c      	ldrb	r4, [r1, r2]
	temp[3] = op_release[fsm_env_op];
 80022e6:	490c      	ldr	r1, [pc, #48]	; (8002318 <enter_menu_env_op+0x44>)
	temp[0] = op_attack[fsm_env_op];
 80022e8:	5c80      	ldrb	r0, [r0, r2]
 80022ea:	f365 0307 	bfi	r3, r5, #0, #8
 80022ee:	5c89      	ldrb	r1, [r1, r2]
 80022f0:	f364 230f 	bfi	r3, r4, #8, #8
 80022f4:	4a09      	ldr	r2, [pc, #36]	; (800231c <enter_menu_env_op+0x48>)
 80022f6:	f360 4317 	bfi	r3, r0, #16, #8
 80022fa:	f361 631f 	bfi	r3, r1, #24, #8
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bc30      	pop	{r4, r5}
	display_update_menu_env_op();
 8002302:	f7ff bf9d 	b.w	8002240 <display_update_menu_env_op>
 8002306:	bf00      	nop
 8002308:	20000bf9 	.word	0x20000bf9
 800230c:	20000a90 	.word	0x20000a90
 8002310:	20000abc 	.word	0x20000abc
 8002314:	20000a84 	.word	0x20000a84
 8002318:	20000a8c 	.word	0x20000a8c
 800231c:	20000bf4 	.word	0x20000bf4

08002320 <inc_set_env>:
void inc_set_env() {
 8002320:	b410      	push	{r4}
	switch (fsm_op) {
 8002322:	4b37      	ldr	r3, [pc, #220]	; (8002400 <inc_set_env+0xe0>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d818      	bhi.n	800235c <inc_set_env+0x3c>
 800232a:	e8df f003 	tbb	[pc, r3]
 800232e:	4102      	.short	0x4102
 8002330:	1a32      	.short	0x1a32
		op_attack[fsm_env_op] += inc_dec;
 8002332:	4b34      	ldr	r3, [pc, #208]	; (8002404 <inc_set_env+0xe4>)
 8002334:	4834      	ldr	r0, [pc, #208]	; (8002408 <inc_set_env+0xe8>)
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4934      	ldr	r1, [pc, #208]	; (800240c <inc_set_env+0xec>)
 800233a:	5c83      	ldrb	r3, [r0, r2]
 800233c:	7809      	ldrb	r1, [r1, #0]
 800233e:	440b      	add	r3, r1
 8002340:	b2db      	uxtb	r3, r3
		if (op_attack[fsm_env_op] > ENV_MAX_RATE) {
 8002342:	2b80      	cmp	r3, #128	; 0x80
 8002344:	d84c      	bhi.n	80023e0 <inc_set_env+0xc0>
 8002346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800234a:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 800234e:	b2a4      	uxth	r4, r4
		op_attack[fsm_env_op] += inc_dec;
 8002350:	5483      	strb	r3, [r0, r2]
 8002352:	fbb1 f3f4 	udiv	r3, r1, r4
		op_attack_inc[fsm_env_op] = calculate_env_inc(op_attack[fsm_env_op]);
 8002356:	492e      	ldr	r1, [pc, #184]	; (8002410 <inc_set_env+0xf0>)
 8002358:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
 800235c:	bc10      	pop	{r4}
	display_update_menu_env_op();
 800235e:	f7ff bf6f 	b.w	8002240 <display_update_menu_env_op>
		op_release[fsm_env_op] += inc_dec;
 8002362:	4b28      	ldr	r3, [pc, #160]	; (8002404 <inc_set_env+0xe4>)
 8002364:	482b      	ldr	r0, [pc, #172]	; (8002414 <inc_set_env+0xf4>)
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	4928      	ldr	r1, [pc, #160]	; (800240c <inc_set_env+0xec>)
 800236a:	5c83      	ldrb	r3, [r0, r2]
 800236c:	7809      	ldrb	r1, [r1, #0]
 800236e:	440b      	add	r3, r1
 8002370:	b2db      	uxtb	r3, r3
		if (op_release[fsm_env_op] > ENV_MAX_RATE) {
 8002372:	2b80      	cmp	r3, #128	; 0x80
 8002374:	d83e      	bhi.n	80023f4 <inc_set_env+0xd4>
 8002376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800237a:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 800237e:	b2a4      	uxth	r4, r4
		op_release[fsm_env_op] += inc_dec;
 8002380:	5483      	strb	r3, [r0, r2]
 8002382:	fbb1 f3f4 	udiv	r3, r1, r4
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 8002386:	4924      	ldr	r1, [pc, #144]	; (8002418 <inc_set_env+0xf8>)
}
 8002388:	bc10      	pop	{r4}
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 800238a:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 800238e:	f7ff bf57 	b.w	8002240 <display_update_menu_env_op>
		op_sustain[fsm_env_op] += inc_dec;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <inc_set_env+0xe4>)
 8002394:	4921      	ldr	r1, [pc, #132]	; (800241c <inc_set_env+0xfc>)
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	481c      	ldr	r0, [pc, #112]	; (800240c <inc_set_env+0xec>)
 800239a:	5c8b      	ldrb	r3, [r1, r2]
 800239c:	7800      	ldrb	r0, [r0, #0]
 800239e:	4403      	add	r3, r0
 80023a0:	b2db      	uxtb	r3, r3
		if (op_sustain[fsm_env_op] > MAX_VOLUME) {
 80023a2:	2b80      	cmp	r3, #128	; 0x80
			op_sustain[fsm_env_op] = MAX_VOLUME;
 80023a4:	bf88      	it	hi
 80023a6:	2380      	movhi	r3, #128	; 0x80
 80023a8:	548b      	strb	r3, [r1, r2]
}
 80023aa:	bc10      	pop	{r4}
	display_update_menu_env_op();
 80023ac:	f7ff bf48 	b.w	8002240 <display_update_menu_env_op>
		op_decay[fsm_env_op] += inc_dec;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <inc_set_env+0xe4>)
 80023b2:	481b      	ldr	r0, [pc, #108]	; (8002420 <inc_set_env+0x100>)
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	4915      	ldr	r1, [pc, #84]	; (800240c <inc_set_env+0xec>)
 80023b8:	5c83      	ldrb	r3, [r0, r2]
 80023ba:	7809      	ldrb	r1, [r1, #0]
 80023bc:	440b      	add	r3, r1
 80023be:	b2db      	uxtb	r3, r3
		if (op_decay[fsm_env_op] > ENV_MAX_RATE) {
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d812      	bhi.n	80023ea <inc_set_env+0xca>
 80023c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c8:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 80023cc:	b2a4      	uxth	r4, r4
		op_decay[fsm_env_op] += inc_dec;
 80023ce:	5483      	strb	r3, [r0, r2]
 80023d0:	fbb1 f3f4 	udiv	r3, r1, r4
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 80023d4:	4913      	ldr	r1, [pc, #76]	; (8002424 <inc_set_env+0x104>)
}
 80023d6:	bc10      	pop	{r4}
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 80023d8:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 80023dc:	f7ff bf30 	b.w	8002240 <display_update_menu_env_op>
			op_attack[fsm_env_op] = ENV_MAX_RATE;
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e6:	5481      	strb	r1, [r0, r2]
 80023e8:	e7b5      	b.n	8002356 <inc_set_env+0x36>
			op_decay[fsm_env_op] = ENV_MAX_RATE;
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f0:	5481      	strb	r1, [r0, r2]
 80023f2:	e7ef      	b.n	80023d4 <inc_set_env+0xb4>
			op_release[fsm_env_op] = ENV_MAX_RATE;
 80023f4:	2180      	movs	r1, #128	; 0x80
 80023f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023fa:	5481      	strb	r1, [r0, r2]
 80023fc:	e7c3      	b.n	8002386 <inc_set_env+0x66>
 80023fe:	bf00      	nop
 8002400:	20000ac8 	.word	0x20000ac8
 8002404:	20000bf9 	.word	0x20000bf9
 8002408:	20000a90 	.word	0x20000a90
 800240c:	20000b20 	.word	0x20000b20
 8002410:	20000ab0 	.word	0x20000ab0
 8002414:	20000a8c 	.word	0x20000a8c
 8002418:	20000a94 	.word	0x20000a94
 800241c:	20000a84 	.word	0x20000a84
 8002420:	20000abc 	.word	0x20000abc
 8002424:	20000aa4 	.word	0x20000aa4

08002428 <dec_set_env>:
void dec_set_env() {
 8002428:	b410      	push	{r4}
	switch (fsm_op) {
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <dec_set_env+0xe4>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d819      	bhi.n	8002466 <dec_set_env+0x3e>
 8002432:	e8df f003 	tbb	[pc, r3]
 8002436:	4302      	.short	0x4302
 8002438:	1b34      	.short	0x1b34
		op_attack[fsm_env_op] -= inc_dec;
 800243a:	4b35      	ldr	r3, [pc, #212]	; (8002510 <dec_set_env+0xe8>)
 800243c:	4835      	ldr	r0, [pc, #212]	; (8002514 <dec_set_env+0xec>)
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	4935      	ldr	r1, [pc, #212]	; (8002518 <dec_set_env+0xf0>)
 8002442:	5c83      	ldrb	r3, [r0, r2]
 8002444:	7809      	ldrb	r1, [r1, #0]
 8002446:	1a5b      	subs	r3, r3, r1
 8002448:	b2db      	uxtb	r3, r3
		if (op_attack[fsm_env_op] > ENV_MAX_RATE || op_attack[fsm_env_op] == 0x00) {
 800244a:	1e59      	subs	r1, r3, #1
 800244c:	0609      	lsls	r1, r1, #24
 800244e:	d453      	bmi.n	80024f8 <dec_set_env+0xd0>
 8002450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002454:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 8002458:	b2a4      	uxth	r4, r4
		op_attack[fsm_env_op] -= inc_dec;
 800245a:	5483      	strb	r3, [r0, r2]
 800245c:	fbb1 f3f4 	udiv	r3, r1, r4
		op_attack_inc[fsm_env_op] = calculate_env_inc(op_attack[fsm_env_op]);
 8002460:	492e      	ldr	r1, [pc, #184]	; (800251c <dec_set_env+0xf4>)
 8002462:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
 8002466:	bc10      	pop	{r4}
	display_update_menu_env_op();
 8002468:	f7ff beea 	b.w	8002240 <display_update_menu_env_op>
		op_release[fsm_env_op] -= inc_dec;
 800246c:	4b28      	ldr	r3, [pc, #160]	; (8002510 <dec_set_env+0xe8>)
 800246e:	482c      	ldr	r0, [pc, #176]	; (8002520 <dec_set_env+0xf8>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4929      	ldr	r1, [pc, #164]	; (8002518 <dec_set_env+0xf0>)
 8002474:	5c83      	ldrb	r3, [r0, r2]
 8002476:	7809      	ldrb	r1, [r1, #0]
 8002478:	1a5b      	subs	r3, r3, r1
 800247a:	b2db      	uxtb	r3, r3
		if (op_release[fsm_env_op] > ENV_MAX_RATE || op_release[fsm_env_op] == 0x00) {
 800247c:	1e59      	subs	r1, r3, #1
 800247e:	0609      	lsls	r1, r1, #24
 8002480:	d435      	bmi.n	80024ee <dec_set_env+0xc6>
 8002482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002486:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 800248a:	b2a4      	uxth	r4, r4
		op_release[fsm_env_op] -= inc_dec;
 800248c:	5483      	strb	r3, [r0, r2]
 800248e:	fbb1 f3f4 	udiv	r3, r1, r4
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 8002492:	4924      	ldr	r1, [pc, #144]	; (8002524 <dec_set_env+0xfc>)
}
 8002494:	bc10      	pop	{r4}
		op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 8002496:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 800249a:	f7ff bed1 	b.w	8002240 <display_update_menu_env_op>
		op_sustain[fsm_env_op] -= inc_dec;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <dec_set_env+0xe8>)
 80024a0:	4921      	ldr	r1, [pc, #132]	; (8002528 <dec_set_env+0x100>)
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	481c      	ldr	r0, [pc, #112]	; (8002518 <dec_set_env+0xf0>)
 80024a6:	5c8b      	ldrb	r3, [r1, r2]
 80024a8:	7800      	ldrb	r0, [r0, #0]
 80024aa:	1a1b      	subs	r3, r3, r0
 80024ac:	b2db      	uxtb	r3, r3
		if (op_sustain[fsm_env_op] > MAX_VOLUME) {
 80024ae:	2b80      	cmp	r3, #128	; 0x80
			op_sustain[fsm_env_op] = 0x00;
 80024b0:	bf88      	it	hi
 80024b2:	2300      	movhi	r3, #0
 80024b4:	548b      	strb	r3, [r1, r2]
}
 80024b6:	bc10      	pop	{r4}
	display_update_menu_env_op();
 80024b8:	f7ff bec2 	b.w	8002240 <display_update_menu_env_op>
		op_decay[fsm_env_op] -= inc_dec;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <dec_set_env+0xe8>)
 80024be:	481b      	ldr	r0, [pc, #108]	; (800252c <dec_set_env+0x104>)
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	4915      	ldr	r1, [pc, #84]	; (8002518 <dec_set_env+0xf0>)
 80024c4:	5c83      	ldrb	r3, [r0, r2]
 80024c6:	7809      	ldrb	r1, [r1, #0]
 80024c8:	1a5b      	subs	r3, r3, r1
 80024ca:	b2db      	uxtb	r3, r3
		if (op_decay[fsm_env_op] > ENV_MAX_RATE || op_decay[fsm_env_op] == 0x00) {
 80024cc:	1e59      	subs	r1, r3, #1
 80024ce:	060c      	lsls	r4, r1, #24
 80024d0:	d417      	bmi.n	8002502 <dec_set_env+0xda>
 80024d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d6:	f1c3 0481 	rsb	r4, r3, #129	; 0x81
 80024da:	b2a4      	uxth	r4, r4
		op_decay[fsm_env_op] -= inc_dec;
 80024dc:	5483      	strb	r3, [r0, r2]
 80024de:	fbb1 f3f4 	udiv	r3, r1, r4
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 80024e2:	4913      	ldr	r1, [pc, #76]	; (8002530 <dec_set_env+0x108>)
}
 80024e4:	bc10      	pop	{r4}
		op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 80024e6:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	display_update_menu_env_op();
 80024ea:	f7ff bea9 	b.w	8002240 <display_update_menu_env_op>
			op_release[fsm_env_op] = 0x01;
 80024ee:	2101      	movs	r1, #1
 80024f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f4:	5481      	strb	r1, [r0, r2]
 80024f6:	e7cc      	b.n	8002492 <dec_set_env+0x6a>
			op_attack[fsm_env_op] = 0x01;
 80024f8:	2101      	movs	r1, #1
 80024fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fe:	5481      	strb	r1, [r0, r2]
 8002500:	e7ae      	b.n	8002460 <dec_set_env+0x38>
			op_decay[fsm_env_op] = 0x01;
 8002502:	2101      	movs	r1, #1
 8002504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002508:	5481      	strb	r1, [r0, r2]
 800250a:	e7ea      	b.n	80024e2 <dec_set_env+0xba>
 800250c:	20000ac8 	.word	0x20000ac8
 8002510:	20000bf9 	.word	0x20000bf9
 8002514:	20000a90 	.word	0x20000a90
 8002518:	20000b20 	.word	0x20000b20
 800251c:	20000ab0 	.word	0x20000ab0
 8002520:	20000a8c 	.word	0x20000a8c
 8002524:	20000a94 	.word	0x20000a94
 8002528:	20000a84 	.word	0x20000a84
 800252c:	20000abc 	.word	0x20000abc
 8002530:	20000aa4 	.word	0x20000aa4

08002534 <temp_set_env>:
 8002534:	f44f 4200 	mov.w	r2, #32768	; 0x8000
void temp_set_env() {
 8002538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	temp2 = temp[0];
 800253c:	4823      	ldr	r0, [pc, #140]	; (80025cc <temp_set_env+0x98>)
	temp[0] = op_attack[fsm_env_op];
 800253e:	2400      	movs	r4, #0
	temp2 = temp[0];
 8002540:	f890 c000 	ldrb.w	ip, [r0]
	temp2 = temp[1];
 8002544:	7847      	ldrb	r7, [r0, #1]
 8002546:	f1cc 0581 	rsb	r5, ip, #129	; 0x81
 800254a:	b2ad      	uxth	r5, r5
 800254c:	fbb2 f5f5 	udiv	r5, r2, r5
	temp2 = temp[3];
 8002550:	78c6      	ldrb	r6, [r0, #3]
 8002552:	f1c7 0181 	rsb	r1, r7, #129	; 0x81
 8002556:	f1c6 0381 	rsb	r3, r6, #129	; 0x81
 800255a:	b29b      	uxth	r3, r3
 800255c:	b289      	uxth	r1, r1
 800255e:	fbb2 f1f1 	udiv	r1, r2, r1
 8002562:	fbb2 f2f3 	udiv	r2, r2, r3
	temp[0] = op_attack[fsm_env_op];
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <temp_set_env+0x9c>)
 8002568:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80025e0 <temp_set_env+0xac>
 800256c:	781b      	ldrb	r3, [r3, #0]
	temp[1] = op_decay[fsm_env_op];
 800256e:	f8df e074 	ldr.w	lr, [pc, #116]	; 80025e4 <temp_set_env+0xb0>
	op_attack_inc[fsm_env_op] = calculate_env_inc(op_attack[fsm_env_op]);
 8002572:	f8df a074 	ldr.w	sl, [pc, #116]	; 80025e8 <temp_set_env+0xb4>
	temp[0] = op_attack[fsm_env_op];
 8002576:	f818 9003 	ldrb.w	r9, [r8, r3]
 800257a:	f82a 5013 	strh.w	r5, [sl, r3, lsl #1]
	op_attack[fsm_env_op] = temp2;
 800257e:	f808 c003 	strb.w	ip, [r8, r3]
	temp[2] = op_sustain[fsm_env_op];
 8002582:	4d14      	ldr	r5, [pc, #80]	; (80025d4 <temp_set_env+0xa0>)
	temp[1] = op_decay[fsm_env_op];
 8002584:	f81e 8003 	ldrb.w	r8, [lr, r3]
	temp[3] = op_release[fsm_env_op];
 8002588:	f8df c060 	ldr.w	ip, [pc, #96]	; 80025ec <temp_set_env+0xb8>
	temp[0] = op_attack[fsm_env_op];
 800258c:	f369 0407 	bfi	r4, r9, #0, #8
 8002590:	f368 240f 	bfi	r4, r8, #8, #8
	temp[2] = op_sustain[fsm_env_op];
 8002594:	f815 8003 	ldrb.w	r8, [r5, r3]
	op_decay[fsm_env_op] = temp2;
 8002598:	f80e 7003 	strb.w	r7, [lr, r3]
	temp[0] = op_attack[fsm_env_op];
 800259c:	f81c e003 	ldrb.w	lr, [ip, r3]
 80025a0:	f368 4417 	bfi	r4, r8, #16, #8
	op_release[fsm_env_op] = temp2;
 80025a4:	f80c 6003 	strb.w	r6, [ip, r3]
	op_sustain[fsm_env_op] = temp2;
 80025a8:	f890 c002 	ldrb.w	ip, [r0, #2]
	op_decay_inc[fsm_env_op] = calculate_env_inc(op_decay[fsm_env_op]);
 80025ac:	4f0a      	ldr	r7, [pc, #40]	; (80025d8 <temp_set_env+0xa4>)
	op_release_inc[fsm_env_op] = calculate_env_inc(op_release[fsm_env_op]);
 80025ae:	4e0b      	ldr	r6, [pc, #44]	; (80025dc <temp_set_env+0xa8>)
	temp[0] = op_attack[fsm_env_op];
 80025b0:	f36e 641f 	bfi	r4, lr, #24, #8
 80025b4:	6004      	str	r4, [r0, #0]
	op_sustain[fsm_env_op] = temp2;
 80025b6:	f805 c003 	strb.w	ip, [r5, r3]
 80025ba:	f827 1013 	strh.w	r1, [r7, r3, lsl #1]
 80025be:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
}
 80025c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	display_update_menu_env_op();
 80025c6:	f7ff be3b 	b.w	8002240 <display_update_menu_env_op>
 80025ca:	bf00      	nop
 80025cc:	20000bf4 	.word	0x20000bf4
 80025d0:	20000bf9 	.word	0x20000bf9
 80025d4:	20000a84 	.word	0x20000a84
 80025d8:	20000aa4 	.word	0x20000aa4
 80025dc:	20000a94 	.word	0x20000a94
 80025e0:	20000a90 	.word	0x20000a90
 80025e4:	20000abc 	.word	0x20000abc
 80025e8:	20000ab0 	.word	0x20000ab0
 80025ec:	20000a8c 	.word	0x20000a8c

080025f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025f2:	490d      	ldr	r1, [pc, #52]	; (8002628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002608:	4c0a      	ldr	r4, [pc, #40]	; (8002634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002616:	f7ff f8a1 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261a:	f002 fab1 	bl	8004b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261e:	f7fd fdf7 	bl	8000210 <main>
  bx lr
 8002622:	4770      	bx	lr
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	200008a8 	.word	0x200008a8
  ldr r2, =_sidata
 800262c:	080061fc 	.word	0x080061fc
  ldr r2, =_sbss
 8002630:	200008a8 	.word	0x200008a8
  ldr r4, =_ebss
 8002634:	20001568 	.word	0x20001568

08002638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC1_2_IRQHandler>
	...

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800263e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002642:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_InitTick+0x3c>)
{
 8002644:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002646:	7811      	ldrb	r1, [r2, #0]
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_InitTick+0x40>)
 800264a:	fbb3 f3f1 	udiv	r3, r3, r1
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	fbb2 f0f3 	udiv	r0, r2, r3
 8002654:	f000 f8a4 	bl	80027a0 <HAL_SYSTICK_Config>
 8002658:	b908      	cbnz	r0, 800265e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265a:	2d0f      	cmp	r5, #15
 800265c:	d901      	bls.n	8002662 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800265e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002660:	bd38      	pop	{r3, r4, r5, pc}
 8002662:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002664:	4602      	mov	r2, r0
 8002666:	4629      	mov	r1, r5
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f000 f852 	bl	8002714 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_InitTick+0x44>)
 8002672:	4620      	mov	r0, r4
 8002674:	601d      	str	r5, [r3, #0]
}
 8002676:	bd38      	pop	{r3, r4, r5, pc}
 8002678:	200008a0 	.word	0x200008a0
 800267c:	20000000 	.word	0x20000000
 8002680:	200008a4 	.word	0x200008a4

08002684 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_Init+0x20>)
{
 8002686:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002688:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800268c:	f043 0310 	orr.w	r3, r3, #16
 8002690:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002692:	f000 f82d 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002696:	2000      	movs	r0, #0
 8002698:	f7ff ffd0 	bl	800263c <HAL_InitTick>
  HAL_MspInit();
 800269c:	f7fe f83a 	bl	8000714 <HAL_MspInit>
}
 80026a0:	2000      	movs	r0, #0
 80026a2:	bd08      	pop	{r3, pc}
 80026a4:	40022000 	.word	0x40022000

080026a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80026a8:	4a03      	ldr	r2, [pc, #12]	; (80026b8 <HAL_IncTick+0x10>)
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <HAL_IncTick+0x14>)
 80026ac:	6811      	ldr	r1, [r2, #0]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	440b      	add	r3, r1
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20001564 	.word	0x20001564
 80026bc:	200008a0 	.word	0x200008a0

080026c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80026c0:	4b01      	ldr	r3, [pc, #4]	; (80026c8 <HAL_GetTick+0x8>)
 80026c2:	6818      	ldr	r0, [r3, #0]
}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20001564 	.word	0x20001564

080026cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026cc:	b538      	push	{r3, r4, r5, lr}
 80026ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fff6 	bl	80026c0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80026d6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80026d8:	d002      	beq.n	80026e0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <HAL_Delay+0x20>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e0:	f7ff ffee 	bl	80026c0 <HAL_GetTick>
 80026e4:	1b40      	subs	r0, r0, r5
 80026e6:	42a0      	cmp	r0, r4
 80026e8:	d3fa      	bcc.n	80026e0 <HAL_Delay+0x14>
  {
  }
}
 80026ea:	bd38      	pop	{r3, r4, r5, pc}
 80026ec:	200008a0 	.word	0x200008a0

080026f0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026f6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002702:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800270a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002716:	b430      	push	{r4, r5}
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271e:	f1c3 0507 	rsb	r5, r3, #7
 8002722:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002724:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002728:	bf28      	it	cs
 800272a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272c:	2c06      	cmp	r4, #6
 800272e:	d919      	bls.n	8002764 <HAL_NVIC_SetPriority+0x50>
 8002730:	f04f 34ff 	mov.w	r4, #4294967295
 8002734:	3b03      	subs	r3, #3
 8002736:	409c      	lsls	r4, r3
 8002738:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 34ff 	mov.w	r4, #4294967295
 8002740:	40ac      	lsls	r4, r5
 8002742:	ea21 0104 	bic.w	r1, r1, r4
 8002746:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002748:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800274e:	db0c      	blt.n	800276a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	0109      	lsls	r1, r1, #4
 8002752:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002756:	b2c9      	uxtb	r1, r1
 8002758:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800275c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002760:	bc30      	pop	{r4, r5}
 8002762:	4770      	bx	lr
 8002764:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002766:	4613      	mov	r3, r2
 8002768:	e7e8      	b.n	800273c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_NVIC_SetPriority+0x6c>)
 800276c:	f000 000f 	and.w	r0, r0, #15
 8002770:	0109      	lsls	r1, r1, #4
 8002772:	b2c9      	uxtb	r1, r1
 8002774:	4403      	add	r3, r0
 8002776:	7619      	strb	r1, [r3, #24]
 8002778:	bc30      	pop	{r4, r5}
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00
 8002780:	e000ecfc 	.word	0xe000ecfc

08002784 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002784:	2800      	cmp	r0, #0
 8002786:	db07      	blt.n	8002798 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002788:	2301      	movs	r3, #1
 800278a:	f000 011f 	and.w	r1, r0, #31
 800278e:	4a03      	ldr	r2, [pc, #12]	; (800279c <HAL_NVIC_EnableIRQ+0x18>)
 8002790:	408b      	lsls	r3, r1
 8002792:	0940      	lsrs	r0, r0, #5
 8002794:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000e100 	.word	0xe000e100

080027a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	3801      	subs	r0, #1
 80027a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80027a6:	d20d      	bcs.n	80027c4 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a8:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ac:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ae:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	4c06      	ldr	r4, [pc, #24]	; (80027cc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ba:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80027bc:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c0:	6019      	str	r1, [r3, #0]
 80027c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80027c4:	2001      	movs	r0, #1
 80027c6:	4770      	bx	lr
 80027c8:	e000e010 	.word	0xe000e010
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027d0:	b340      	cbz	r0, 8002824 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027d2:	4603      	mov	r3, r0
{
 80027d4:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027d6:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027da:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027de:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 80027e0:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e2:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027e4:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e6:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027e8:	490f      	ldr	r1, [pc, #60]	; (8002828 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ea:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ec:	4f0f      	ldr	r7, [pc, #60]	; (800282c <HAL_DMA_Init+0x5c>)
 80027ee:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f0:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f2:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027f4:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f8:	4332      	orrs	r2, r6
 80027fa:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 80027fc:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 8002800:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002802:	0909      	lsrs	r1, r1, #4
 8002804:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002806:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800280c:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002810:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002812:	4907      	ldr	r1, [pc, #28]	; (8002830 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 8002814:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 8002816:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8002818:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 800281a:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 800281c:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800281e:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002820:	bcf0      	pop	{r4, r5, r6, r7}
 8002822:	4770      	bx	lr
    return HAL_ERROR;
 8002824:	2001      	movs	r0, #1
}
 8002826:	4770      	bx	lr
 8002828:	bffdfff8 	.word	0xbffdfff8
 800282c:	cccccccd 	.word	0xcccccccd
 8002830:	40020000 	.word	0x40020000

08002834 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002834:	b4f0      	push	{r4, r5, r6, r7}
 8002836:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002838:	f890 0020 	ldrb.w	r0, [r0, #32]
 800283c:	2801      	cmp	r0, #1
 800283e:	d038      	beq.n	80028b2 <HAL_DMA_Start_IT+0x7e>
 8002840:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002842:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002846:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800284a:	42a8      	cmp	r0, r5
 800284c:	d005      	beq.n	800285a <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800284e:	2300      	movs	r3, #0
 8002850:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002854:	2002      	movs	r0, #2
  }    
  return status;
}
 8002856:	bcf0      	pop	{r4, r5, r6, r7}
 8002858:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800285a:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285c:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 800285e:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002860:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002864:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002866:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002868:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800286a:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 800286c:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002870:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002872:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002874:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002876:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002878:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 800287a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800287c:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800287e:	bf0b      	itete	eq
 8002880:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002882:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002884:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002886:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002888:	b153      	cbz	r3, 80028a0 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288a:	682b      	ldr	r3, [r5, #0]
 800288c:	f043 030e 	orr.w	r3, r3, #14
 8002890:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8002892:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	602b      	str	r3, [r5, #0]
}
 800289c:	bcf0      	pop	{r4, r5, r6, r7}
 800289e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	f043 030a 	orr.w	r3, r3, #10
 80028ae:	602b      	str	r3, [r5, #0]
 80028b0:	e7ef      	b.n	8002892 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80028b2:	2002      	movs	r0, #2
}
 80028b4:	bcf0      	pop	{r4, r5, r6, r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028b8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 80028bc:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028be:	2a02      	cmp	r2, #2
 80028c0:	d003      	beq.n	80028ca <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c2:	2204      	movs	r2, #4
    status = HAL_ERROR;
 80028c4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80028c8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ca:	6802      	ldr	r2, [r0, #0]
{  
 80028cc:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ce:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028d0:	481b      	ldr	r0, [pc, #108]	; (8002940 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d2:	f021 010e 	bic.w	r1, r1, #14
 80028d6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80028d8:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028da:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 80028dc:	f021 0101 	bic.w	r1, r1, #1
 80028e0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028e2:	d021      	beq.n	8002928 <HAL_DMA_Abort_IT+0x70>
 80028e4:	4917      	ldr	r1, [pc, #92]	; (8002944 <HAL_DMA_Abort_IT+0x8c>)
 80028e6:	428a      	cmp	r2, r1
 80028e8:	d01a      	beq.n	8002920 <HAL_DMA_Abort_IT+0x68>
 80028ea:	3114      	adds	r1, #20
 80028ec:	428a      	cmp	r2, r1
 80028ee:	d01d      	beq.n	800292c <HAL_DMA_Abort_IT+0x74>
 80028f0:	3114      	adds	r1, #20
 80028f2:	428a      	cmp	r2, r1
 80028f4:	d01d      	beq.n	8002932 <HAL_DMA_Abort_IT+0x7a>
 80028f6:	3114      	adds	r1, #20
 80028f8:	428a      	cmp	r2, r1
 80028fa:	d01d      	beq.n	8002938 <HAL_DMA_Abort_IT+0x80>
 80028fc:	3114      	adds	r1, #20
 80028fe:	428a      	cmp	r2, r1
 8002900:	bf0c      	ite	eq
 8002902:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8002906:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 800290a:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800290e:	4c0e      	ldr	r4, [pc, #56]	; (8002948 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8002910:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002912:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002914:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8002916:	b129      	cbz	r1, 8002924 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8002918:	4618      	mov	r0, r3
 800291a:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	2000      	movs	r0, #0
}
 800291e:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002920:	2210      	movs	r2, #16
 8002922:	e7f2      	b.n	800290a <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8002924:	4608      	mov	r0, r1
}
 8002926:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002928:	2201      	movs	r2, #1
 800292a:	e7ee      	b.n	800290a <HAL_DMA_Abort_IT+0x52>
 800292c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002930:	e7eb      	b.n	800290a <HAL_DMA_Abort_IT+0x52>
 8002932:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002936:	e7e8      	b.n	800290a <HAL_DMA_Abort_IT+0x52>
 8002938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800293c:	e7e5      	b.n	800290a <HAL_DMA_Abort_IT+0x52>
 800293e:	bf00      	nop
 8002940:	40020008 	.word	0x40020008
 8002944:	4002001c 	.word	0x4002001c
 8002948:	40020000 	.word	0x40020000

0800294c <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800294c:	2204      	movs	r2, #4
{
 800294e:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002950:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002954:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002956:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002958:	408a      	lsls	r2, r1
 800295a:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 800295c:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800295e:	d01f      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x54>
 8002960:	076a      	lsls	r2, r5, #29
 8002962:	d51d      	bpl.n	80029a0 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	0691      	lsls	r1, r2, #26
 8002968:	d403      	bmi.n	8002972 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	f022 0204 	bic.w	r2, r2, #4
 8002970:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002972:	4a3e      	ldr	r2, [pc, #248]	; (8002a6c <HAL_DMA_IRQHandler+0x120>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d05a      	beq.n	8002a2e <HAL_DMA_IRQHandler+0xe2>
 8002978:	3214      	adds	r2, #20
 800297a:	4293      	cmp	r3, r2
 800297c:	d05f      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xf2>
 800297e:	3214      	adds	r2, #20
 8002980:	4293      	cmp	r3, r2
 8002982:	d066      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x106>
 8002984:	3214      	adds	r2, #20
 8002986:	4293      	cmp	r3, r2
 8002988:	d069      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x112>
 800298a:	3214      	adds	r2, #20
 800298c:	4293      	cmp	r3, r2
 800298e:	d05b      	beq.n	8002a48 <HAL_DMA_IRQHandler+0xfc>
 8002990:	3214      	adds	r2, #20
 8002992:	4293      	cmp	r3, r2
 8002994:	bf0c      	ite	eq
 8002996:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800299a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800299e:	e047      	b.n	8002a30 <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029a0:	2202      	movs	r2, #2
 80029a2:	408a      	lsls	r2, r1
 80029a4:	4222      	tst	r2, r4
 80029a6:	d022      	beq.n	80029ee <HAL_DMA_IRQHandler+0xa2>
 80029a8:	07aa      	lsls	r2, r5, #30
 80029aa:	d520      	bpl.n	80029ee <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	0691      	lsls	r1, r2, #26
 80029b0:	d406      	bmi.n	80029c0 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 80029b2:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f022 020a 	bic.w	r2, r2, #10
 80029ba:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80029bc:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029c0:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_DMA_IRQHandler+0x120>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d029      	beq.n	8002a1a <HAL_DMA_IRQHandler+0xce>
 80029c6:	3214      	adds	r2, #20
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x102>
 80029cc:	3214      	adds	r2, #20
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d042      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x10c>
 80029d2:	3214      	adds	r2, #20
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d034      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xf6>
 80029d8:	3214      	adds	r2, #20
 80029da:	4293      	cmp	r3, r2
 80029dc:	d042      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x118>
 80029de:	3214      	adds	r2, #20
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf0c      	ite	eq
 80029e4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80029e8:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80029ec:	e016      	b.n	8002a1c <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029ee:	2208      	movs	r2, #8
 80029f0:	408a      	lsls	r2, r1
 80029f2:	4222      	tst	r2, r4
 80029f4:	d019      	beq.n	8002a2a <HAL_DMA_IRQHandler+0xde>
 80029f6:	072a      	lsls	r2, r5, #28
 80029f8:	d517      	bpl.n	8002a2a <HAL_DMA_IRQHandler+0xde>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029fa:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 80029fc:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a00:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a02:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a06:	f022 020e 	bic.w	r2, r2, #14
 8002a0a:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8002a0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a0e:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a10:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002a12:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002a14:	b14b      	cbz	r3, 8002a2a <HAL_DMA_IRQHandler+0xde>
}
 8002a16:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002a18:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a1a:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8002a1c:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a1e:	4c14      	ldr	r4, [pc, #80]	; (8002a70 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8002a20:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a22:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002a24:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002a28:	b93a      	cbnz	r2, 8002a3a <HAL_DMA_IRQHandler+0xee>
}
 8002a2a:	bc70      	pop	{r4, r5, r6}
 8002a2c:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a2e:	2304      	movs	r3, #4
 8002a30:	490f      	ldr	r1, [pc, #60]	; (8002a70 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8002a32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a34:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	d0f7      	beq.n	8002a2a <HAL_DMA_IRQHandler+0xde>
}
 8002a3a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002a3c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a3e:	2340      	movs	r3, #64	; 0x40
 8002a40:	e7f6      	b.n	8002a30 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a46:	e7e9      	b.n	8002a1c <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a4c:	e7f0      	b.n	8002a30 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a4e:	2320      	movs	r3, #32
 8002a50:	e7e4      	b.n	8002a1c <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a56:	e7eb      	b.n	8002a30 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a5c:	e7de      	b.n	8002a1c <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a62:	e7e5      	b.n	8002a30 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a68:	e7d8      	b.n	8002a1c <HAL_DMA_IRQHandler+0xd0>
 8002a6a:	bf00      	nop
 8002a6c:	40020008 	.word	0x40020008
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_DMA_GetState>:
}
 8002a74:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop

08002a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a80:	680c      	ldr	r4, [r1, #0]
{
 8002a82:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	f000 809e 	beq.w	8002bc6 <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 8002a8a:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a8c:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8002c84 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 8002a90:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a92:	4f77      	ldr	r7, [pc, #476]	; (8002c70 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 8002a94:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8002c88 <HAL_GPIO_Init+0x20c>
 8002a98:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8002c8c <HAL_GPIO_Init+0x210>
 8002a9c:	9000      	str	r0, [sp, #0]
 8002a9e:	e004      	b.n	8002aaa <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8002aa0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa2:	fa34 f203 	lsrs.w	r2, r4, r3
 8002aa6:	f000 808e 	beq.w	8002bc6 <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 8002aae:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab2:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8002ab6:	d1f3      	bne.n	8002aa0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8002ab8:	684c      	ldr	r4, [r1, #4]
 8002aba:	2c12      	cmp	r4, #18
 8002abc:	f200 8086 	bhi.w	8002bcc <HAL_GPIO_Init+0x150>
 8002ac0:	2c12      	cmp	r4, #18
 8002ac2:	d80c      	bhi.n	8002ade <HAL_GPIO_Init+0x62>
 8002ac4:	e8df f004 	tbb	[pc, r4]
 8002ac8:	0abcbf8a 	.word	0x0abcbf8a
 8002acc:	0b0b0b0b 	.word	0x0b0b0b0b
 8002ad0:	0b0b0b0b 	.word	0x0b0b0b0b
 8002ad4:	0b0b0b0b 	.word	0x0b0b0b0b
 8002ad8:	b90b      	.short	0xb90b
 8002ada:	b6          	.byte	0xb6
 8002adb:	00          	.byte	0x00
 8002adc:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ade:	2dff      	cmp	r5, #255	; 0xff
 8002ae0:	f200 8083 	bhi.w	8002bea <HAL_GPIO_Init+0x16e>
 8002ae4:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ae8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aec:	240f      	movs	r4, #15
 8002aee:	f8d9 2000 	ldr.w	r2, [r9]
 8002af2:	fa04 fb0a 	lsl.w	fp, r4, sl
 8002af6:	ea22 020b 	bic.w	r2, r2, fp
 8002afa:	fa06 fa0a 	lsl.w	sl, r6, sl
 8002afe:	ea42 020a 	orr.w	r2, r2, sl
 8002b02:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b06:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002b0a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8002b0e:	f000 808f 	beq.w	8002c30 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b12:	f8dc a018 	ldr.w	sl, [ip, #24]
 8002b16:	f023 0203 	bic.w	r2, r3, #3
 8002b1a:	f04a 0a01 	orr.w	sl, sl, #1
 8002b1e:	f8cc a018 	str.w	sl, [ip, #24]
 8002b22:	f8dc a018 	ldr.w	sl, [ip, #24]
 8002b26:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002b2a:	f00a 0a01 	and.w	sl, sl, #1
 8002b2e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002b32:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b36:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b3a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b3e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002b42:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b46:	fa04 f40a 	lsl.w	r4, r4, sl
 8002b4a:	ea2b 0004 	bic.w	r0, fp, r4
 8002b4e:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b50:	9c00      	ldr	r4, [sp, #0]
 8002b52:	4848      	ldr	r0, [pc, #288]	; (8002c74 <HAL_GPIO_Init+0x1f8>)
 8002b54:	4284      	cmp	r4, r0
 8002b56:	d013      	beq.n	8002b80 <HAL_GPIO_Init+0x104>
 8002b58:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002b5c:	4284      	cmp	r4, r0
 8002b5e:	d07d      	beq.n	8002c5c <HAL_GPIO_Init+0x1e0>
 8002b60:	4845      	ldr	r0, [pc, #276]	; (8002c78 <HAL_GPIO_Init+0x1fc>)
 8002b62:	4284      	cmp	r4, r0
 8002b64:	d071      	beq.n	8002c4a <HAL_GPIO_Init+0x1ce>
 8002b66:	4845      	ldr	r0, [pc, #276]	; (8002c7c <HAL_GPIO_Init+0x200>)
 8002b68:	4284      	cmp	r4, r0
 8002b6a:	bf0c      	ite	eq
 8002b6c:	f04f 0b03 	moveq.w	fp, #3
 8002b70:	f04f 0b04 	movne.w	fp, #4
 8002b74:	9801      	ldr	r0, [sp, #4]
 8002b76:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002b7a:	ea40 000a 	orr.w	r0, r0, sl
 8002b7e:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b80:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b82:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8002b86:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	bf14      	ite	ne
 8002b8c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b8e:	43aa      	biceq	r2, r5
 8002b90:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002b92:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b94:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002b98:	bf14      	ite	ne
 8002b9a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b9c:	43aa      	biceq	r2, r5
 8002b9e:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ba0:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ba6:	bf14      	ite	ne
 8002ba8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002baa:	43aa      	biceq	r2, r5
 8002bac:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bae:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bb2:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb4:	d039      	beq.n	8002c2a <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bb6:	4315      	orrs	r5, r2
 8002bb8:	60fd      	str	r5, [r7, #12]
 8002bba:	680c      	ldr	r4, [r1, #0]
	position++;
 8002bbc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bbe:	fa34 f203 	lsrs.w	r2, r4, r3
 8002bc2:	f47f af72 	bne.w	8002aaa <HAL_GPIO_Init+0x2e>
  }
}
 8002bc6:	b005      	add	sp, #20
 8002bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8002bcc:	4544      	cmp	r4, r8
 8002bce:	d005      	beq.n	8002bdc <HAL_GPIO_Init+0x160>
 8002bd0:	d913      	bls.n	8002bfa <HAL_GPIO_Init+0x17e>
 8002bd2:	4574      	cmp	r4, lr
 8002bd4:	d002      	beq.n	8002bdc <HAL_GPIO_Init+0x160>
 8002bd6:	482a      	ldr	r0, [pc, #168]	; (8002c80 <HAL_GPIO_Init+0x204>)
 8002bd8:	4284      	cmp	r4, r0
 8002bda:	d180      	bne.n	8002ade <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bdc:	688c      	ldr	r4, [r1, #8]
 8002bde:	b9e4      	cbnz	r4, 8002c1a <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002be0:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002be2:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002be6:	f67f af7d 	bls.w	8002ae4 <HAL_GPIO_Init+0x68>
 8002bea:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bec:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8002bf0:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bf4:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bf8:	e778      	b.n	8002aec <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 8002bfa:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002c90 <HAL_GPIO_Init+0x214>
 8002bfe:	454c      	cmp	r4, r9
 8002c00:	d0ec      	beq.n	8002bdc <HAL_GPIO_Init+0x160>
 8002c02:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002c06:	454c      	cmp	r4, r9
 8002c08:	d0e8      	beq.n	8002bdc <HAL_GPIO_Init+0x160>
 8002c0a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002c0e:	454c      	cmp	r4, r9
 8002c10:	f47f af65 	bne.w	8002ade <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c14:	688c      	ldr	r4, [r1, #8]
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	d0e2      	beq.n	8002be0 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 8002c1a:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c1c:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1e:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8002c22:	bf0c      	ite	eq
 8002c24:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8002c26:	6142      	strne	r2, [r0, #20]
 8002c28:	e759      	b.n	8002ade <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c2a:	ea22 0505 	bic.w	r5, r2, r5
 8002c2e:	60fd      	str	r5, [r7, #12]
 8002c30:	680c      	ldr	r4, [r1, #0]
 8002c32:	e735      	b.n	8002aa0 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c34:	68ce      	ldr	r6, [r1, #12]
 8002c36:	360c      	adds	r6, #12
          break;
 8002c38:	e751      	b.n	8002ade <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c3a:	68ce      	ldr	r6, [r1, #12]
 8002c3c:	3604      	adds	r6, #4
          break;
 8002c3e:	e74e      	b.n	8002ade <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c40:	68ce      	ldr	r6, [r1, #12]
 8002c42:	3608      	adds	r6, #8
          break;
 8002c44:	e74b      	b.n	8002ade <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c46:	68ce      	ldr	r6, [r1, #12]
          break;
 8002c48:	e749      	b.n	8002ade <HAL_GPIO_Init+0x62>
 8002c4a:	f04f 0b02 	mov.w	fp, #2
 8002c4e:	9801      	ldr	r0, [sp, #4]
 8002c50:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002c54:	ea40 000a 	orr.w	r0, r0, sl
 8002c58:	9001      	str	r0, [sp, #4]
 8002c5a:	e791      	b.n	8002b80 <HAL_GPIO_Init+0x104>
 8002c5c:	f04f 0b01 	mov.w	fp, #1
 8002c60:	9801      	ldr	r0, [sp, #4]
 8002c62:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002c66:	ea40 000a 	orr.w	r0, r0, sl
 8002c6a:	9001      	str	r0, [sp, #4]
 8002c6c:	e788      	b.n	8002b80 <HAL_GPIO_Init+0x104>
 8002c6e:	bf00      	nop
 8002c70:	40010400 	.word	0x40010400
 8002c74:	40010800 	.word	0x40010800
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	40011400 	.word	0x40011400
 8002c80:	10320000 	.word	0x10320000
 8002c84:	40021000 	.word	0x40021000
 8002c88:	10220000 	.word	0x10220000
 8002c8c:	10310000 	.word	0x10310000
 8002c90:	10120000 	.word	0x10120000

08002c94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c94:	b902      	cbnz	r2, 8002c98 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c96:	0409      	lsls	r1, r1, #16
 8002c98:	6101      	str	r1, [r0, #16]
  }
}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002c9e:	6951      	ldr	r1, [r2, #20]
 8002ca0:	4201      	tst	r1, r0
 8002ca2:	d100      	bne.n	8002ca6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002ca4:	4770      	bx	lr
{
 8002ca6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ca8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002caa:	f7fd fbd1 	bl	8000450 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cae:	bd08      	pop	{r3, pc}
 8002cb0:	40010400 	.word	0x40010400

08002cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	4605      	mov	r5, r0
 8002cb8:	460e      	mov	r6, r1
 8002cba:	4617      	mov	r7, r2
 8002cbc:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cbe:	682c      	ldr	r4, [r5, #0]
 8002cc0:	d003      	beq.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 8002cc2:	e009      	b.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc4:	6963      	ldr	r3, [r4, #20]
 8002cc6:	055b      	lsls	r3, r3, #21
 8002cc8:	d424      	bmi.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cca:	6963      	ldr	r3, [r4, #20]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	f013 0308 	ands.w	r3, r3, #8
 8002cd2:	d1f7      	bne.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002cd4:	4618      	mov	r0, r3
}
 8002cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd8:	6963      	ldr	r3, [r4, #20]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	f013 0308 	ands.w	r3, r3, #8
 8002ce0:	d0f8      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce2:	6963      	ldr	r3, [r4, #20]
 8002ce4:	0559      	lsls	r1, r3, #21
 8002ce6:	d415      	bmi.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce8:	f7ff fcea 	bl	80026c0 <HAL_GetTick>
 8002cec:	1bc0      	subs	r0, r0, r7
 8002cee:	4286      	cmp	r6, r0
 8002cf0:	d301      	bcc.n	8002cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 8002cf2:	2e00      	cmp	r6, #0
 8002cf4:	d1e2      	bne.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf6:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfa:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d06:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0a:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8002d0e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d10:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d14:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d16:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d1a:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d22:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d24:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d26:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d30:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002d32:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d36:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002d3a:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d3c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	4605      	mov	r5, r0
 8002d44:	460e      	mov	r6, r1
 8002d46:	4617      	mov	r7, r2
 8002d48:	1c72      	adds	r2, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d4a:	682c      	ldr	r4, [r5, #0]
 8002d4c:	d003      	beq.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 8002d4e:	e009      	b.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d50:	6963      	ldr	r3, [r4, #20]
 8002d52:	055b      	lsls	r3, r3, #21
 8002d54:	d424      	bmi.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d56:	6963      	ldr	r3, [r4, #20]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	f013 0302 	ands.w	r3, r3, #2
 8002d5e:	d1f7      	bne.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 8002d60:	4618      	mov	r0, r3
}
 8002d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d64:	6963      	ldr	r3, [r4, #20]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	f013 0302 	ands.w	r3, r3, #2
 8002d6c:	d0f8      	beq.n	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d6e:	6963      	ldr	r3, [r4, #20]
 8002d70:	0559      	lsls	r1, r3, #21
 8002d72:	d415      	bmi.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d74:	f7ff fca4 	bl	80026c0 <HAL_GetTick>
 8002d78:	1bc0      	subs	r0, r0, r7
 8002d7a:	4286      	cmp	r6, r0
 8002d7c:	d301      	bcc.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 8002d7e:	2e00      	cmp	r6, #0
 8002d80:	d1e2      	bne.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d82:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d84:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d86:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d88:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d92:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8002d9a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da0:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da2:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da6:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dae:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db0:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db2:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db4:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dbc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002dbe:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc2:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002dc6:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc8:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002dcc <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	f000 80b5 	beq.w	8002f3c <HAL_I2C_Init+0x170>
{
 8002dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002dd8:	4604      	mov	r4, r0
 8002dda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8094 	beq.w	8002f0c <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002de6:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e02:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e04:	f001 fc72 	bl	80046ec <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e08:	6865      	ldr	r5, [r4, #4]
 8002e0a:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_I2C_Init+0x174>)
 8002e0c:	429d      	cmp	r5, r3
 8002e0e:	d84c      	bhi.n	8002eaa <HAL_I2C_Init+0xde>
 8002e10:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <HAL_I2C_Init+0x178>)
 8002e12:	4298      	cmp	r0, r3
 8002e14:	d978      	bls.n	8002f08 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e16:	1e42      	subs	r2, r0, #1
 8002e18:	006d      	lsls	r5, r5, #1
 8002e1a:	fbb2 f2f5 	udiv	r2, r2, r5
 8002e1e:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 8002e22:	4949      	ldr	r1, [pc, #292]	; (8002f48 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e24:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002e26:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2a:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e2c:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002e32:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 8002e36:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e38:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002e3a:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e3c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002e40:	3001      	adds	r0, #1
 8002e42:	4308      	orrs	r0, r1
 8002e44:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e46:	69d9      	ldr	r1, [r3, #28]
 8002e48:	4232      	tst	r2, r6
 8002e4a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002e4e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e52:	d160      	bne.n	8002f16 <HAL_I2C_Init+0x14a>
 8002e54:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e56:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8002e64:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002e68:	4302      	orrs	r2, r0
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e6e:	6899      	ldr	r1, [r3, #8]
 8002e70:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8002e74:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002e78:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e7c:	4302      	orrs	r2, r0
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e82:	68d9      	ldr	r1, [r3, #12]
 8002e84:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8002e88:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e8c:	4302      	orrs	r2, r0
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002e92:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002e94:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e9e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea2:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8002ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eaa:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <HAL_I2C_Init+0x180>)
 8002eac:	4298      	cmp	r0, r3
 8002eae:	d92b      	bls.n	8002f08 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb0:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002eb4:	4e24      	ldr	r6, [pc, #144]	; (8002f48 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eb6:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002eb8:	fba6 2600 	umull	r2, r6, r6, r0
 8002ebc:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ebe:	fb01 f102 	mul.w	r1, r1, r2
 8002ec2:	4f23      	ldr	r7, [pc, #140]	; (8002f50 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ec4:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ec6:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eca:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ece:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8002ed2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	0989      	lsrs	r1, r1, #6
 8002ed8:	3101      	adds	r1, #1
 8002eda:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ee2:	69d9      	ldr	r1, [r3, #28]
 8002ee4:	68a6      	ldr	r6, [r4, #8]
 8002ee6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002eea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002eee:	b9ae      	cbnz	r6, 8002f1c <HAL_I2C_Init+0x150>
 8002ef0:	3801      	subs	r0, #1
 8002ef2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8002ef6:	fbb0 f2f2 	udiv	r2, r0, r2
 8002efa:	3201      	adds	r2, #1
 8002efc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002f00:	b1d2      	cbz	r2, 8002f38 <HAL_I2C_Init+0x16c>
 8002f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f06:	e7a6      	b.n	8002e56 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8002f08:	2001      	movs	r0, #1
}
 8002f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002f0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002f10:	f7fd fc22 	bl	8000758 <HAL_I2C_MspInit>
 8002f14:	e766      	b.n	8002de4 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f16:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002f1a:	e79c      	b.n	8002e56 <HAL_I2C_Init+0x8a>
 8002f1c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002f20:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8002f24:	1e42      	subs	r2, r0, #1
 8002f26:	fbb2 f2f5 	udiv	r2, r2, r5
 8002f2a:	3201      	adds	r2, #1
 8002f2c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002f30:	b112      	cbz	r2, 8002f38 <HAL_I2C_Init+0x16c>
 8002f32:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f36:	e78e      	b.n	8002e56 <HAL_I2C_Init+0x8a>
 8002f38:	2201      	movs	r2, #1
 8002f3a:	e78c      	b.n	8002e56 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8002f3c:	2001      	movs	r0, #1
}
 8002f3e:	4770      	bx	lr
 8002f40:	000186a0 	.word	0x000186a0
 8002f44:	001e847f 	.word	0x001e847f
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	003d08ff 	.word	0x003d08ff
 8002f50:	10624dd3 	.word	0x10624dd3

08002f54 <HAL_I2C_Master_Transmit>:
{
 8002f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f58:	4604      	mov	r4, r0
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	469a      	mov	sl, r3
 8002f5e:	4688      	mov	r8, r1
 8002f60:	4691      	mov	r9, r2
 8002f62:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff fbac 	bl	80026c0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f68:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d005      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 8002f70:	f04f 0802 	mov.w	r8, #2
}
 8002f74:	4640      	mov	r0, r8
 8002f76:	b002      	add	sp, #8
 8002f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7c:	4607      	mov	r7, r0
 8002f7e:	e005      	b.n	8002f8c <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f80:	f7ff fb9e 	bl	80026c0 <HAL_GetTick>
 8002f84:	1bc0      	subs	r0, r0, r7
 8002f86:	2819      	cmp	r0, #25
 8002f88:	f200 80f3 	bhi.w	8003172 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	699d      	ldr	r5, [r3, #24]
 8002f90:	43ed      	mvns	r5, r5
 8002f92:	f015 0502 	ands.w	r5, r5, #2
 8002f96:	d0f3      	beq.n	8002f80 <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 8002f98:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002f9c:	2a01      	cmp	r2, #1
 8002f9e:	d0e7      	beq.n	8002f70 <HAL_I2C_Master_Transmit+0x1c>
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	07d2      	lsls	r2, r2, #31
 8002faa:	d570      	bpl.n	800308e <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fac:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fae:	2521      	movs	r5, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fb0:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb8:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fba:	4a8b      	ldr	r2, [pc, #556]	; (80031e8 <HAL_I2C_Master_Transmit+0x294>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fbc:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fc0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fc4:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002fc6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fca:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fcc:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002fd0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fd4:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8002fd6:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fd8:	d007      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x96>
 8002fda:	2a01      	cmp	r2, #1
 8002fdc:	d005      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x96>
 8002fde:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002fe2:	d002      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fe4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fe6:	2a12      	cmp	r2, #18
 8002fe8:	d103      	bne.n	8002ff2 <HAL_I2C_Master_Transmit+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	1c75      	adds	r5, r6, #1
 8002ff4:	d13d      	bne.n	8003072 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	07d0      	lsls	r0, r2, #31
 8002ffa:	d5fc      	bpl.n	8002ff6 <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffc:	6922      	ldr	r2, [r4, #16]
 8002ffe:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003002:	d149      	bne.n	8003098 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003004:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8003008:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800300a:	463a      	mov	r2, r7
 800300c:	4631      	mov	r1, r6
 800300e:	4620      	mov	r0, r4
 8003010:	f7ff fe96 	bl	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8003014:	4680      	mov	r8, r0
 8003016:	bb30      	cbnz	r0, 8003066 <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	9001      	str	r0, [sp, #4]
 800301c:	6959      	ldr	r1, [r3, #20]
    while (hi2c->XferSize > 0U)
 800301e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003020:	9101      	str	r1, [sp, #4]
 8003022:	6999      	ldr	r1, [r3, #24]
 8003024:	9101      	str	r1, [sp, #4]
 8003026:	9901      	ldr	r1, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003028:	2a00      	cmp	r2, #0
 800302a:	d076      	beq.n	800311a <HAL_I2C_Master_Transmit+0x1c6>
 800302c:	1c75      	adds	r5, r6, #1
 800302e:	f040 8081 	bne.w	8003134 <HAL_I2C_Master_Transmit+0x1e0>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	0610      	lsls	r0, r2, #24
 8003036:	d442      	bmi.n	80030be <HAL_I2C_Master_Transmit+0x16a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	0551      	lsls	r1, r2, #21
 800303c:	d5f9      	bpl.n	8003032 <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800303e:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003040:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003044:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003048:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800304a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003052:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003054:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003060:	2b04      	cmp	r3, #4
 8003062:	f000 80ab 	beq.w	80031bc <HAL_I2C_Master_Transmit+0x268>
      return HAL_ERROR;
 8003066:	f04f 0801 	mov.w	r8, #1
}
 800306a:	4640      	mov	r0, r8
 800306c:	b002      	add	sp, #8
 800306e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	07d1      	lsls	r1, r2, #31
 8003076:	d4c1      	bmi.n	8002ffc <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7ff fb22 	bl	80026c0 <HAL_GetTick>
 800307c:	1bc0      	subs	r0, r0, r7
 800307e:	4286      	cmp	r6, r0
 8003080:	f0c0 8084 	bcc.w	800318c <HAL_I2C_Master_Transmit+0x238>
 8003084:	2e00      	cmp	r6, #0
 8003086:	f000 8081 	beq.w	800318c <HAL_I2C_Master_Transmit+0x238>
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	e7b1      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x9e>
      __HAL_I2C_ENABLE(hi2c);
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e789      	b.n	8002fac <HAL_I2C_Master_Transmit+0x58>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003098:	ea4f 12e8 	mov.w	r2, r8, asr #7
 800309c:	f002 0206 	and.w	r2, r2, #6
 80030a0:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80030a4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030a6:	4631      	mov	r1, r6
 80030a8:	463a      	mov	r2, r7
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7ff fe02 	bl	8002cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d1d8      	bne.n	8003066 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	fa5f f188 	uxtb.w	r1, r8
 80030ba:	6119      	str	r1, [r3, #16]
 80030bc:	e7a5      	b.n	800300a <HAL_I2C_Master_Transmit+0xb6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030be:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80030c0:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c4:	4605      	mov	r5, r0
 80030c6:	f815 2b01 	ldrb.w	r2, [r5], #1
      hi2c->XferSize--;
 80030ca:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ce:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80030d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030d2:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 80030d4:	3a01      	subs	r2, #1
 80030d6:	b292      	uxth	r2, r2
 80030d8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030da:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 80030dc:	6265      	str	r5, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030de:	0755      	lsls	r5, r2, #29
      hi2c->XferSize--;
 80030e0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030e2:	d50c      	bpl.n	80030fe <HAL_I2C_Master_Transmit+0x1aa>
 80030e4:	b159      	cbz	r1, 80030fe <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e6:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 80030e8:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ec:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80030ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80030f0:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80030f2:	3a01      	subs	r2, #1
 80030f4:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80030f6:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80030fa:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80030fc:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80030fe:	1c75      	adds	r5, r6, #1
 8003100:	d128      	bne.n	8003154 <HAL_I2C_Master_Transmit+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	0750      	lsls	r0, r2, #29
 8003106:	d405      	bmi.n	8003114 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	0551      	lsls	r1, r2, #21
 800310c:	d497      	bmi.n	800303e <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	0750      	lsls	r0, r2, #29
 8003112:	d5f9      	bpl.n	8003108 <HAL_I2C_Master_Transmit+0x1b4>
    while (hi2c->XferSize > 0U)
 8003114:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003116:	2a00      	cmp	r2, #0
 8003118:	d188      	bne.n	800302c <HAL_I2C_Master_Transmit+0xd8>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800311a:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003126:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800312a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800312e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8003132:	e71f      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	0612      	lsls	r2, r2, #24
 8003138:	d4c1      	bmi.n	80030be <HAL_I2C_Master_Transmit+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	0552      	lsls	r2, r2, #21
 800313e:	f53f af7e 	bmi.w	800303e <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7ff fabd 	bl	80026c0 <HAL_GetTick>
 8003146:	1bc0      	subs	r0, r0, r7
 8003148:	4286      	cmp	r6, r0
 800314a:	d33f      	bcc.n	80031cc <HAL_I2C_Master_Transmit+0x278>
 800314c:	2e00      	cmp	r6, #0
 800314e:	d03d      	beq.n	80031cc <HAL_I2C_Master_Transmit+0x278>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	e76b      	b.n	800302c <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	0752      	lsls	r2, r2, #29
 8003158:	d4dc      	bmi.n	8003114 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	0552      	lsls	r2, r2, #21
 800315e:	f53f af6e 	bmi.w	800303e <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7ff faad 	bl	80026c0 <HAL_GetTick>
 8003166:	1bc0      	subs	r0, r0, r7
 8003168:	4286      	cmp	r6, r0
 800316a:	d32f      	bcc.n	80031cc <HAL_I2C_Master_Transmit+0x278>
 800316c:	b376      	cbz	r6, 80031cc <HAL_I2C_Master_Transmit+0x278>
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	e7c5      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003172:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003174:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003176:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800317a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800317e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003180:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003184:	f043 0320 	orr.w	r3, r3, #32
 8003188:	6423      	str	r3, [r4, #64]	; 0x40
 800318a:	e6f1      	b.n	8002f70 <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800318c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800318e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003190:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003192:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003196:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800319a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800319c:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80031a2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031a6:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a8:	680b      	ldr	r3, [r1, #0]
 80031aa:	05de      	lsls	r6, r3, #23
 80031ac:	f57f af5b 	bpl.w	8003066 <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b0:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 80031b4:	f04f 0801 	mov.w	r8, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b8:	6423      	str	r3, [r4, #64]	; 0x40
 80031ba:	e6db      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 80031be:	f04f 0801 	mov.w	r8, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e6d3      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031cc:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ce:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031d0:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031d6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031da:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80031dc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031e0:	f043 0320 	orr.w	r3, r3, #32
 80031e4:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80031e6:	e73a      	b.n	800305e <HAL_I2C_Master_Transmit+0x10a>
 80031e8:	ffff0000 	.word	0xffff0000

080031ec <HAL_I2C_Master_Transmit_DMA>:
{
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80031ee:	2400      	movs	r4, #0
{
 80031f0:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80031f2:	9401      	str	r4, [sp, #4]
{
 80031f4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80031fa:	2820      	cmp	r0, #32
 80031fc:	d126      	bne.n	800324c <HAL_I2C_Master_Transmit_DMA+0x60>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80031fe:	484f      	ldr	r0, [pc, #316]	; (800333c <HAL_I2C_Master_Transmit_DMA+0x150>)
 8003200:	4616      	mov	r6, r2
 8003202:	6800      	ldr	r0, [r0, #0]
 8003204:	4a4e      	ldr	r2, [pc, #312]	; (8003340 <HAL_I2C_Master_Transmit_DMA+0x154>)
 8003206:	08c0      	lsrs	r0, r0, #3
 8003208:	fba2 2000 	umull	r2, r0, r2, r0
 800320c:	0a00      	lsrs	r0, r0, #8
 800320e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003212:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003216:	9001      	str	r0, [sp, #4]
 8003218:	e003      	b.n	8003222 <HAL_I2C_Master_Transmit_DMA+0x36>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800321a:	682c      	ldr	r4, [r5, #0]
 800321c:	69a0      	ldr	r0, [r4, #24]
 800321e:	0780      	lsls	r0, r0, #30
 8003220:	d517      	bpl.n	8003252 <HAL_I2C_Master_Transmit_DMA+0x66>
      count--;
 8003222:	9c01      	ldr	r4, [sp, #4]
 8003224:	3c01      	subs	r4, #1
 8003226:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8003228:	9801      	ldr	r0, [sp, #4]
 800322a:	2800      	cmp	r0, #0
 800322c:	d1f5      	bne.n	800321a <HAL_I2C_Master_Transmit_DMA+0x2e>
        hi2c->State               = HAL_I2C_STATE_READY;
 800322e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003230:	6328      	str	r0, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8003232:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->State               = HAL_I2C_STATE_READY;
 8003236:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323a:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        return HAL_ERROR;
 800323e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003242:	f043 0320 	orr.w	r3, r3, #32
 8003246:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003248:	b003      	add	sp, #12
 800324a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800324c:	2002      	movs	r0, #2
}
 800324e:	b003      	add	sp, #12
 8003250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003252:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 8003256:	2a01      	cmp	r2, #1
 8003258:	d0f8      	beq.n	800324c <HAL_I2C_Master_Transmit_DMA+0x60>
 800325a:	2201      	movs	r2, #1
 800325c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	07d2      	lsls	r2, r2, #31
 8003264:	d403      	bmi.n	800326e <HAL_I2C_Master_Transmit_DMA+0x82>
      __HAL_I2C_ENABLE(hi2c);
 8003266:	6822      	ldr	r2, [r4, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800326e:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003272:	2010      	movs	r0, #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003274:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003276:	6822      	ldr	r2, [r4, #0]
 8003278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327c:	6022      	str	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800327e:	f885 c03d 	strb.w	ip, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003282:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003286:	642f      	str	r7, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003288:	856b      	strh	r3, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800328a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800328c:	4a2d      	ldr	r2, [pc, #180]	; (8003344 <HAL_I2C_Master_Transmit_DMA+0x158>)
    hi2c->XferSize    = hi2c->XferCount;
 800328e:	b29b      	uxth	r3, r3
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003290:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8003292:	626e      	str	r6, [r5, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003294:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8003296:	6469      	str	r1, [r5, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 8003298:	b333      	cbz	r3, 80032e8 <HAL_I2C_Master_Transmit_DMA+0xfc>
      if (hi2c->hdmatx != NULL)
 800329a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800329c:	2800      	cmp	r0, #0
 800329e:	d040      	beq.n	8003322 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80032a0:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8003348 <HAL_I2C_Master_Transmit_DMA+0x15c>
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80032a4:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800334c <HAL_I2C_Master_Transmit_DMA+0x160>
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80032a8:	4631      	mov	r1, r6
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80032aa:	62c7      	str	r7, [r0, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80032ac:	6347      	str	r7, [r0, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80032ae:	f104 0210 	add.w	r2, r4, #16
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80032b2:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80032b6:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80032ba:	f7ff fabb 	bl	8002834 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80032be:	bb18      	cbnz	r0, 8003308 <HAL_I2C_Master_Transmit_DMA+0x11c>
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032c0:	682b      	ldr	r3, [r5, #0]
        __HAL_UNLOCK(hi2c);
 80032c2:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032cc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032dc:	601a      	str	r2, [r3, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e7af      	b.n	8003248 <HAL_I2C_Master_Transmit_DMA+0x5c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e8:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80032ea:	4618      	mov	r0, r3
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f0:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f8:	6022      	str	r2, [r4, #0]
      __HAL_UNLOCK(hi2c);
 80032fa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032fe:	6863      	ldr	r3, [r4, #4]
 8003300:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003304:	6063      	str	r3, [r4, #4]
 8003306:	e79f      	b.n	8003248 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003308:	2320      	movs	r3, #32
 800330a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800330e:	f885 703e 	strb.w	r7, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003312:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003314:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003316:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hi2c);
 800331a:	f885 703c 	strb.w	r7, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800331e:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003320:	e792      	b.n	8003248 <HAL_I2C_Master_Transmit_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003322:	2320      	movs	r3, #32
 8003324:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003328:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800332c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800332e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        return HAL_ERROR;
 8003336:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003338:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800333a:	e785      	b.n	8003248 <HAL_I2C_Master_Transmit_DMA+0x5c>
 800333c:	20000000 	.word	0x20000000
 8003340:	14f8b589 	.word	0x14f8b589
 8003344:	ffff0000 	.word	0xffff0000
 8003348:	08003469 	.word	0x08003469
 800334c:	0800342d 	.word	0x0800342d

08003350 <HAL_I2C_MasterTxCpltCallback>:
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop

08003354 <HAL_I2C_MasterRxCpltCallback>:
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop

08003358 <HAL_I2C_SlaveTxCpltCallback>:
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop

0800335c <HAL_I2C_SlaveRxCpltCallback>:
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop

08003360 <HAL_I2C_AddrCallback>:
}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <HAL_I2C_ListenCpltCallback>:
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <HAL_I2C_MemTxCpltCallback>:
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop

0800336c <I2C_MemoryTransmit_TXE_BTF>:
{
 800336c:	b538      	push	{r3, r4, r5, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800336e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8003372:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003374:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8003376:	b959      	cbnz	r1, 8003390 <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003378:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800337a:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800337c:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800337e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003380:	d032      	beq.n	80033e8 <I2C_MemoryTransmit_TXE_BTF+0x7c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003382:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003386:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8003388:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800338a:	3201      	adds	r2, #1
 800338c:	6502      	str	r2, [r0, #80]	; 0x50
}
 800338e:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 8003390:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003392:	2901      	cmp	r1, #1
 8003394:	d020      	beq.n	80033d8 <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 8003396:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003398:	2902      	cmp	r1, #2
 800339a:	d1f8      	bne.n	800338e <I2C_MemoryTransmit_TXE_BTF+0x22>
 800339c:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800339e:	2a22      	cmp	r2, #34	; 0x22
 80033a0:	d02c      	beq.n	80033fc <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033a2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80033a4:	b289      	uxth	r1, r1
 80033a6:	bb29      	cbnz	r1, 80033f4 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033a8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80033aa:	b289      	uxth	r1, r1
 80033ac:	2900      	cmp	r1, #0
 80033ae:	d1ee      	bne.n	800338e <I2C_MemoryTransmit_TXE_BTF+0x22>
 80033b0:	2a21      	cmp	r2, #33	; 0x21
 80033b2:	d1ec      	bne.n	800338e <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	2520      	movs	r5, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b6:	6802      	ldr	r2, [r0, #0]
 80033b8:	6854      	ldr	r4, [r2, #4]
 80033ba:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 80033be:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	6814      	ldr	r4, [r2, #0]
 80033c2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80033c6:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033c8:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033ca:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033d2:	f7ff ffc9 	bl	8003368 <HAL_I2C_MemTxCpltCallback>
}
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033d8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80033da:	6801      	ldr	r1, [r0, #0]
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 80033e0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80033e2:	3201      	adds	r2, #1
 80033e4:	6502      	str	r2, [r0, #80]	; 0x50
}
 80033e6:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80033ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80033ee:	3202      	adds	r2, #2
 80033f0:	6502      	str	r2, [r0, #80]	; 0x50
}
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033f4:	2a21      	cmp	r2, #33	; 0x21
 80033f6:	d00a      	beq.n	800340e <I2C_MemoryTransmit_TXE_BTF+0xa2>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80033fc:	6801      	ldr	r1, [r0, #0]
 80033fe:	680a      	ldr	r2, [r1, #0]
 8003400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003404:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 8003406:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003408:	3201      	adds	r2, #1
 800340a:	6502      	str	r2, [r0, #80]	; 0x50
}
 800340c:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800340e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003410:	6802      	ldr	r2, [r0, #0]
 8003412:	f811 0b01 	ldrb.w	r0, [r1], #1
 8003416:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8003418:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800341a:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800341c:	3a01      	subs	r2, #1
 800341e:	b292      	uxth	r2, r2
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003422:	bd38      	pop	{r3, r4, r5, pc}

08003424 <HAL_I2C_MemRxCpltCallback>:
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <HAL_I2C_ErrorCallback>:
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop

0800342c <I2C_DMAError>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800342c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800342e:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8003430:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003432:	b10b      	cbz	r3, 8003438 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003434:	2200      	movs	r2, #0
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003438:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800343a:	b10b      	cbz	r3, 8003440 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800343c:	2200      	movs	r2, #0
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->XferCount       = 0U;
 8003440:	2200      	movs	r2, #0
  hi2c->State           = HAL_I2C_STATE_READY;
 8003442:	2420      	movs	r4, #32
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003444:	6801      	ldr	r1, [r0, #0]
 8003446:	680b      	ldr	r3, [r1, #0]
 8003448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800344c:	600b      	str	r3, [r1, #0]
  hi2c->XferCount       = 0U;
 800344e:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003450:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8003454:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003458:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800345a:	f043 0310 	orr.w	r3, r3, #16
 800345e:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 8003460:	f7ff ffe2 	bl	8003428 <HAL_I2C_ErrorCallback>
}
 8003464:	bd10      	pop	{r4, pc}
 8003466:	bf00      	nop

08003468 <I2C_DMAXferCplt>:
{
 8003468:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800346a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800346c:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800346e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003472:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003476:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003478:	6859      	ldr	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 800347a:	6b65      	ldr	r5, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800347c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003480:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003482:	b2c0      	uxtb	r0, r0
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003484:	6059      	str	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8003486:	b10d      	cbz	r5, 800348c <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003488:	2100      	movs	r1, #0
 800348a:	62a9      	str	r1, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 800348c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800348e:	b109      	cbz	r1, 8003494 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003490:	2500      	movs	r5, #0
 8003492:	628d      	str	r5, [r1, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003494:	f002 0121 	and.w	r1, r2, #33	; 0x21
 8003498:	2921      	cmp	r1, #33	; 0x21
 800349a:	d039      	beq.n	8003510 <I2C_DMAXferCplt+0xa8>
 800349c:	f002 0122 	and.w	r1, r2, #34	; 0x22
 80034a0:	2922      	cmp	r1, #34	; 0x22
 80034a2:	d033      	beq.n	800350c <I2C_DMAXferCplt+0xa4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80034a4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80034a8:	b37a      	cbz	r2, 800350a <I2C_DMAXferCplt+0xa2>
    if (hi2c->XferCount == (uint16_t)1)
 80034aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80034ac:	b292      	uxth	r2, r2
 80034ae:	2a01      	cmp	r2, #1
 80034b0:	d03d      	beq.n	800352e <I2C_DMAXferCplt+0xc6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034b2:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034b4:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034bc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034be:	d006      	beq.n	80034ce <I2C_DMAXferCplt+0x66>
 80034c0:	2e08      	cmp	r6, #8
 80034c2:	d004      	beq.n	80034ce <I2C_DMAXferCplt+0x66>
 80034c4:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 80034c8:	d001      	beq.n	80034ce <I2C_DMAXferCplt+0x66>
 80034ca:	2e20      	cmp	r6, #32
 80034cc:	d103      	bne.n	80034d6 <I2C_DMAXferCplt+0x6e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d4:	601a      	str	r2, [r3, #0]
    hi2c->XferCount = 0U;
 80034d6:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034de:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e6:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80034e8:	8561      	strh	r1, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034ec:	bb23      	cbnz	r3, 8003538 <I2C_DMAXferCplt+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	2220      	movs	r2, #32
 80034f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034f4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80034f8:	2a40      	cmp	r2, #64	; 0x40
 80034fa:	d035      	beq.n	8003568 <I2C_DMAXferCplt+0x100>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034fc:	2212      	movs	r2, #18
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003502:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003504:	6322      	str	r2, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003506:	f7ff ff25 	bl	8003354 <HAL_I2C_MasterRxCpltCallback>
}
 800350a:	bd70      	pop	{r4, r5, r6, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800350c:	2820      	cmp	r0, #32
 800350e:	d1c9      	bne.n	80034a4 <I2C_DMAXferCplt+0x3c>
    hi2c->XferCount = 0U;
 8003510:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003512:	6859      	ldr	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003514:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003516:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800351a:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 800351c:	8560      	strh	r0, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800351e:	d00f      	beq.n	8003540 <I2C_DMAXferCplt+0xd8>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003520:	2a2a      	cmp	r2, #42	; 0x2a
 8003522:	d017      	beq.n	8003554 <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800352a:	605a      	str	r2, [r3, #4]
}
 800352c:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e7bc      	b.n	80034b2 <I2C_DMAXferCplt+0x4a>
      HAL_I2C_ErrorCallback(hi2c);
 8003538:	4620      	mov	r0, r4
 800353a:	f7ff ff75 	bl	8003428 <HAL_I2C_ErrorCallback>
}
 800353e:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003540:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003542:	2221      	movs	r2, #33	; 0x21
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003544:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003546:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003548:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800354c:	f7ff ff04 	bl	8003358 <HAL_I2C_SlaveTxCpltCallback>
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	e7e7      	b.n	8003524 <I2C_DMAXferCplt+0xbc>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003554:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003556:	2222      	movs	r2, #34	; 0x22
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003558:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800355a:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800355c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003560:	f7ff fefc 	bl	800335c <HAL_I2C_SlaveRxCpltCallback>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	e7dd      	b.n	8003524 <I2C_DMAXferCplt+0xbc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 800356c:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 800356e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003570:	f7ff ff58 	bl	8003424 <HAL_I2C_MemRxCpltCallback>
}
 8003574:	bd70      	pop	{r4, r5, r6, pc}
 8003576:	bf00      	nop

08003578 <HAL_I2C_AbortCpltCallback>:
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop

0800357c <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 800357c:	2200      	movs	r2, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800357e:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <I2C_DMAAbort+0xec>)
{
 8003580:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4939      	ldr	r1, [pc, #228]	; (800366c <I2C_DMAAbort+0xf0>)
 8003586:	08db      	lsrs	r3, r3, #3
 8003588:	fba1 1303 	umull	r1, r3, r1, r3
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800358c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800358e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003590:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003592:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003594:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003598:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800359c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80035a0:	6802      	ldr	r2, [r0, #0]
 80035a2:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035a4:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035a6:	e005      	b.n	80035b4 <I2C_DMAAbort+0x38>
    count--;
 80035a8:	9b01      	ldr	r3, [sp, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	059b      	lsls	r3, r3, #22
 80035b2:	d506      	bpl.n	80035c2 <I2C_DMAAbort+0x46>
    if (count == 0U)
 80035b4:	9b01      	ldr	r3, [sp, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f6      	bne.n	80035a8 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035bc:	f043 0320 	orr.w	r3, r3, #32
 80035c0:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 80035c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80035c4:	b34c      	cbz	r4, 800361a <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035c6:	2500      	movs	r5, #0
  if (hi2c->hdmarx != NULL)
 80035c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035ca:	62a5      	str	r5, [r4, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 80035cc:	b1f3      	cbz	r3, 800360c <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80035d0:	629d      	str	r5, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d2:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 80035d6:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 80035d8:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035da:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035dc:	2400      	movs	r4, #0
 80035de:	635c      	str	r4, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 80035e0:	6813      	ldr	r3, [r2, #0]
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035ec:	2b60      	cmp	r3, #96	; 0x60
 80035ee:	d02a      	beq.n	8003646 <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035f0:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80035f4:	2928      	cmp	r1, #40	; 0x28
 80035f6:	d019      	beq.n	800362c <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003604:	f7ff ff10 	bl	8003428 <HAL_I2C_ErrorCallback>
}
 8003608:	b002      	add	sp, #8
 800360a:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360c:	6815      	ldr	r5, [r2, #0]
 800360e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003612:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003614:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003616:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8003618:	e7e2      	b.n	80035e0 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 800361a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800361c:	b1f3      	cbz	r3, 800365c <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361e:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003620:	629c      	str	r4, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003626:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003628:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800362a:	e7d7      	b.n	80035dc <I2C_DMAAbort+0x60>
      hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	2400      	movs	r4, #0
      __HAL_I2C_ENABLE(hi2c);
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	6813      	ldr	r3, [r2, #0]
 8003638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800363c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800363e:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003640:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8003644:	e7de      	b.n	8003604 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003646:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003648:	2220      	movs	r2, #32
 800364a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800364e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003652:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003654:	f7ff ff90 	bl	8003578 <HAL_I2C_AbortCpltCallback>
}
 8003658:	b002      	add	sp, #8
 800365a:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365c:	6814      	ldr	r4, [r2, #0]
 800365e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8003662:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8003664:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003666:	e7bb      	b.n	80035e0 <I2C_DMAAbort+0x64>
 8003668:	20000000 	.word	0x20000000
 800366c:	14f8b589 	.word	0x14f8b589

08003670 <I2C_ITError>:
{
 8003670:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003672:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003676:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 800367a:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800367c:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800367e:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003680:	d039      	beq.n	80036f6 <I2C_ITError+0x86>
 8003682:	b2d9      	uxtb	r1, r3
 8003684:	2940      	cmp	r1, #64	; 0x40
 8003686:	d036      	beq.n	80036f6 <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003688:	f002 0128 	and.w	r1, r2, #40	; 0x28
 800368c:	2928      	cmp	r1, #40	; 0x28
 800368e:	d03d      	beq.n	800370c <I2C_ITError+0x9c>
 8003690:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	0508      	lsls	r0, r1, #20
 8003696:	d407      	bmi.n	80036a8 <I2C_ITError+0x38>
 8003698:	2a60      	cmp	r2, #96	; 0x60
 800369a:	d005      	beq.n	80036a8 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 800369c:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800369e:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80036a8:	2200      	movs	r2, #0
 80036aa:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80036b2:	d134      	bne.n	800371e <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036b4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80036b8:	2960      	cmp	r1, #96	; 0x60
 80036ba:	d075      	beq.n	80037a8 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	0650      	lsls	r0, r2, #25
 80036c0:	d505      	bpl.n	80036ce <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036c6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80036c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ca:	3301      	adds	r3, #1
 80036cc:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff feaa 	bl	8003428 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 80036d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036d6:	0719      	lsls	r1, r3, #28
 80036d8:	d004      	beq.n	80036e4 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	6853      	ldr	r3, [r2, #4]
 80036de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036e2:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80036e4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 80036ea:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036ec:	0752      	lsls	r2, r2, #29
 80036ee:	d501      	bpl.n	80036f4 <I2C_ITError+0x84>
 80036f0:	2b28      	cmp	r3, #40	; 0x28
 80036f2:	d02f      	beq.n	8003754 <I2C_ITError+0xe4>
}
 80036f4:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80036f6:	2a22      	cmp	r2, #34	; 0x22
 80036f8:	d1c6      	bne.n	8003688 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003702:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	0512      	lsls	r2, r2, #20
 8003708:	d5c8      	bpl.n	800369c <I2C_ITError+0x2c>
 800370a:	e7cd      	b.n	80036a8 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 800370c:	2200      	movs	r2, #0
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003712:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800371c:	d0ca      	beq.n	80036b4 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800371e:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003720:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003726:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003728:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800372c:	2b01      	cmp	r3, #1
 800372e:	d01e      	beq.n	800376e <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003730:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <I2C_ITError+0x164>)
 8003732:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003734:	f7ff f8c0 	bl	80028b8 <HAL_DMA_Abort_IT>
 8003738:	2800      	cmp	r0, #0
 800373a:	d0cb      	beq.n	80036d4 <I2C_ITError+0x64>
        hi2c->State = HAL_I2C_STATE_READY;
 800373c:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 800373e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003740:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800374a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800374e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003750:	4798      	blx	r3
 8003752:	e7bf      	b.n	80036d4 <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003754:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003756:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003758:	491f      	ldr	r1, [pc, #124]	; (80037d8 <I2C_ITError+0x168>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800375a:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800375c:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800375e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003760:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003764:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003768:	f7ff fdfc 	bl	8003364 <HAL_I2C_ListenCpltCallback>
}
 800376c:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800376e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <I2C_ITError+0x164>)
 8003772:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003774:	f7ff f8a0 	bl	80028b8 <HAL_DMA_Abort_IT>
 8003778:	2800      	cmp	r0, #0
 800377a:	d0ab      	beq.n	80036d4 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	0651      	lsls	r1, r2, #25
 8003782:	d506      	bpl.n	8003792 <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003788:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800378a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	3201      	adds	r2, #1
 8003790:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003792:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003794:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003796:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800379e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80037a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037a4:	4798      	blx	r3
 80037a6:	e795      	b.n	80036d4 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	2120      	movs	r1, #32
 80037aa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ae:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	0652      	lsls	r2, r2, #25
 80037b4:	d506      	bpl.n	80037c4 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ba:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80037bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	3201      	adds	r2, #1
 80037c2:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80037c4:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80037c6:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ce:	f7ff fed3 	bl	8003578 <HAL_I2C_AbortCpltCallback>
 80037d2:	e77f      	b.n	80036d4 <I2C_ITError+0x64>
 80037d4:	0800357d 	.word	0x0800357d
 80037d8:	ffff0000 	.word	0xffff0000

080037dc <HAL_I2C_EV_IRQHandler>:
{
 80037dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037de:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80037e0:	6803      	ldr	r3, [r0, #0]
{
 80037e2:	b08f      	sub	sp, #60	; 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80037e4:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037e8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ec:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037f0:	2910      	cmp	r1, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037f2:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037f4:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037f6:	d022      	beq.n	800383e <HAL_I2C_EV_IRQHandler+0x62>
 80037f8:	2d40      	cmp	r5, #64	; 0x40
 80037fa:	d020      	beq.n	800383e <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80037fe:	2900      	cmp	r1, #0
 8003800:	f000 8095 	beq.w	800392e <HAL_I2C_EV_IRQHandler+0x152>
  uint32_t sr2itflags               = 0U;
 8003804:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003806:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003808:	078f      	lsls	r7, r1, #30
 800380a:	f3c1 0640 	ubfx	r6, r1, #1, #1
 800380e:	d559      	bpl.n	80038c4 <HAL_I2C_EV_IRQHandler+0xe8>
 8003810:	0586      	lsls	r6, r0, #22
 8003812:	d559      	bpl.n	80038c8 <HAL_I2C_EV_IRQHandler+0xec>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003814:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003816:	b102      	cbz	r2, 800381a <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003818:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800381a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800381e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003822:	2a28      	cmp	r2, #40	; 0x28
 8003824:	f000 821d 	beq.w	8003c62 <HAL_I2C_EV_IRQHandler+0x486>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003828:	2200      	movs	r2, #0
 800382a:	920c      	str	r2, [sp, #48]	; 0x30
 800382c:	6959      	ldr	r1, [r3, #20]
 800382e:	910c      	str	r1, [sp, #48]	; 0x30
 8003830:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 8003832:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	930c      	str	r3, [sp, #48]	; 0x30
 8003838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 800383a:	b00f      	add	sp, #60	; 0x3c
 800383c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800383e:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003840:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003842:	f011 0f01 	tst.w	r1, #1
 8003846:	d11a      	bne.n	800387e <HAL_I2C_EV_IRQHandler+0xa2>
 8003848:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 800384c:	d0f5      	beq.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 800384e:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003852:	d0f2      	beq.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003854:	070e      	lsls	r6, r1, #28
 8003856:	d56d      	bpl.n	8003934 <HAL_I2C_EV_IRQHandler+0x158>
 8003858:	0586      	lsls	r6, r0, #22
 800385a:	f140 8083 	bpl.w	8003964 <HAL_I2C_EV_IRQHandler+0x188>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800385e:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003862:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003864:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003866:	2900      	cmp	r1, #0
 8003868:	f000 81e2 	beq.w	8003c30 <HAL_I2C_EV_IRQHandler+0x454>
 800386c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800386e:	2a00      	cmp	r2, #0
 8003870:	f000 81de 	beq.w	8003c30 <HAL_I2C_EV_IRQHandler+0x454>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	e7dd      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800387e:	0586      	lsls	r6, r0, #22
 8003880:	d56e      	bpl.n	8003960 <HAL_I2C_EV_IRQHandler+0x184>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003882:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003884:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8003888:	f000 81e8 	beq.w	8003c5c <HAL_I2C_EV_IRQHandler+0x480>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800388c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800388e:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003892:	bf04      	itt	eq
 8003894:	2208      	moveq	r2, #8
 8003896:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003898:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800389c:	2a40      	cmp	r2, #64	; 0x40
 800389e:	f000 81d6 	beq.w	8003c4e <HAL_I2C_EV_IRQHandler+0x472>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a2:	6922      	ldr	r2, [r4, #16]
 80038a4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80038a8:	f000 81b1 	beq.w	8003c0e <HAL_I2C_EV_IRQHandler+0x432>
      if (hi2c->EventCount == 0U)
 80038ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	f040 81eb 	bne.w	8003c8a <HAL_I2C_EV_IRQHandler+0x4ae>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80038b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80038b6:	11d2      	asrs	r2, r2, #7
 80038b8:	f002 0206 	and.w	r2, r2, #6
 80038bc:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	e7ba      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038c4:	06cf      	lsls	r7, r1, #27
 80038c6:	d47b      	bmi.n	80039c0 <HAL_I2C_EV_IRQHandler+0x1e4>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038c8:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80038cc:	2a21      	cmp	r2, #33	; 0x21
 80038ce:	f000 80f4 	beq.w	8003aba <HAL_I2C_EV_IRQHandler+0x2de>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038d2:	064e      	lsls	r6, r1, #25
 80038d4:	f140 8131 	bpl.w	8003b3a <HAL_I2C_EV_IRQHandler+0x35e>
 80038d8:	0545      	lsls	r5, r0, #21
 80038da:	f140 812e 	bpl.w	8003b3a <HAL_I2C_EV_IRQHandler+0x35e>
 80038de:	0749      	lsls	r1, r1, #29
 80038e0:	f100 812e 	bmi.w	8003b40 <HAL_I2C_EV_IRQHandler+0x364>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80038e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038ea:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80038ec:	b292      	uxth	r2, r2
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	d0a3      	beq.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038f6:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80038f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80038fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29b      	uxth	r3, r3
 8003900:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003902:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003904:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003906:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003908:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800390a:	2b00      	cmp	r3, #0
 800390c:	d195      	bne.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 800390e:	292a      	cmp	r1, #42	; 0x2a
 8003910:	d193      	bne.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003912:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003914:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003916:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003918:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800391a:	6853      	ldr	r3, [r2, #4]
 800391c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003920:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003922:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003924:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003928:	f7ff fd18 	bl	800335c <HAL_I2C_SlaveRxCpltCallback>
 800392c:	e785      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800392e:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003930:	6959      	ldr	r1, [r3, #20]
 8003932:	e769      	b.n	8003808 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003934:	078e      	lsls	r6, r1, #30
 8003936:	d515      	bpl.n	8003964 <HAL_I2C_EV_IRQHandler+0x188>
 8003938:	0586      	lsls	r6, r0, #22
 800393a:	d513      	bpl.n	8003964 <HAL_I2C_EV_IRQHandler+0x188>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800393c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003940:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003942:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003944:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003948:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800394a:	2922      	cmp	r1, #34	; 0x22
 800394c:	f000 81b2 	beq.w	8003cb4 <HAL_I2C_EV_IRQHandler+0x4d8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003950:	2200      	movs	r2, #0
 8003952:	920a      	str	r2, [sp, #40]	; 0x28
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	920a      	str	r2, [sp, #40]	; 0x28
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	930a      	str	r3, [sp, #40]	; 0x28
 800395c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800395e:	e76c      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003960:	070e      	lsls	r6, r1, #28
 8003962:	d5e7      	bpl.n	8003934 <HAL_I2C_EV_IRQHandler+0x158>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003964:	077f      	lsls	r7, r7, #29
 8003966:	f140 80f4 	bpl.w	8003b52 <HAL_I2C_EV_IRQHandler+0x376>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800396a:	685e      	ldr	r6, [r3, #4]
 800396c:	0536      	lsls	r6, r6, #20
 800396e:	f53f af64 	bmi.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003972:	060f      	lsls	r7, r1, #24
 8003974:	f140 8114 	bpl.w	8003ba0 <HAL_I2C_EV_IRQHandler+0x3c4>
 8003978:	0546      	lsls	r6, r0, #21
 800397a:	f140 8111 	bpl.w	8003ba0 <HAL_I2C_EV_IRQHandler+0x3c4>
 800397e:	074f      	lsls	r7, r1, #29
 8003980:	f100 8111 	bmi.w	8003ba6 <HAL_I2C_EV_IRQHandler+0x3ca>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003984:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003988:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800398a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800398e:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003990:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003992:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003994:	2800      	cmp	r0, #0
 8003996:	f040 823a 	bne.w	8003e0e <HAL_I2C_EV_IRQHandler+0x632>
 800399a:	2a21      	cmp	r2, #33	; 0x21
 800399c:	f000 8341 	beq.w	8004022 <HAL_I2C_EV_IRQHandler+0x846>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039a0:	2940      	cmp	r1, #64	; 0x40
 80039a2:	f47f af4a 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039a6:	2a22      	cmp	r2, #34	; 0x22
 80039a8:	f47f af47 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount == 0U)
 80039ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039ae:	b292      	uxth	r2, r2
 80039b0:	2a00      	cmp	r2, #0
 80039b2:	f040 82c1 	bne.w	8003f38 <HAL_I2C_EV_IRQHandler+0x75c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	e73c      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c0:	0585      	lsls	r5, r0, #22
 80039c2:	d581      	bpl.n	80038c8 <HAL_I2C_EV_IRQHandler+0xec>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039c4:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c8:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ca:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039d0:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80039d2:	960d      	str	r6, [sp, #52]	; 0x34
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	920d      	str	r2, [sp, #52]	; 0x34
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e8:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	0511      	lsls	r1, r2, #20
 80039ee:	d521      	bpl.n	8003a34 <HAL_I2C_EV_IRQHandler+0x258>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039f0:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80039f4:	2a22      	cmp	r2, #34	; 0x22
 80039f6:	f000 817a 	beq.w	8003cee <HAL_I2C_EV_IRQHandler+0x512>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80039fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80039fc:	6802      	ldr	r2, [r0, #0]
 80039fe:	6852      	ldr	r2, [r2, #4]
 8003a00:	b292      	uxth	r2, r2
 8003a02:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003a04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a06:	b292      	uxth	r2, r2
 8003a08:	b11a      	cbz	r2, 8003a12 <HAL_I2C_EV_IRQHandler+0x236>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a0c:	f042 0204 	orr.w	r2, r2, #4
 8003a10:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a18:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a1a:	f7ff f82b 	bl	8002a74 <HAL_DMA_GetState>
 8003a1e:	2801      	cmp	r0, #1
 8003a20:	d008      	beq.n	8003a34 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a22:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003a24:	4ba2      	ldr	r3, [pc, #648]	; (8003cb0 <HAL_I2C_EV_IRQHandler+0x4d4>)
 8003a26:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a28:	f7fe ff46 	bl	80028b8 <HAL_DMA_Abort_IT>
 8003a2c:	b110      	cbz	r0, 8003a34 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003a30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a32:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8003a34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	b313      	cbz	r3, 8003a80 <HAL_I2C_EV_IRQHandler+0x2a4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	0752      	lsls	r2, r2, #29
 8003a40:	d50a      	bpl.n	8003a58 <HAL_I2C_EV_IRQHandler+0x27c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a46:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003a48:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003a4c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003a4e:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 8003a50:	b292      	uxth	r2, r2
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a56:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	0657      	lsls	r7, r2, #25
 8003a5c:	d509      	bpl.n	8003a72 <HAL_I2C_EV_IRQHandler+0x296>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a62:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003a64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a66:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003a6c:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8003a6e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a70:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8003a72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	b11b      	cbz	r3, 8003a80 <HAL_I2C_EV_IRQHandler+0x2a4>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a7a:	f043 0304 	orr.w	r3, r3, #4
 8003a7e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 80dd 	bne.w	8003c42 <HAL_I2C_EV_IRQHandler+0x466>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a88:	2d2a      	cmp	r5, #42	; 0x2a
 8003a8a:	f000 8151 	beq.w	8003d30 <HAL_I2C_EV_IRQHandler+0x554>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a8e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003a92:	2b28      	cmp	r3, #40	; 0x28
 8003a94:	f000 8154 	beq.w	8003d40 <HAL_I2C_EV_IRQHandler+0x564>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a9a:	2b22      	cmp	r3, #34	; 0x22
 8003a9c:	d002      	beq.n	8003aa4 <HAL_I2C_EV_IRQHandler+0x2c8>
 8003a9e:	2d22      	cmp	r5, #34	; 0x22
 8003aa0:	f47f aecb 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003aa4:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003aa8:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aaa:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003aac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ab4:	f7ff fc52 	bl	800335c <HAL_I2C_SlaveRxCpltCallback>
 8003ab8:	e6bf      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aba:	060e      	lsls	r6, r1, #24
 8003abc:	d528      	bpl.n	8003b10 <HAL_I2C_EV_IRQHandler+0x334>
 8003abe:	0545      	lsls	r5, r0, #21
 8003ac0:	d526      	bpl.n	8003b10 <HAL_I2C_EV_IRQHandler+0x334>
 8003ac2:	0749      	lsls	r1, r1, #29
 8003ac4:	d427      	bmi.n	8003b16 <HAL_I2C_EV_IRQHandler+0x33a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003aca:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003acc:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003ace:	b289      	uxth	r1, r1
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	f43f aeb2 	beq.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ad8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003adc:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8003ade:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003ae0:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003ae2:	3901      	subs	r1, #1
 8003ae4:	b289      	uxth	r1, r1
 8003ae6:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ae8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003aea:	b289      	uxth	r1, r1
 8003aec:	2900      	cmp	r1, #0
 8003aee:	f47f aea4 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003af2:	2829      	cmp	r0, #41	; 0x29
 8003af4:	f47f aea1 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003af8:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003afa:	6859      	ldr	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003afc:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003afe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003b02:	6059      	str	r1, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b04:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b06:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b0a:	f7ff fc25 	bl	8003358 <HAL_I2C_SlaveTxCpltCallback>
 8003b0e:	e694      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b10:	074a      	lsls	r2, r1, #29
 8003b12:	f57f ae92 	bpl.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003b16:	0587      	lsls	r7, r0, #22
 8003b18:	f57f ae8f 	bpl.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8003b1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	2a00      	cmp	r2, #0
 8003b22:	f43f ae8a 	beq.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b28:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003b2c:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8003b2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003b30:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003b38:	e67f      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b3a:	074a      	lsls	r2, r1, #29
 8003b3c:	f57f ae7d 	bpl.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003b40:	0587      	lsls	r7, r0, #22
 8003b42:	f57f ae7a 	bpl.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
  if (hi2c->XferCount != 0U)
 8003b46:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b48:	b292      	uxth	r2, r2
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	f43f ae75 	beq.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003b50:	e01b      	b.n	8003b8a <HAL_I2C_EV_IRQHandler+0x3ae>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	0512      	lsls	r2, r2, #20
 8003b56:	f53f ae70 	bmi.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b5a:	064f      	lsls	r7, r1, #25
 8003b5c:	d432      	bmi.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x3e8>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b5e:	0749      	lsls	r1, r1, #29
 8003b60:	f57f ae6b 	bpl.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003b64:	0582      	lsls	r2, r0, #22
 8003b66:	f57f ae68 	bpl.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8003b6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b6e:	b292      	uxth	r2, r2
 8003b70:	2a04      	cmp	r2, #4
 8003b72:	f000 8119 	beq.w	8003da8 <HAL_I2C_EV_IRQHandler+0x5cc>
  else if (hi2c->XferCount == 3U)
 8003b76:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	2a03      	cmp	r2, #3
 8003b7c:	f000 8159 	beq.w	8003e32 <HAL_I2C_EV_IRQHandler+0x656>
  else if (hi2c->XferCount == 2U)
 8003b80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b82:	b292      	uxth	r2, r2
 8003b84:	2a02      	cmp	r2, #2
 8003b86:	f000 8185 	beq.w	8003e94 <HAL_I2C_EV_IRQHandler+0x6b8>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b8e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003b92:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003b98:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8003b9a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003b9c:	6262      	str	r2, [r4, #36]	; 0x24
      }
 8003b9e:	e64c      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ba0:	074e      	lsls	r6, r1, #29
 8003ba2:	f57f ae4a 	bpl.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003ba6:	0581      	lsls	r1, r0, #22
 8003ba8:	f57f ae47 	bpl.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003bac:	2a21      	cmp	r2, #33	; 0x21
 8003bae:	f000 8103 	beq.w	8003db8 <HAL_I2C_EV_IRQHandler+0x5dc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003bb2:	2d40      	cmp	r5, #64	; 0x40
 8003bb4:	f47f ae41 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bb8:	4620      	mov	r0, r4
}
 8003bba:	b00f      	add	sp, #60	; 0x3c
 8003bbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bc0:	f7ff bbd4 	b.w	800336c <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bc4:	0546      	lsls	r6, r0, #21
 8003bc6:	d5ca      	bpl.n	8003b5e <HAL_I2C_EV_IRQHandler+0x382>
 8003bc8:	074d      	lsls	r5, r1, #29
 8003bca:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8003bce:	d4c9      	bmi.n	8003b64 <HAL_I2C_EV_IRQHandler+0x388>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bd0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003bd4:	2922      	cmp	r1, #34	; 0x22
 8003bd6:	f47f ae30 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    tmp = hi2c->XferCount;
 8003bda:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003bdc:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8003bde:	2903      	cmp	r1, #3
 8003be0:	f240 81b0 	bls.w	8003f44 <HAL_I2C_EV_IRQHandler+0x768>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003be8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003bea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003bec:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003bf4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003bf6:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8003bfc:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8003bfe:	f47f ae1c 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	6853      	ldr	r3, [r2, #4]
 8003c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c0a:	6053      	str	r3, [r2, #4]
 8003c0c:	e615      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c0e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003c12:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c14:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c16:	bf16      	itet	ne
 8003c18:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c1c:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c20:	b2d2      	uxtbne	r2, r2
 8003c22:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c24:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003c26:	b11a      	cbz	r2, 8003c30 <HAL_I2C_EV_IRQHandler+0x454>
 8003c28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c2a:	2a00      	cmp	r2, #0
 8003c2c:	f47f ae22 	bne.w	8003874 <HAL_I2C_EV_IRQHandler+0x98>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c32:	2a00      	cmp	r2, #0
 8003c34:	f43f ae01 	beq.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003c38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c3a:	2a00      	cmp	r2, #0
 8003c3c:	f47f ae1a 	bne.w	8003874 <HAL_I2C_EV_IRQHandler+0x98>
 8003c40:	e5fb      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    I2C_ITError(hi2c);
 8003c42:	4620      	mov	r0, r4
}
 8003c44:	b00f      	add	sp, #60	; 0x3c
 8003c46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003c4a:	f7ff bd11 	b.w	8003670 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 8003c4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c50:	bb3a      	cbnz	r2, 8003ca2 <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c52:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c58:	611a      	str	r2, [r3, #16]
 8003c5a:	e5ee      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003c60:	e61a      	b.n	8003898 <HAL_I2C_EV_IRQHandler+0xbc>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c62:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c64:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6c:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c6e:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8003c70:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c74:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c76:	bf54      	ite	pl
 8003c78:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c7a:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c7c:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 8003c80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c84:	f7ff fb6c 	bl	8003360 <HAL_I2C_AddrCallback>
 8003c88:	e5d7      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8003c8a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c8c:	2a01      	cmp	r2, #1
 8003c8e:	f47f add4 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c92:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003c94:	11d2      	asrs	r2, r2, #7
 8003c96:	f002 0206 	and.w	r2, r2, #6
 8003c9a:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8003c9e:	611a      	str	r2, [r3, #16]
 8003ca0:	e5cb      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ca2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	611a      	str	r2, [r3, #16]
 8003cac:	e5c5      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003cae:	bf00      	nop
 8003cb0:	0800357d 	.word	0x0800357d
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cb4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003cb6:	b911      	cbnz	r1, 8003cbe <HAL_I2C_EV_IRQHandler+0x4e2>
 8003cb8:	2a40      	cmp	r2, #64	; 0x40
 8003cba:	f000 80a1 	beq.w	8003e00 <HAL_I2C_EV_IRQHandler+0x624>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cbe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003cc0:	b922      	cbnz	r2, 8003ccc <HAL_I2C_EV_IRQHandler+0x4f0>
 8003cc2:	6921      	ldr	r1, [r4, #16]
 8003cc4:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8003cc8:	f000 80a5 	beq.w	8003e16 <HAL_I2C_EV_IRQHandler+0x63a>
      if (hi2c->XferCount == 0U)
 8003ccc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	2a00      	cmp	r2, #0
 8003cd2:	d142      	bne.n	8003d5a <HAL_I2C_EV_IRQHandler+0x57e>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd4:	9202      	str	r2, [sp, #8]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	9202      	str	r2, [sp, #8]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	9202      	str	r2, [sp, #8]
 8003cde:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	6523      	str	r3, [r4, #80]	; 0x50
 8003cec:	e5a5      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003cee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cf0:	6802      	ldr	r2, [r0, #0]
 8003cf2:	6852      	ldr	r2, [r2, #4]
 8003cf4:	b292      	uxth	r2, r2
 8003cf6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003cf8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cfa:	b292      	uxth	r2, r2
 8003cfc:	b11a      	cbz	r2, 8003d06 <HAL_I2C_EV_IRQHandler+0x52a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d00:	f042 0204 	orr.w	r2, r2, #4
 8003d04:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d0e:	f7fe feb1 	bl	8002a74 <HAL_DMA_GetState>
 8003d12:	2801      	cmp	r0, #1
 8003d14:	f43f ae8e 	beq.w	8003a34 <HAL_I2C_EV_IRQHandler+0x258>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d1a:	4ba6      	ldr	r3, [pc, #664]	; (8003fb4 <HAL_I2C_EV_IRQHandler+0x7d8>)
 8003d1c:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d1e:	f7fe fdcb 	bl	80028b8 <HAL_DMA_Abort_IT>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	f43f ae86 	beq.w	8003a34 <HAL_I2C_EV_IRQHandler+0x258>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d2c:	4798      	blx	r3
 8003d2e:	e681      	b.n	8003a34 <HAL_I2C_EV_IRQHandler+0x258>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d30:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d32:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d34:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d36:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d3a:	f7ff fb0f 	bl	800335c <HAL_I2C_SlaveRxCpltCallback>
 8003d3e:	e6a6      	b.n	8003a8e <HAL_I2C_EV_IRQHandler+0x2b2>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d40:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d44:	499c      	ldr	r1, [pc, #624]	; (8003fb8 <HAL_I2C_EV_IRQHandler+0x7dc>)
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d46:	4620      	mov	r0, r4
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d48:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d4a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d54:	f7ff fb06 	bl	8003364 <HAL_I2C_ListenCpltCallback>
 8003d58:	e56f      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->XferCount == 1U)
 8003d5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	2a01      	cmp	r2, #1
 8003d60:	d076      	beq.n	8003e50 <HAL_I2C_EV_IRQHandler+0x674>
      else if (hi2c->XferCount == 2U)
 8003d62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d64:	b292      	uxth	r2, r2
 8003d66:	2a02      	cmp	r2, #2
 8003d68:	f000 812e 	beq.w	8003fc8 <HAL_I2C_EV_IRQHandler+0x7ec>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d72:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	0511      	lsls	r1, r2, #20
 8003d78:	d50e      	bpl.n	8003d98 <HAL_I2C_EV_IRQHandler+0x5bc>
 8003d7a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003d7e:	d007      	beq.n	8003d90 <HAL_I2C_EV_IRQHandler+0x5b4>
 8003d80:	3801      	subs	r0, #1
 8003d82:	281f      	cmp	r0, #31
 8003d84:	d808      	bhi.n	8003d98 <HAL_I2C_EV_IRQHandler+0x5bc>
 8003d86:	4a8d      	ldr	r2, [pc, #564]	; (8003fbc <HAL_I2C_EV_IRQHandler+0x7e0>)
 8003d88:	fa22 f000 	lsr.w	r0, r2, r0
 8003d8c:	07c2      	lsls	r2, r0, #31
 8003d8e:	d503      	bpl.n	8003d98 <HAL_I2C_EV_IRQHandler+0x5bc>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d96:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	9309      	str	r3, [sp, #36]	; 0x24
 8003da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da6:	e79f      	b.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003da8:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003daa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db0:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003db6:	e6eb      	b.n	8003b90 <HAL_I2C_EV_IRQHandler+0x3b4>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003db8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dba:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003dbe:	2a21      	cmp	r2, #33	; 0x21
 8003dc0:	f47f ad3b 	bne.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->XferCount != 0U)
 8003dc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	2a00      	cmp	r2, #0
 8003dca:	f47f aeac 	bne.w	8003b26 <HAL_I2C_EV_IRQHandler+0x34a>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dce:	2908      	cmp	r1, #8
 8003dd0:	f000 809a 	beq.w	8003f08 <HAL_I2C_EV_IRQHandler+0x72c>
 8003dd4:	2920      	cmp	r1, #32
 8003dd6:	f000 8097 	beq.w	8003f08 <HAL_I2C_EV_IRQHandler+0x72c>
 8003dda:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003dde:	f000 8093 	beq.w	8003f08 <HAL_I2C_EV_IRQHandler+0x72c>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003de2:	2611      	movs	r6, #17
        hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	2520      	movs	r5, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003de6:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003dee:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003df0:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dfa:	f7ff faa9 	bl	8003350 <HAL_I2C_MasterTxCpltCallback>
 8003dfe:	e51c      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e00:	9100      	str	r1, [sp, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	9200      	str	r2, [sp, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	9b00      	ldr	r3, [sp, #0]
 8003e0c:	e515      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e0e:	2a21      	cmp	r2, #33	; 0x21
 8003e10:	f43f adcc 	beq.w	80039ac <HAL_I2C_EV_IRQHandler+0x1d0>
 8003e14:	e5c4      	b.n	80039a0 <HAL_I2C_EV_IRQHandler+0x1c4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e16:	9201      	str	r2, [sp, #4]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	9201      	str	r2, [sp, #4]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	9201      	str	r2, [sp, #4]
 8003e20:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e28:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003e2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	6523      	str	r3, [r4, #80]	; 0x50
 8003e30:	e503      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e32:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e34:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e3c:	f43f aea5 	beq.w	8003b8a <HAL_I2C_EV_IRQHandler+0x3ae>
 8003e40:	2902      	cmp	r1, #2
 8003e42:	f43f aea2 	beq.w	8003b8a <HAL_I2C_EV_IRQHandler+0x3ae>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e69c      	b.n	8003b8a <HAL_I2C_EV_IRQHandler+0x3ae>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e50:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003e54:	f000 8104 	beq.w	8004060 <HAL_I2C_EV_IRQHandler+0x884>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e58:	2808      	cmp	r0, #8
 8003e5a:	f000 80d2 	beq.w	8004002 <HAL_I2C_EV_IRQHandler+0x826>
 8003e5e:	2820      	cmp	r0, #32
 8003e60:	f000 80cf 	beq.w	8004002 <HAL_I2C_EV_IRQHandler+0x826>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e64:	2d12      	cmp	r5, #18
 8003e66:	f000 8145 	beq.w	80040f4 <HAL_I2C_EV_IRQHandler+0x918>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e6a:	2810      	cmp	r0, #16
 8003e6c:	f200 8144 	bhi.w	80040f8 <HAL_I2C_EV_IRQHandler+0x91c>
 8003e70:	4a53      	ldr	r2, [pc, #332]	; (8003fc0 <HAL_I2C_EV_IRQHandler+0x7e4>)
 8003e72:	fa22 f000 	lsr.w	r0, r2, r0
 8003e76:	07c7      	lsls	r7, r0, #31
 8003e78:	f140 813e 	bpl.w	80040f8 <HAL_I2C_EV_IRQHandler+0x91c>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e82:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e84:	2200      	movs	r2, #0
 8003e86:	9205      	str	r2, [sp, #20]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	9205      	str	r2, [sp, #20]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	9305      	str	r3, [sp, #20]
 8003e90:	9b05      	ldr	r3, [sp, #20]
 8003e92:	e729      	b.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e94:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e98:	f000 80de 	beq.w	8004058 <HAL_I2C_EV_IRQHandler+0x87c>
 8003e9c:	2910      	cmp	r1, #16
 8003e9e:	f000 80db 	beq.w	8004058 <HAL_I2C_EV_IRQHandler+0x87c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ea2:	2904      	cmp	r1, #4
 8003ea4:	f000 8117 	beq.w	80040d6 <HAL_I2C_EV_IRQHandler+0x8fa>
 8003ea8:	2902      	cmp	r1, #2
 8003eaa:	f000 8114 	beq.w	80040d6 <HAL_I2C_EV_IRQHandler+0x8fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	2020      	movs	r0, #32
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eba:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003ebc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebe:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount--;
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec8:	6912      	ldr	r2, [r2, #16]
    hi2c->pBuffPtr++;
 8003eca:	1c59      	adds	r1, r3, #1
 8003ecc:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ece:	705a      	strb	r2, [r3, #1]
    hi2c->XferCount--;
 8003ed0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ed2:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003eda:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8003edc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->pBuffPtr++;
 8003ee2:	3201      	adds	r2, #1
 8003ee4:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ee6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eec:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	f000 80c9 	beq.w	8004088 <HAL_I2C_EV_IRQHandler+0x8ac>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ef8:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003efe:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f00:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f02:	f7ff fa27 	bl	8003354 <HAL_I2C_MasterRxCpltCallback>
 8003f06:	e498      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f08:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	2020      	movs	r0, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003f12:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	6819      	ldr	r1, [r3, #0]
 8003f16:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003f1a:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f1c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f22:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f26:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f28:	2b40      	cmp	r3, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f2e:	f47f af64 	bne.w	8003dfa <HAL_I2C_EV_IRQHandler+0x61e>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f32:	f7ff fa19 	bl	8003368 <HAL_I2C_MemTxCpltCallback>
 8003f36:	e480      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f38:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003f3c:	2a40      	cmp	r2, #64	; 0x40
 8003f3e:	f47f adf2 	bne.w	8003b26 <HAL_I2C_EV_IRQHandler+0x34a>
 8003f42:	e639      	b.n	8003bb8 <HAL_I2C_EV_IRQHandler+0x3dc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003f46:	2802      	cmp	r0, #2
 8003f48:	f43f ac77 	beq.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003f4c:	2901      	cmp	r1, #1
 8003f4e:	f63f ac74 	bhi.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f52:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003f56:	481b      	ldr	r0, [pc, #108]	; (8003fc4 <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 8003f58:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f5a:	6802      	ldr	r2, [r0, #0]
 8003f5c:	fbb2 f2f1 	udiv	r2, r2, r1
 8003f60:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f64:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f66:	e004      	b.n	8003f72 <HAL_I2C_EV_IRQHandler+0x796>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8003f6e:	f000 80c8 	beq.w	8004102 <HAL_I2C_EV_IRQHandler+0x926>
    count--;
 8003f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f74:	3a01      	subs	r2, #1
 8003f76:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8003f78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f7a:	2900      	cmp	r1, #0
 8003f7c:	d1f4      	bne.n	8003f68 <HAL_I2C_EV_IRQHandler+0x78c>
        hi2c->State = HAL_I2C_STATE_READY;
 8003f7e:	2520      	movs	r5, #32
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f82:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f84:	432a      	orrs	r2, r5
 8003f86:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f88:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_ErrorCallback(hi2c);
 8003f8a:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	7033      	strb	r3, [r6, #0]
        hi2c->XferCount--;
 8003f96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003f98:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003f9e:	3201      	adds	r2, #1
        hi2c->XferCount--;
 8003fa0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003fa2:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003fac:	f7ff fa3c 	bl	8003428 <HAL_I2C_ErrorCallback>
 8003fb0:	e443      	b.n	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8003fb2:	bf00      	nop
 8003fb4:	0800357d 	.word	0x0800357d
 8003fb8:	ffff0000 	.word	0xffff0000
 8003fbc:	80008081 	.word	0x80008081
 8003fc0:	00010014 	.word	0x00010014
 8003fc4:	20000000 	.word	0x20000000
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fc8:	2810      	cmp	r0, #16
 8003fca:	d966      	bls.n	800409a <HAL_I2C_EV_IRQHandler+0x8be>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fcc:	2100      	movs	r1, #0
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd4:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	9107      	str	r1, [sp, #28]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	9207      	str	r2, [sp, #28]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	9207      	str	r2, [sp, #28]
 8003fe0:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe8:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	0516      	lsls	r6, r2, #20
 8003fee:	f57f ae7b 	bpl.w	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
 8003ff2:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003ff6:	d164      	bne.n	80040c2 <HAL_I2C_EV_IRQHandler+0x8e6>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	e672      	b.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400a:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400c:	9106      	str	r1, [sp, #24]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	9206      	str	r2, [sp, #24]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	9206      	str	r2, [sp, #24]
 8004016:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e662      	b.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004022:	2d08      	cmp	r5, #8
 8004024:	f43f af70 	beq.w	8003f08 <HAL_I2C_EV_IRQHandler+0x72c>
 8004028:	2d20      	cmp	r5, #32
 800402a:	f43f af6d 	beq.w	8003f08 <HAL_I2C_EV_IRQHandler+0x72c>
 800402e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004032:	f43f af69 	beq.w	8003f08 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004036:	2611      	movs	r6, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800403a:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800403c:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800403e:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004040:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004044:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004046:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800404c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004050:	f7ff f97e 	bl	8003350 <HAL_I2C_MasterTxCpltCallback>
 8004054:	f7ff bbf1 	b.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e729      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x6d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004066:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800406e:	d036      	beq.n	80040de <HAL_I2C_EV_IRQHandler+0x902>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004070:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004078:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407a:	9103      	str	r1, [sp, #12]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	9203      	str	r2, [sp, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	9303      	str	r3, [sp, #12]
 8004084:	9b03      	ldr	r3, [sp, #12]
 8004086:	e62f      	b.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004088:	2300      	movs	r3, #0
      HAL_I2C_MemRxCpltCallback(hi2c);
 800408a:	4620      	mov	r0, r4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800408c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004090:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004092:	f7ff f9c7 	bl	8003424 <HAL_I2C_MemRxCpltCallback>
 8004096:	f7ff bbd0 	b.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800409a:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <HAL_I2C_EV_IRQHandler+0x96c>)
 800409c:	40c2      	lsrs	r2, r0
 800409e:	43d2      	mvns	r2, r2
 80040a0:	f012 0201 	ands.w	r2, r2, #1
 80040a4:	d192      	bne.n	8003fcc <HAL_I2C_EV_IRQHandler+0x7f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	6819      	ldr	r1, [r3, #0]
 80040a8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80040ac:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	9208      	str	r2, [sp, #32]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	9208      	str	r2, [sp, #32]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	9208      	str	r2, [sp, #32]
 80040b8:	9a08      	ldr	r2, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	0515      	lsls	r5, r2, #20
 80040be:	f57f ae13 	bpl.w	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
 80040c2:	3801      	subs	r0, #1
 80040c4:	281f      	cmp	r0, #31
 80040c6:	f63f ae0f 	bhi.w	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
 80040ca:	4a20      	ldr	r2, [pc, #128]	; (800414c <HAL_I2C_EV_IRQHandler+0x970>)
 80040cc:	40c2      	lsrs	r2, r0
 80040ce:	07d0      	lsls	r0, r2, #31
 80040d0:	f57f ae0a 	bpl.w	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
 80040d4:	e790      	b.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x81c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e6ea      	b.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x6d8>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	9204      	str	r2, [sp, #16]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	9204      	str	r2, [sp, #16]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	9204      	str	r2, [sp, #16]
 80040e8:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e5f9      	b.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x50c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040f4:	2801      	cmp	r0, #1
 80040f6:	d184      	bne.n	8004002 <HAL_I2C_EV_IRQHandler+0x826>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e6c0      	b.n	8003e84 <HAL_I2C_EV_IRQHandler+0x6a8>
        hi2c->State = HAL_I2C_STATE_READY;
 8004102:	2020      	movs	r0, #32
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004104:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004106:	6a65      	ldr	r5, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004108:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800410c:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004114:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	702b      	strb	r3, [r5, #0]
        hi2c->XferCount--;
 800411a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800411c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800411e:	3b01      	subs	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004124:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004128:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 800412c:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800412e:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8004130:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004132:	f47f aee1 	bne.w	8003ef8 <HAL_I2C_EV_IRQHandler+0x71c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 800413a:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 800413c:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800413e:	f7ff f971 	bl	8003424 <HAL_I2C_MemRxCpltCallback>
 8004142:	f7ff bb7a 	b.w	800383a <HAL_I2C_EV_IRQHandler+0x5e>
 8004146:	bf00      	nop
 8004148:	00010014 	.word	0x00010014
 800414c:	80008081 	.word	0x80008081

08004150 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004150:	2800      	cmp	r0, #0
 8004152:	f000 81c3 	beq.w	80044dc <HAL_RCC_OscConfig+0x38c>
{
 8004156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	6803      	ldr	r3, [r0, #0]
 800415c:	4604      	mov	r4, r0
 800415e:	07dd      	lsls	r5, r3, #31
{
 8004160:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004162:	d535      	bpl.n	80041d0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004164:	49a6      	ldr	r1, [pc, #664]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 8004166:	684a      	ldr	r2, [r1, #4]
 8004168:	f002 020c 	and.w	r2, r2, #12
 800416c:	2a04      	cmp	r2, #4
 800416e:	f000 80ef 	beq.w	8004350 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004172:	684a      	ldr	r2, [r1, #4]
 8004174:	f002 020c 	and.w	r2, r2, #12
 8004178:	2a08      	cmp	r2, #8
 800417a:	f000 80e5 	beq.w	8004348 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d010      	beq.n	80041a8 <HAL_RCC_OscConfig+0x58>
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 810d 	beq.w	80043a6 <HAL_RCC_OscConfig+0x256>
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004190:	f000 818f 	beq.w	80044b2 <HAL_RCC_OscConfig+0x362>
 8004194:	4b9a      	ldr	r3, [pc, #616]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e004      	b.n	80041b2 <HAL_RCC_OscConfig+0x62>
 80041a8:	4a95      	ldr	r2, [pc, #596]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe fa85 	bl	80026c0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	4e92      	ldr	r6, [pc, #584]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80041b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ba:	e005      	b.n	80041c8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fe fa80 	bl	80026c0 <HAL_GetTick>
 80041c0:	1b40      	subs	r0, r0, r5
 80041c2:	2864      	cmp	r0, #100	; 0x64
 80041c4:	f200 80eb 	bhi.w	800439e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c8:	6833      	ldr	r3, [r6, #0]
 80041ca:	039a      	lsls	r2, r3, #14
 80041cc:	d5f6      	bpl.n	80041bc <HAL_RCC_OscConfig+0x6c>
 80041ce:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d0:	079f      	lsls	r7, r3, #30
 80041d2:	d528      	bpl.n	8004226 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041d4:	4a8a      	ldr	r2, [pc, #552]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 80041d6:	6851      	ldr	r1, [r2, #4]
 80041d8:	f011 0f0c 	tst.w	r1, #12
 80041dc:	f000 808e 	beq.w	80042fc <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041e0:	6851      	ldr	r1, [r2, #4]
 80041e2:	f001 010c 	and.w	r1, r1, #12
 80041e6:	2908      	cmp	r1, #8
 80041e8:	f000 8084 	beq.w	80042f4 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 8125 	beq.w	800443e <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f4:	2201      	movs	r2, #1
 80041f6:	4b83      	ldr	r3, [pc, #524]	; (8004404 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	4e81      	ldr	r6, [pc, #516]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 80041fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80041fc:	f7fe fa60 	bl	80026c0 <HAL_GetTick>
 8004200:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	e005      	b.n	8004210 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004204:	f7fe fa5c 	bl	80026c0 <HAL_GetTick>
 8004208:	1b40      	subs	r0, r0, r5
 800420a:	2802      	cmp	r0, #2
 800420c:	f200 80c7 	bhi.w	800439e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	6833      	ldr	r3, [r6, #0]
 8004212:	0798      	lsls	r0, r3, #30
 8004214:	d5f6      	bpl.n	8004204 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004216:	6833      	ldr	r3, [r6, #0]
 8004218:	6962      	ldr	r2, [r4, #20]
 800421a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800421e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004222:	6033      	str	r3, [r6, #0]
 8004224:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004226:	071a      	lsls	r2, r3, #28
 8004228:	d41f      	bmi.n	800426a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422a:	075d      	lsls	r5, r3, #29
 800422c:	d541      	bpl.n	80042b2 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422e:	4b74      	ldr	r3, [pc, #464]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	00d0      	lsls	r0, r2, #3
 8004234:	d57d      	bpl.n	8004332 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	4b73      	ldr	r3, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0x2b8>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	05d1      	lsls	r1, r2, #23
 800423e:	f140 809d 	bpl.w	800437c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004242:	68e3      	ldr	r3, [r4, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	f000 810b 	beq.w	8004460 <HAL_RCC_OscConfig+0x310>
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80c5 	beq.w	80043da <HAL_RCC_OscConfig+0x28a>
 8004250:	2b05      	cmp	r3, #5
 8004252:	4b6b      	ldr	r3, [pc, #428]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	f000 8139 	beq.w	80044cc <HAL_RCC_OscConfig+0x37c>
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	621a      	str	r2, [r3, #32]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	f022 0204 	bic.w	r2, r2, #4
 8004266:	621a      	str	r2, [r3, #32]
 8004268:	e0ff      	b.n	800446a <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800426a:	69a3      	ldr	r3, [r4, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d050      	beq.n	8004312 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8004270:	2201      	movs	r2, #1
 8004272:	4b66      	ldr	r3, [pc, #408]	; (800440c <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004274:	4e62      	ldr	r6, [pc, #392]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8004276:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004278:	f7fe fa22 	bl	80026c0 <HAL_GetTick>
 800427c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e005      	b.n	800428c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004280:	f7fe fa1e 	bl	80026c0 <HAL_GetTick>
 8004284:	1b40      	subs	r0, r0, r5
 8004286:	2802      	cmp	r0, #2
 8004288:	f200 8089 	bhi.w	800439e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800428e:	079b      	lsls	r3, r3, #30
 8004290:	d5f6      	bpl.n	8004280 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004292:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <HAL_RCC_OscConfig+0x2c0>)
 8004294:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	0a5b      	lsrs	r3, r3, #9
 800429e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80042a0:	bf00      	nop
  }
  while (Delay --);
 80042a2:	9b01      	ldr	r3, [sp, #4]
 80042a4:	1e5a      	subs	r2, r3, #1
 80042a6:	9201      	str	r2, [sp, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f9      	bne.n	80042a0 <HAL_RCC_OscConfig+0x150>
 80042ac:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ae:	075d      	lsls	r5, r3, #29
 80042b0:	d4bd      	bmi.n	800422e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b2:	69e0      	ldr	r0, [r4, #28]
 80042b4:	b1d0      	cbz	r0, 80042ec <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b6:	4d52      	ldr	r5, [pc, #328]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 80042b8:	686a      	ldr	r2, [r5, #4]
 80042ba:	f002 020c 	and.w	r2, r2, #12
 80042be:	2a08      	cmp	r2, #8
 80042c0:	f000 80e6 	beq.w	8004490 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	4a53      	ldr	r2, [pc, #332]	; (8004418 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042cc:	f000 8108 	beq.w	80044e0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 80042d0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80042d2:	f7fe f9f5 	bl	80026c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80042d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042da:	e004      	b.n	80042e6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fe f9f0 	bl	80026c0 <HAL_GetTick>
 80042e0:	1b40      	subs	r0, r0, r5
 80042e2:	2802      	cmp	r0, #2
 80042e4:	d85b      	bhi.n	800439e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	d4f7      	bmi.n	80042dc <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 80042ec:	2000      	movs	r0, #0
}
 80042ee:	b002      	add	sp, #8
 80042f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042f4:	6852      	ldr	r2, [r2, #4]
 80042f6:	03d6      	lsls	r6, r2, #15
 80042f8:	f53f af78 	bmi.w	80041ec <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fc:	4a40      	ldr	r2, [pc, #256]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	0795      	lsls	r5, r2, #30
 8004302:	d52f      	bpl.n	8004364 <HAL_RCC_OscConfig+0x214>
 8004304:	6922      	ldr	r2, [r4, #16]
 8004306:	2a01      	cmp	r2, #1
 8004308:	d02c      	beq.n	8004364 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800430a:	2001      	movs	r0, #1
}
 800430c:	b002      	add	sp, #8
 800430e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004312:	4a3e      	ldr	r2, [pc, #248]	; (800440c <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004314:	4e3a      	ldr	r6, [pc, #232]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 8004316:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004318:	f7fe f9d2 	bl	80026c0 <HAL_GetTick>
 800431c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431e:	e004      	b.n	800432a <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004320:	f7fe f9ce 	bl	80026c0 <HAL_GetTick>
 8004324:	1b40      	subs	r0, r0, r5
 8004326:	2802      	cmp	r0, #2
 8004328:	d839      	bhi.n	800439e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800432a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800432c:	079f      	lsls	r7, r3, #30
 800432e:	d4f7      	bmi.n	8004320 <HAL_RCC_OscConfig+0x1d0>
 8004330:	e7bc      	b.n	80042ac <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8004334:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800433a:	61da      	str	r2, [r3, #28]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004346:	e777      	b.n	8004238 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004348:	684a      	ldr	r2, [r1, #4]
 800434a:	03d0      	lsls	r0, r2, #15
 800434c:	f57f af17 	bpl.w	800417e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	0391      	lsls	r1, r2, #14
 8004356:	f57f af3b 	bpl.w	80041d0 <HAL_RCC_OscConfig+0x80>
 800435a:	6862      	ldr	r2, [r4, #4]
 800435c:	2a00      	cmp	r2, #0
 800435e:	f47f af37 	bne.w	80041d0 <HAL_RCC_OscConfig+0x80>
 8004362:	e7d2      	b.n	800430a <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004364:	4926      	ldr	r1, [pc, #152]	; (8004400 <HAL_RCC_OscConfig+0x2b0>)
 8004366:	6960      	ldr	r0, [r4, #20]
 8004368:	680a      	ldr	r2, [r1, #0]
 800436a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800436e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004372:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004374:	071a      	lsls	r2, r3, #28
 8004376:	f57f af58 	bpl.w	800422a <HAL_RCC_OscConfig+0xda>
 800437a:	e776      	b.n	800426a <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800437c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004384:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004386:	f7fe f99b 	bl	80026c0 <HAL_GetTick>
 800438a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	05da      	lsls	r2, r3, #23
 8004390:	f53f af57 	bmi.w	8004242 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004394:	f7fe f994 	bl	80026c0 <HAL_GetTick>
 8004398:	1b80      	subs	r0, r0, r6
 800439a:	2864      	cmp	r0, #100	; 0x64
 800439c:	d9f6      	bls.n	800438c <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 800439e:	2003      	movs	r0, #3
}
 80043a0:	b002      	add	sp, #8
 80043a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80043ae:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b0:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043c0:	f7fe f97e 	bl	80026c0 <HAL_GetTick>
 80043c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	e004      	b.n	80043d2 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe f97a 	bl	80026c0 <HAL_GetTick>
 80043cc:	1b40      	subs	r0, r0, r5
 80043ce:	2864      	cmp	r0, #100	; 0x64
 80043d0:	d8e5      	bhi.n	800439e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	6833      	ldr	r3, [r6, #0]
 80043d4:	039b      	lsls	r3, r3, #14
 80043d6:	d4f7      	bmi.n	80043c8 <HAL_RCC_OscConfig+0x278>
 80043d8:	e6f9      	b.n	80041ce <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043de:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80043e2:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e4:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	621a      	str	r2, [r3, #32]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f2:	f022 0204 	bic.w	r2, r2, #4
 80043f6:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80043f8:	f7fe f962 	bl	80026c0 <HAL_GetTick>
 80043fc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fe:	e012      	b.n	8004426 <HAL_RCC_OscConfig+0x2d6>
 8004400:	40021000 	.word	0x40021000
 8004404:	42420000 	.word	0x42420000
 8004408:	40007000 	.word	0x40007000
 800440c:	42420480 	.word	0x42420480
 8004410:	20000000 	.word	0x20000000
 8004414:	10624dd3 	.word	0x10624dd3
 8004418:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441c:	f7fe f950 	bl	80026c0 <HAL_GetTick>
 8004420:	1b80      	subs	r0, r0, r6
 8004422:	4540      	cmp	r0, r8
 8004424:	d8bb      	bhi.n	800439e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	0798      	lsls	r0, r3, #30
 800442a:	d4f7      	bmi.n	800441c <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 800442c:	2d00      	cmp	r5, #0
 800442e:	f43f af40 	beq.w	80042b2 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004432:	4a44      	ldr	r2, [pc, #272]	; (8004544 <HAL_RCC_OscConfig+0x3f4>)
 8004434:	69d3      	ldr	r3, [r2, #28]
 8004436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443a:	61d3      	str	r3, [r2, #28]
 800443c:	e739      	b.n	80042b2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800443e:	4a42      	ldr	r2, [pc, #264]	; (8004548 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004440:	4e40      	ldr	r6, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8004442:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004444:	f7fe f93c 	bl	80026c0 <HAL_GetTick>
 8004448:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	e004      	b.n	8004456 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444c:	f7fe f938 	bl	80026c0 <HAL_GetTick>
 8004450:	1b40      	subs	r0, r0, r5
 8004452:	2802      	cmp	r0, #2
 8004454:	d8a3      	bhi.n	800439e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	6833      	ldr	r3, [r6, #0]
 8004458:	0799      	lsls	r1, r3, #30
 800445a:	d4f7      	bmi.n	800444c <HAL_RCC_OscConfig+0x2fc>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	e6e2      	b.n	8004226 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004460:	4a38      	ldr	r2, [pc, #224]	; (8004544 <HAL_RCC_OscConfig+0x3f4>)
 8004462:	6a13      	ldr	r3, [r2, #32]
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800446a:	f7fe f929 	bl	80026c0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004472:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	4f33      	ldr	r7, [pc, #204]	; (8004544 <HAL_RCC_OscConfig+0x3f4>)
 8004476:	e004      	b.n	8004482 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fe f922 	bl	80026c0 <HAL_GetTick>
 800447c:	1b80      	subs	r0, r0, r6
 800447e:	4540      	cmp	r0, r8
 8004480:	d88d      	bhi.n	800439e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	079b      	lsls	r3, r3, #30
 8004486:	d5f7      	bpl.n	8004478 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8004488:	2d00      	cmp	r5, #0
 800448a:	f43f af12 	beq.w	80042b2 <HAL_RCC_OscConfig+0x162>
 800448e:	e7d0      	b.n	8004432 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004490:	2801      	cmp	r0, #1
 8004492:	f43f af2c 	beq.w	80042ee <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8004496:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004498:	6a22      	ldr	r2, [r4, #32]
 800449a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800449e:	4291      	cmp	r1, r2
 80044a0:	f47f af33 	bne.w	800430a <HAL_RCC_OscConfig+0x1ba>
 80044a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044a6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80044aa:	1a18      	subs	r0, r3, r0
 80044ac:	bf18      	it	ne
 80044ae:	2001      	movne	r0, #1
 80044b0:	e71d      	b.n	80042ee <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044b6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e672      	b.n	80041b2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044cc:	f042 0204 	orr.w	r2, r2, #4
 80044d0:	621a      	str	r2, [r3, #32]
 80044d2:	6a1a      	ldr	r2, [r3, #32]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	621a      	str	r2, [r3, #32]
 80044da:	e7c6      	b.n	800446a <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 80044dc:	2001      	movs	r0, #1
}
 80044de:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 80044e0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80044e2:	f7fe f8ed 	bl	80026c0 <HAL_GetTick>
 80044e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e8:	e005      	b.n	80044f6 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ea:	f7fe f8e9 	bl	80026c0 <HAL_GetTick>
 80044ee:	1b80      	subs	r0, r0, r6
 80044f0:	2802      	cmp	r0, #2
 80044f2:	f63f af54 	bhi.w	800439e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f6:	682b      	ldr	r3, [r5, #0]
 80044f8:	0199      	lsls	r1, r3, #6
 80044fa:	d4f6      	bmi.n	80044ea <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044fc:	6a23      	ldr	r3, [r4, #32]
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d105      	bne.n	8004510 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004504:	686a      	ldr	r2, [r5, #4]
 8004506:	68a1      	ldr	r1, [r4, #8]
 8004508:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800450c:	430a      	orrs	r2, r1
 800450e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004510:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004512:	4d0c      	ldr	r5, [pc, #48]	; (8004544 <HAL_RCC_OscConfig+0x3f4>)
 8004514:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004516:	686a      	ldr	r2, [r5, #4]
 8004518:	430b      	orrs	r3, r1
 800451a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800451e:	490b      	ldr	r1, [pc, #44]	; (800454c <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004520:	4313      	orrs	r3, r2
 8004522:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004524:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8004526:	f7fe f8cb 	bl	80026c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800452a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800452c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800452e:	e005      	b.n	800453c <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004530:	f7fe f8c6 	bl	80026c0 <HAL_GetTick>
 8004534:	1b40      	subs	r0, r0, r5
 8004536:	2802      	cmp	r0, #2
 8004538:	f63f af31 	bhi.w	800439e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	019a      	lsls	r2, r3, #6
 8004540:	d5f6      	bpl.n	8004530 <HAL_RCC_OscConfig+0x3e0>
 8004542:	e6d3      	b.n	80042ec <HAL_RCC_OscConfig+0x19c>
 8004544:	40021000 	.word	0x40021000
 8004548:	42420000 	.word	0x42420000
 800454c:	42420060 	.word	0x42420060

08004550 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004550:	2800      	cmp	r0, #0
 8004552:	f000 80af 	beq.w	80046b4 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004556:	4a5d      	ldr	r2, [pc, #372]	; (80046cc <HAL_RCC_ClockConfig+0x17c>)
{
 8004558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800455c:	6813      	ldr	r3, [r2, #0]
 800455e:	4604      	mov	r4, r0
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	428b      	cmp	r3, r1
 8004566:	460d      	mov	r5, r1
{
 8004568:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800456a:	d20d      	bcs.n	8004588 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456c:	6813      	ldr	r3, [r2, #0]
 800456e:	f023 0307 	bic.w	r3, r3, #7
 8004572:	430b      	orrs	r3, r1
 8004574:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	6813      	ldr	r3, [r2, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	428b      	cmp	r3, r1
 800457e:	d003      	beq.n	8004588 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8004580:	2001      	movs	r0, #1
}
 8004582:	b006      	add	sp, #24
 8004584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	0798      	lsls	r0, r3, #30
 800458c:	d514      	bpl.n	80045b8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458e:	0759      	lsls	r1, r3, #29
 8004590:	d504      	bpl.n	800459c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004592:	494f      	ldr	r1, [pc, #316]	; (80046d0 <HAL_RCC_ClockConfig+0x180>)
 8004594:	684a      	ldr	r2, [r1, #4]
 8004596:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800459a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459c:	071a      	lsls	r2, r3, #28
 800459e:	d504      	bpl.n	80045aa <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a0:	494b      	ldr	r1, [pc, #300]	; (80046d0 <HAL_RCC_ClockConfig+0x180>)
 80045a2:	684a      	ldr	r2, [r1, #4]
 80045a4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80045a8:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045aa:	4949      	ldr	r1, [pc, #292]	; (80046d0 <HAL_RCC_ClockConfig+0x180>)
 80045ac:	68a0      	ldr	r0, [r4, #8]
 80045ae:	684a      	ldr	r2, [r1, #4]
 80045b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80045b4:	4302      	orrs	r2, r0
 80045b6:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b8:	07db      	lsls	r3, r3, #31
 80045ba:	d520      	bpl.n	80045fe <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045bc:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c4:	d078      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c6:	2a02      	cmp	r2, #2
 80045c8:	d071      	beq.n	80046ae <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ca:	0798      	lsls	r0, r3, #30
 80045cc:	d5d8      	bpl.n	8004580 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	4e40      	ldr	r6, [pc, #256]	; (80046d0 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045d4:	6873      	ldr	r3, [r6, #4]
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	4313      	orrs	r3, r2
 80045dc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80045de:	f7fe f86f 	bl	80026c0 <HAL_GetTick>
 80045e2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e4:	e004      	b.n	80045f0 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e6:	f7fe f86b 	bl	80026c0 <HAL_GetTick>
 80045ea:	1bc0      	subs	r0, r0, r7
 80045ec:	4540      	cmp	r0, r8
 80045ee:	d866      	bhi.n	80046be <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f0:	6873      	ldr	r3, [r6, #4]
 80045f2:	6862      	ldr	r2, [r4, #4]
 80045f4:	f003 030c 	and.w	r3, r3, #12
 80045f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80045fc:	d1f3      	bne.n	80045e6 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045fe:	4a33      	ldr	r2, [pc, #204]	; (80046cc <HAL_RCC_ClockConfig+0x17c>)
 8004600:	6813      	ldr	r3, [r2, #0]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	42ab      	cmp	r3, r5
 8004608:	d909      	bls.n	800461e <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	6813      	ldr	r3, [r2, #0]
 800460c:	f023 0307 	bic.w	r3, r3, #7
 8004610:	432b      	orrs	r3, r5
 8004612:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	42ab      	cmp	r3, r5
 800461c:	d1b0      	bne.n	8004580 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	0759      	lsls	r1, r3, #29
 8004622:	d506      	bpl.n	8004632 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004624:	492a      	ldr	r1, [pc, #168]	; (80046d0 <HAL_RCC_ClockConfig+0x180>)
 8004626:	68e0      	ldr	r0, [r4, #12]
 8004628:	684a      	ldr	r2, [r1, #4]
 800462a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800462e:	4302      	orrs	r2, r0
 8004630:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004632:	071a      	lsls	r2, r3, #28
 8004634:	d507      	bpl.n	8004646 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004636:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <HAL_RCC_ClockConfig+0x180>)
 8004638:	6921      	ldr	r1, [r4, #16]
 800463a:	6853      	ldr	r3, [r2, #4]
 800463c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004640:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004644:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004646:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800464a:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <HAL_RCC_ClockConfig+0x184>)
 800464c:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800464e:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004654:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004658:	491d      	ldr	r1, [pc, #116]	; (80046d0 <HAL_RCC_ClockConfig+0x180>)
 800465a:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800465c:	f002 030c 	and.w	r3, r2, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d011      	beq.n	8004688 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8004664:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004666:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_RCC_ClockConfig+0x180>)
 8004668:	481c      	ldr	r0, [pc, #112]	; (80046dc <HAL_RCC_ClockConfig+0x18c>)
 800466a:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800466c:	491c      	ldr	r1, [pc, #112]	; (80046e0 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800466e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004672:	5c80      	ldrb	r0, [r0, r2]
 8004674:	4a1b      	ldr	r2, [pc, #108]	; (80046e4 <HAL_RCC_ClockConfig+0x194>)
 8004676:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8004678:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800467a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800467c:	f7fd ffde 	bl	800263c <HAL_InitTick>
  return HAL_OK;
 8004680:	2000      	movs	r0, #0
}
 8004682:	b006      	add	sp, #24
 8004684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004688:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800468c:	4423      	add	r3, r4
 800468e:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004692:	03d3      	lsls	r3, r2, #15
 8004694:	d515      	bpl.n	80046c2 <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004696:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800469a:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800469e:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046a2:	4422      	add	r2, r4
 80046a4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ac:	e7db      	b.n	8004666 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	019e      	lsls	r6, r3, #6
 80046b0:	d48d      	bmi.n	80045ce <HAL_RCC_ClockConfig+0x7e>
 80046b2:	e765      	b.n	8004580 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80046b4:	2001      	movs	r0, #1
}
 80046b6:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b8:	039f      	lsls	r7, r3, #14
 80046ba:	d488      	bmi.n	80045ce <HAL_RCC_ClockConfig+0x7e>
 80046bc:	e760      	b.n	8004580 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 80046be:	2003      	movs	r0, #3
 80046c0:	e75f      	b.n	8004582 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x198>)
 80046c4:	fb03 f300 	mul.w	r3, r3, r0
 80046c8:	e7cd      	b.n	8004666 <HAL_RCC_ClockConfig+0x116>
 80046ca:	bf00      	nop
 80046cc:	40022000 	.word	0x40022000
 80046d0:	40021000 	.word	0x40021000
 80046d4:	080061e0 	.word	0x080061e0
 80046d8:	007a1200 	.word	0x007a1200
 80046dc:	08004f30 	.word	0x08004f30
 80046e0:	200008a4 	.word	0x200008a4
 80046e4:	20000000 	.word	0x20000000
 80046e8:	003d0900 	.word	0x003d0900

080046ec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ec:	4b04      	ldr	r3, [pc, #16]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x14>)
 80046ee:	4905      	ldr	r1, [pc, #20]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x18>)
 80046f0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80046f2:	4a05      	ldr	r2, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80046f8:	5ccb      	ldrb	r3, [r1, r3]
 80046fa:	6810      	ldr	r0, [r2, #0]
}
 80046fc:	40d8      	lsrs	r0, r3
 80046fe:	4770      	bx	lr
 8004700:	40021000 	.word	0x40021000
 8004704:	08004f40 	.word	0x08004f40
 8004708:	20000000 	.word	0x20000000

0800470c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800470c:	4b04      	ldr	r3, [pc, #16]	; (8004720 <HAL_RCC_GetPCLK2Freq+0x14>)
 800470e:	4905      	ldr	r1, [pc, #20]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004710:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8004712:	4a05      	ldr	r2, [pc, #20]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004714:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004718:	5ccb      	ldrb	r3, [r1, r3]
 800471a:	6810      	ldr	r0, [r2, #0]
}
 800471c:	40d8      	lsrs	r0, r3
 800471e:	4770      	bx	lr
 8004720:	40021000 	.word	0x40021000
 8004724:	08004f40 	.word	0x08004f40
 8004728:	20000000 	.word	0x20000000

0800472c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800472c:	2800      	cmp	r0, #0
 800472e:	d055      	beq.n	80047dc <HAL_SPI_Init+0xb0>
{
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004732:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004734:	4604      	mov	r4, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d041      	beq.n	80047be <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800473a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800473c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004740:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004742:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004746:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004748:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 800474c:	2900      	cmp	r1, #0
 800474e:	d03c      	beq.n	80047ca <HAL_SPI_Init+0x9e>
 8004750:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004752:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004756:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8004758:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800475a:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800475c:	68e1      	ldr	r1, [r4, #12]
 800475e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8004762:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004766:	4303      	orrs	r3, r0
 8004768:	6920      	ldr	r0, [r4, #16]
 800476a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800476e:	4038      	ands	r0, r7
 8004770:	430b      	orrs	r3, r1
 8004772:	6961      	ldr	r1, [r4, #20]
 8004774:	4303      	orrs	r3, r0
 8004776:	69a0      	ldr	r0, [r4, #24]
 8004778:	4031      	ands	r1, r6
 800477a:	430b      	orrs	r3, r1
 800477c:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8004780:	430b      	orrs	r3, r1
 8004782:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004784:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004788:	6a27      	ldr	r7, [r4, #32]
 800478a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800478e:	430b      	orrs	r3, r1
 8004790:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8004794:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004796:	433b      	orrs	r3, r7
 8004798:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 800479a:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800479c:	0c00      	lsrs	r0, r0, #16
 800479e:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 80047a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a6:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047a8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047aa:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ac:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 80047ae:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b6:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047b8:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 80047bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047be:	6842      	ldr	r2, [r0, #4]
 80047c0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80047c4:	d0bc      	beq.n	8004740 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c6:	61c3      	str	r3, [r0, #28]
 80047c8:	e7ba      	b.n	8004740 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 80047ca:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7fc f81c 	bl	800080c <HAL_SPI_MspInit>
 80047d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047da:	e7ba      	b.n	8004752 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 80047dc:	2001      	movs	r0, #1
}
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d05d      	beq.n	80048a0 <HAL_TIM_Base_Init+0xc0>
{
 80047e4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80047ea:	4604      	mov	r4, r0
 80047ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d03c      	beq.n	800486e <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f8:	492a      	ldr	r1, [pc, #168]	; (80048a4 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80047fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047fe:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004800:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004802:	d039      	beq.n	8004878 <HAL_TIM_Base_Init+0x98>
 8004804:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004808:	d028      	beq.n	800485c <HAL_TIM_Base_Init+0x7c>
 800480a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800480e:	428a      	cmp	r2, r1
 8004810:	d024      	beq.n	800485c <HAL_TIM_Base_Init+0x7c>
 8004812:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004816:	428a      	cmp	r2, r1
 8004818:	d020      	beq.n	800485c <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481a:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800481c:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800481e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004824:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004826:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004828:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800482a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800482c:	2301      	movs	r3, #1
 800482e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004830:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004838:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800483c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004840:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004850:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004858:	2000      	movs	r0, #0
}
 800485a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800485c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004862:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004864:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486a:	430b      	orrs	r3, r1
 800486c:	e7d5      	b.n	800481a <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 800486e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004872:	f7fb ffff 	bl	8000874 <HAL_TIM_Base_MspInit>
 8004876:	e7bd      	b.n	80047f4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004878:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800487e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004880:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004886:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	69a1      	ldr	r1, [r4, #24]
 800488a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800488e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004890:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004892:	68e3      	ldr	r3, [r4, #12]
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004896:	6863      	ldr	r3, [r4, #4]
 8004898:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800489a:	6963      	ldr	r3, [r4, #20]
 800489c:	6313      	str	r3, [r2, #48]	; 0x30
 800489e:	e7c5      	b.n	800482c <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 80048a0:	2001      	movs	r0, #1
}
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00

080048a8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80048a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d11f      	bne.n	80048f0 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b2:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b8:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ba:	490f      	ldr	r1, [pc, #60]	; (80048f8 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048bc:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c4:	d009      	beq.n	80048da <HAL_TIM_Base_Start_IT+0x32>
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ca:	d006      	beq.n	80048da <HAL_TIM_Base_Start_IT+0x32>
 80048cc:	4a0b      	ldr	r2, [pc, #44]	; (80048fc <HAL_TIM_Base_Start_IT+0x54>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <HAL_TIM_Base_Start_IT+0x32>
 80048d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d104      	bne.n	80048e4 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	2a06      	cmp	r2, #6
 80048e2:	d007      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 80048e4:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80048e6:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80048e8:	f042 0201 	orr.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	4770      	bx	lr
    return HAL_ERROR;
 80048f0:	2001      	movs	r0, #1
 80048f2:	4770      	bx	lr
  return HAL_OK;
 80048f4:	2000      	movs	r0, #0
}
 80048f6:	4770      	bx	lr
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40000400 	.word	0x40000400

08004900 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004900:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d074      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0xf2>
{
 8004908:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800490a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800490c:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 800490e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8004910:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004918:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800491a:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8004920:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004924:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004926:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004928:	d065      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0xf6>
 800492a:	d831      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x90>
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d048      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0xc2>
 8004930:	d921      	bls.n	8004976 <HAL_TIM_ConfigClockSource+0x76>
 8004932:	2b50      	cmp	r3, #80	; 0x50
 8004934:	d116      	bne.n	8004964 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004936:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004938:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493c:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004940:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004944:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004946:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800494a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800494e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004952:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004954:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004956:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004958:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800495e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8004964:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004966:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8004968:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800496c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8004970:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004972:	4618      	mov	r0, r3
}
 8004974:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004976:	2b20      	cmp	r3, #32
 8004978:	d002      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0x80>
 800497a:	d91e      	bls.n	80049ba <HAL_TIM_ConfigClockSource+0xba>
 800497c:	2b30      	cmp	r3, #48	; 0x30
 800497e:	d1f1      	bne.n	8004964 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8004980:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004982:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004986:	430b      	orrs	r3, r1
 8004988:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800498c:	6093      	str	r3, [r2, #8]
}
 800498e:	e7e9      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004990:	2b70      	cmp	r3, #112	; 0x70
 8004992:	d049      	beq.n	8004a28 <HAL_TIM_ConfigClockSource+0x128>
 8004994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004998:	d1e4      	bne.n	8004964 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800499a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800499e:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80049a0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a2:	432b      	orrs	r3, r5
 80049a4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ac:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ae:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049b0:	6893      	ldr	r3, [r2, #8]
 80049b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b6:	6093      	str	r3, [r2, #8]
      break;
 80049b8:	e7d4      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80049ba:	f033 0110 	bics.w	r1, r3, #16
 80049be:	d1d1      	bne.n	8004964 <HAL_TIM_ConfigClockSource+0x64>
 80049c0:	e7de      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 80049c2:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c4:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c6:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c8:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049cc:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d0:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049da:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80049de:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80049e0:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80049e2:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80049e4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ea:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80049ee:	6093      	str	r3, [r2, #8]
}
 80049f0:	e7b8      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 80049f2:	2002      	movs	r0, #2
}
 80049f4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f6:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fa:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fe:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a00:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a02:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8004a04:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a06:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a0e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a12:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004a16:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004a18:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004a1a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a20:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004a24:	6093      	str	r3, [r2, #8]
}
 8004a26:	e79d      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a28:	68cc      	ldr	r4, [r1, #12]
 8004a2a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004a2e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a30:	432b      	orrs	r3, r5
 8004a32:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a36:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a3a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004a3c:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004a3e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004a44:	6093      	str	r3, [r2, #8]
      break;
 8004a46:	e78d      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x64>

08004a48 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d026      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a52:	6803      	ldr	r3, [r0, #0]
{
 8004a54:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004a56:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004a5a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a5c:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5e:	4d11      	ldr	r5, [pc, #68]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a64:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a66:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004a68:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004a6a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6c:	d009      	beq.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a72:	d006      	beq.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004a74:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d104      	bne.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a82:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a84:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a88:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a8a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004a8c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a8e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8004a90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8004a98:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004a9a:	4618      	mov	r0, r3
}
 8004a9c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a9e:	2002      	movs	r0, #2
}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40000400 	.word	0x40000400

08004aac <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d061      	beq.n	8004b74 <HAL_UART_Init+0xc8>
{
 8004ab0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d051      	beq.n	8004b64 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac0:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ac2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004ac4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004ac8:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aca:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8004acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad2:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ad4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004ada:	4301      	orrs	r1, r0
 8004adc:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004ade:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ae0:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004ae4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ae8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004aea:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004aee:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004af0:	430a      	orrs	r2, r1
 8004af2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8004af8:	491f      	ldr	r1, [pc, #124]	; (8004b78 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004afa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004afe:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8004b00:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b02:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004b04:	d033      	beq.n	8004b6e <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b06:	f7ff fdf1 	bl	80046ec <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b0a:	6863      	ldr	r3, [r4, #4]
 8004b0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1a:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8004b1e:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b20:	4816      	ldr	r0, [pc, #88]	; (8004b7c <HAL_UART_Init+0xd0>)
 8004b22:	fba0 c103 	umull	ip, r1, r0, r3
 8004b26:	0949      	lsrs	r1, r1, #5
 8004b28:	fb02 3311 	mls	r3, r2, r1, r3
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	3332      	adds	r3, #50	; 0x32
 8004b30:	fba0 2303 	umull	r2, r3, r0, r3
 8004b34:	0109      	lsls	r1, r1, #4
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8004b3c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3e:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8004b40:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b42:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004b46:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b48:	6953      	ldr	r3, [r2, #20]
 8004b4a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004b4e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004b50:	68d3      	ldr	r3, [r2, #12]
 8004b52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b56:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b5a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004b64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004b68:	f7fb fea2 	bl	80008b0 <HAL_UART_MspInit>
 8004b6c:	e7a8      	b.n	8004ac0 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b6e:	f7ff fdcd 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8004b72:	e7ca      	b.n	8004b0a <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 8004b74:	2001      	movs	r0, #1
}
 8004b76:	4770      	bx	lr
 8004b78:	40013800 	.word	0x40013800
 8004b7c:	51eb851f 	.word	0x51eb851f

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	2600      	movs	r6, #0
 8004b84:	4d0c      	ldr	r5, [pc, #48]	; (8004bb8 <__libc_init_array+0x38>)
 8004b86:	4c0d      	ldr	r4, [pc, #52]	; (8004bbc <__libc_init_array+0x3c>)
 8004b88:	1b64      	subs	r4, r4, r5
 8004b8a:	10a4      	asrs	r4, r4, #2
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	f000 f83a 	bl	8004c08 <_init>
 8004b94:	2600      	movs	r6, #0
 8004b96:	4d0a      	ldr	r5, [pc, #40]	; (8004bc0 <__libc_init_array+0x40>)
 8004b98:	4c0a      	ldr	r4, [pc, #40]	; (8004bc4 <__libc_init_array+0x44>)
 8004b9a:	1b64      	subs	r4, r4, r5
 8004b9c:	10a4      	asrs	r4, r4, #2
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba8:	4798      	blx	r3
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb2:	4798      	blx	r3
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	080061f4 	.word	0x080061f4
 8004bbc:	080061f4 	.word	0x080061f4
 8004bc0:	080061f4 	.word	0x080061f4
 8004bc4:	080061f8 	.word	0x080061f8

08004bc8 <stpcpy>:
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f803 2b01 	strb.w	r2, [r3], #1
 8004bd4:	2a00      	cmp	r2, #0
 8004bd6:	d1f8      	bne.n	8004bca <stpcpy+0x2>
 8004bd8:	4770      	bx	lr

08004bda <strcat>:
 8004bda:	4602      	mov	r2, r0
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	7814      	ldrb	r4, [r2, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	3201      	adds	r2, #1
 8004be4:	2c00      	cmp	r4, #0
 8004be6:	d1fa      	bne.n	8004bde <strcat+0x4>
 8004be8:	3b01      	subs	r3, #1
 8004bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	d1f9      	bne.n	8004bea <strcat+0x10>
 8004bf6:	bd10      	pop	{r4, pc}

08004bf8 <strcpy>:
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bfe:	f803 2b01 	strb.w	r2, [r3], #1
 8004c02:	2a00      	cmp	r2, #0
 8004c04:	d1f9      	bne.n	8004bfa <strcpy+0x2>
 8004c06:	4770      	bx	lr

08004c08 <_init>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr

08004c14 <_fini>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	bf00      	nop
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr
